












//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;
using System.Collections.Generic;


namespace RethinkDb.Driver.Ast {

    public class Changes : ReqlExpr {

    
    
    
/// <summary>
/// <para>Return a changefeed, an infinite stream of objects representing changes to a query. A changefeed may return changes to a table or an individual document (a "point" changefeed), and document transformation commands such as <code>filter</code> or <code>map</code> may be used before the <code>changes</code> command to affect the output.</para>
/// </summary>
/// <example><para>Example: Subscribe to the changes on a table.</para>
/// <code>r.table('games').changes().run(conn, function(err, cursor) {
///   cursor.each(console.log)
/// })
/// </code></example>
        public Changes (object arg) : this(new Arguments(arg), null) {
        }
/// <summary>
/// <para>Return a changefeed, an infinite stream of objects representing changes to a query. A changefeed may return changes to a table or an individual document (a "point" changefeed), and document transformation commands such as <code>filter</code> or <code>map</code> may be used before the <code>changes</code> command to affect the output.</para>
/// </summary>
/// <example><para>Example: Subscribe to the changes on a table.</para>
/// <code>r.table('games').changes().run(conn, function(err, cursor) {
///   cursor.each(console.log)
/// })
/// </code></example>
        public Changes (Arguments args) : this(args, null) {
        }
/// <summary>
/// <para>Return a changefeed, an infinite stream of objects representing changes to a query. A changefeed may return changes to a table or an individual document (a "point" changefeed), and document transformation commands such as <code>filter</code> or <code>map</code> may be used before the <code>changes</code> command to affect the output.</para>
/// </summary>
/// <example><para>Example: Subscribe to the changes on a table.</para>
/// <code>r.table('games').changes().run(conn, function(err, cursor) {
///   cursor.each(console.log)
/// })
/// </code></example>
        public Changes (Arguments args, OptArgs optargs)
             : this(TermType.CHANGES, args, optargs) {
        }

    protected Changes (TermType termType, Arguments args, OptArgs optargs) : base(termType, args, optargs)
    {
    }


    



    
///<summary>
/// "squash": "T_BOOL",
///  "include_states": "T_BOOL"
///</summary>
        public Changes optArg(string optname, object value) {
             var newOptargs = OptArgs.fromMap(this.OptArgs)
                                     .with(optname, value);
             return new Changes (this.Args, newOptargs);
        }


    

    


    
    }
}
