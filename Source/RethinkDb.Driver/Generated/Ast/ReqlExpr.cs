








//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;
using System.Collections.Generic;


namespace RethinkDb.Driver.Ast {
    public class ReqlExpr : ReqlAst {

    
    
    

    protected ReqlExpr (TermType termType, Arguments args, OptArgs optargs) : base(termType, args, optargs)
    {
    }


    



    

    

                    public Eq eq ( Object exprA, params object[] exprs )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAddAll(exprs);
                        return new Eq (arguments);
                    }
                    public Ne ne ( Object exprA, params object[] exprs )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAddAll(exprs);
                        return new Ne (arguments);
                    }
                    public Lt lt ( Object exprA, params object[] exprs )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAddAll(exprs);
                        return new Lt (arguments);
                    }
                    public Le le ( Object exprA, params object[] exprs )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAddAll(exprs);
                        return new Le (arguments);
                    }
                    public Gt gt ( Object exprA, params object[] exprs )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAddAll(exprs);
                        return new Gt (arguments);
                    }
                    public Ge ge ( Object exprA, params object[] exprs )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAddAll(exprs);
                        return new Ge (arguments);
                    }
                    public Not not (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Not (arguments);
                    }
                    public Add add ( params object[] exprs )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAddAll(exprs);
                        return new Add (arguments);
                    }
                    public Sub sub ( params object[] exprs )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAddAll(exprs);
                        return new Sub (arguments);
                    }
                    public Mul mul ( params object[] exprs )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAddAll(exprs);
                        return new Mul (arguments);
                    }
                    public Div div ( params object[] exprs )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAddAll(exprs);
                        return new Div (arguments);
                    }
                    public Mod mod ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new Mod (arguments);
                    }
                    public Floor floor (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Floor (arguments);
                    }
                    public Ceil ceil (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Ceil (arguments);
                    }
                    public Round round (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Round (arguments);
                    }
                    public Append append ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new Append (arguments);
                    }
                    public Prepend prepend ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new Prepend (arguments);
                    }
                    public Difference difference ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new Difference (arguments);
                    }
                    public SetInsert setInsert ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new SetInsert (arguments);
                    }
                    public SetIntersection setIntersection ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new SetIntersection (arguments);
                    }
                    public SetUnion setUnion ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new SetUnion (arguments);
                    }
                    public SetDifference setDifference ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new SetDifference (arguments);
                    }
                    public Slice slice ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new Slice (arguments);
                    }
                    public Slice slice ( Object exprA, Object exprB )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(exprB);
                        return new Slice (arguments);
                    }
                    public Skip skip ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new Skip (arguments);
                    }
                    public Limit limit ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new Limit (arguments);
                    }
                    public OffsetsOf offsetsOf ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new OffsetsOf (arguments);
                    }
                    public OffsetsOf offsetsOf ( ReqlFunction1 func1 )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(func1);
                        return new OffsetsOf (arguments);
                    }
                    public Contains contains (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Contains (arguments);
                    }
                    public Contains contains ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new Contains (arguments);
                    }
                    public Contains contains ( ReqlFunction1 func1 )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(func1);
                        return new Contains (arguments);
                    }
                    public Contains contains ( Object exprA, Object exprB )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(exprB);
                        return new Contains (arguments);
                    }
                    public Contains contains ( Object exprA, ReqlFunction1 func1 )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(func1);
                        return new Contains (arguments);
                    }
                    public Contains contains ( ReqlFunction1 func1, Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(func1);
                        arguments.CoerceAndAdd(exprA);
                        return new Contains (arguments);
                    }
                    public Contains contains ( ReqlFunction1 func1, ReqlFunction1 func1A )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(func1);
                        arguments.CoerceAndAdd(func1A);
                        return new Contains (arguments);
                    }
                    public GetField getField ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new GetField (arguments);
                    }
                    public Keys keys (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Keys (arguments);
                    }
                    public HasFields hasFields ( params object[] exprs )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAddAll(exprs);
                        return new HasFields (arguments);
                    }
                    public WithFields withFields ( params object[] exprs )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAddAll(exprs);
                        return new WithFields (arguments);
                    }
                    public Pluck pluck ( params object[] exprs )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAddAll(exprs);
                        return new Pluck (arguments);
                    }
                    public Without without ( params object[] exprs )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAddAll(exprs);
                        return new Without (arguments);
                    }
                    public Merge merge (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Merge (arguments);
                    }
                    public Merge merge ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new Merge (arguments);
                    }
                    public Merge merge ( ReqlFunction1 func1 )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(func1);
                        return new Merge (arguments);
                    }
                    public Merge merge ( Object exprA, Object exprB )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(exprB);
                        return new Merge (arguments);
                    }
                    public Merge merge ( Object exprA, ReqlFunction1 func1 )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(func1);
                        return new Merge (arguments);
                    }
                    public Merge merge ( ReqlFunction1 func1, Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(func1);
                        arguments.CoerceAndAdd(exprA);
                        return new Merge (arguments);
                    }
                    public Merge merge ( ReqlFunction1 func1, ReqlFunction1 func1A )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(func1);
                        arguments.CoerceAndAdd(func1A);
                        return new Merge (arguments);
                    }
                    public Reduce reduce ( ReqlFunction2 func2 )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(func2);
                        return new Reduce (arguments);
                    }
                    public Map map ( ReqlFunction1 func1 )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(func1);
                        return new Map (arguments);
                    }
                    public Map map ( Object exprA, ReqlFunction2 func2 )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(func2);
                        return new Map (arguments);
                    }
                    public Map map ( Object exprA, Object exprB, ReqlFunction3 func3 )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(exprB);
                        arguments.CoerceAndAdd(func3);
                        return new Map (arguments);
                    }
                    public Map map ( Object exprA, Object exprB, Object exprC, ReqlFunction4 func4 )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(exprB);
                        arguments.CoerceAndAdd(exprC);
                        arguments.CoerceAndAdd(func4);
                        return new Map (arguments);
                    }
                    public Filter filter ( ReqlFunction1 func1 )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(func1);
                        return new Filter (arguments);
                    }
                    public ConcatMap concatMap ( ReqlFunction1 func1 )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(func1);
                        return new ConcatMap (arguments);
                    }
                    public OrderBy orderBy ( params object[] exprs )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAddAll(exprs);
                        return new OrderBy (arguments);
                    }
                    public Distinct distinct (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Distinct (arguments);
                    }
                    public Count count (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Count (arguments);
                    }
                    public Count count ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new Count (arguments);
                    }
                    public Count count ( ReqlFunction1 func1 )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(func1);
                        return new Count (arguments);
                    }
                    public IsEmpty isEmpty (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new IsEmpty (arguments);
                    }
                    public Union union (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Union (arguments);
                    }
                    public Nth nth ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new Nth (arguments);
                    }
                    public Bracket bracket ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new Bracket (arguments);
                    }
                    public InnerJoin innerJoin ( Object exprA, ReqlFunction2 func2 )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(func2);
                        return new InnerJoin (arguments);
                    }
                    public OuterJoin outerJoin ( Object exprA, ReqlFunction2 func2 )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(func2);
                        return new OuterJoin (arguments);
                    }
                    public EqJoin eqJoin ( Object exprA, Object exprB )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(exprB);
                        return new EqJoin (arguments);
                    }
                    public EqJoin eqJoin ( ReqlFunction1 func1, Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(func1);
                        arguments.CoerceAndAdd(exprA);
                        return new EqJoin (arguments);
                    }
                    public Zip zip (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Zip (arguments);
                    }
                    public InsertAt insertAt ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new InsertAt (arguments);
                    }
                    public DeleteAt deleteAt ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new DeleteAt (arguments);
                    }
                    public DeleteAt deleteAt ( Object exprA, Object exprB )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(exprB);
                        return new DeleteAt (arguments);
                    }
                    public ChangeAt changeAt ( Object exprA, Object exprB )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(exprB);
                        return new ChangeAt (arguments);
                    }
                    public SpliceAt spliceAt ( Object exprA, Object exprB )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(exprB);
                        return new SpliceAt (arguments);
                    }
                    public CoerceTo coerceTo ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new CoerceTo (arguments);
                    }
                    public TypeOf typeOf_ (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new TypeOf (arguments);
                    }
                    public Update update ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new Update (arguments);
                    }
                    public Update update ( ReqlFunction1 func1 )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(func1);
                        return new Update (arguments);
                    }
                    public Delete delete (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Delete (arguments);
                    }
                    public Replace replace ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new Replace (arguments);
                    }
                    public Replace replace ( ReqlFunction1 func1 )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(func1);
                        return new Replace (arguments);
                    }
                    public Funcall do_ ( params object[] exprs )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAddAll(exprs);
                        return new Funcall (arguments);
                    }
                    public Funcall do_ ( ReqlFunction1 func1 )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(func1);
                        return new Funcall (arguments);
                    }
                    public Funcall do_ ( Object exprA, ReqlFunction2 func2 )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(func2);
                        return new Funcall (arguments);
                    }
                    public Funcall do_ ( Object exprA, Object exprB, ReqlFunction3 func3 )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(exprB);
                        arguments.CoerceAndAdd(func3);
                        return new Funcall (arguments);
                    }
                    public Funcall do_ ( Object exprA, Object exprB, Object exprC, ReqlFunction4 func4 )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(exprB);
                        arguments.CoerceAndAdd(exprC);
                        arguments.CoerceAndAdd(func4);
                        return new Funcall (arguments);
                    }
                    public Or or ( Object exprA, params object[] exprs )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAddAll(exprs);
                        return new Or (arguments);
                    }
                    public And and ( params object[] exprs )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAddAll(exprs);
                        return new And (arguments);
                    }
                    public ForEach forEach ( ReqlFunction1 func1 )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(func1);
                        return new ForEach (arguments);
                    }
                    public Info info (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Info (arguments);
                    }
                    public Match match ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new Match (arguments);
                    }
                    public Upcase upcase (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Upcase (arguments);
                    }
                    public Downcase downcase (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Downcase (arguments);
                    }
                    public Sample sample ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new Sample (arguments);
                    }
                    public Default default_ ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new Default (arguments);
                    }
                    public ToJsonString toJson (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new ToJsonString (arguments);
                    }
                    public ToIso8601 toIso8601 (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new ToIso8601 (arguments);
                    }
                    public ToEpochTime toEpochTime (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new ToEpochTime (arguments);
                    }
                    public InTimezone inTimezone ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new InTimezone (arguments);
                    }
                    public During during ( Object exprA, Object exprB )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(exprB);
                        return new During (arguments);
                    }
                    public Date date (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Date (arguments);
                    }
                    public TimeOfDay timeOfDay (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new TimeOfDay (arguments);
                    }
                    public Timezone timezone (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Timezone (arguments);
                    }
                    public Year year (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Year (arguments);
                    }
                    public Month month (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Month (arguments);
                    }
                    public Day day (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Day (arguments);
                    }
                    public DayOfWeek dayOfWeek (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new DayOfWeek (arguments);
                    }
                    public DayOfYear dayOfYear (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new DayOfYear (arguments);
                    }
                    public Hours hours (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Hours (arguments);
                    }
                    public Minutes minutes (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Minutes (arguments);
                    }
                    public Seconds seconds (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Seconds (arguments);
                    }
                    public Group group ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new Group (arguments);
                    }
                    public Group group ( ReqlFunction1 func1 )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(func1);
                        return new Group (arguments);
                    }
                    public Sum sum (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Sum (arguments);
                    }
                    public Sum sum ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new Sum (arguments);
                    }
                    public Sum sum ( ReqlFunction1 func1 )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(func1);
                        return new Sum (arguments);
                    }
                    public Avg avg (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Avg (arguments);
                    }
                    public Avg avg ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new Avg (arguments);
                    }
                    public Avg avg ( ReqlFunction1 func1 )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(func1);
                        return new Avg (arguments);
                    }
                    public Min min (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Min (arguments);
                    }
                    public Min min ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new Min (arguments);
                    }
                    public Min min ( ReqlFunction1 func1 )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(func1);
                        return new Min (arguments);
                    }
                    public Max max (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Max (arguments);
                    }
                    public Max max ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new Max (arguments);
                    }
                    public Max max ( ReqlFunction1 func1 )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(func1);
                        return new Max (arguments);
                    }
                    public Split split (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Split (arguments);
                    }
                    public Split split ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new Split (arguments);
                    }
                    public Split split ( Object exprA, Object exprB )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(exprB);
                        return new Split (arguments);
                    }
                    public Ungroup ungroup (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Ungroup (arguments);
                    }
                    public Changes changes (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Changes (arguments);
                    }
                    public ToGeojson toGeojson (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new ToGeojson (arguments);
                    }
                    public Distance distance ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new Distance (arguments);
                    }
                    public Intersects intersects ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new Intersects (arguments);
                    }
                    public Includes includes ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new Includes (arguments);
                    }
                    public Fill fill (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Fill (arguments);
                    }
                    public PolygonSub polygonSub ( Object exprA )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(exprA);
                        return new PolygonSub (arguments);
                    }
                    public Values values (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Values (arguments);
                    }

    
    }
}
