












//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591 // Missing XML comment for publicly visible type or member
// ReSharper disable CheckNamespace

using System;
using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;
using System.Collections;
using System.Collections.Generic;


namespace RethinkDb.Driver.Ast {

    public partial class ReqlExpr : ReqlAst {

    
    
    
        protected ReqlExpr (TermType termType, Arguments args, OptArgs optargs) : base(termType, args, optargs)
        {
        }


    



    


    

    

/// <summary>
/// <para>Test if two values are equal.</para>
/// </summary>
/// <example><para>Example: Does 2 equal 2?</para>
/// <code>r.expr(2).eq(2).run(conn, callback)
/// </code></example>
                        public Eq Eq ( Object exprA, params object[] exprs )
                        {
                           return eq ( exprA, exprs );
                        }
                        internal Eq eq ( Object exprA, params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAddAll(exprs);
                            return new Eq (arguments );
                        }
/// <summary>
/// <para>Test if two values are not equal.</para>
/// </summary>
/// <example><para>Example: Does 2 not equal 2?</para>
/// <code>r.expr(2).ne(2).run(conn, callback)
/// </code></example>
                        public Ne Ne ( Object exprA, params object[] exprs )
                        {
                           return ne ( exprA, exprs );
                        }
                        internal Ne ne ( Object exprA, params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAddAll(exprs);
                            return new Ne (arguments );
                        }
/// <summary>
/// <para>Test if the first value is less than other.</para>
/// </summary>
/// <example><para>Example: Is 2 less than 2?</para>
/// <code>r.expr(2).lt(2).run(conn, callback)
/// </code></example>
                        public Lt Lt ( Object exprA, params object[] exprs )
                        {
                           return lt ( exprA, exprs );
                        }
                        internal Lt lt ( Object exprA, params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAddAll(exprs);
                            return new Lt (arguments );
                        }
/// <summary>
/// <para>Test if the first value is less than or equal to other.</para>
/// </summary>
/// <example><para>Example: Is 2 less than or equal to 2?</para>
/// <code>r.expr(2).le(2).run(conn, callback)
/// </code></example>
                        public Le Le ( Object exprA, params object[] exprs )
                        {
                           return le ( exprA, exprs );
                        }
                        internal Le le ( Object exprA, params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAddAll(exprs);
                            return new Le (arguments );
                        }
/// <summary>
/// <para>Test if the first value is greater than other.</para>
/// </summary>
/// <example><para>Example: Is 2 greater than 2?</para>
/// <code>r.expr(2).gt(2).run(conn, callback)
/// </code></example>
                        public Gt Gt ( Object exprA, params object[] exprs )
                        {
                           return gt ( exprA, exprs );
                        }
                        internal Gt gt ( Object exprA, params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAddAll(exprs);
                            return new Gt (arguments );
                        }
/// <summary>
/// <para>Test if the first value is greater than or equal to other.</para>
/// </summary>
/// <example><para>Example: Is 2 greater than or equal to 2?</para>
/// <code>r.expr(2).ge(2).run(conn, callback)
/// </code></example>
                        public Ge Ge ( Object exprA, params object[] exprs )
                        {
                           return ge ( exprA, exprs );
                        }
                        internal Ge ge ( Object exprA, params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAddAll(exprs);
                            return new Ge (arguments );
                        }
/// <summary>
/// <para>Compute the logical inverse (not) of an expression.</para>
/// <para><code>not</code> can be called either via method chaining, immediately after an expression that evaluates as a boolean value, or by passing the expression as a parameter to <code>not</code>.</para>
/// </summary>
/// <example><para>Example: Not true is false.</para>
/// <code>r(true).not().run(conn, callback)
/// r.not(true).run(conn, callback)
/// </code></example>
                        public Not Not (  )
                        {
                           return not (  );
                        }
                        internal Not not (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Not (arguments );
                        }
/// <summary>
/// <para>Sum two numbers, concatenate two strings, or concatenate 2 arrays.</para>
/// </summary>
/// <example><para>Example: It's as easy as 2 + 2 = 4.</para>
/// <code>r.expr(2).add(2).run(conn, callback)
/// </code></example>
                        public Add Add ( params object[] exprs )
                        {
                           return add ( exprs );
                        }
                        internal Add add ( params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAddAll(exprs);
                            return new Add (arguments );
                        }
/// <summary>
/// <para>Subtract two numbers.</para>
/// </summary>
/// <example><para>Example: It's as easy as 2 - 2 = 0.</para>
/// <code>r.expr(2).sub(2).run(conn, callback)
/// </code></example>
                        public Sub Sub ( params object[] exprs )
                        {
                           return sub ( exprs );
                        }
                        internal Sub sub ( params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAddAll(exprs);
                            return new Sub (arguments );
                        }
/// <summary>
/// <para>Multiply two numbers, or make a periodic array.</para>
/// </summary>
/// <example><para>Example: It's as easy as 2 * 2 = 4.</para>
/// <code>r.expr(2).mul(2).run(conn, callback)
/// </code></example>
                        public Mul Mul ( params object[] exprs )
                        {
                           return mul ( exprs );
                        }
                        internal Mul mul ( params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAddAll(exprs);
                            return new Mul (arguments );
                        }
/// <summary>
/// <para>Divide two numbers.</para>
/// </summary>
/// <example><para>Example: It's as easy as 2 / 2 = 1.</para>
/// <code>r.expr(2).div(2).run(conn, callback)
/// </code></example>
                        public Div Div ( params object[] exprs )
                        {
                           return div ( exprs );
                        }
                        internal Div div ( params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAddAll(exprs);
                            return new Div (arguments );
                        }
/// <summary>
/// <para>Find the remainder when dividing two numbers.</para>
/// </summary>
/// <example><para>Example: It's as easy as 2 % 2 = 0.</para>
/// <code>r.expr(2).mod(2).run(conn, callback)
/// </code></example>
                        public Mod Mod ( Object exprA )
                        {
                           return mod ( exprA );
                        }
                        internal Mod mod ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Mod (arguments );
                        }
/// <summary>
/// <para>Rounds the given value down, returning the largest integer value less than or equal to the given value (the value's floor).</para>
/// </summary>
/// <example><para>Example: Return the floor of 12.345.</para>
/// <code>&gt; r.floor(12.345).run(conn, callback);
/// 
/// 12.0
/// </code></example>
                        public Floor Floor (  )
                        {
                           return floor (  );
                        }
                        internal Floor floor (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Floor (arguments );
                        }
/// <summary>
/// <para>Rounds the given value up, returning the smallest integer value greater than or equal to the given value (the value's ceiling).</para>
/// </summary>
/// <example><para>Example: Return the ceiling of 12.345.</para>
/// <code>&gt; r.ceil(12.345).run(conn, callback);
/// 
/// 13.0
/// </code></example>
                        public Ceil Ceil (  )
                        {
                           return ceil (  );
                        }
                        internal Ceil ceil (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Ceil (arguments );
                        }
/// <summary>
/// <para>Rounds the given value to the nearest whole integer.</para>
/// </summary>
/// <example><para>Example: Round 12.345 to the nearest integer.</para>
/// <code>&gt; r.round(12.345).run(conn, callback);
/// 
/// 12.0
/// </code></example>
                        public Round Round (  )
                        {
                           return round (  );
                        }
                        internal Round round (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Round (arguments );
                        }
/// <summary>
/// <para>Append a value to an array.</para>
/// </summary>
/// <example><para>Example: Retrieve Iron Man's equipment list with the addition of some new boots.</para>
/// <code>r.table('marvel').get('IronMan')('equipment').append('newBoots').run(conn, callback)
/// </code></example>
                        public Append Append ( Object exprA )
                        {
                           return append ( exprA );
                        }
                        internal Append append ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Append (arguments );
                        }
/// <summary>
/// <para>Prepend a value to an array.</para>
/// </summary>
/// <example><para>Example: Retrieve Iron Man's equipment list with the addition of some new boots.</para>
/// <code>r.table('marvel').get('IronMan')('equipment').prepend('newBoots').run(conn, callback)
/// </code></example>
                        public Prepend Prepend ( Object exprA )
                        {
                           return prepend ( exprA );
                        }
                        internal Prepend prepend ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Prepend (arguments );
                        }
/// <summary>
/// <para>Remove the elements of one array from another array.</para>
/// </summary>
/// <example><para>Example: Retrieve Iron Man's equipment list without boots.</para>
/// <code>r.table('marvel').get('IronMan')('equipment').difference(['Boots']).run(conn, callback)
/// </code></example>
                        public Difference Difference ( Object exprA )
                        {
                           return difference ( exprA );
                        }
                        internal Difference difference ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Difference (arguments );
                        }
/// <summary>
/// <para>Add a value to an array and return it as a set (an array with distinct values).</para>
/// </summary>
/// <example><para>Example: Retrieve Iron Man's equipment list with the addition of some new boots.</para>
/// <code>r.table('marvel').get('IronMan')('equipment').setInsert('newBoots').run(conn, callback)
/// </code></example>
                        public SetInsert SetInsert ( Object exprA )
                        {
                           return setInsert ( exprA );
                        }
                        internal SetInsert setInsert ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new SetInsert (arguments );
                        }
/// <summary>
/// <para>Intersect two arrays returning values that occur in both of them as a set (an array with
/// distinct values).</para>
/// </summary>
/// <example><para>Example: Check which pieces of equipment Iron Man has from a fixed list.</para>
/// <code>r.table('marvel').get('IronMan')('equipment').setIntersection(['newBoots', 'arc_reactor']).run(conn, callback)
/// </code></example>
                        public SetIntersection SetIntersection ( Object exprA )
                        {
                           return setIntersection ( exprA );
                        }
                        internal SetIntersection setIntersection ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new SetIntersection (arguments );
                        }
/// <summary>
/// <para>Add a several values to an array and return it as a set (an array with distinct values).</para>
/// </summary>
/// <example><para>Example: Retrieve Iron Man's equipment list with the addition of some new boots and an arc reactor.</para>
/// <code>r.table('marvel').get('IronMan')('equipment').setUnion(['newBoots', 'arc_reactor']).run(conn, callback)
/// </code></example>
                        public SetUnion SetUnion ( Object exprA )
                        {
                           return setUnion ( exprA );
                        }
                        internal SetUnion setUnion ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new SetUnion (arguments );
                        }
/// <summary>
/// <para>Remove the elements of one array from another and return them as a set (an array with
/// distinct values).</para>
/// </summary>
/// <example><para>Example: Check which pieces of equipment Iron Man has, excluding a fixed list.</para>
/// <code>r.table('marvel').get('IronMan')('equipment').setDifference(['newBoots', 'arc_reactor']).run(conn, callback)
/// </code></example>
                        public SetDifference SetDifference ( Object exprA )
                        {
                           return setDifference ( exprA );
                        }
                        internal SetDifference setDifference ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new SetDifference (arguments );
                        }
/// <summary>
/// <para>Return the elements of a sequence within the specified range.</para>
/// <para>Example: Return the fourth, fifth and sixth youngest players. (The youngest player is at index 0, so those are elements 3-5.)</para>
/// <para><code>js
/// r.table('players').orderBy({index: 'age'}).slice(3,6).run(conn, callback)</code></para>
/// </summary>
/// <example></example>
                        public Slice Slice ( Object exprA )
                        {
                           return slice ( exprA );
                        }
                        internal Slice slice ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Slice (arguments );
                        }
/// <summary>
/// <para>Return the elements of a sequence within the specified range.</para>
/// <para>Example: Return the fourth, fifth and sixth youngest players. (The youngest player is at index 0, so those are elements 3-5.)</para>
/// <para><code>js
/// r.table('players').orderBy({index: 'age'}).slice(3,6).run(conn, callback)</code></para>
/// </summary>
/// <example></example>
                        public Slice Slice ( Object exprA, Object exprB )
                        {
                           return slice ( exprA, exprB );
                        }
                        internal Slice slice ( Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Slice (arguments );
                        }
/// <summary>
/// <para>Skip a number of elements from the head of the sequence.</para>
/// </summary>
/// <example><para>Example: Here in conjunction with <code>orderBy</code> we choose to ignore the most successful heroes.</para>
/// <code>r.table('marvel').orderBy('successMetric').skip(10).run(conn, callback)
/// </code></example>
                        public Skip Skip ( Object exprA )
                        {
                           return skip ( exprA );
                        }
                        internal Skip skip ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Skip (arguments );
                        }
/// <summary>
/// <para>End the sequence after the given number of elements.</para>
/// </summary>
/// <example><para>Example: Only so many can fit in our Pantheon of heroes.</para>
/// <code>r.table('marvel').orderBy('belovedness').limit(10).run(conn, callback)
/// </code></example>
                        public Limit Limit ( Object exprA )
                        {
                           return limit ( exprA );
                        }
                        internal Limit limit ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Limit (arguments );
                        }
/// <summary>
/// <para>Get the indexes of an element in a sequence. If the argument is a predicate, get the indexes of all elements matching it.</para>
/// </summary>
/// <example><para>Example: Find the position of the letter 'c'.</para>
/// <code>r.expr(['a','b','c']).offsetsOf('c').run(conn, callback)
/// </code></example>
                        public OffsetsOf OffsetsOf ( Javascript js )
                        {
                           return offsetsOf ( js );
                        }
                        internal OffsetsOf offsetsOf ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new OffsetsOf (arguments );
                        }
/// <summary>
/// <para>Get the indexes of an element in a sequence. If the argument is a predicate, get the indexes of all elements matching it.</para>
/// </summary>
/// <example><para>Example: Find the position of the letter 'c'.</para>
/// <code>r.expr(['a','b','c']).offsetsOf('c').run(conn, callback)
/// </code></example>
                        public OffsetsOf OffsetsOf ( Object exprA )
                        {
                           return offsetsOf ( exprA );
                        }
                        internal OffsetsOf offsetsOf ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new OffsetsOf (arguments );
                        }
/// <summary>
/// <para>Get the indexes of an element in a sequence. If the argument is a predicate, get the indexes of all elements matching it.</para>
/// </summary>
/// <example><para>Example: Find the position of the letter 'c'.</para>
/// <code>r.expr(['a','b','c']).offsetsOf('c').run(conn, callback)
/// </code></example>
                        public OffsetsOf OffsetsOf ( ReqlFunction1 func1 )
                        {
                           return offsetsOf ( func1 );
                        }
                        internal OffsetsOf offsetsOf ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new OffsetsOf (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains (  )
                        {
                           return contains (  );
                        }
                        internal Contains contains (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js )
                        {
                           return contains ( js );
                        }
                        internal Contains contains ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Javascript jsA )
                        {
                           return contains ( js, jsA );
                        }
                        internal Contains contains ( Javascript js, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Javascript jsA, Javascript jsB )
                        {
                           return contains ( js, jsA, jsB );
                        }
                        internal Contains contains ( Javascript js, Javascript jsA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Javascript jsA, Javascript jsB, Javascript jsC )
                        {
                           return contains ( js, jsA, jsB, jsC );
                        }
                        internal Contains contains ( Javascript js, Javascript jsA, Javascript jsB, Javascript jsC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            arguments.CoerceAndAdd(jsC);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Javascript jsA, Javascript jsB, Object exprA )
                        {
                           return contains ( js, jsA, jsB, exprA );
                        }
                        internal Contains contains ( Javascript js, Javascript jsA, Javascript jsB, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            arguments.CoerceAndAdd(exprA);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Javascript jsA, Object exprA )
                        {
                           return contains ( js, jsA, exprA );
                        }
                        internal Contains contains ( Javascript js, Javascript jsA, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprA);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Javascript jsA, Object exprA, Javascript jsB )
                        {
                           return contains ( js, jsA, exprA, jsB );
                        }
                        internal Contains contains ( Javascript js, Javascript jsA, Object exprA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsB);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Javascript jsA, Object exprA, Object exprB )
                        {
                           return contains ( js, jsA, exprA, exprB );
                        }
                        internal Contains contains ( Javascript js, Javascript jsA, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Object exprA )
                        {
                           return contains ( js, exprA );
                        }
                        internal Contains contains ( Javascript js, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Object exprA, Javascript jsA )
                        {
                           return contains ( js, exprA, jsA );
                        }
                        internal Contains contains ( Javascript js, Object exprA, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsA);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Object exprA, Javascript jsA, Javascript jsB )
                        {
                           return contains ( js, exprA, jsA, jsB );
                        }
                        internal Contains contains ( Javascript js, Object exprA, Javascript jsA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Object exprA, Javascript jsA, Object exprB )
                        {
                           return contains ( js, exprA, jsA, exprB );
                        }
                        internal Contains contains ( Javascript js, Object exprA, Javascript jsA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprB);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Object exprA, Object exprB )
                        {
                           return contains ( js, exprA, exprB );
                        }
                        internal Contains contains ( Javascript js, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Object exprA, Object exprB, Javascript jsA )
                        {
                           return contains ( js, exprA, exprB, jsA );
                        }
                        internal Contains contains ( Javascript js, Object exprA, Object exprB, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(jsA);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Object exprA, Object exprB, Object exprC )
                        {
                           return contains ( js, exprA, exprB, exprC );
                        }
                        internal Contains contains ( Javascript js, Object exprA, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA )
                        {
                           return contains ( exprA );
                        }
                        internal Contains contains ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Javascript js )
                        {
                           return contains ( exprA, js );
                        }
                        internal Contains contains ( Object exprA, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Javascript js, Javascript jsA )
                        {
                           return contains ( exprA, js, jsA );
                        }
                        internal Contains contains ( Object exprA, Javascript js, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Javascript js, Javascript jsA, Javascript jsB )
                        {
                           return contains ( exprA, js, jsA, jsB );
                        }
                        internal Contains contains ( Object exprA, Javascript js, Javascript jsA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Javascript js, Javascript jsA, Object exprB )
                        {
                           return contains ( exprA, js, jsA, exprB );
                        }
                        internal Contains contains ( Object exprA, Javascript js, Javascript jsA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprB);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Javascript js, Object exprB )
                        {
                           return contains ( exprA, js, exprB );
                        }
                        internal Contains contains ( Object exprA, Javascript js, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprB);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Javascript js, Object exprB, Javascript jsA )
                        {
                           return contains ( exprA, js, exprB, jsA );
                        }
                        internal Contains contains ( Object exprA, Javascript js, Object exprB, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(jsA);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Javascript js, Object exprB, Object exprC )
                        {
                           return contains ( exprA, js, exprB, exprC );
                        }
                        internal Contains contains ( Object exprA, Javascript js, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Object exprB )
                        {
                           return contains ( exprA, exprB );
                        }
                        internal Contains contains ( Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Object exprB, Javascript js )
                        {
                           return contains ( exprA, exprB, js );
                        }
                        internal Contains contains ( Object exprA, Object exprB, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Object exprB, Javascript js, Javascript jsA )
                        {
                           return contains ( exprA, exprB, js, jsA );
                        }
                        internal Contains contains ( Object exprA, Object exprB, Javascript js, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Object exprB, Javascript js, Object exprC )
                        {
                           return contains ( exprA, exprB, js, exprC );
                        }
                        internal Contains contains ( Object exprA, Object exprB, Javascript js, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprC);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Object exprB, Object exprC )
                        {
                           return contains ( exprA, exprB, exprC );
                        }
                        internal Contains contains ( Object exprA, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Object exprB, Object exprC, Javascript js )
                        {
                           return contains ( exprA, exprB, exprC, js );
                        }
                        internal Contains contains ( Object exprA, Object exprB, Object exprC, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(js);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Object exprB, Object exprC, Object exprD )
                        {
                           return contains ( exprA, exprB, exprC, exprD );
                        }
                        internal Contains contains ( Object exprA, Object exprB, Object exprC, Object exprD )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(exprD);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Object exprB, Object exprC, ReqlFunction1 func1 )
                        {
                           return contains ( exprA, exprB, exprC, func1 );
                        }
                        internal Contains contains ( Object exprA, Object exprB, Object exprC, ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(func1);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Object exprB, ReqlFunction1 func1 )
                        {
                           return contains ( exprA, exprB, func1 );
                        }
                        internal Contains contains ( Object exprA, Object exprB, ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Object exprB, ReqlFunction1 func1, Object exprC )
                        {
                           return contains ( exprA, exprB, func1, exprC );
                        }
                        internal Contains contains ( Object exprA, Object exprB, ReqlFunction1 func1, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprC);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Object exprB, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                           return contains ( exprA, exprB, func1, func1A );
                        }
                        internal Contains contains ( Object exprA, Object exprB, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, ReqlFunction1 func1 )
                        {
                           return contains ( exprA, func1 );
                        }
                        internal Contains contains ( Object exprA, ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, ReqlFunction1 func1, Object exprB )
                        {
                           return contains ( exprA, func1, exprB );
                        }
                        internal Contains contains ( Object exprA, ReqlFunction1 func1, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprB);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, ReqlFunction1 func1, Object exprB, Object exprC )
                        {
                           return contains ( exprA, func1, exprB, exprC );
                        }
                        internal Contains contains ( Object exprA, ReqlFunction1 func1, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, ReqlFunction1 func1, Object exprB, ReqlFunction1 func1A )
                        {
                           return contains ( exprA, func1, exprB, func1A );
                        }
                        internal Contains contains ( Object exprA, ReqlFunction1 func1, Object exprB, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1A);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                           return contains ( exprA, func1, func1A );
                        }
                        internal Contains contains ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprB )
                        {
                           return contains ( exprA, func1, func1A, exprB );
                        }
                        internal Contains contains ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprB);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                           return contains ( exprA, func1, func1A, func1B );
                        }
                        internal Contains contains ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1 )
                        {
                           return contains ( func1 );
                        }
                        internal Contains contains ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, Object exprA )
                        {
                           return contains ( func1, exprA );
                        }
                        internal Contains contains ( ReqlFunction1 func1, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, Object exprA, Object exprB )
                        {
                           return contains ( func1, exprA, exprB );
                        }
                        internal Contains contains ( ReqlFunction1 func1, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, Object exprA, Object exprB, Object exprC )
                        {
                           return contains ( func1, exprA, exprB, exprC );
                        }
                        internal Contains contains ( ReqlFunction1 func1, Object exprA, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, Object exprA, Object exprB, ReqlFunction1 func1A )
                        {
                           return contains ( func1, exprA, exprB, func1A );
                        }
                        internal Contains contains ( ReqlFunction1 func1, Object exprA, Object exprB, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1A);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A )
                        {
                           return contains ( func1, exprA, func1A );
                        }
                        internal Contains contains ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1A);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, Object exprB )
                        {
                           return contains ( func1, exprA, func1A, exprB );
                        }
                        internal Contains contains ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprB);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                           return contains ( func1, exprA, func1A, func1B );
                        }
                        internal Contains contains ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                           return contains ( func1, func1A );
                        }
                        internal Contains contains ( ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA )
                        {
                           return contains ( func1, func1A, exprA );
                        }
                        internal Contains contains ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprA);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, Object exprB )
                        {
                           return contains ( func1, func1A, exprA, exprB );
                        }
                        internal Contains contains ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, ReqlFunction1 func1B )
                        {
                           return contains ( func1, func1A, exprA, func1B );
                        }
                        internal Contains contains ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1B);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                           return contains ( func1, func1A, func1B );
                        }
                        internal Contains contains ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, Object exprA )
                        {
                           return contains ( func1, func1A, func1B, exprA );
                        }
                        internal Contains contains ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            arguments.CoerceAndAdd(exprA);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, ReqlFunction1 func1C )
                        {
                           return contains ( func1, func1A, func1B, func1C );
                        }
                        internal Contains contains ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, ReqlFunction1 func1C )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            arguments.CoerceAndAdd(func1C);
                            return new Contains (arguments );
                        }
/// <summary>
/// <para>Get a single field from an object. If called on a sequence, gets that field from every
/// object in the sequence, skipping objects that lack it.</para>
/// </summary>
/// <example><para>Example: What was Iron Man's first appearance in a comic?</para>
/// <code>r.table('marvel').get('IronMan').getField('firstAppearance').run(conn, callback)
/// </code></example>
                        public GetField GetField ( Object exprA )
                        {
                           return getField ( exprA );
                        }
                        internal GetField getField ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new GetField (arguments );
                        }
/// <summary>
/// <para>Get a single field from an object. If called on a sequence, gets that field from every
/// object in the sequence, skipping objects that lack it.</para>
/// </summary>
/// <example><para>Example: What was Iron Man's first appearance in a comic?</para>
/// <code>r.table('marvel').get('IronMan').getField('firstAppearance').run(conn, callback)
/// </code></example>
                        public GetField G ( Object exprA )
                        {
                           return g ( exprA );
                        }
                        internal GetField g ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new GetField (arguments );
                        }
/// <summary>
/// <para>Return an array containing all of the object's keys.</para>
/// </summary>
/// <example><para>Example: Get all the keys of a row.</para>
/// <code>r.table('marvel').get('ironman').keys().run(conn, callback)
/// </code></example>
                        public Keys Keys (  )
                        {
                           return keys (  );
                        }
                        internal Keys keys (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Keys (arguments );
                        }
/// <summary>
/// <para>Test if an object has one or more fields. An object has a field if it has that key and the key has a non-null value. For instance, the object <code>{'a': 1,'b': 2,'c': null}</code> has the fields <code>a</code> and <code>b</code>.</para>
/// </summary>
/// <example><para>Example: Return the players who have won games.</para>
/// <code>r.table('players').hasFields('games_won').run(conn, callback)
/// </code></example>
                        public HasFields HasFields ( params object[] exprs )
                        {
                           return hasFields ( exprs );
                        }
                        internal HasFields hasFields ( params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAddAll(exprs);
                            return new HasFields (arguments );
                        }
/// <summary>
/// <para>Plucks one or more attributes from a sequence of objects, filtering out any objects in the sequence that do not have the specified fields. Functionally, this is identical to <code>hasFields</code> followed by <code>pluck</code> on a sequence.</para>
/// </summary>
/// <example><para>Example: Get a list of users and their posts, excluding any users who have not made any posts.</para>
/// <code>r.table('users').withFields('id', 'username', 'posts').run(conn, callback)
/// </code></example>
                        public WithFields WithFields ( params object[] exprs )
                        {
                           return withFields ( exprs );
                        }
                        internal WithFields withFields ( params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAddAll(exprs);
                            return new WithFields (arguments );
                        }
/// <summary>
/// <para>Plucks out one or more attributes from either an object or a sequence of objects
/// (projection).</para>
/// </summary>
/// <example><para>Example: We just need information about IronMan's reactor and not the rest of the
/// document.</para>
/// <code>r.table('marvel').get('IronMan').pluck('reactorState', 'reactorPower').run(conn, callback)
/// </code></example>
                        public Pluck Pluck ( params object[] exprs )
                        {
                           return pluck ( exprs );
                        }
                        internal Pluck pluck ( params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAddAll(exprs);
                            return new Pluck (arguments );
                        }
/// <summary>
/// <para>The opposite of pluck; takes an object or a sequence of objects, and returns them with
/// the specified paths removed.</para>
/// </summary>
/// <example><para>Example: Since we don't need it for this computation we'll save bandwidth and leave
/// out the list of IronMan's romantic conquests.</para>
/// <code>r.table('marvel').get('IronMan').without('personalVictoriesList').run(conn, callback)
/// </code></example>
                        public Without Without ( params object[] exprs )
                        {
                           return without ( exprs );
                        }
                        internal Without without ( params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAddAll(exprs);
                            return new Without (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge (  )
                        {
                           return merge (  );
                        }
                        internal Merge merge (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js )
                        {
                           return merge ( js );
                        }
                        internal Merge merge ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Javascript jsA )
                        {
                           return merge ( js, jsA );
                        }
                        internal Merge merge ( Javascript js, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Javascript jsA, Javascript jsB )
                        {
                           return merge ( js, jsA, jsB );
                        }
                        internal Merge merge ( Javascript js, Javascript jsA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Javascript jsA, Javascript jsB, Javascript jsC )
                        {
                           return merge ( js, jsA, jsB, jsC );
                        }
                        internal Merge merge ( Javascript js, Javascript jsA, Javascript jsB, Javascript jsC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            arguments.CoerceAndAdd(jsC);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Javascript jsA, Javascript jsB, Object exprA )
                        {
                           return merge ( js, jsA, jsB, exprA );
                        }
                        internal Merge merge ( Javascript js, Javascript jsA, Javascript jsB, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            arguments.CoerceAndAdd(exprA);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Javascript jsA, Object exprA )
                        {
                           return merge ( js, jsA, exprA );
                        }
                        internal Merge merge ( Javascript js, Javascript jsA, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprA);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Javascript jsA, Object exprA, Javascript jsB )
                        {
                           return merge ( js, jsA, exprA, jsB );
                        }
                        internal Merge merge ( Javascript js, Javascript jsA, Object exprA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsB);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Javascript jsA, Object exprA, Object exprB )
                        {
                           return merge ( js, jsA, exprA, exprB );
                        }
                        internal Merge merge ( Javascript js, Javascript jsA, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Object exprA )
                        {
                           return merge ( js, exprA );
                        }
                        internal Merge merge ( Javascript js, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Object exprA, Javascript jsA )
                        {
                           return merge ( js, exprA, jsA );
                        }
                        internal Merge merge ( Javascript js, Object exprA, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsA);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Object exprA, Javascript jsA, Javascript jsB )
                        {
                           return merge ( js, exprA, jsA, jsB );
                        }
                        internal Merge merge ( Javascript js, Object exprA, Javascript jsA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Object exprA, Javascript jsA, Object exprB )
                        {
                           return merge ( js, exprA, jsA, exprB );
                        }
                        internal Merge merge ( Javascript js, Object exprA, Javascript jsA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprB);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Object exprA, Object exprB )
                        {
                           return merge ( js, exprA, exprB );
                        }
                        internal Merge merge ( Javascript js, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Object exprA, Object exprB, Javascript jsA )
                        {
                           return merge ( js, exprA, exprB, jsA );
                        }
                        internal Merge merge ( Javascript js, Object exprA, Object exprB, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(jsA);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Object exprA, Object exprB, Object exprC )
                        {
                           return merge ( js, exprA, exprB, exprC );
                        }
                        internal Merge merge ( Javascript js, Object exprA, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA )
                        {
                           return merge ( exprA );
                        }
                        internal Merge merge ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Javascript js )
                        {
                           return merge ( exprA, js );
                        }
                        internal Merge merge ( Object exprA, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Javascript js, Javascript jsA )
                        {
                           return merge ( exprA, js, jsA );
                        }
                        internal Merge merge ( Object exprA, Javascript js, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Javascript js, Javascript jsA, Javascript jsB )
                        {
                           return merge ( exprA, js, jsA, jsB );
                        }
                        internal Merge merge ( Object exprA, Javascript js, Javascript jsA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Javascript js, Javascript jsA, Object exprB )
                        {
                           return merge ( exprA, js, jsA, exprB );
                        }
                        internal Merge merge ( Object exprA, Javascript js, Javascript jsA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprB);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Javascript js, Object exprB )
                        {
                           return merge ( exprA, js, exprB );
                        }
                        internal Merge merge ( Object exprA, Javascript js, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprB);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Javascript js, Object exprB, Javascript jsA )
                        {
                           return merge ( exprA, js, exprB, jsA );
                        }
                        internal Merge merge ( Object exprA, Javascript js, Object exprB, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(jsA);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Javascript js, Object exprB, Object exprC )
                        {
                           return merge ( exprA, js, exprB, exprC );
                        }
                        internal Merge merge ( Object exprA, Javascript js, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Object exprB )
                        {
                           return merge ( exprA, exprB );
                        }
                        internal Merge merge ( Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Object exprB, Javascript js )
                        {
                           return merge ( exprA, exprB, js );
                        }
                        internal Merge merge ( Object exprA, Object exprB, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Object exprB, Javascript js, Javascript jsA )
                        {
                           return merge ( exprA, exprB, js, jsA );
                        }
                        internal Merge merge ( Object exprA, Object exprB, Javascript js, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Object exprB, Javascript js, Object exprC )
                        {
                           return merge ( exprA, exprB, js, exprC );
                        }
                        internal Merge merge ( Object exprA, Object exprB, Javascript js, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprC);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Object exprB, Object exprC )
                        {
                           return merge ( exprA, exprB, exprC );
                        }
                        internal Merge merge ( Object exprA, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Object exprB, Object exprC, Javascript js )
                        {
                           return merge ( exprA, exprB, exprC, js );
                        }
                        internal Merge merge ( Object exprA, Object exprB, Object exprC, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(js);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Object exprB, Object exprC, Object exprD )
                        {
                           return merge ( exprA, exprB, exprC, exprD );
                        }
                        internal Merge merge ( Object exprA, Object exprB, Object exprC, Object exprD )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(exprD);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Object exprB, Object exprC, ReqlFunction1 func1 )
                        {
                           return merge ( exprA, exprB, exprC, func1 );
                        }
                        internal Merge merge ( Object exprA, Object exprB, Object exprC, ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(func1);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Object exprB, ReqlFunction1 func1 )
                        {
                           return merge ( exprA, exprB, func1 );
                        }
                        internal Merge merge ( Object exprA, Object exprB, ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Object exprB, ReqlFunction1 func1, Object exprC )
                        {
                           return merge ( exprA, exprB, func1, exprC );
                        }
                        internal Merge merge ( Object exprA, Object exprB, ReqlFunction1 func1, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprC);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Object exprB, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                           return merge ( exprA, exprB, func1, func1A );
                        }
                        internal Merge merge ( Object exprA, Object exprB, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, ReqlFunction1 func1 )
                        {
                           return merge ( exprA, func1 );
                        }
                        internal Merge merge ( Object exprA, ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, ReqlFunction1 func1, Object exprB )
                        {
                           return merge ( exprA, func1, exprB );
                        }
                        internal Merge merge ( Object exprA, ReqlFunction1 func1, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprB);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, ReqlFunction1 func1, Object exprB, Object exprC )
                        {
                           return merge ( exprA, func1, exprB, exprC );
                        }
                        internal Merge merge ( Object exprA, ReqlFunction1 func1, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, ReqlFunction1 func1, Object exprB, ReqlFunction1 func1A )
                        {
                           return merge ( exprA, func1, exprB, func1A );
                        }
                        internal Merge merge ( Object exprA, ReqlFunction1 func1, Object exprB, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1A);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                           return merge ( exprA, func1, func1A );
                        }
                        internal Merge merge ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprB )
                        {
                           return merge ( exprA, func1, func1A, exprB );
                        }
                        internal Merge merge ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprB);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                           return merge ( exprA, func1, func1A, func1B );
                        }
                        internal Merge merge ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1 )
                        {
                           return merge ( func1 );
                        }
                        internal Merge merge ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, Object exprA )
                        {
                           return merge ( func1, exprA );
                        }
                        internal Merge merge ( ReqlFunction1 func1, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, Object exprA, Object exprB )
                        {
                           return merge ( func1, exprA, exprB );
                        }
                        internal Merge merge ( ReqlFunction1 func1, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, Object exprA, Object exprB, Object exprC )
                        {
                           return merge ( func1, exprA, exprB, exprC );
                        }
                        internal Merge merge ( ReqlFunction1 func1, Object exprA, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, Object exprA, Object exprB, ReqlFunction1 func1A )
                        {
                           return merge ( func1, exprA, exprB, func1A );
                        }
                        internal Merge merge ( ReqlFunction1 func1, Object exprA, Object exprB, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1A);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A )
                        {
                           return merge ( func1, exprA, func1A );
                        }
                        internal Merge merge ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1A);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, Object exprB )
                        {
                           return merge ( func1, exprA, func1A, exprB );
                        }
                        internal Merge merge ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprB);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                           return merge ( func1, exprA, func1A, func1B );
                        }
                        internal Merge merge ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                           return merge ( func1, func1A );
                        }
                        internal Merge merge ( ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA )
                        {
                           return merge ( func1, func1A, exprA );
                        }
                        internal Merge merge ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprA);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, Object exprB )
                        {
                           return merge ( func1, func1A, exprA, exprB );
                        }
                        internal Merge merge ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, ReqlFunction1 func1B )
                        {
                           return merge ( func1, func1A, exprA, func1B );
                        }
                        internal Merge merge ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1B);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                           return merge ( func1, func1A, func1B );
                        }
                        internal Merge merge ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, Object exprA )
                        {
                           return merge ( func1, func1A, func1B, exprA );
                        }
                        internal Merge merge ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            arguments.CoerceAndAdd(exprA);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, ReqlFunction1 func1C )
                        {
                           return merge ( func1, func1A, func1B, func1C );
                        }
                        internal Merge merge ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, ReqlFunction1 func1C )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            arguments.CoerceAndAdd(func1C);
                            return new Merge (arguments );
                        }
/// <summary>
/// <para>Get all documents between two keys. Accepts three optional arguments: <code>index</code>,
/// <code>left_bound</code>, and <code>right_bound</code>. If <code>index</code> is set to the name of a secondary index,
/// <code>between</code> will return all documents where that index's value is in the specified range
/// (it uses the primary key by default). <code>left_bound</code> or <code>right_bound</code> may be set to <code>open</code>
/// or <code>closed</code> to indicate whether or not to include that endpoint of the range (by default,
/// <code>left_bound</code> is closed and <code>right_bound</code> is open).</para>
/// </summary>
/// <example><para>Example: Find all users with primary key &gt;= 10 and &lt; 20 (a normal half-open interval).</para>
/// <code>r.table('marvel').between(10, 20).run(conn, callback)
/// </code></example>
                        public Between Between ( Object exprA, Object exprB )
                        {
                           return between ( exprA, exprB );
                        }
                        internal Between between ( Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Between (arguments );
                        }
/// <summary>
/// <para>Produce a single value from a sequence through repeated application of a reduction
/// function.</para>
/// </summary>
/// <example><para>Example: Return the number of documents in the table `posts.</para>
/// <code>r.table("posts").map(function(doc) {
///     return 1
/// }).reduce(function(left, right) {
///     return left.add(right)
/// }).run(conn, callback);
/// </code></example>
                        public Reduce Reduce ( Javascript js )
                        {
                           return reduce ( js );
                        }
                        internal Reduce reduce ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Reduce (arguments );
                        }
/// <summary>
/// <para>Produce a single value from a sequence through repeated application of a reduction
/// function.</para>
/// </summary>
/// <example><para>Example: Return the number of documents in the table `posts.</para>
/// <code>r.table("posts").map(function(doc) {
///     return 1
/// }).reduce(function(left, right) {
///     return left.add(right)
/// }).run(conn, callback);
/// </code></example>
                        public Reduce Reduce ( ReqlFunction2 func2 )
                        {
                           return reduce ( func2 );
                        }
                        internal Reduce reduce ( ReqlFunction2 func2 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func2);
                            return new Reduce (arguments );
                        }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
/// </summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                        public Map Map ( Javascript js )
                        {
                           return map ( js );
                        }
                        internal Map map ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Map (arguments );
                        }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
/// </summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                        public Map Map ( Object exprA, Javascript js )
                        {
                           return map ( exprA, js );
                        }
                        internal Map map ( Object exprA, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            return new Map (arguments );
                        }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
/// </summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                        public Map Map ( Object exprA, Object exprB, Javascript js )
                        {
                           return map ( exprA, exprB, js );
                        }
                        internal Map map ( Object exprA, Object exprB, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            return new Map (arguments );
                        }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
/// </summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                        public Map Map ( Object exprA, Object exprB, Object exprC, Javascript js )
                        {
                           return map ( exprA, exprB, exprC, js );
                        }
                        internal Map map ( Object exprA, Object exprB, Object exprC, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(js);
                            return new Map (arguments );
                        }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
/// </summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                        public Map Map ( Object exprA, Object exprB, Object exprC, ReqlFunction4 func4 )
                        {
                           return map ( exprA, exprB, exprC, func4 );
                        }
                        internal Map map ( Object exprA, Object exprB, Object exprC, ReqlFunction4 func4 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(func4);
                            return new Map (arguments );
                        }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
/// </summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                        public Map Map ( Object exprA, Object exprB, ReqlFunction3 func3 )
                        {
                           return map ( exprA, exprB, func3 );
                        }
                        internal Map map ( Object exprA, Object exprB, ReqlFunction3 func3 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func3);
                            return new Map (arguments );
                        }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
/// </summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                        public Map Map ( Object exprA, ReqlFunction2 func2 )
                        {
                           return map ( exprA, func2 );
                        }
                        internal Map map ( Object exprA, ReqlFunction2 func2 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func2);
                            return new Map (arguments );
                        }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
/// </summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                        public Map Map ( ReqlFunction0 func0 )
                        {
                           return map ( func0 );
                        }
                        internal Map map ( ReqlFunction0 func0 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func0);
                            return new Map (arguments );
                        }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
/// </summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                        public Map Map ( ReqlFunction1 func1 )
                        {
                           return map ( func1 );
                        }
                        internal Map map ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Map (arguments );
                        }
/// <summary>
/// <para>Get all the documents for which the given predicate is true.</para>
/// <para><code>filter</code> can be called on a sequence, selection, or a field containing an array of
/// elements. The return type is the same as the type on which the function was called on.</para>
/// <para>The body of every filter is wrapped in an implicit <code>.default(false)</code>, which means that
/// if a non-existence errors is thrown (when you try to access a field that does not exist
/// in a document), RethinkDB will just ignore the document.
/// The <code>default</code> value can be changed by passing an object with a <code>default</code> field.
/// Setting this optional argument to <code>r.error()</code> will cause any non-existence errors to
/// return a <code>RqlRuntimeError</code>.</para>
/// </summary>
/// <example><para>Example: Get all the users that are 30 years old.</para>
/// <code>r.table('users').filter({age: 30}).run(conn, callback)
/// </code></example>
                        public Filter Filter ( Javascript js )
                        {
                           return filter ( js );
                        }
                        internal Filter filter ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Filter (arguments );
                        }
/// <summary>
/// <para>Get all the documents for which the given predicate is true.</para>
/// <para><code>filter</code> can be called on a sequence, selection, or a field containing an array of
/// elements. The return type is the same as the type on which the function was called on.</para>
/// <para>The body of every filter is wrapped in an implicit <code>.default(false)</code>, which means that
/// if a non-existence errors is thrown (when you try to access a field that does not exist
/// in a document), RethinkDB will just ignore the document.
/// The <code>default</code> value can be changed by passing an object with a <code>default</code> field.
/// Setting this optional argument to <code>r.error()</code> will cause any non-existence errors to
/// return a <code>RqlRuntimeError</code>.</para>
/// </summary>
/// <example><para>Example: Get all the users that are 30 years old.</para>
/// <code>r.table('users').filter({age: 30}).run(conn, callback)
/// </code></example>
                        public Filter Filter ( Object exprA )
                        {
                           return filter ( exprA );
                        }
                        internal Filter filter ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Filter (arguments );
                        }
/// <summary>
/// <para>Get all the documents for which the given predicate is true.</para>
/// <para><code>filter</code> can be called on a sequence, selection, or a field containing an array of
/// elements. The return type is the same as the type on which the function was called on.</para>
/// <para>The body of every filter is wrapped in an implicit <code>.default(false)</code>, which means that
/// if a non-existence errors is thrown (when you try to access a field that does not exist
/// in a document), RethinkDB will just ignore the document.
/// The <code>default</code> value can be changed by passing an object with a <code>default</code> field.
/// Setting this optional argument to <code>r.error()</code> will cause any non-existence errors to
/// return a <code>RqlRuntimeError</code>.</para>
/// </summary>
/// <example><para>Example: Get all the users that are 30 years old.</para>
/// <code>r.table('users').filter({age: 30}).run(conn, callback)
/// </code></example>
                        public Filter Filter ( ReqlFunction1 func1 )
                        {
                           return filter ( func1 );
                        }
                        internal Filter filter ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Filter (arguments );
                        }
/// <summary>
/// <para>Concatenate one or more elements into a single sequence using a mapping function.</para>
/// </summary>
/// <example><para>Example: Construct a sequence of all monsters defeated by Marvel heroes. The field "defeatedMonsters" is an array of one or more monster names.</para>
/// <code>r.table('marvel').concatMap(function(hero) {
///     return hero('defeatedMonsters')
/// }).run(conn, callback)
/// </code></example>
                        public ConcatMap ConcatMap ( Javascript js )
                        {
                           return concatMap ( js );
                        }
                        internal ConcatMap concatMap ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new ConcatMap (arguments );
                        }
/// <summary>
/// <para>Concatenate one or more elements into a single sequence using a mapping function.</para>
/// </summary>
/// <example><para>Example: Construct a sequence of all monsters defeated by Marvel heroes. The field "defeatedMonsters" is an array of one or more monster names.</para>
/// <code>r.table('marvel').concatMap(function(hero) {
///     return hero('defeatedMonsters')
/// }).run(conn, callback)
/// </code></example>
                        public ConcatMap ConcatMap ( ReqlFunction1 func1 )
                        {
                           return concatMap ( func1 );
                        }
                        internal ConcatMap concatMap ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new ConcatMap (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy (  )
                        {
                           return orderBy (  );
                        }
                        internal OrderBy orderBy (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Javascript js )
                        {
                           return orderBy ( js );
                        }
                        internal OrderBy orderBy ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Javascript jsA )
                        {
                           return orderBy ( js, jsA );
                        }
                        internal OrderBy orderBy ( Javascript js, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Javascript jsA, Javascript jsB )
                        {
                           return orderBy ( js, jsA, jsB );
                        }
                        internal OrderBy orderBy ( Javascript js, Javascript jsA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Javascript jsA, Javascript jsB, Javascript jsC )
                        {
                           return orderBy ( js, jsA, jsB, jsC );
                        }
                        internal OrderBy orderBy ( Javascript js, Javascript jsA, Javascript jsB, Javascript jsC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            arguments.CoerceAndAdd(jsC);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Javascript jsA, Javascript jsB, Object exprA )
                        {
                           return orderBy ( js, jsA, jsB, exprA );
                        }
                        internal OrderBy orderBy ( Javascript js, Javascript jsA, Javascript jsB, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            arguments.CoerceAndAdd(exprA);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Javascript jsA, Object exprA )
                        {
                           return orderBy ( js, jsA, exprA );
                        }
                        internal OrderBy orderBy ( Javascript js, Javascript jsA, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprA);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Javascript jsA, Object exprA, Javascript jsB )
                        {
                           return orderBy ( js, jsA, exprA, jsB );
                        }
                        internal OrderBy orderBy ( Javascript js, Javascript jsA, Object exprA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsB);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Javascript jsA, Object exprA, Object exprB )
                        {
                           return orderBy ( js, jsA, exprA, exprB );
                        }
                        internal OrderBy orderBy ( Javascript js, Javascript jsA, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Object exprA )
                        {
                           return orderBy ( js, exprA );
                        }
                        internal OrderBy orderBy ( Javascript js, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Object exprA, Javascript jsA )
                        {
                           return orderBy ( js, exprA, jsA );
                        }
                        internal OrderBy orderBy ( Javascript js, Object exprA, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsA);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Object exprA, Javascript jsA, Javascript jsB )
                        {
                           return orderBy ( js, exprA, jsA, jsB );
                        }
                        internal OrderBy orderBy ( Javascript js, Object exprA, Javascript jsA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Object exprA, Javascript jsA, Object exprB )
                        {
                           return orderBy ( js, exprA, jsA, exprB );
                        }
                        internal OrderBy orderBy ( Javascript js, Object exprA, Javascript jsA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprB);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Object exprA, Object exprB )
                        {
                           return orderBy ( js, exprA, exprB );
                        }
                        internal OrderBy orderBy ( Javascript js, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Object exprA, Object exprB, Javascript jsA )
                        {
                           return orderBy ( js, exprA, exprB, jsA );
                        }
                        internal OrderBy orderBy ( Javascript js, Object exprA, Object exprB, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(jsA);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Object exprA, Object exprB, Object exprC )
                        {
                           return orderBy ( js, exprA, exprB, exprC );
                        }
                        internal OrderBy orderBy ( Javascript js, Object exprA, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Object exprA )
                        {
                           return orderBy ( exprA );
                        }
                        internal OrderBy orderBy ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Javascript js )
                        {
                           return orderBy ( exprA, js );
                        }
                        internal OrderBy orderBy ( Object exprA, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Javascript js, Javascript jsA )
                        {
                           return orderBy ( exprA, js, jsA );
                        }
                        internal OrderBy orderBy ( Object exprA, Javascript js, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Javascript js, Javascript jsA, Javascript jsB )
                        {
                           return orderBy ( exprA, js, jsA, jsB );
                        }
                        internal OrderBy orderBy ( Object exprA, Javascript js, Javascript jsA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Javascript js, Javascript jsA, Object exprB )
                        {
                           return orderBy ( exprA, js, jsA, exprB );
                        }
                        internal OrderBy orderBy ( Object exprA, Javascript js, Javascript jsA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprB);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Javascript js, Object exprB )
                        {
                           return orderBy ( exprA, js, exprB );
                        }
                        internal OrderBy orderBy ( Object exprA, Javascript js, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprB);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Javascript js, Object exprB, Javascript jsA )
                        {
                           return orderBy ( exprA, js, exprB, jsA );
                        }
                        internal OrderBy orderBy ( Object exprA, Javascript js, Object exprB, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(jsA);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Javascript js, Object exprB, Object exprC )
                        {
                           return orderBy ( exprA, js, exprB, exprC );
                        }
                        internal OrderBy orderBy ( Object exprA, Javascript js, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Object exprB )
                        {
                           return orderBy ( exprA, exprB );
                        }
                        internal OrderBy orderBy ( Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Object exprB, Javascript js )
                        {
                           return orderBy ( exprA, exprB, js );
                        }
                        internal OrderBy orderBy ( Object exprA, Object exprB, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Object exprB, Javascript js, Javascript jsA )
                        {
                           return orderBy ( exprA, exprB, js, jsA );
                        }
                        internal OrderBy orderBy ( Object exprA, Object exprB, Javascript js, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Object exprB, Javascript js, Object exprC )
                        {
                           return orderBy ( exprA, exprB, js, exprC );
                        }
                        internal OrderBy orderBy ( Object exprA, Object exprB, Javascript js, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprC);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Object exprB, Object exprC )
                        {
                           return orderBy ( exprA, exprB, exprC );
                        }
                        internal OrderBy orderBy ( Object exprA, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Object exprB, Object exprC, Javascript js )
                        {
                           return orderBy ( exprA, exprB, exprC, js );
                        }
                        internal OrderBy orderBy ( Object exprA, Object exprB, Object exprC, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(js);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Object exprB, Object exprC, Object exprD )
                        {
                           return orderBy ( exprA, exprB, exprC, exprD );
                        }
                        internal OrderBy orderBy ( Object exprA, Object exprB, Object exprC, Object exprD )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(exprD);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Object exprB, Object exprC, ReqlFunction1 func1 )
                        {
                           return orderBy ( exprA, exprB, exprC, func1 );
                        }
                        internal OrderBy orderBy ( Object exprA, Object exprB, Object exprC, ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(func1);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Object exprB, ReqlFunction1 func1 )
                        {
                           return orderBy ( exprA, exprB, func1 );
                        }
                        internal OrderBy orderBy ( Object exprA, Object exprB, ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Object exprB, ReqlFunction1 func1, Object exprC )
                        {
                           return orderBy ( exprA, exprB, func1, exprC );
                        }
                        internal OrderBy orderBy ( Object exprA, Object exprB, ReqlFunction1 func1, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprC);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Object exprB, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                           return orderBy ( exprA, exprB, func1, func1A );
                        }
                        internal OrderBy orderBy ( Object exprA, Object exprB, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, ReqlFunction1 func1 )
                        {
                           return orderBy ( exprA, func1 );
                        }
                        internal OrderBy orderBy ( Object exprA, ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, ReqlFunction1 func1, Object exprB )
                        {
                           return orderBy ( exprA, func1, exprB );
                        }
                        internal OrderBy orderBy ( Object exprA, ReqlFunction1 func1, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprB);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, ReqlFunction1 func1, Object exprB, Object exprC )
                        {
                           return orderBy ( exprA, func1, exprB, exprC );
                        }
                        internal OrderBy orderBy ( Object exprA, ReqlFunction1 func1, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, ReqlFunction1 func1, Object exprB, ReqlFunction1 func1A )
                        {
                           return orderBy ( exprA, func1, exprB, func1A );
                        }
                        internal OrderBy orderBy ( Object exprA, ReqlFunction1 func1, Object exprB, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1A);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                           return orderBy ( exprA, func1, func1A );
                        }
                        internal OrderBy orderBy ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprB )
                        {
                           return orderBy ( exprA, func1, func1A, exprB );
                        }
                        internal OrderBy orderBy ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprB);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                           return orderBy ( exprA, func1, func1A, func1B );
                        }
                        internal OrderBy orderBy ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1 )
                        {
                           return orderBy ( func1 );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, Object exprA )
                        {
                           return orderBy ( func1, exprA );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, Object exprA, Object exprB )
                        {
                           return orderBy ( func1, exprA, exprB );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, Object exprA, Object exprB, Object exprC )
                        {
                           return orderBy ( func1, exprA, exprB, exprC );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, Object exprA, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, Object exprA, Object exprB, ReqlFunction1 func1A )
                        {
                           return orderBy ( func1, exprA, exprB, func1A );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, Object exprA, Object exprB, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1A);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A )
                        {
                           return orderBy ( func1, exprA, func1A );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1A);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, Object exprB )
                        {
                           return orderBy ( func1, exprA, func1A, exprB );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprB);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                           return orderBy ( func1, exprA, func1A, func1B );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                           return orderBy ( func1, func1A );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA )
                        {
                           return orderBy ( func1, func1A, exprA );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprA);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, Object exprB )
                        {
                           return orderBy ( func1, func1A, exprA, exprB );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, ReqlFunction1 func1B )
                        {
                           return orderBy ( func1, func1A, exprA, func1B );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1B);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                           return orderBy ( func1, func1A, func1B );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, Object exprA )
                        {
                           return orderBy ( func1, func1A, func1B, exprA );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            arguments.CoerceAndAdd(exprA);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// <para>Sorting without an index requires the server to hold the sequence in
/// memory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href="/api/javascript/run">run</a>). Sorting with an index can
/// be done on arbitrarily large tables, or after a <code>between</code> command
/// using the same index.</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.   </para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)
/// </code>
/// <para>The index must have been previously created with <a href="/api/javascript/index_create/">indexCreate</a>.</para>
/// <code>r.table('posts').indexCreate('date').run(conn, callback)
/// </code>
/// <para>You can also select a descending ordering:</para>
/// <code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, ReqlFunction1 func1C )
                        {
                           return orderBy ( func1, func1A, func1B, func1C );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, ReqlFunction1 func1C )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            arguments.CoerceAndAdd(func1C);
                            return new OrderBy (arguments );
                        }
/// <summary>
/// <para>Remove duplicate elements from the sequence.</para>
/// </summary>
/// <example><para>Example: Which unique villains have been vanquished by marvel heroes?</para>
/// <code>r.table('marvel').concatMap(function(hero) {
///     return hero('villainList')
/// }).distinct().run(conn, callback)
/// </code></example>
                        public Distinct Distinct (  )
                        {
                           return distinct (  );
                        }
                        internal Distinct distinct (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Distinct (arguments );
                        }
/// <summary>
/// <para>Count the number of elements in the sequence. With a single argument, count the number
/// of elements equal to it. If the argument is a function, it is equivalent to calling
/// filter before count.</para>
/// </summary>
/// <example><para>Example: Just how many super heroes are there?</para>
/// <code>r.table('marvel').count().add(r.table('dc').count()).run(conn, callback)
/// </code></example>
                        public Count Count (  )
                        {
                           return count (  );
                        }
                        internal Count count (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Count (arguments );
                        }
/// <summary>
/// <para>Count the number of elements in the sequence. With a single argument, count the number
/// of elements equal to it. If the argument is a function, it is equivalent to calling
/// filter before count.</para>
/// </summary>
/// <example><para>Example: Just how many super heroes are there?</para>
/// <code>r.table('marvel').count().add(r.table('dc').count()).run(conn, callback)
/// </code></example>
                        public Count Count ( Javascript js )
                        {
                           return count ( js );
                        }
                        internal Count count ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Count (arguments );
                        }
/// <summary>
/// <para>Count the number of elements in the sequence. With a single argument, count the number
/// of elements equal to it. If the argument is a function, it is equivalent to calling
/// filter before count.</para>
/// </summary>
/// <example><para>Example: Just how many super heroes are there?</para>
/// <code>r.table('marvel').count().add(r.table('dc').count()).run(conn, callback)
/// </code></example>
                        public Count Count ( Object exprA )
                        {
                           return count ( exprA );
                        }
                        internal Count count ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Count (arguments );
                        }
/// <summary>
/// <para>Count the number of elements in the sequence. With a single argument, count the number
/// of elements equal to it. If the argument is a function, it is equivalent to calling
/// filter before count.</para>
/// </summary>
/// <example><para>Example: Just how many super heroes are there?</para>
/// <code>r.table('marvel').count().add(r.table('dc').count()).run(conn, callback)
/// </code></example>
                        public Count Count ( ReqlFunction1 func1 )
                        {
                           return count ( func1 );
                        }
                        internal Count count ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Count (arguments );
                        }
/// <summary>
/// <para>Test if a sequence is empty.</para>
/// </summary>
/// <example><para>Example: Are there any documents in the marvel table?</para>
/// <code>r.table('marvel').isEmpty().run(conn, callback)
/// </code></example>
                        public IsEmpty IsEmpty (  )
                        {
                           return isEmpty (  );
                        }
                        internal IsEmpty isEmpty (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new IsEmpty (arguments );
                        }
/// <summary>
/// <para>Concatenate two or more sequences.</para>
/// </summary>
/// <example><para>Example: Construct a stream of all heroes.</para>
/// <code>r.table('marvel').union(r.table('dc')).run(conn, callback);
/// </code></example>
                        public Union Union ( params object[] exprs )
                        {
                           return union ( exprs );
                        }
                        internal Union union ( params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAddAll(exprs);
                            return new Union (arguments );
                        }
/// <summary>
/// <para>Get the <em>nth</em> element of a sequence, counting from zero. If the argument is negative, count from the last element.</para>
/// </summary>
/// <example><para>Example: Select the second element in the array.</para>
/// <code>r.expr([1,2,3]).nth(1).run(conn, callback)
/// </code></example>
                        public Nth Nth ( Object exprA )
                        {
                           return nth ( exprA );
                        }
                        internal Nth nth ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Nth (arguments );
                        }
/// <summary>
/// <para>Get a single field from an object or a single element from a sequence.</para>
/// </summary>
/// <example><para>Example: What was Iron Man's first appearance in a comic?</para>
/// <code>r.table('marvel').get('IronMan')('firstAppearance').run(conn, callback)
/// </code></example>
                        public Bracket Bracket ( Object exprA )
                        {
                           return bracket ( exprA );
                        }
                        internal Bracket bracket ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Bracket (arguments );
                        }
/// <summary>
/// <para>Returns an inner join of two sequences.</para>
/// </summary>
/// <example><para>Example: Return a list of all matchups between Marvel and DC heroes in which the DC hero could beat the Marvel hero in a fight.</para>
/// <code>r.table('marvel').innerJoin(r.table('dc'), function(marvelRow, dcRow) {
///     return marvelRow('strength').lt(dcRow('strength'))
/// }).zip().run(conn, callback)
/// </code></example>
                        public InnerJoin InnerJoin ( Object exprA, Javascript js )
                        {
                           return innerJoin ( exprA, js );
                        }
                        internal InnerJoin innerJoin ( Object exprA, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            return new InnerJoin (arguments );
                        }
/// <summary>
/// <para>Returns an inner join of two sequences.</para>
/// </summary>
/// <example><para>Example: Return a list of all matchups between Marvel and DC heroes in which the DC hero could beat the Marvel hero in a fight.</para>
/// <code>r.table('marvel').innerJoin(r.table('dc'), function(marvelRow, dcRow) {
///     return marvelRow('strength').lt(dcRow('strength'))
/// }).zip().run(conn, callback)
/// </code></example>
                        public InnerJoin InnerJoin ( Object exprA, ReqlFunction2 func2 )
                        {
                           return innerJoin ( exprA, func2 );
                        }
                        internal InnerJoin innerJoin ( Object exprA, ReqlFunction2 func2 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func2);
                            return new InnerJoin (arguments );
                        }
/// <summary>
/// <para>Returns a left outer join of two sequences.</para>
/// </summary>
/// <example><para>Example: Return a list of all Marvel heroes, paired with any DC heroes who could beat them in a fight.</para>
/// <code>r.table('marvel').outerJoin(r.table('dc'), function(marvelRow, dcRow) {
///     return marvelRow('strength').lt(dcRow('strength'))
/// }).run(conn, callback)
/// </code></example>
                        public OuterJoin OuterJoin ( Object exprA, Javascript js )
                        {
                           return outerJoin ( exprA, js );
                        }
                        internal OuterJoin outerJoin ( Object exprA, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            return new OuterJoin (arguments );
                        }
/// <summary>
/// <para>Returns a left outer join of two sequences.</para>
/// </summary>
/// <example><para>Example: Return a list of all Marvel heroes, paired with any DC heroes who could beat them in a fight.</para>
/// <code>r.table('marvel').outerJoin(r.table('dc'), function(marvelRow, dcRow) {
///     return marvelRow('strength').lt(dcRow('strength'))
/// }).run(conn, callback)
/// </code></example>
                        public OuterJoin OuterJoin ( Object exprA, ReqlFunction2 func2 )
                        {
                           return outerJoin ( exprA, func2 );
                        }
                        internal OuterJoin outerJoin ( Object exprA, ReqlFunction2 func2 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func2);
                            return new OuterJoin (arguments );
                        }
/// <summary>
/// <para>Join tables using a field or function on the left-hand sequence matching primary keys or secondary indexes on the right-hand table. <code>eqJoin</code> is more efficient than other ReQL join types, and operates much faster. Documents in the result set consist of pairs of left-hand and right-hand documents, matched when the field on the left-hand side exists and is non-null and an entry with that field's value exists in the specified index on the right-hand side.</para>
/// <para>Example: Match players with the games they've played against one another.</para>
/// <para><code>js
/// r.table('players').eqJoin('gameId', r.table('games')).run(conn, callback)</code></para>
/// </summary>
/// <example></example>
                        public EqJoin EqJoin ( Javascript js, Object exprA )
                        {
                           return eqJoin ( js, exprA );
                        }
                        internal EqJoin eqJoin ( Javascript js, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            return new EqJoin (arguments );
                        }
/// <summary>
/// <para>Join tables using a field or function on the left-hand sequence matching primary keys or secondary indexes on the right-hand table. <code>eqJoin</code> is more efficient than other ReQL join types, and operates much faster. Documents in the result set consist of pairs of left-hand and right-hand documents, matched when the field on the left-hand side exists and is non-null and an entry with that field's value exists in the specified index on the right-hand side.</para>
/// <para>Example: Match players with the games they've played against one another.</para>
/// <para><code>js
/// r.table('players').eqJoin('gameId', r.table('games')).run(conn, callback)</code></para>
/// </summary>
/// <example></example>
                        public EqJoin EqJoin ( Object exprA, Object exprB )
                        {
                           return eqJoin ( exprA, exprB );
                        }
                        internal EqJoin eqJoin ( Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new EqJoin (arguments );
                        }
/// <summary>
/// <para>Join tables using a field or function on the left-hand sequence matching primary keys or secondary indexes on the right-hand table. <code>eqJoin</code> is more efficient than other ReQL join types, and operates much faster. Documents in the result set consist of pairs of left-hand and right-hand documents, matched when the field on the left-hand side exists and is non-null and an entry with that field's value exists in the specified index on the right-hand side.</para>
/// <para>Example: Match players with the games they've played against one another.</para>
/// <para><code>js
/// r.table('players').eqJoin('gameId', r.table('games')).run(conn, callback)</code></para>
/// </summary>
/// <example></example>
                        public EqJoin EqJoin ( ReqlFunction1 func1, Object exprA )
                        {
                           return eqJoin ( func1, exprA );
                        }
                        internal EqJoin eqJoin ( ReqlFunction1 func1, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            return new EqJoin (arguments );
                        }
/// <summary>
/// <para>Used to 'zip' up the result of a join by merging the 'right' fields into 'left' fields of each member of the sequence.</para>
/// </summary>
/// <example><para>Example: 'zips up' the sequence by merging the left and right fields produced by a join.</para>
/// <code>r.table('marvel').eqJoin('main_dc_collaborator', r.table('dc'))
///     .zip().run(conn, callback)
/// </code></example>
                        public Zip Zip (  )
                        {
                           return zip (  );
                        }
                        internal Zip zip (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Zip (arguments );
                        }
/// <summary>
/// <para>Insert a value in to an array at a given index. Returns the modified array.</para>
/// </summary>
/// <example><para>Example: Hulk decides to join the avengers.</para>
/// <code>r.expr(["Iron Man", "Spider-Man"]).insertAt(1, "Hulk").run(conn, callback)
/// </code></example>
                        public InsertAt InsertAt ( Object exprA, Object exprB )
                        {
                           return insertAt ( exprA, exprB );
                        }
                        internal InsertAt insertAt ( Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new InsertAt (arguments );
                        }
/// <summary>
/// <para>Remove one or more elements from an array at a given index. Returns the modified array.</para>
/// </summary>
/// <example><para>Example: Delete the second element of an array.</para>
/// <code>&gt; r(['a','b','c','d','e','f']).deleteAt(1).run(conn, callback)
/// // result passed to callback
/// ['a', 'c', 'd', 'e', 'f']
/// </code></example>
                        public DeleteAt DeleteAt ( Object exprA )
                        {
                           return deleteAt ( exprA );
                        }
                        internal DeleteAt deleteAt ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new DeleteAt (arguments );
                        }
/// <summary>
/// <para>Remove one or more elements from an array at a given index. Returns the modified array.</para>
/// </summary>
/// <example><para>Example: Delete the second element of an array.</para>
/// <code>&gt; r(['a','b','c','d','e','f']).deleteAt(1).run(conn, callback)
/// // result passed to callback
/// ['a', 'c', 'd', 'e', 'f']
/// </code></example>
                        public DeleteAt DeleteAt ( Object exprA, Object exprB )
                        {
                           return deleteAt ( exprA, exprB );
                        }
                        internal DeleteAt deleteAt ( Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new DeleteAt (arguments );
                        }
/// <summary>
/// <para>Change a value in an array at a given index. Returns the modified array.</para>
/// </summary>
/// <example><para>Example: Bruce Banner hulks out.</para>
/// <code>r.expr(["Iron Man", "Bruce", "Spider-Man"]).changeAt(1, "Hulk").run(conn, callback)
/// </code></example>
                        public ChangeAt ChangeAt ( Object exprA, Object exprB )
                        {
                           return changeAt ( exprA, exprB );
                        }
                        internal ChangeAt changeAt ( Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new ChangeAt (arguments );
                        }
/// <summary>
/// <para>Insert several values in to an array at a given index. Returns the modified array.</para>
/// </summary>
/// <example><para>Example: Hulk and Thor decide to join the avengers.</para>
/// <code>r.expr(["Iron Man", "Spider-Man"]).spliceAt(1, ["Hulk", "Thor"]).run(conn, callback)
/// </code></example>
                        public SpliceAt SpliceAt ( Object exprA, Object exprB )
                        {
                           return spliceAt ( exprA, exprB );
                        }
                        internal SpliceAt spliceAt ( Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new SpliceAt (arguments );
                        }
/// <summary>
/// <para>Convert a value of one type into another.</para>
/// </summary>
/// <example><para>Example: Coerce a stream to an array.</para>
/// <code>r.table('posts').map(function (post) {
///     post.merge({ comments: r.table('comments').getAll(post('id'), {index: 'postId'}).coerceTo('array')});
/// }).run(conn, callback)
/// </code></example>
                        public CoerceTo CoerceTo ( Object exprA )
                        {
                           return coerceTo ( exprA );
                        }
                        internal CoerceTo coerceTo ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new CoerceTo (arguments );
                        }
/// <summary>
/// <para>Gets the type of a value.</para>
/// </summary>
/// <example><para>Example: Get the type of a string.</para>
/// <code>r.expr("foo").typeOf().run(conn, callback)
/// </code></example>
                        public TypeOf TypeOf (  )
                        {
                           return typeOf (  );
                        }
                        internal TypeOf typeOf (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new TypeOf (arguments );
                        }
/// <summary>
/// <para>Update JSON documents in a table. Accepts a JSON document, a ReQL expression, or a
/// combination of the two. You can pass options like <code>returnChanges</code> that will return the old
/// and new values of the row you have modified.</para>
/// </summary>
/// <example><para>Example: Update the status of the post with <code>id</code> of <code>1</code> to <code>published</code>.</para>
/// <code>r.table("posts").get(1).update({status: "published"}).run(conn, callback)
/// </code></example>
                        public Update Update ( Javascript js )
                        {
                           return update ( js );
                        }
                        internal Update update ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Update (arguments );
                        }
/// <summary>
/// <para>Update JSON documents in a table. Accepts a JSON document, a ReQL expression, or a
/// combination of the two. You can pass options like <code>returnChanges</code> that will return the old
/// and new values of the row you have modified.</para>
/// </summary>
/// <example><para>Example: Update the status of the post with <code>id</code> of <code>1</code> to <code>published</code>.</para>
/// <code>r.table("posts").get(1).update({status: "published"}).run(conn, callback)
/// </code></example>
                        public Update Update ( Object exprA )
                        {
                           return update ( exprA );
                        }
                        internal Update update ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Update (arguments );
                        }
/// <summary>
/// <para>Update JSON documents in a table. Accepts a JSON document, a ReQL expression, or a
/// combination of the two. You can pass options like <code>returnChanges</code> that will return the old
/// and new values of the row you have modified.</para>
/// </summary>
/// <example><para>Example: Update the status of the post with <code>id</code> of <code>1</code> to <code>published</code>.</para>
/// <code>r.table("posts").get(1).update({status: "published"}).run(conn, callback)
/// </code></example>
                        public Update Update ( ReqlFunction1 func1 )
                        {
                           return update ( func1 );
                        }
                        internal Update update ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Update (arguments );
                        }
/// <summary>
/// <para>Delete one or more documents from a table.</para>
/// </summary>
/// <example><para>Example: Delete a single document from the table <code>comments</code>.</para>
/// <code>r.table("comments").get("7eab9e63-73f1-4f33-8ce4-95cbea626f59").delete().run(conn, callback)
/// </code></example>
                        public Delete Delete (  )
                        {
                           return delete (  );
                        }
                        internal Delete delete (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Delete (arguments );
                        }
/// <summary>
/// <para>Replace documents in a table. Accepts a JSON document or a ReQL expression, and replaces
/// the original document with the new one. The new document must have the same primary key
/// as the original document.</para>
/// </summary>
/// <example><para>Example: Replace the document with the primary key <code>1</code>.</para>
/// <code>r.table("posts").get(1).replace({
///     id: 1,
///     title: "Lorem ipsum",
///     content: "Aleas jacta est",
///     status: "draft"
/// }).run(conn, callback)
/// </code></example>
                        public Replace Replace ( Javascript js )
                        {
                           return replace ( js );
                        }
                        internal Replace replace ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Replace (arguments );
                        }
/// <summary>
/// <para>Replace documents in a table. Accepts a JSON document or a ReQL expression, and replaces
/// the original document with the new one. The new document must have the same primary key
/// as the original document.</para>
/// </summary>
/// <example><para>Example: Replace the document with the primary key <code>1</code>.</para>
/// <code>r.table("posts").get(1).replace({
///     id: 1,
///     title: "Lorem ipsum",
///     content: "Aleas jacta est",
///     status: "draft"
/// }).run(conn, callback)
/// </code></example>
                        public Replace Replace ( Object exprA )
                        {
                           return replace ( exprA );
                        }
                        internal Replace replace ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Replace (arguments );
                        }
/// <summary>
/// <para>Replace documents in a table. Accepts a JSON document or a ReQL expression, and replaces
/// the original document with the new one. The new document must have the same primary key
/// as the original document.</para>
/// </summary>
/// <example><para>Example: Replace the document with the primary key <code>1</code>.</para>
/// <code>r.table("posts").get(1).replace({
///     id: 1,
///     title: "Lorem ipsum",
///     content: "Aleas jacta est",
///     status: "draft"
/// }).run(conn, callback)
/// </code></example>
                        public Replace Replace ( ReqlFunction1 func1 )
                        {
                           return replace ( func1 );
                        }
                        internal Replace replace ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Replace (arguments );
                        }
                        public Funcall Do_ ( Javascript js )
                        {
                           return do_ ( js );
                        }
                        internal Funcall do_ ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Funcall (arguments );
                        }
                        public Funcall Do_ ( Object exprA, Javascript js )
                        {
                           return do_ ( exprA, js );
                        }
                        internal Funcall do_ ( Object exprA, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            return new Funcall (arguments );
                        }
                        public Funcall Do_ ( Object exprA, Object exprB, Javascript js )
                        {
                           return do_ ( exprA, exprB, js );
                        }
                        internal Funcall do_ ( Object exprA, Object exprB, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            return new Funcall (arguments );
                        }
                        public Funcall Do_ ( Object exprA, Object exprB, ReqlFunction3 func3 )
                        {
                           return do_ ( exprA, exprB, func3 );
                        }
                        internal Funcall do_ ( Object exprA, Object exprB, ReqlFunction3 func3 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func3);
                            return new Funcall (arguments );
                        }
                        public Funcall Do_ ( Object exprA, ReqlFunction2 func2 )
                        {
                           return do_ ( exprA, func2 );
                        }
                        internal Funcall do_ ( Object exprA, ReqlFunction2 func2 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func2);
                            return new Funcall (arguments );
                        }
                        public Funcall Do_ ( params object[] exprs )
                        {
                           return do_ ( exprs );
                        }
                        internal Funcall do_ ( params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAddAll(exprs);
                            return new Funcall (arguments );
                        }
                        public Funcall Do_ ( ReqlFunction1 func1 )
                        {
                           return do_ ( func1 );
                        }
                        internal Funcall do_ ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Funcall (arguments );
                        }
/// <summary>
/// <para>Compute the logical "or" of two or more values.</para>
/// </summary>
/// <example><para>Example: Return whether either <code>a</code> or <code>b</code> evaluate to true.</para>
/// <code>var a = true, b = false;
/// r.expr(a).or(b).run(conn, callback);
/// // result passed to callback
/// true
/// </code></example>
                        public Or Or ( Object exprA, params object[] exprs )
                        {
                           return or ( exprA, exprs );
                        }
                        internal Or or ( Object exprA, params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAddAll(exprs);
                            return new Or (arguments );
                        }
/// <summary>
/// <para>Compute the logical "and" of two or more values.</para>
/// </summary>
/// <example><para>Example: Return whether both <code>a</code> and <code>b</code> evaluate to true.</para>
/// <code>var a = true, b = false;
/// r.expr(a).and(b).run(conn, callback);
/// // result passed to callback
/// false
/// </code></example>
                        public And And ( params object[] exprs )
                        {
                           return and ( exprs );
                        }
                        internal And and ( params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAddAll(exprs);
                            return new And (arguments );
                        }
/// <summary>
/// <para>Loop over a sequence, evaluating the given write query for each element.</para>
/// </summary>
/// <example><para>Example: Now that our heroes have defeated their villains, we can safely remove them from the villain table.</para>
/// <code>r.table('marvel').forEach(function(hero) {
///     return r.table('villains').get(hero('villainDefeated')).delete()
/// }).run(conn, callback)
/// </code></example>
                        public ForEach ForEach ( Javascript js )
                        {
                           return forEach ( js );
                        }
                        internal ForEach forEach ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new ForEach (arguments );
                        }
/// <summary>
/// <para>Loop over a sequence, evaluating the given write query for each element.</para>
/// </summary>
/// <example><para>Example: Now that our heroes have defeated their villains, we can safely remove them from the villain table.</para>
/// <code>r.table('marvel').forEach(function(hero) {
///     return r.table('villains').get(hero('villainDefeated')).delete()
/// }).run(conn, callback)
/// </code></example>
                        public ForEach ForEach ( ReqlFunction0 func0 )
                        {
                           return forEach ( func0 );
                        }
                        internal ForEach forEach ( ReqlFunction0 func0 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func0);
                            return new ForEach (arguments );
                        }
/// <summary>
/// <para>Loop over a sequence, evaluating the given write query for each element.</para>
/// </summary>
/// <example><para>Example: Now that our heroes have defeated their villains, we can safely remove them from the villain table.</para>
/// <code>r.table('marvel').forEach(function(hero) {
///     return r.table('villains').get(hero('villainDefeated')).delete()
/// }).run(conn, callback)
/// </code></example>
                        public ForEach ForEach ( ReqlFunction1 func1 )
                        {
                           return forEach ( func1 );
                        }
                        internal ForEach forEach ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new ForEach (arguments );
                        }
/// <summary>
/// <para>Get information about a ReQL value.</para>
/// </summary>
/// <example><para>Example: Get information about a table such as primary key, or cache size.</para>
/// <code>r.table('marvel').info().run(conn, callback)
/// </code></example>
                        public Info Info (  )
                        {
                           return info (  );
                        }
                        internal Info info (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Info (arguments );
                        }
/// <summary>
/// <para>Matches against a regular expression. If there is a match, returns an object with the fields:</para>
/// <ul>
/// <li><code>str</code>: The matched string</li>
/// <li><code>start</code>: The matched string's start</li>
/// <li><code>end</code>: The matched string's end</li>
/// <li><code>groups</code>: The capture groups defined with parentheses</li>
/// </ul>
/// <para>If no match is found, returns <code>null</code>.</para>
/// </summary>
/// <example><para>Example: Get all users whose name starts with "A". </para>
/// <code>r.table('users').filter(function(doc){
///     return doc('name').match("^A")
/// }).run(conn, callback)
/// </code></example>
                        public Match Match ( Object exprA )
                        {
                           return match ( exprA );
                        }
                        internal Match match ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Match (arguments );
                        }
/// <summary>
/// <para>Uppercases a string.</para>
/// </summary>
/// <example><para>Example:</para>
/// <code>r.expr("Sentence about LaTeX.").upcase().run(conn, callback)
/// </code></example>
                        public Upcase Upcase (  )
                        {
                           return upcase (  );
                        }
                        internal Upcase upcase (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Upcase (arguments );
                        }
/// <summary>
/// <para>Lowercases a string.</para>
/// </summary>
/// <example><para>Example:</para>
/// <code>r.expr("Sentence about LaTeX.").downcase().run(conn, callback)
/// </code></example>
                        public Downcase Downcase (  )
                        {
                           return downcase (  );
                        }
                        internal Downcase downcase (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Downcase (arguments );
                        }
/// <summary>
/// <para>Select a given number of elements from a sequence with uniform random distribution. Selection is done without replacement.</para>
/// </summary>
/// <example><para>Example: Select 3 random heroes.</para>
/// <code>r.table('marvel').sample(3).run(conn, callback)
/// </code></example>
                        public Sample Sample ( Object exprA )
                        {
                           return sample ( exprA );
                        }
                        internal Sample sample ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Sample (arguments );
                        }
/// <summary>
/// <para>Handle non-existence errors. Tries to evaluate and return its first argument. If an
/// error related to the absence of a value is thrown in the process, or if its first
/// argument returns <code>null</code>, returns its second argument. (Alternatively, the second argument
/// may be a function which will be called with either the text of the non-existence error
/// or <code>null</code>.)</para>
/// </summary>
/// <example><para>Example: Suppose we want to retrieve the titles and authors of the table <code>posts</code>.
/// In the case where the author field is missing or <code>null</code>, we want to retrieve the string
/// <code>Anonymous</code>.</para>
/// <code>r.table("posts").map( function(post) {
///     return {
///         title: post("title"),
///         author: post("author").default("Anonymous")
///     }
/// }).run(conn, callback)
/// </code></example>
                        public Default Default_ ( Javascript js )
                        {
                           return default_ ( js );
                        }
                        internal Default default_ ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Default (arguments );
                        }
/// <summary>
/// <para>Handle non-existence errors. Tries to evaluate and return its first argument. If an
/// error related to the absence of a value is thrown in the process, or if its first
/// argument returns <code>null</code>, returns its second argument. (Alternatively, the second argument
/// may be a function which will be called with either the text of the non-existence error
/// or <code>null</code>.)</para>
/// </summary>
/// <example><para>Example: Suppose we want to retrieve the titles and authors of the table <code>posts</code>.
/// In the case where the author field is missing or <code>null</code>, we want to retrieve the string
/// <code>Anonymous</code>.</para>
/// <code>r.table("posts").map( function(post) {
///     return {
///         title: post("title"),
///         author: post("author").default("Anonymous")
///     }
/// }).run(conn, callback)
/// </code></example>
                        public Default Default_ ( Object exprA )
                        {
                           return default_ ( exprA );
                        }
                        internal Default default_ ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Default (arguments );
                        }
/// <summary>
/// <para>Handle non-existence errors. Tries to evaluate and return its first argument. If an
/// error related to the absence of a value is thrown in the process, or if its first
/// argument returns <code>null</code>, returns its second argument. (Alternatively, the second argument
/// may be a function which will be called with either the text of the non-existence error
/// or <code>null</code>.)</para>
/// </summary>
/// <example><para>Example: Suppose we want to retrieve the titles and authors of the table <code>posts</code>.
/// In the case where the author field is missing or <code>null</code>, we want to retrieve the string
/// <code>Anonymous</code>.</para>
/// <code>r.table("posts").map( function(post) {
///     return {
///         title: post("title"),
///         author: post("author").default("Anonymous")
///     }
/// }).run(conn, callback)
/// </code></example>
                        public Default Default_ ( ReqlFunction1 func1 )
                        {
                           return default_ ( func1 );
                        }
                        internal Default default_ ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Default (arguments );
                        }
/// <summary>
/// <para>Convert a ReQL value or object to a JSON string. You may use either <code>toJsonString</code> or <code>toJSON</code>.</para>
/// </summary>
/// <example><para>Example: Get a ReQL document as a JSON string.</para>
/// <code>&gt; r.table('hero').get(1).toJSON()
/// // result returned to callback
/// '{"id": 1, "name": "Batman", "city": "Gotham", "powers": ["martial arts", "cinematic entrances"]}'
/// </code></example>
                        public ToJsonString ToJsonString (  )
                        {
                           return toJsonString (  );
                        }
                        internal ToJsonString toJsonString (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new ToJsonString (arguments );
                        }
/// <summary>
/// <para>Convert a ReQL value or object to a JSON string. You may use either <code>toJsonString</code> or <code>toJSON</code>.</para>
/// </summary>
/// <example><para>Example: Get a ReQL document as a JSON string.</para>
/// <code>&gt; r.table('hero').get(1).toJSON()
/// // result returned to callback
/// '{"id": 1, "name": "Batman", "city": "Gotham", "powers": ["martial arts", "cinematic entrances"]}'
/// </code></example>
                        public ToJsonString ToJson (  )
                        {
                           return toJson (  );
                        }
                        internal ToJsonString toJson (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new ToJsonString (arguments );
                        }
/// <summary>
/// <para>Convert a time object to a string in ISO 8601 format.</para>
/// </summary>
/// <example><para>Example: Return the current ISO 8601 time.</para>
/// <code>r.now().toISO8601().run(conn, callback)
/// // Result passed to callback
/// "2015-04-20T18:37:52.690+00:00"
/// </code></example>
                        public ToIso8601 ToIso8601 (  )
                        {
                           return toIso8601 (  );
                        }
                        internal ToIso8601 toIso8601 (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new ToIso8601 (arguments );
                        }
/// <summary>
/// <para>Convert a time object to its epoch time.</para>
/// </summary>
/// <example><para>Example: Return the current time in seconds since the Unix Epoch with millisecond-precision.</para>
/// <code>r.now().toEpochTime()
/// </code></example>
                        public ToEpochTime ToEpochTime (  )
                        {
                           return toEpochTime (  );
                        }
                        internal ToEpochTime toEpochTime (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new ToEpochTime (arguments );
                        }
/// <summary>
/// <para>Return a new time object with a different timezone. While the time stays the same, the results returned by methods such as hours() will change since they take the timezone into account. The timezone argument has to be of the ISO 8601 format.</para>
/// </summary>
/// <example><para>Example: Hour of the day in San Francisco (UTC/GMT -8, without daylight saving time).</para>
/// <code>r.now().inTimezone('-08:00').hours().run(conn, callback)
/// </code></example>
                        public InTimezone InTimezone ( Object exprA )
                        {
                           return inTimezone ( exprA );
                        }
                        internal InTimezone inTimezone ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new InTimezone (arguments );
                        }
/// <summary>
/// <para>Return if a time is between two other times (by default, inclusive for the start, exclusive for the end).</para>
/// </summary>
/// <example><para>Example: Retrieve all the posts that were posted between December 1st, 2013 (inclusive) and December 10th, 2013 (exclusive).</para>
/// <code>r.table("posts").filter(
///     r.row('date').during(r.time(2013, 12, 1), r.time(2013, 12, 10))
/// ).run(conn, callback)
/// </code></example>
                        public During During ( Object exprA, Object exprB )
                        {
                           return during ( exprA, exprB );
                        }
                        internal During during ( Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new During (arguments );
                        }
/// <summary>
/// <para>Return a new time object only based on the day, month and year (ie. the same day at 00:00).</para>
/// </summary>
/// <example><para>Example: Retrieve all the users whose birthday is today</para>
/// <code>r.table("users").filter(function(user) {
///     return user("birthdate").date().eq(r.now().date())
/// }).run(conn, callback)
/// </code></example>
                        public Date Date (  )
                        {
                           return date (  );
                        }
                        internal Date date (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Date (arguments );
                        }
/// <summary>
/// <para>Return the number of seconds elapsed since the beginning of the day stored in the time object.</para>
/// </summary>
/// <example><para>Example: Retrieve posts that were submitted before noon.</para>
/// <code>r.table("posts").filter(
///     r.row("date").timeOfDay().le(12*60*60)
/// ).run(conn, callback)
/// </code></example>
                        public TimeOfDay TimeOfDay (  )
                        {
                           return timeOfDay (  );
                        }
                        internal TimeOfDay timeOfDay (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new TimeOfDay (arguments );
                        }
/// <summary>
/// <para>Return the timezone of the time object.</para>
/// </summary>
/// <example><para>Example: Return all the users in the "-07:00" timezone.</para>
/// <code>r.table("users").filter( function(user) {
///     return user("subscriptionDate").timezone().eq("-07:00")
/// })
/// </code></example>
                        public Timezone Timezone (  )
                        {
                           return timezone (  );
                        }
                        internal Timezone timezone (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Timezone (arguments );
                        }
/// <summary>
/// <para>Return the year of a time object.</para>
/// </summary>
/// <example><para>Example: Retrieve all the users born in 1986.</para>
/// <code>r.table("users").filter(function(user) {
///     return user("birthdate").year().eq(1986)
/// }).run(conn, callback)
/// </code></example>
                        public Year Year (  )
                        {
                           return year (  );
                        }
                        internal Year year (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Year (arguments );
                        }
/// <summary>
/// <para>Return the month of a time object as a number between 1 and 12. For your convenience, the terms r.january, r.february etc. are defined and map to the appropriate integer.</para>
/// </summary>
/// <example><para>Example: Retrieve all the users who were born in November.</para>
/// <code>r.table("users").filter(
///     r.row("birthdate").month().eq(11)
/// )
/// </code></example>
                        public Month Month (  )
                        {
                           return month (  );
                        }
                        internal Month month (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Month (arguments );
                        }
/// <summary>
/// <para>Return the day of a time object as a number between 1 and 31.</para>
/// </summary>
/// <example><para>Example: Return the users born on the 24th of any month.</para>
/// <code>r.table("users").filter(
///     r.row("birthdate").day().eq(24)
/// ).run(conn, callback)
/// </code></example>
                        public Day Day (  )
                        {
                           return day (  );
                        }
                        internal Day day (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Day (arguments );
                        }
/// <summary>
/// <para>Return the day of week of a time object as a number between 1 and 7 (following ISO 8601 standard). For your convenience, the terms r.monday, r.tuesday etc. are defined and map to the appropriate integer.</para>
/// </summary>
/// <example><para>Example: Return today's day of week.</para>
/// <code>r.now().dayOfWeek().run(conn, callback)
/// </code></example>
                        public DayOfWeek DayOfWeek (  )
                        {
                           return dayOfWeek (  );
                        }
                        internal DayOfWeek dayOfWeek (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new DayOfWeek (arguments );
                        }
/// <summary>
/// <para>Return the day of the year of a time object as a number between 1 and 366 (following ISO 8601 standard).</para>
/// </summary>
/// <example><para>Example: Retrieve all the users who were born the first day of a year.</para>
/// <code>r.table("users").filter(
///     r.row("birthdate").dayOfYear().eq(1)
/// )
/// </code></example>
                        public DayOfYear DayOfYear (  )
                        {
                           return dayOfYear (  );
                        }
                        internal DayOfYear dayOfYear (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new DayOfYear (arguments );
                        }
/// <summary>
/// <para>Return the hour in a time object as a number between 0 and 23.</para>
/// </summary>
/// <example><para>Example: Return all the posts submitted after midnight and before 4am.</para>
/// <code>r.table("posts").filter(function(post) {
///     return post("date").hours().lt(4)
/// })
/// </code></example>
                        public Hours Hours (  )
                        {
                           return hours (  );
                        }
                        internal Hours hours (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Hours (arguments );
                        }
/// <summary>
/// <para>Return the minute in a time object as a number between 0 and 59.</para>
/// </summary>
/// <example><para>Example: Return all the posts submitted during the first 10 minutes of every hour.</para>
/// <code>r.table("posts").filter(function(post) {
///     return post("date").minutes().lt(10)
/// })
/// </code></example>
                        public Minutes Minutes (  )
                        {
                           return minutes (  );
                        }
                        internal Minutes minutes (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Minutes (arguments );
                        }
/// <summary>
/// <para>Return the seconds in a time object as a number between 0 and 59.999 (double precision).</para>
/// </summary>
/// <example><para>Example: Return the post submitted during the first 30 seconds of every minute.</para>
/// <code>r.table("posts").filter(function(post) {
///     return post("date").seconds().lt(30)
/// })
/// </code></example>
                        public Seconds Seconds (  )
                        {
                           return seconds (  );
                        }
                        internal Seconds seconds (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Seconds (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group (  )
                        {
                           return group (  );
                        }
                        internal Group group (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Javascript js )
                        {
                           return group ( js );
                        }
                        internal Group group ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Javascript js, Javascript jsA )
                        {
                           return group ( js, jsA );
                        }
                        internal Group group ( Javascript js, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Javascript js, Javascript jsA, Javascript jsB )
                        {
                           return group ( js, jsA, jsB );
                        }
                        internal Group group ( Javascript js, Javascript jsA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Javascript js, Javascript jsA, Javascript jsB, Javascript jsC )
                        {
                           return group ( js, jsA, jsB, jsC );
                        }
                        internal Group group ( Javascript js, Javascript jsA, Javascript jsB, Javascript jsC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            arguments.CoerceAndAdd(jsC);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Javascript js, Javascript jsA, Javascript jsB, Object exprA )
                        {
                           return group ( js, jsA, jsB, exprA );
                        }
                        internal Group group ( Javascript js, Javascript jsA, Javascript jsB, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            arguments.CoerceAndAdd(exprA);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Javascript js, Javascript jsA, Object exprA )
                        {
                           return group ( js, jsA, exprA );
                        }
                        internal Group group ( Javascript js, Javascript jsA, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprA);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Javascript js, Javascript jsA, Object exprA, Javascript jsB )
                        {
                           return group ( js, jsA, exprA, jsB );
                        }
                        internal Group group ( Javascript js, Javascript jsA, Object exprA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsB);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Javascript js, Javascript jsA, Object exprA, Object exprB )
                        {
                           return group ( js, jsA, exprA, exprB );
                        }
                        internal Group group ( Javascript js, Javascript jsA, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Javascript js, Object exprA )
                        {
                           return group ( js, exprA );
                        }
                        internal Group group ( Javascript js, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Javascript js, Object exprA, Javascript jsA )
                        {
                           return group ( js, exprA, jsA );
                        }
                        internal Group group ( Javascript js, Object exprA, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsA);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Javascript js, Object exprA, Javascript jsA, Javascript jsB )
                        {
                           return group ( js, exprA, jsA, jsB );
                        }
                        internal Group group ( Javascript js, Object exprA, Javascript jsA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Javascript js, Object exprA, Javascript jsA, Object exprB )
                        {
                           return group ( js, exprA, jsA, exprB );
                        }
                        internal Group group ( Javascript js, Object exprA, Javascript jsA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprB);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Javascript js, Object exprA, Object exprB )
                        {
                           return group ( js, exprA, exprB );
                        }
                        internal Group group ( Javascript js, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Javascript js, Object exprA, Object exprB, Javascript jsA )
                        {
                           return group ( js, exprA, exprB, jsA );
                        }
                        internal Group group ( Javascript js, Object exprA, Object exprB, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(jsA);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Javascript js, Object exprA, Object exprB, Object exprC )
                        {
                           return group ( js, exprA, exprB, exprC );
                        }
                        internal Group group ( Javascript js, Object exprA, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Object exprA )
                        {
                           return group ( exprA );
                        }
                        internal Group group ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Object exprA, Javascript js )
                        {
                           return group ( exprA, js );
                        }
                        internal Group group ( Object exprA, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Object exprA, Javascript js, Javascript jsA )
                        {
                           return group ( exprA, js, jsA );
                        }
                        internal Group group ( Object exprA, Javascript js, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Object exprA, Javascript js, Javascript jsA, Javascript jsB )
                        {
                           return group ( exprA, js, jsA, jsB );
                        }
                        internal Group group ( Object exprA, Javascript js, Javascript jsA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Object exprA, Javascript js, Javascript jsA, Object exprB )
                        {
                           return group ( exprA, js, jsA, exprB );
                        }
                        internal Group group ( Object exprA, Javascript js, Javascript jsA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprB);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Object exprA, Javascript js, Object exprB )
                        {
                           return group ( exprA, js, exprB );
                        }
                        internal Group group ( Object exprA, Javascript js, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprB);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Object exprA, Javascript js, Object exprB, Javascript jsA )
                        {
                           return group ( exprA, js, exprB, jsA );
                        }
                        internal Group group ( Object exprA, Javascript js, Object exprB, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(jsA);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Object exprA, Javascript js, Object exprB, Object exprC )
                        {
                           return group ( exprA, js, exprB, exprC );
                        }
                        internal Group group ( Object exprA, Javascript js, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Object exprA, Object exprB )
                        {
                           return group ( exprA, exprB );
                        }
                        internal Group group ( Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Object exprA, Object exprB, Javascript js )
                        {
                           return group ( exprA, exprB, js );
                        }
                        internal Group group ( Object exprA, Object exprB, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Object exprA, Object exprB, Javascript js, Javascript jsA )
                        {
                           return group ( exprA, exprB, js, jsA );
                        }
                        internal Group group ( Object exprA, Object exprB, Javascript js, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Object exprA, Object exprB, Javascript js, Object exprC )
                        {
                           return group ( exprA, exprB, js, exprC );
                        }
                        internal Group group ( Object exprA, Object exprB, Javascript js, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprC);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Object exprA, Object exprB, Object exprC )
                        {
                           return group ( exprA, exprB, exprC );
                        }
                        internal Group group ( Object exprA, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Object exprA, Object exprB, Object exprC, Javascript js )
                        {
                           return group ( exprA, exprB, exprC, js );
                        }
                        internal Group group ( Object exprA, Object exprB, Object exprC, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(js);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Object exprA, Object exprB, Object exprC, Object exprD )
                        {
                           return group ( exprA, exprB, exprC, exprD );
                        }
                        internal Group group ( Object exprA, Object exprB, Object exprC, Object exprD )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(exprD);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Object exprA, Object exprB, Object exprC, ReqlFunction1 func1 )
                        {
                           return group ( exprA, exprB, exprC, func1 );
                        }
                        internal Group group ( Object exprA, Object exprB, Object exprC, ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(func1);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Object exprA, Object exprB, ReqlFunction1 func1 )
                        {
                           return group ( exprA, exprB, func1 );
                        }
                        internal Group group ( Object exprA, Object exprB, ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Object exprA, Object exprB, ReqlFunction1 func1, Object exprC )
                        {
                           return group ( exprA, exprB, func1, exprC );
                        }
                        internal Group group ( Object exprA, Object exprB, ReqlFunction1 func1, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprC);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Object exprA, Object exprB, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                           return group ( exprA, exprB, func1, func1A );
                        }
                        internal Group group ( Object exprA, Object exprB, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Object exprA, ReqlFunction1 func1 )
                        {
                           return group ( exprA, func1 );
                        }
                        internal Group group ( Object exprA, ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Object exprA, ReqlFunction1 func1, Object exprB )
                        {
                           return group ( exprA, func1, exprB );
                        }
                        internal Group group ( Object exprA, ReqlFunction1 func1, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprB);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Object exprA, ReqlFunction1 func1, Object exprB, Object exprC )
                        {
                           return group ( exprA, func1, exprB, exprC );
                        }
                        internal Group group ( Object exprA, ReqlFunction1 func1, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Object exprA, ReqlFunction1 func1, Object exprB, ReqlFunction1 func1A )
                        {
                           return group ( exprA, func1, exprB, func1A );
                        }
                        internal Group group ( Object exprA, ReqlFunction1 func1, Object exprB, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1A);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                           return group ( exprA, func1, func1A );
                        }
                        internal Group group ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprB )
                        {
                           return group ( exprA, func1, func1A, exprB );
                        }
                        internal Group group ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprB);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                           return group ( exprA, func1, func1A, func1B );
                        }
                        internal Group group ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( ReqlFunction1 func1 )
                        {
                           return group ( func1 );
                        }
                        internal Group group ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, Object exprA )
                        {
                           return group ( func1, exprA );
                        }
                        internal Group group ( ReqlFunction1 func1, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, Object exprA, Object exprB )
                        {
                           return group ( func1, exprA, exprB );
                        }
                        internal Group group ( ReqlFunction1 func1, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, Object exprA, Object exprB, Object exprC )
                        {
                           return group ( func1, exprA, exprB, exprC );
                        }
                        internal Group group ( ReqlFunction1 func1, Object exprA, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, Object exprA, Object exprB, ReqlFunction1 func1A )
                        {
                           return group ( func1, exprA, exprB, func1A );
                        }
                        internal Group group ( ReqlFunction1 func1, Object exprA, Object exprB, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1A);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A )
                        {
                           return group ( func1, exprA, func1A );
                        }
                        internal Group group ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1A);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, Object exprB )
                        {
                           return group ( func1, exprA, func1A, exprB );
                        }
                        internal Group group ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprB);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                           return group ( func1, exprA, func1A, func1B );
                        }
                        internal Group group ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                           return group ( func1, func1A );
                        }
                        internal Group group ( ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA )
                        {
                           return group ( func1, func1A, exprA );
                        }
                        internal Group group ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprA);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, Object exprB )
                        {
                           return group ( func1, func1A, exprA, exprB );
                        }
                        internal Group group ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, ReqlFunction1 func1B )
                        {
                           return group ( func1, func1A, exprA, func1B );
                        }
                        internal Group group ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1B);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                           return group ( func1, func1A, func1B );
                        }
                        internal Group group ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, Object exprA )
                        {
                           return group ( func1, func1A, func1B, exprA );
                        }
                        internal Group group ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            arguments.CoerceAndAdd(exprA);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
/// </summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, ReqlFunction1 func1C )
                        {
                           return group ( func1, func1A, func1B, func1C );
                        }
                        internal Group group ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, ReqlFunction1 func1C )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            arguments.CoerceAndAdd(func1C);
                            return new Group (arguments );
                        }
/// <summary>
/// <para>Sums all the elements of a sequence.  If called with a field name,
/// sums all the values of that field in the sequence, skipping elements
/// of the sequence that lack that field.  If called with a function,
/// calls that function on every element of the sequence and sums the
/// results, skipping elements of the sequence where that function returns
/// <code>null</code> or a non-existence error.</para>
/// </summary>
/// <example><para>Example: What's 3 + 5 + 7?</para>
/// <code>r.expr([3, 5, 7]).sum().run(conn, callback)
/// </code></example>
                        public Sum Sum (  )
                        {
                           return sum (  );
                        }
                        internal Sum sum (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Sum (arguments );
                        }
/// <summary>
/// <para>Sums all the elements of a sequence.  If called with a field name,
/// sums all the values of that field in the sequence, skipping elements
/// of the sequence that lack that field.  If called with a function,
/// calls that function on every element of the sequence and sums the
/// results, skipping elements of the sequence where that function returns
/// <code>null</code> or a non-existence error.</para>
/// </summary>
/// <example><para>Example: What's 3 + 5 + 7?</para>
/// <code>r.expr([3, 5, 7]).sum().run(conn, callback)
/// </code></example>
                        public Sum Sum ( Javascript js )
                        {
                           return sum ( js );
                        }
                        internal Sum sum ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Sum (arguments );
                        }
/// <summary>
/// <para>Sums all the elements of a sequence.  If called with a field name,
/// sums all the values of that field in the sequence, skipping elements
/// of the sequence that lack that field.  If called with a function,
/// calls that function on every element of the sequence and sums the
/// results, skipping elements of the sequence where that function returns
/// <code>null</code> or a non-existence error.</para>
/// </summary>
/// <example><para>Example: What's 3 + 5 + 7?</para>
/// <code>r.expr([3, 5, 7]).sum().run(conn, callback)
/// </code></example>
                        public Sum Sum ( Object exprA )
                        {
                           return sum ( exprA );
                        }
                        internal Sum sum ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Sum (arguments );
                        }
/// <summary>
/// <para>Sums all the elements of a sequence.  If called with a field name,
/// sums all the values of that field in the sequence, skipping elements
/// of the sequence that lack that field.  If called with a function,
/// calls that function on every element of the sequence and sums the
/// results, skipping elements of the sequence where that function returns
/// <code>null</code> or a non-existence error.</para>
/// </summary>
/// <example><para>Example: What's 3 + 5 + 7?</para>
/// <code>r.expr([3, 5, 7]).sum().run(conn, callback)
/// </code></example>
                        public Sum Sum ( ReqlFunction1 func1 )
                        {
                           return sum ( func1 );
                        }
                        internal Sum sum ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Sum (arguments );
                        }
/// <summary>
/// <para>Averages all the elements of a sequence.  If called with a field name,
/// averages all the values of that field in the sequence, skipping
/// elements of the sequence that lack that field.  If called with a
/// function, calls that function on every element of the sequence and
/// averages the results, skipping elements of the sequence where that
/// function returns <code>null</code> or a non-existence error.</para>
/// </summary>
/// <example><para>Example: What's the average of 3, 5, and 7?</para>
/// <code>r.expr([3, 5, 7]).avg().run(conn, callback)
/// </code></example>
                        public Avg Avg (  )
                        {
                           return avg (  );
                        }
                        internal Avg avg (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Avg (arguments );
                        }
/// <summary>
/// <para>Averages all the elements of a sequence.  If called with a field name,
/// averages all the values of that field in the sequence, skipping
/// elements of the sequence that lack that field.  If called with a
/// function, calls that function on every element of the sequence and
/// averages the results, skipping elements of the sequence where that
/// function returns <code>null</code> or a non-existence error.</para>
/// </summary>
/// <example><para>Example: What's the average of 3, 5, and 7?</para>
/// <code>r.expr([3, 5, 7]).avg().run(conn, callback)
/// </code></example>
                        public Avg Avg ( Javascript js )
                        {
                           return avg ( js );
                        }
                        internal Avg avg ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Avg (arguments );
                        }
/// <summary>
/// <para>Averages all the elements of a sequence.  If called with a field name,
/// averages all the values of that field in the sequence, skipping
/// elements of the sequence that lack that field.  If called with a
/// function, calls that function on every element of the sequence and
/// averages the results, skipping elements of the sequence where that
/// function returns <code>null</code> or a non-existence error.</para>
/// </summary>
/// <example><para>Example: What's the average of 3, 5, and 7?</para>
/// <code>r.expr([3, 5, 7]).avg().run(conn, callback)
/// </code></example>
                        public Avg Avg ( Object exprA )
                        {
                           return avg ( exprA );
                        }
                        internal Avg avg ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Avg (arguments );
                        }
/// <summary>
/// <para>Averages all the elements of a sequence.  If called with a field name,
/// averages all the values of that field in the sequence, skipping
/// elements of the sequence that lack that field.  If called with a
/// function, calls that function on every element of the sequence and
/// averages the results, skipping elements of the sequence where that
/// function returns <code>null</code> or a non-existence error.</para>
/// </summary>
/// <example><para>Example: What's the average of 3, 5, and 7?</para>
/// <code>r.expr([3, 5, 7]).avg().run(conn, callback)
/// </code></example>
                        public Avg Avg ( ReqlFunction1 func1 )
                        {
                           return avg ( func1 );
                        }
                        internal Avg avg ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Avg (arguments );
                        }
/// <summary>
/// <para>Finds the minimum element of a sequence.</para>
/// </summary>
/// <example><para>Example: Return the minimum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).min().run(conn, callback);
/// </code></example>
                        public Min Min (  )
                        {
                           return min (  );
                        }
                        internal Min min (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Min (arguments );
                        }
/// <summary>
/// <para>Finds the minimum element of a sequence.</para>
/// </summary>
/// <example><para>Example: Return the minimum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).min().run(conn, callback);
/// </code></example>
                        public Min Min ( Javascript js )
                        {
                           return min ( js );
                        }
                        internal Min min ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Min (arguments );
                        }
/// <summary>
/// <para>Finds the minimum element of a sequence.</para>
/// </summary>
/// <example><para>Example: Return the minimum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).min().run(conn, callback);
/// </code></example>
                        public Min Min ( Object exprA )
                        {
                           return min ( exprA );
                        }
                        internal Min min ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Min (arguments );
                        }
/// <summary>
/// <para>Finds the minimum element of a sequence.</para>
/// </summary>
/// <example><para>Example: Return the minimum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).min().run(conn, callback);
/// </code></example>
                        public Min Min ( ReqlFunction1 func1 )
                        {
                           return min ( func1 );
                        }
                        internal Min min ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Min (arguments );
                        }
/// <summary>
/// <para>Finds the maximum element of a sequence.</para>
/// </summary>
/// <example><para>Example: Return the maximum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).max().run(conn, callback);
/// </code></example>
                        public Max Max (  )
                        {
                           return max (  );
                        }
                        internal Max max (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Max (arguments );
                        }
/// <summary>
/// <para>Finds the maximum element of a sequence.</para>
/// </summary>
/// <example><para>Example: Return the maximum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).max().run(conn, callback);
/// </code></example>
                        public Max Max ( Javascript js )
                        {
                           return max ( js );
                        }
                        internal Max max ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Max (arguments );
                        }
/// <summary>
/// <para>Finds the maximum element of a sequence.</para>
/// </summary>
/// <example><para>Example: Return the maximum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).max().run(conn, callback);
/// </code></example>
                        public Max Max ( Object exprA )
                        {
                           return max ( exprA );
                        }
                        internal Max max ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Max (arguments );
                        }
/// <summary>
/// <para>Finds the maximum element of a sequence.</para>
/// </summary>
/// <example><para>Example: Return the maximum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).max().run(conn, callback);
/// </code></example>
                        public Max Max ( ReqlFunction1 func1 )
                        {
                           return max ( func1 );
                        }
                        internal Max max ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Max (arguments );
                        }
/// <summary>
/// <para>Splits a string into substrings.  Splits on whitespace when called
/// with no arguments.  When called with a separator, splits on that
/// separator.  When called with a separator and a maximum number of
/// splits, splits on that separator at most <code>max_splits</code> times.  (Can be
/// called with <code>null</code> as the separator if you want to split on whitespace
/// while still specifying <code>max_splits</code>.)</para>
/// <para>Mimics the behavior of Python's <code>string.split</code> in edge cases, except
/// for splitting on the empty string, which instead produces an array of
/// single-character strings.</para>
/// </summary>
/// <example><para>Example: Split on whitespace.</para>
/// <code>r.expr("foo  bar bax").split().run(conn, callback)
/// </code></example>
                        public Split Split (  )
                        {
                           return split (  );
                        }
                        internal Split split (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Split (arguments );
                        }
/// <summary>
/// <para>Splits a string into substrings.  Splits on whitespace when called
/// with no arguments.  When called with a separator, splits on that
/// separator.  When called with a separator and a maximum number of
/// splits, splits on that separator at most <code>max_splits</code> times.  (Can be
/// called with <code>null</code> as the separator if you want to split on whitespace
/// while still specifying <code>max_splits</code>.)</para>
/// <para>Mimics the behavior of Python's <code>string.split</code> in edge cases, except
/// for splitting on the empty string, which instead produces an array of
/// single-character strings.</para>
/// </summary>
/// <example><para>Example: Split on whitespace.</para>
/// <code>r.expr("foo  bar bax").split().run(conn, callback)
/// </code></example>
                        public Split Split ( Object exprA )
                        {
                           return split ( exprA );
                        }
                        internal Split split ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Split (arguments );
                        }
/// <summary>
/// <para>Splits a string into substrings.  Splits on whitespace when called
/// with no arguments.  When called with a separator, splits on that
/// separator.  When called with a separator and a maximum number of
/// splits, splits on that separator at most <code>max_splits</code> times.  (Can be
/// called with <code>null</code> as the separator if you want to split on whitespace
/// while still specifying <code>max_splits</code>.)</para>
/// <para>Mimics the behavior of Python's <code>string.split</code> in edge cases, except
/// for splitting on the empty string, which instead produces an array of
/// single-character strings.</para>
/// </summary>
/// <example><para>Example: Split on whitespace.</para>
/// <code>r.expr("foo  bar bax").split().run(conn, callback)
/// </code></example>
                        public Split Split ( Object exprA, Object exprB )
                        {
                           return split ( exprA, exprB );
                        }
                        internal Split split ( Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Split (arguments );
                        }
/// <summary>
/// <para>Takes a grouped stream or grouped data and turns it into an array of
/// objects representing the groups.  Any commands chained after <code>ungroup</code>
/// will operate on this array, rather than operating on each group
/// individually.  This is useful if you want to e.g. order the groups by
/// the value of their reduction.</para>
/// </summary>
/// <example><para>Example: What is the maximum number of points scored by each
/// player, with the highest scorers first?</para>
/// <code>r.table('games')
///     .group('player').max('points')['points']
///     .ungroup().orderBy(r.desc('reduction')).run(conn)
/// </code></example>
                        public Ungroup Ungroup (  )
                        {
                           return ungroup (  );
                        }
                        internal Ungroup ungroup (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Ungroup (arguments );
                        }
/// <summary>
/// <para>Return a changefeed, an infinite stream of objects representing changes to a query. A changefeed may return changes to a table or an individual document (a "point" changefeed), and document transformation commands such as <code>filter</code> or <code>map</code> may be used before the <code>changes</code> command to affect the output.</para>
/// </summary>
/// <example><para>Example: Subscribe to the changes on a table.</para>
/// <code>r.table('games').changes().run(conn, function(err, cursor) {
///   cursor.each(console.log)
/// })
/// </code></example>
                        public Changes Changes (  )
                        {
                           return changes (  );
                        }
                        internal Changes changes (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Changes (arguments );
                        }
/// <summary>
/// <para>Convert a ReQL geometry object to a [GeoJSON][] object.</para>
/// </summary>
/// <example><para>Example: Convert a ReQL geometry object to a GeoJSON object.</para>
/// <code>r.table(geo).get('sfo')('location').toGeojson.run(conn, callback);
/// // result passed to callback
/// {
///     'type': 'Point',
///     'coordinates': [ -122.423246, 37.779388 ]
/// }
/// </code></example>
                        public ToGeojson ToGeojson (  )
                        {
                           return toGeojson (  );
                        }
                        internal ToGeojson toGeojson (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new ToGeojson (arguments );
                        }
/// <summary>
/// <para>Compute the distance between a point and another geometry object. At least one of the geometry objects specified must be a point.</para>
/// </summary>
/// <example><para>Example: Compute the distance between two points on the Earth in kilometers.</para>
/// <code>var point1 = r.point(-122.423246,37.779388);
/// var point2 = r.point(-117.220406,32.719464);
/// r.distance(point1, point2, {unit: 'km'}).run(conn, callback);
/// // result returned to callback 
/// 734.1252496021841
/// </code></example>
                        public Distance Distance ( Object exprA )
                        {
                           return distance ( exprA );
                        }
                        internal Distance distance ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Distance (arguments );
                        }
/// <summary>
/// <para>Tests whether two geometry objects intersect with one another. When applied to a sequence of geometry objects, <code>intersects</code> acts as a <a href="/api/javascript/filter">filter</a>, returning a sequence of objects from the sequence that intersect with the argument.</para>
/// </summary>
/// <example><para>Example: Is <code>point2</code> within a 2000-meter circle around <code>point1</code>?</para>
/// <code>var point1 = r.point(-117.220406,32.719464);
/// var point2 = r.point(-117.206201,32.725186);
/// r.circle(point1, 2000).intersects(point2).run(conn, callback);
/// // result returned to callback 
/// true
/// </code></example>
                        public Intersects Intersects ( Object exprA )
                        {
                           return intersects ( exprA );
                        }
                        internal Intersects intersects ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Intersects (arguments );
                        }
/// <summary>
/// <para>Tests whether a geometry object is completely contained within another. When applied to a sequence of geometry objects, <code>includes</code> acts as a <a href="/api/javascript/filter">filter</a>, returning a sequence of objects from the sequence that include the argument.</para>
/// </summary>
/// <example><para>Example: Is <code>point2</code> included within a 2000-meter circle around <code>point1</code>?</para>
/// <code>var point1 = r.point(-117.220406,32.719464);
/// var point2 = r.point(-117.206201,32.725186);
/// r.circle(point1, 2000).includes(point2).run(conn, callback);
/// // result returned to callback 
/// true
/// </code></example>
                        public Includes Includes ( Object exprA )
                        {
                           return includes ( exprA );
                        }
                        internal Includes includes ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Includes (arguments );
                        }
/// <summary>
/// <para>Convert a Line object into a Polygon object. If the last point does not specify the same coordinates as the first point, <code>polygon</code> will close the polygon by connecting them.</para>
/// </summary>
/// <example><para>Example: Create a line object and then convert it to a polygon.</para>
/// <code>r.table('geo').insert({
///     id: 201,
///     rectangle: r.line(
///         [-122.423246,37.779388],
///         [-122.423246,37.329898],
///         [-121.886420,37.329898],
///         [-121.886420,37.779388]
///     )
/// }).run(conn, callback);
/// 
/// r.table('geo').get(201).update({
///     rectangle: r.row('rectangle').fill()
/// }).run(conn, callback);
/// </code></example>
                        public Fill Fill (  )
                        {
                           return fill (  );
                        }
                        internal Fill fill (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Fill (arguments );
                        }
/// <summary>
/// <para>Use <code>polygon2</code> to "punch out" a hole in <code>polygon1</code>. <code>polygon2</code> must be completely contained within <code>polygon1</code> and must have no holes itself (it must not be the output of <code>polygonSub</code> itself).</para>
/// </summary>
/// <example><para>Example: Define a polygon with a hole punched in it.</para>
/// <code>var outerPolygon = r.polygon(
///     [-122.4,37.7],
///     [-122.4,37.3],
///     [-121.8,37.3],
///     [-121.8,37.7]
/// );
/// var innerPolygon = r.polygon(
///     [-122.3,37.4],
///     [-122.3,37.6],
///     [-122.0,37.6],
///     [-122.0,37.4]
/// );
/// outerPolygon.polygonSub(innerpolygon).run(conn, callback);
/// </code></example>
                        public PolygonSub PolygonSub ( Object exprA )
                        {
                           return polygonSub ( exprA );
                        }
                        internal PolygonSub polygonSub ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new PolygonSub (arguments );
                        }
                        public Values Values (  )
                        {
                           return values (  );
                        }
                        internal Values values (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Values (arguments );
                        }

    
    }
}
