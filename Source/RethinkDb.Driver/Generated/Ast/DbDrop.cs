












//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;
using System.Collections;
using System.Collections.Generic;


namespace RethinkDb.Driver.Ast {

    public class DbDrop : ReqlExpr {

    
    
    
/// <summary>
/// <para>Drop a database. The database, all its tables, and corresponding data will be deleted.</para>
/// <para>If successful, the operation returns the object <code>{dropped: 1}</code>. If the specified database
/// doesn't exist a <code>RqlRuntimeError</code> is thrown.</para>
/// </summary>
/// <example><para>Example: Drop a database named 'superheroes'.</para>
/// <code>r.dbDrop('superheroes').run(conn, callback)
/// </code></example>
        public DbDrop (object arg) : this(new Arguments(arg), null) {
        }
/// <summary>
/// <para>Drop a database. The database, all its tables, and corresponding data will be deleted.</para>
/// <para>If successful, the operation returns the object <code>{dropped: 1}</code>. If the specified database
/// doesn't exist a <code>RqlRuntimeError</code> is thrown.</para>
/// </summary>
/// <example><para>Example: Drop a database named 'superheroes'.</para>
/// <code>r.dbDrop('superheroes').run(conn, callback)
/// </code></example>
        public DbDrop (Arguments args) : this(args, null) {
        }
/// <summary>
/// <para>Drop a database. The database, all its tables, and corresponding data will be deleted.</para>
/// <para>If successful, the operation returns the object <code>{dropped: 1}</code>. If the specified database
/// doesn't exist a <code>RqlRuntimeError</code> is thrown.</para>
/// </summary>
/// <example><para>Example: Drop a database named 'superheroes'.</para>
/// <code>r.dbDrop('superheroes').run(conn, callback)
/// </code></example>
        public DbDrop (Arguments args, object optargs)
             : this(TermType.DB_DROP, args, optargs) {
        }

    protected DbDrop (TermType termType, Arguments args, object optargs) : base(termType, args, optargs)
    {
    }


    



    


    

    


    
    }
}
