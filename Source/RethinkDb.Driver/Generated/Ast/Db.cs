










//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;
using System.Collections.Generic;


namespace RethinkDb.Driver.Ast {

    public class Db : ReqlAst {

    
    
    
/// <summary>
/// Reference a database.
/// </summary>
/// <example><strong>Example:</strong> Explicitly specify a database for a query.
/// <code>r.db('heroes').table('marvel').run(conn, callback)
/// </code></example>
        public Db (object arg) : this(new Arguments(arg), null) {
        }
/// <summary>
/// Reference a database.
/// </summary>
/// <example><strong>Example:</strong> Explicitly specify a database for a query.
/// <code>r.db('heroes').table('marvel').run(conn, callback)
/// </code></example>
        public Db (Arguments args) : this(args, null) {
        }
/// <summary>
/// Reference a database.
/// </summary>
/// <example><strong>Example:</strong> Explicitly specify a database for a query.
/// <code>r.db('heroes').table('marvel').run(conn, callback)
/// </code></example>
        public Db (Arguments args, OptArgs optargs)
             : this(TermType.DB, args, optargs) {
        }

    protected Db (TermType termType, Arguments args, OptArgs optargs) : base(termType, args, optargs)
    {
    }


    



    

    

/// <summary>
/// Select all documents in a table. This command can be chained with other commands to do
/// further processing on the data.
/// </summary>
/// <example><strong>Example:</strong> Return all documents in the table 'marvel' of the default database.
/// <code>r.table('marvel').run(conn, callback)
/// </code></example>
                    public Table table ( Object expr )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(expr);
                        return new Table (arguments);
                    }
/// <summary>
/// Create a table. A RethinkDB table is a collection of JSON documents.
/// </summary>
/// <example><strong>Example:</strong> Create a table named 'dc_universe' with the default settings.
/// <code>r.db('test').tableCreate('dc_universe').run(conn, callback)
/// </code></example>
                    public TableCreate tableCreate ( Object expr )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(expr);
                        return new TableCreate (arguments);
                    }
/// <summary>
/// Drop a table. The table and all its data will be deleted.
/// </summary>
/// <example><strong>Example:</strong> Drop a table named 'dc_universe'.
/// <code>r.db('test').tableDrop('dc_universe').run(conn, callback)
/// </code></example>
                    public TableDrop tableDrop ( Object expr )
                    {
                        Arguments arguments = new Arguments(this);
                        arguments.CoerceAndAdd(expr);
                        return new TableDrop (arguments);
                    }
/// <summary>
/// List all table names in a database. The result is a list of strings.
/// </summary>
/// <example><strong>Example:</strong> List all tables of the 'test' database.
/// <code>r.db('test').tableList().run(conn, callback)
/// </code></example>
                    public TableList tableList (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new TableList (arguments);
                    }
/// <summary>
/// Query (read and/or update) the configurations for individual tables or databases.
/// </summary>
/// <example><strong>Example:</strong> Get the configuration for the <code>users</code> table.
/// <code>&gt; r.table('users').config().run(conn, callback);
/// </code></example>
                    public Config config (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Config (arguments);
                    }
/// <summary>
/// Wait for a table or all the tables in a database to be ready. A table may be temporarily unavailable after creation, rebalancing or reconfiguring. The <code>wait</code> command blocks until the given table (or database) is fully up to date.
/// </summary>
/// <example><strong>Example:</strong> Wait for a table to be ready.
/// <code>&gt; r.table('superheroes').wait().run(conn, callback);
/// </code></example>
                    public Wait wait_ (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Wait (arguments);
                    }
/// <summary>
/// Reconfigure a table's sharding and replication.
/// </summary>
/// <example><strong>Example:</strong> Reconfigure a table.
/// <code>&gt; r.table('superheroes').reconfigure({shards: 2, replicas: 1}).run(conn, callback);
/// </code></example>
                    public Reconfigure reconfigure (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Reconfigure (arguments);
                    }
/// <summary>
/// Rebalances the shards of a table. When called on a database, all the tables in that database will be rebalanced.
/// </summary>
/// <example><strong>Example:</strong> Rebalance a table.
/// <code>&gt; r.table('superheroes').rebalance().run(conn, callback);
/// </code></example>
                    public Rebalance rebalance (  )
                    {
                        Arguments arguments = new Arguments(this);
                        return new Rebalance (arguments);
                    }

    
    }
}
