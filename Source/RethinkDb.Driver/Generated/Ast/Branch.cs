










//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;
using System.Collections.Generic;


namespace RethinkDb.Driver.Ast {

    public class Branch : ReqlExpr {

    
    
    
/// <summary>
/// If the <code>test</code> expression returns <code>false</code> or <code>null</code>, the <code>false_branch</code> will be evaluated.
/// Otherwise, the <code>true_branch</code> will be evaluated.
/// The <code>branch</code> command is effectively an <code>if</code> renamed due to language constraints.
/// The type of the result is determined by the type of the branch that gets executed.
/// </summary>
/// <example><strong>Example:</strong> Return heroes and superheroes.
/// <code>r.table('marvel').map(
///     r.branch(
///         r.row('victories').gt(100),
///         r.row('name').add(' is a superhero'),
///         r.row('name').add(' is a hero')
///     )
/// ).run(conn, callback)
/// </code></example>
        public Branch (object arg) : this(new Arguments(arg), null) {
        }
/// <summary>
/// If the <code>test</code> expression returns <code>false</code> or <code>null</code>, the <code>false_branch</code> will be evaluated.
/// Otherwise, the <code>true_branch</code> will be evaluated.
/// The <code>branch</code> command is effectively an <code>if</code> renamed due to language constraints.
/// The type of the result is determined by the type of the branch that gets executed.
/// </summary>
/// <example><strong>Example:</strong> Return heroes and superheroes.
/// <code>r.table('marvel').map(
///     r.branch(
///         r.row('victories').gt(100),
///         r.row('name').add(' is a superhero'),
///         r.row('name').add(' is a hero')
///     )
/// ).run(conn, callback)
/// </code></example>
        public Branch (Arguments args) : this(args, null) {
        }
/// <summary>
/// If the <code>test</code> expression returns <code>false</code> or <code>null</code>, the <code>false_branch</code> will be evaluated.
/// Otherwise, the <code>true_branch</code> will be evaluated.
/// The <code>branch</code> command is effectively an <code>if</code> renamed due to language constraints.
/// The type of the result is determined by the type of the branch that gets executed.
/// </summary>
/// <example><strong>Example:</strong> Return heroes and superheroes.
/// <code>r.table('marvel').map(
///     r.branch(
///         r.row('victories').gt(100),
///         r.row('name').add(' is a superhero'),
///         r.row('name').add(' is a hero')
///     )
/// ).run(conn, callback)
/// </code></example>
        public Branch (Arguments args, OptArgs optargs)
             : this(TermType.BRANCH, args, optargs) {
        }

    protected Branch (TermType termType, Arguments args, OptArgs optargs) : base(termType, args, optargs)
    {
    }


    



    

    


    
    }
}
