










//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;
using System.Collections.Generic;


namespace RethinkDb.Driver.Ast {

    public class Update : ReqlExpr {

    
    
    
/// <summary>
/// Update JSON documents in a table. Accepts a JSON document, a ReQL expression, or a
/// combination of the two. You can pass options like <code>returnChanges</code> that will return the old
/// and new values of the row you have modified.
/// </summary>
/// <example><strong>Example:</strong> Update the status of the post with <code>id</code> of <code>1</code> to <code>published</code>.
/// <code>r.table("posts").get(1).update({status: "published"}).run(conn, callback)
/// </code></example>
        public Update (object arg) : this(new Arguments(arg), null) {
        }
/// <summary>
/// Update JSON documents in a table. Accepts a JSON document, a ReQL expression, or a
/// combination of the two. You can pass options like <code>returnChanges</code> that will return the old
/// and new values of the row you have modified.
/// </summary>
/// <example><strong>Example:</strong> Update the status of the post with <code>id</code> of <code>1</code> to <code>published</code>.
/// <code>r.table("posts").get(1).update({status: "published"}).run(conn, callback)
/// </code></example>
        public Update (Arguments args) : this(args, null) {
        }
/// <summary>
/// Update JSON documents in a table. Accepts a JSON document, a ReQL expression, or a
/// combination of the two. You can pass options like <code>returnChanges</code> that will return the old
/// and new values of the row you have modified.
/// </summary>
/// <example><strong>Example:</strong> Update the status of the post with <code>id</code> of <code>1</code> to <code>published</code>.
/// <code>r.table("posts").get(1).update({status: "published"}).run(conn, callback)
/// </code></example>
        public Update (Arguments args, OptArgs optargs)
             : this(TermType.UPDATE, args, optargs) {
        }

    protected Update (TermType termType, Arguments args, OptArgs optargs) : base(termType, args, optargs)
    {
    }


    



    

    


    
    }
}
