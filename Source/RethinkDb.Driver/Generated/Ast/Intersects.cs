












//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;
using System.Collections;
using System.Collections.Generic;


namespace RethinkDb.Driver.Ast {

    public class Intersects : ReqlExpr {

    
    
    
/// <summary>
/// <para>Tests whether two geometry objects intersect with one another. When applied to a sequence of geometry objects, <code>intersects</code> acts as a <a href="/api/javascript/filter">filter</a>, returning a sequence of objects from the sequence that intersect with the argument.</para>
/// </summary>
/// <example><para>Example: Is <code>point2</code> within a 2000-meter circle around <code>point1</code>?</para>
/// <code>var point1 = r.point(-117.220406,32.719464);
/// var point2 = r.point(-117.206201,32.725186);
/// r.circle(point1, 2000).intersects(point2).run(conn, callback);
/// // result returned to callback 
/// true
/// </code></example>
        public Intersects (object arg) : this(new Arguments(arg), null) {
        }
/// <summary>
/// <para>Tests whether two geometry objects intersect with one another. When applied to a sequence of geometry objects, <code>intersects</code> acts as a <a href="/api/javascript/filter">filter</a>, returning a sequence of objects from the sequence that intersect with the argument.</para>
/// </summary>
/// <example><para>Example: Is <code>point2</code> within a 2000-meter circle around <code>point1</code>?</para>
/// <code>var point1 = r.point(-117.220406,32.719464);
/// var point2 = r.point(-117.206201,32.725186);
/// r.circle(point1, 2000).intersects(point2).run(conn, callback);
/// // result returned to callback 
/// true
/// </code></example>
        public Intersects (Arguments args) : this(args, null) {
        }
/// <summary>
/// <para>Tests whether two geometry objects intersect with one another. When applied to a sequence of geometry objects, <code>intersects</code> acts as a <a href="/api/javascript/filter">filter</a>, returning a sequence of objects from the sequence that intersect with the argument.</para>
/// </summary>
/// <example><para>Example: Is <code>point2</code> within a 2000-meter circle around <code>point1</code>?</para>
/// <code>var point1 = r.point(-117.220406,32.719464);
/// var point2 = r.point(-117.206201,32.725186);
/// r.circle(point1, 2000).intersects(point2).run(conn, callback);
/// // result returned to callback 
/// true
/// </code></example>
        public Intersects (Arguments args, OptArgs optargs)
         : base(TermType.INTERSECTS, args, optargs) {
        }


    



    


    

    


    
    }
}
