












//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;
using System.Collections;
using System.Collections.Generic;


namespace RethinkDb.Driver.Ast {

    public class OffsetsOf : ReqlExpr {

    
    
    
/// <summary>
/// <para>Get the indexes of an element in a sequence. If the argument is a predicate, get the indexes of all elements matching it.</para>
/// </summary>
/// <example><para>Example: Find the position of the letter 'c'.</para>
/// <code>r.expr(['a','b','c']).offsetsOf('c').run(conn, callback)
/// </code></example>
        public OffsetsOf (object arg) : this(new Arguments(arg), null) {
        }
/// <summary>
/// <para>Get the indexes of an element in a sequence. If the argument is a predicate, get the indexes of all elements matching it.</para>
/// </summary>
/// <example><para>Example: Find the position of the letter 'c'.</para>
/// <code>r.expr(['a','b','c']).offsetsOf('c').run(conn, callback)
/// </code></example>
        public OffsetsOf (Arguments args) : this(args, null) {
        }
/// <summary>
/// <para>Get the indexes of an element in a sequence. If the argument is a predicate, get the indexes of all elements matching it.</para>
/// </summary>
/// <example><para>Example: Find the position of the letter 'c'.</para>
/// <code>r.expr(['a','b','c']).offsetsOf('c').run(conn, callback)
/// </code></example>
        public OffsetsOf (Arguments args, object optargs)
         : base(TermType.OFFSETS_OF, args, optargs) {
        }


    



    


    

    


    
    }
}
