










//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;
using System.Collections.Generic;


namespace RethinkDb.Driver.Ast {

    public class Now : ReqlExpr {

    
    
    
/// <summary>
/// Return a time object representing the current time in UTC. The command now() is computed once when the server receives the query, so multiple instances of r.now() will always return the same time inside a query.
/// </summary>
/// <example><strong>Example:</strong> Add a new user with the time at which he subscribed.
/// <code>r.table("users").insert({
///     name: "John",
///     subscription_date: r.now()
/// }).run(conn, callback)
/// </code></example>
        public Now (object arg) : this(new Arguments(arg), null) {
        }
/// <summary>
/// Return a time object representing the current time in UTC. The command now() is computed once when the server receives the query, so multiple instances of r.now() will always return the same time inside a query.
/// </summary>
/// <example><strong>Example:</strong> Add a new user with the time at which he subscribed.
/// <code>r.table("users").insert({
///     name: "John",
///     subscription_date: r.now()
/// }).run(conn, callback)
/// </code></example>
        public Now (Arguments args) : this(args, null) {
        }
/// <summary>
/// Return a time object representing the current time in UTC. The command now() is computed once when the server receives the query, so multiple instances of r.now() will always return the same time inside a query.
/// </summary>
/// <example><strong>Example:</strong> Add a new user with the time at which he subscribed.
/// <code>r.table("users").insert({
///     name: "John",
///     subscription_date: r.now()
/// }).run(conn, callback)
/// </code></example>
        public Now (Arguments args, OptArgs optargs)
             : this(TermType.NOW, args, optargs) {
        }

    protected Now (TermType termType, Arguments args, OptArgs optargs) : base(termType, args, optargs)
    {
    }


    



    

    


    
    }
}
