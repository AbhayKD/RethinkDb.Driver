










//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;
using System.Collections.Generic;


namespace RethinkDb.Driver.Ast {

    public class WithFields : ReqlExpr {

    
    
    
/// <summary>
/// Plucks one or more attributes from a sequence of objects, filtering out any objects in the sequence that do not have the specified fields. Functionally, this is identical to <code>hasFields</code> followed by <code>pluck</code> on a sequence.
/// </summary>
/// <example><strong>Example:</strong> Get a list of users and their posts, excluding any users who have not made any posts.
/// <code>r.table('users').withFields('id', 'username', 'posts').run(conn, callback)
/// </code></example>
        public WithFields (object arg) : this(new Arguments(arg), null) {
        }
/// <summary>
/// Plucks one or more attributes from a sequence of objects, filtering out any objects in the sequence that do not have the specified fields. Functionally, this is identical to <code>hasFields</code> followed by <code>pluck</code> on a sequence.
/// </summary>
/// <example><strong>Example:</strong> Get a list of users and their posts, excluding any users who have not made any posts.
/// <code>r.table('users').withFields('id', 'username', 'posts').run(conn, callback)
/// </code></example>
        public WithFields (Arguments args) : this(args, null) {
        }
/// <summary>
/// Plucks one or more attributes from a sequence of objects, filtering out any objects in the sequence that do not have the specified fields. Functionally, this is identical to <code>hasFields</code> followed by <code>pluck</code> on a sequence.
/// </summary>
/// <example><strong>Example:</strong> Get a list of users and their posts, excluding any users who have not made any posts.
/// <code>r.table('users').withFields('id', 'username', 'posts').run(conn, callback)
/// </code></example>
        public WithFields (Arguments args, OptArgs optargs)
             : this(TermType.WITH_FIELDS, args, optargs) {
        }

    protected WithFields (TermType termType, Arguments args, OptArgs optargs) : base(termType, args, optargs)
    {
    }


    



    

    


    
    }
}
