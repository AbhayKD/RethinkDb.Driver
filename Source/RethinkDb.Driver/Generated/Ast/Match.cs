










//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;
using System.Collections.Generic;


namespace RethinkDb.Driver.Ast {

    public class Match : ReqlExpr {

    
    
    
/// <summary>
/// <para>Matches against a regular expression. If there is a match, returns an object with the fields:</para>
/// <ul>
/// <li><code>str</code>: The matched string</li>
/// <li><code>start</code>: The matched string's start</li>
/// <li><code>end</code>: The matched string's end</li>
/// <li><code>groups</code>: The capture groups defined with parentheses</li>
/// </ul>
/// <para>If no match is found, returns <code>null</code>.</para>
/// </summary>
/// <example><para>Example: Get all users whose name starts with "A". </para>
/// <code>r.table('users').filter(function(doc){
///     return doc('name').match("^A")
/// }).run(conn, callback)
/// </code></example>
        public Match (object arg) : this(new Arguments(arg), null) {
        }
/// <summary>
/// <para>Matches against a regular expression. If there is a match, returns an object with the fields:</para>
/// <ul>
/// <li><code>str</code>: The matched string</li>
/// <li><code>start</code>: The matched string's start</li>
/// <li><code>end</code>: The matched string's end</li>
/// <li><code>groups</code>: The capture groups defined with parentheses</li>
/// </ul>
/// <para>If no match is found, returns <code>null</code>.</para>
/// </summary>
/// <example><para>Example: Get all users whose name starts with "A". </para>
/// <code>r.table('users').filter(function(doc){
///     return doc('name').match("^A")
/// }).run(conn, callback)
/// </code></example>
        public Match (Arguments args) : this(args, null) {
        }
/// <summary>
/// <para>Matches against a regular expression. If there is a match, returns an object with the fields:</para>
/// <ul>
/// <li><code>str</code>: The matched string</li>
/// <li><code>start</code>: The matched string's start</li>
/// <li><code>end</code>: The matched string's end</li>
/// <li><code>groups</code>: The capture groups defined with parentheses</li>
/// </ul>
/// <para>If no match is found, returns <code>null</code>.</para>
/// </summary>
/// <example><para>Example: Get all users whose name starts with "A". </para>
/// <code>r.table('users').filter(function(doc){
///     return doc('name').match("^A")
/// }).run(conn, callback)
/// </code></example>
        public Match (Arguments args, OptArgs optargs)
             : this(TermType.MATCH, args, optargs) {
        }

    protected Match (TermType termType, Arguments args, OptArgs optargs) : base(termType, args, optargs)
    {
    }


    



    

    


    
    }
}
