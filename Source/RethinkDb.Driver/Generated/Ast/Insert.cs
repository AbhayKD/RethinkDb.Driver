












//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;
using System.Collections;
using System.Collections.Generic;


namespace RethinkDb.Driver.Ast {

    public class Insert : ReqlExpr {

    
    
    
/// <summary>
/// <para>Insert JSON documents into a table. Accepts a single JSON document or an array of
/// documents.</para>
/// </summary>
/// <example><para>Example: Insert a document into the table <code>posts</code>.</para>
/// <code>r.table("posts").insert({
///     id: 1,
///     title: "Lorem ipsum",
///     content: "Dolor sit amet"
/// }).run(conn, callback)
/// </code></example>
        public Insert (object arg) : this(new Arguments(arg), null) {
        }
/// <summary>
/// <para>Insert JSON documents into a table. Accepts a single JSON document or an array of
/// documents.</para>
/// </summary>
/// <example><para>Example: Insert a document into the table <code>posts</code>.</para>
/// <code>r.table("posts").insert({
///     id: 1,
///     title: "Lorem ipsum",
///     content: "Dolor sit amet"
/// }).run(conn, callback)
/// </code></example>
        public Insert (Arguments args) : this(args, null) {
        }
/// <summary>
/// <para>Insert JSON documents into a table. Accepts a single JSON document or an array of
/// documents.</para>
/// </summary>
/// <example><para>Example: Insert a document into the table <code>posts</code>.</para>
/// <code>r.table("posts").insert({
///     id: 1,
///     title: "Lorem ipsum",
///     content: "Dolor sit amet"
/// }).run(conn, callback)
/// </code></example>
        public Insert (Arguments args, OptArgs optargs)
         : base(TermType.INSERT, args, optargs) {
        }


    



    
///<summary>
/// "durability": "E_DURABILITY",
///  "return_changes": [
///    "T_BOOL",
///    "always"
///  ],
///  "conflict": "E_CONFLICT"
///</summary>
        public Insert this[object optArgs] {
            get
            {
                var newOptargs = OptArgs.fromMap(this.OptArgs).with(optArgs);
        
                return new Insert (this.Args, newOptargs);
            }
        }
        
///<summary>
/// "durability": "E_DURABILITY",
///  "return_changes": [
///    "T_BOOL",
///    "always"
///  ],
///  "conflict": "E_CONFLICT"
///</summary>
        public Insert optArg(string key, object val){
            
            var newOptargs = OptArgs.fromMap(this.OptArgs).with(key, val);
        
            return new Insert (this.Args, newOptargs);
        }


    

    


    
    }
}
