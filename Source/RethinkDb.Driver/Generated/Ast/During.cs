










//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;
using System.Collections.Generic;


namespace RethinkDb.Driver.Ast {

    public class During : ReqlExpr {

    
    
    
/// <summary>
/// Return if a time is between two other times (by default, inclusive for the start, exclusive for the end).
/// </summary>
/// <example><strong>Example:</strong> Retrieve all the posts that were posted between December 1st, 2013 (inclusive) and December 10th, 2013 (exclusive).
/// <code>r.table("posts").filter(
///     r.row('date').during(r.time(2013, 12, 1), r.time(2013, 12, 10))
/// ).run(conn, callback)
/// </code></example>
        public During (object arg) : this(new Arguments(arg), null) {
        }
/// <summary>
/// Return if a time is between two other times (by default, inclusive for the start, exclusive for the end).
/// </summary>
/// <example><strong>Example:</strong> Retrieve all the posts that were posted between December 1st, 2013 (inclusive) and December 10th, 2013 (exclusive).
/// <code>r.table("posts").filter(
///     r.row('date').during(r.time(2013, 12, 1), r.time(2013, 12, 10))
/// ).run(conn, callback)
/// </code></example>
        public During (Arguments args) : this(args, null) {
        }
/// <summary>
/// Return if a time is between two other times (by default, inclusive for the start, exclusive for the end).
/// </summary>
/// <example><strong>Example:</strong> Retrieve all the posts that were posted between December 1st, 2013 (inclusive) and December 10th, 2013 (exclusive).
/// <code>r.table("posts").filter(
///     r.row('date').during(r.time(2013, 12, 1), r.time(2013, 12, 10))
/// ).run(conn, callback)
/// </code></example>
        public During (Arguments args, OptArgs optargs)
             : this(TermType.DURING, args, optargs) {
        }

    protected During (TermType termType, Arguments args, OptArgs optargs) : base(termType, args, optargs)
    {
    }


    



    

    


    
    }
}
