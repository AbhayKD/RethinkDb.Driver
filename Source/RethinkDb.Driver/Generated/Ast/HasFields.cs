










//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;
using System.Collections.Generic;


namespace RethinkDb.Driver.Ast {

    public class HasFields : ReqlExpr {

    
    
    
/// <summary>
/// Test if an object has one or more fields. An object has a field if it has that key and the key has a non-null value. For instance, the object <code>{'a': 1,'b': 2,'c': null}</code> has the fields <code>a</code> and <code>b</code>.
/// </summary>
/// <example><strong>Example:</strong> Return the players who have won games.
/// <code>r.table('players').hasFields('games_won').run(conn, callback)
/// </code></example>
        public HasFields (object arg) : this(new Arguments(arg), null) {
        }
/// <summary>
/// Test if an object has one or more fields. An object has a field if it has that key and the key has a non-null value. For instance, the object <code>{'a': 1,'b': 2,'c': null}</code> has the fields <code>a</code> and <code>b</code>.
/// </summary>
/// <example><strong>Example:</strong> Return the players who have won games.
/// <code>r.table('players').hasFields('games_won').run(conn, callback)
/// </code></example>
        public HasFields (Arguments args) : this(args, null) {
        }
/// <summary>
/// Test if an object has one or more fields. An object has a field if it has that key and the key has a non-null value. For instance, the object <code>{'a': 1,'b': 2,'c': null}</code> has the fields <code>a</code> and <code>b</code>.
/// </summary>
/// <example><strong>Example:</strong> Return the players who have won games.
/// <code>r.table('players').hasFields('games_won').run(conn, callback)
/// </code></example>
        public HasFields (Arguments args, OptArgs optargs)
             : this(TermType.HAS_FIELDS, args, optargs) {
        }

    protected HasFields (TermType termType, Arguments args, OptArgs optargs) : base(termType, args, optargs)
    {
    }


    



    

    


    
    }
}
