








//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;

namespace RethinkDb.Driver.Ast {
    public class TopLevel {

        public ReqlExpr Expr(Object value){
            return expr(value);
        }
        internal ReqlExpr expr(Object value){
            return Util.ToReqlExpr(value);
        }


        public ReqlExpr Row(params object[] values) {
            return row(values);
        }
        internal ReqlExpr row(params object[] values) {
            throw new ReqlDriverError("r.row is not implemented in the C# driver. Use lambda syntax instead.");
        }

        public MapObject HashMap(object key, object val) {
            return new MapObject().with(key, val);
        }
        internal MapObject hashMap(object key, object val) {
            return new MapObject().with(key, val);
        }

        public MapObject HashMap()
        {
            return hashMap();
        }
        internal MapObject hashMap()
        {
            return new MapObject();
        }


        public IList Array(params object[] values){
            return array(values);
        }
        internal IList array(params object[] values){
            return values.ToList();
        }

                            public Javascript Js ( Object expr )
                            {
                               return js ( expr );
                            }
                            internal Javascript js ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Javascript (arguments);
                            }
/// <summary>
/// <para>Return a UUID (universally unique identifier), a string that can be used as a unique ID.</para>
///</summary>
/// <example><para>Example: Generate a UUID.</para>
/// <code>&gt; r.uuid().run(conn, callback)
/// // result returned to callback
/// 27961a0e-f4e8-4eb3-bf95-c5203e1d87b9
/// </code></example>
                            public Uuid Uuid (  )
                            {
                               return uuid (  );
                            }
                            internal Uuid uuid (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Uuid (arguments);
                            }
/// <summary>
/// <para>Return a UUID (universally unique identifier), a string that can be used as a unique ID.</para>
///</summary>
/// <example><para>Example: Generate a UUID.</para>
/// <code>&gt; r.uuid().run(conn, callback)
/// // result returned to callback
/// 27961a0e-f4e8-4eb3-bf95-c5203e1d87b9
/// </code></example>
                            public Uuid Uuid ( Object expr )
                            {
                               return uuid ( expr );
                            }
                            internal Uuid uuid ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Uuid (arguments);
                            }
/// <summary>
/// <para>Retrieve data from the specified URL over HTTP.  The return type depends on the <code>resultFormat</code> option, which checks the <code>Content-Type</code> of the response by default.</para>
///</summary>
/// <example><para>Example: Perform a simple HTTP <code>GET</code> request, and store the result in a table.</para>
/// <code>r.table('posts').insert(r.http('http://httpbin.org/get')).run(conn, callback)
/// </code></example>
                            public Http Http ( Object expr )
                            {
                               return http ( expr );
                            }
                            internal Http http ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Http (arguments);
                            }
/// <summary>
/// <para>Throw a runtime error. If called with no arguments inside the second argument to <code>default</code>, re-throw the current error.</para>
///</summary>
/// <example><para>Example: Iron Man can't possibly have lost a battle:</para>
/// <code>r.table('marvel').get('IronMan').do(function(ironman) {
///     return r.branch(ironman('victories').lt(ironman('battles')),
///         r.error('impossible code path'),
///         ironman)
/// }).run(conn, callback)
/// </code></example>
                            public Error Error (  )
                            {
                               return error (  );
                            }
                            internal Error error (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Error (arguments);
                            }
/// <summary>
/// <para>Throw a runtime error. If called with no arguments inside the second argument to <code>default</code>, re-throw the current error.</para>
///</summary>
/// <example><para>Example: Iron Man can't possibly have lost a battle:</para>
/// <code>r.table('marvel').get('IronMan').do(function(ironman) {
///     return r.branch(ironman('victories').lt(ironman('battles')),
///         r.error('impossible code path'),
///         ironman)
/// }).run(conn, callback)
/// </code></example>
                            public Error Error ( Object expr )
                            {
                               return error ( expr );
                            }
                            internal Error error ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Error (arguments);
                            }
/// <summary>
/// <para>Reference a database.</para>
///</summary>
/// <example><para>Example: Explicitly specify a database for a query.</para>
/// <code>r.db('heroes').table('marvel').run(conn, callback)
/// </code></example>
                            public Db Db ( Object expr )
                            {
                               return db ( expr );
                            }
                            internal Db db ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Db (arguments);
                            }
/// <summary>
/// <para>Select all documents in a table. This command can be chained with other commands to do
/// further processing on the data.</para>
///</summary>
/// <example><para>Example: Return all documents in the table 'marvel' of the default database.</para>
/// <code>r.table('marvel').run(conn, callback)
/// </code></example>
                            public Table Table ( Object expr )
                            {
                               return table ( expr );
                            }
                            internal Table table ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Table (arguments);
                            }
/// <summary>
/// <para>Test if two values are equal.</para>
///</summary>
/// <example><para>Example: Does 2 equal 2?</para>
/// <code>r.expr(2).eq(2).run(conn, callback)
/// </code></example>
                            public Eq Eq ( Object expr, Object exprA, params object[] exprs )
                            {
                               return eq ( expr, exprA, exprs );
                            }
                            internal Eq eq ( Object expr, Object exprA, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAddAll(exprs);
                                return new Eq (arguments);
                            }
/// <summary>
/// <para>Test if two values are not equal.</para>
///</summary>
/// <example><para>Example: Does 2 not equal 2?</para>
/// <code>r.expr(2).ne(2).run(conn, callback)
/// </code></example>
                            public Ne Ne ( Object expr, Object exprA, params object[] exprs )
                            {
                               return ne ( expr, exprA, exprs );
                            }
                            internal Ne ne ( Object expr, Object exprA, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAddAll(exprs);
                                return new Ne (arguments);
                            }
/// <summary>
/// <para>Test if the first value is less than other.</para>
///</summary>
/// <example><para>Example: Is 2 less than 2?</para>
/// <code>r.expr(2).lt(2).run(conn, callback)
/// </code></example>
                            public Lt Lt ( Object expr, Object exprA, params object[] exprs )
                            {
                               return lt ( expr, exprA, exprs );
                            }
                            internal Lt lt ( Object expr, Object exprA, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAddAll(exprs);
                                return new Lt (arguments);
                            }
/// <summary>
/// <para>Test if the first value is less than or equal to other.</para>
///</summary>
/// <example><para>Example: Is 2 less than or equal to 2?</para>
/// <code>r.expr(2).le(2).run(conn, callback)
/// </code></example>
                            public Le Le ( Object expr, Object exprA, params object[] exprs )
                            {
                               return le ( expr, exprA, exprs );
                            }
                            internal Le le ( Object expr, Object exprA, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAddAll(exprs);
                                return new Le (arguments);
                            }
/// <summary>
/// <para>Test if the first value is greater than other.</para>
///</summary>
/// <example><para>Example: Is 2 greater than 2?</para>
/// <code>r.expr(2).gt(2).run(conn, callback)
/// </code></example>
                            public Gt Gt ( Object expr, Object exprA, params object[] exprs )
                            {
                               return gt ( expr, exprA, exprs );
                            }
                            internal Gt gt ( Object expr, Object exprA, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAddAll(exprs);
                                return new Gt (arguments);
                            }
/// <summary>
/// <para>Test if the first value is greater than or equal to other.</para>
///</summary>
/// <example><para>Example: Is 2 greater than or equal to 2?</para>
/// <code>r.expr(2).ge(2).run(conn, callback)
/// </code></example>
                            public Ge Ge ( Object expr, Object exprA, params object[] exprs )
                            {
                               return ge ( expr, exprA, exprs );
                            }
                            internal Ge ge ( Object expr, Object exprA, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAddAll(exprs);
                                return new Ge (arguments);
                            }
/// <summary>
/// <para>Compute the logical inverse (not) of an expression.</para>
/// <para><code>not</code> can be called either via method chaining, immediately after an expression that evaluates as a boolean value, or by passing the expression as a parameter to <code>not</code>.</para>
///</summary>
/// <example><para>Example: Not true is false.</para>
/// <code>r(true).not().run(conn, callback)
/// r.not(true).run(conn, callback)
/// </code></example>
                            public Not Not ( Object expr )
                            {
                               return not ( expr );
                            }
                            internal Not not ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Not (arguments);
                            }
/// <summary>
/// <para>Sum two numbers, concatenate two strings, or concatenate 2 arrays.</para>
///</summary>
/// <example><para>Example: It's as easy as 2 + 2 = 4.</para>
/// <code>r.expr(2).add(2).run(conn, callback)
/// </code></example>
                            public Add Add ( Object expr, params object[] exprs )
                            {
                               return add ( expr, exprs );
                            }
                            internal Add add ( Object expr, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAddAll(exprs);
                                return new Add (arguments);
                            }
/// <summary>
/// <para>Subtract two numbers.</para>
///</summary>
/// <example><para>Example: It's as easy as 2 - 2 = 0.</para>
/// <code>r.expr(2).sub(2).run(conn, callback)
/// </code></example>
                            public Sub Sub ( Object expr, params object[] exprs )
                            {
                               return sub ( expr, exprs );
                            }
                            internal Sub sub ( Object expr, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAddAll(exprs);
                                return new Sub (arguments);
                            }
/// <summary>
/// <para>Multiply two numbers, or make a periodic array.</para>
///</summary>
/// <example><para>Example: It's as easy as 2 * 2 = 4.</para>
/// <code>r.expr(2).mul(2).run(conn, callback)
/// </code></example>
                            public Mul Mul ( Object expr, params object[] exprs )
                            {
                               return mul ( expr, exprs );
                            }
                            internal Mul mul ( Object expr, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAddAll(exprs);
                                return new Mul (arguments);
                            }
/// <summary>
/// <para>Divide two numbers.</para>
///</summary>
/// <example><para>Example: It's as easy as 2 / 2 = 1.</para>
/// <code>r.expr(2).div(2).run(conn, callback)
/// </code></example>
                            public Div Div ( Object expr, params object[] exprs )
                            {
                               return div ( expr, exprs );
                            }
                            internal Div div ( Object expr, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAddAll(exprs);
                                return new Div (arguments);
                            }
/// <summary>
/// <para>Find the remainder when dividing two numbers.</para>
///</summary>
/// <example><para>Example: It's as easy as 2 % 2 = 0.</para>
/// <code>r.expr(2).mod(2).run(conn, callback)
/// </code></example>
                            public Mod Mod ( Object expr, Object exprA )
                            {
                               return mod ( expr, exprA );
                            }
                            internal Mod mod ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Mod (arguments);
                            }
/// <summary>
/// <para>Rounds the given value down, returning the largest integer value less than or equal to the given value (the value's floor).</para>
///</summary>
/// <example><para>Example: Return the floor of 12.345.</para>
/// <code>&gt; r.floor(12.345).run(conn, callback);
/// 
/// 12.0
/// </code></example>
                            public Floor Floor ( Object expr )
                            {
                               return floor ( expr );
                            }
                            internal Floor floor ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Floor (arguments);
                            }
/// <summary>
/// <para>Rounds the given value up, returning the smallest integer value greater than or equal to the given value (the value's ceiling).</para>
///</summary>
/// <example><para>Example: Return the ceiling of 12.345.</para>
/// <code>&gt; r.ceil(12.345).run(conn, callback);
/// 
/// 13.0
/// </code></example>
                            public Ceil Ceil ( Object expr )
                            {
                               return ceil ( expr );
                            }
                            internal Ceil ceil ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Ceil (arguments);
                            }
/// <summary>
/// <para>Rounds the given value to the nearest whole integer.</para>
///</summary>
/// <example><para>Example: Round 12.345 to the nearest integer.</para>
/// <code>&gt; r.round(12.345).run(conn, callback);
/// 
/// 12.0
/// </code></example>
                            public Round Round ( Object expr )
                            {
                               return round ( expr );
                            }
                            internal Round round ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Round (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr )
                            {
                               return contains ( expr );
                            }
                            internal Contains contains ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js )
                            {
                               return contains ( expr, js );
                            }
                            internal Contains contains ( Object expr, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Javascript jsA )
                            {
                               return contains ( expr, js, jsA );
                            }
                            internal Contains contains ( Object expr, Javascript js, Javascript jsA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Javascript jsA, Javascript jsB )
                            {
                               return contains ( expr, js, jsA, jsB );
                            }
                            internal Contains contains ( Object expr, Javascript js, Javascript jsA, Javascript jsB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(jsB);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Javascript jsA, Javascript jsB, Javascript jsC )
                            {
                               return contains ( expr, js, jsA, jsB, jsC );
                            }
                            internal Contains contains ( Object expr, Javascript js, Javascript jsA, Javascript jsB, Javascript jsC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(jsB);
                                arguments.CoerceAndAdd(jsC);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Javascript jsA, Javascript jsB, Object exprA )
                            {
                               return contains ( expr, js, jsA, jsB, exprA );
                            }
                            internal Contains contains ( Object expr, Javascript js, Javascript jsA, Javascript jsB, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(jsB);
                                arguments.CoerceAndAdd(exprA);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Javascript jsA, Object exprA )
                            {
                               return contains ( expr, js, jsA, exprA );
                            }
                            internal Contains contains ( Object expr, Javascript js, Javascript jsA, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(exprA);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Javascript jsA, Object exprA, Javascript jsB )
                            {
                               return contains ( expr, js, jsA, exprA, jsB );
                            }
                            internal Contains contains ( Object expr, Javascript js, Javascript jsA, Object exprA, Javascript jsB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(jsB);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Javascript jsA, Object exprA, Object exprB )
                            {
                               return contains ( expr, js, jsA, exprA, exprB );
                            }
                            internal Contains contains ( Object expr, Javascript js, Javascript jsA, Object exprA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Object exprA )
                            {
                               return contains ( expr, js, exprA );
                            }
                            internal Contains contains ( Object expr, Javascript js, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Object exprA, Javascript jsA )
                            {
                               return contains ( expr, js, exprA, jsA );
                            }
                            internal Contains contains ( Object expr, Javascript js, Object exprA, Javascript jsA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(jsA);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Object exprA, Javascript jsA, Javascript jsB )
                            {
                               return contains ( expr, js, exprA, jsA, jsB );
                            }
                            internal Contains contains ( Object expr, Javascript js, Object exprA, Javascript jsA, Javascript jsB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(jsB);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Object exprA, Javascript jsA, Object exprB )
                            {
                               return contains ( expr, js, exprA, jsA, exprB );
                            }
                            internal Contains contains ( Object expr, Javascript js, Object exprA, Javascript jsA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(exprB);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Object exprA, Object exprB )
                            {
                               return contains ( expr, js, exprA, exprB );
                            }
                            internal Contains contains ( Object expr, Javascript js, Object exprA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Object exprA, Object exprB, Javascript jsA )
                            {
                               return contains ( expr, js, exprA, exprB, jsA );
                            }
                            internal Contains contains ( Object expr, Javascript js, Object exprA, Object exprB, Javascript jsA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(jsA);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Object exprA, Object exprB, Object exprC )
                            {
                               return contains ( expr, js, exprA, exprB, exprC );
                            }
                            internal Contains contains ( Object expr, Javascript js, Object exprA, Object exprB, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA )
                            {
                               return contains ( expr, exprA );
                            }
                            internal Contains contains ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Javascript js )
                            {
                               return contains ( expr, exprA, js );
                            }
                            internal Contains contains ( Object expr, Object exprA, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Javascript js, Javascript jsA )
                            {
                               return contains ( expr, exprA, js, jsA );
                            }
                            internal Contains contains ( Object expr, Object exprA, Javascript js, Javascript jsA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Javascript js, Javascript jsA, Javascript jsB )
                            {
                               return contains ( expr, exprA, js, jsA, jsB );
                            }
                            internal Contains contains ( Object expr, Object exprA, Javascript js, Javascript jsA, Javascript jsB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(jsB);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Javascript js, Javascript jsA, Object exprB )
                            {
                               return contains ( expr, exprA, js, jsA, exprB );
                            }
                            internal Contains contains ( Object expr, Object exprA, Javascript js, Javascript jsA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(exprB);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Javascript js, Object exprB )
                            {
                               return contains ( expr, exprA, js, exprB );
                            }
                            internal Contains contains ( Object expr, Object exprA, Javascript js, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprB);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Javascript js, Object exprB, Javascript jsA )
                            {
                               return contains ( expr, exprA, js, exprB, jsA );
                            }
                            internal Contains contains ( Object expr, Object exprA, Javascript js, Object exprB, Javascript jsA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(jsA);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Javascript js, Object exprB, Object exprC )
                            {
                               return contains ( expr, exprA, js, exprB, exprC );
                            }
                            internal Contains contains ( Object expr, Object exprA, Javascript js, Object exprB, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Object exprB )
                            {
                               return contains ( expr, exprA, exprB );
                            }
                            internal Contains contains ( Object expr, Object exprA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Object exprB, Javascript js )
                            {
                               return contains ( expr, exprA, exprB, js );
                            }
                            internal Contains contains ( Object expr, Object exprA, Object exprB, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(js);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Object exprB, Javascript js, Javascript jsA )
                            {
                               return contains ( expr, exprA, exprB, js, jsA );
                            }
                            internal Contains contains ( Object expr, Object exprA, Object exprB, Javascript js, Javascript jsA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Object exprB, Javascript js, Object exprC )
                            {
                               return contains ( expr, exprA, exprB, js, exprC );
                            }
                            internal Contains contains ( Object expr, Object exprA, Object exprB, Javascript js, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprC);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Object exprB, Object exprC )
                            {
                               return contains ( expr, exprA, exprB, exprC );
                            }
                            internal Contains contains ( Object expr, Object exprA, Object exprB, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Object exprB, Object exprC, Javascript js )
                            {
                               return contains ( expr, exprA, exprB, exprC, js );
                            }
                            internal Contains contains ( Object expr, Object exprA, Object exprB, Object exprC, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                arguments.CoerceAndAdd(js);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Object exprB, Object exprC, Object exprD )
                            {
                               return contains ( expr, exprA, exprB, exprC, exprD );
                            }
                            internal Contains contains ( Object expr, Object exprA, Object exprB, Object exprC, Object exprD )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                arguments.CoerceAndAdd(exprD);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Object exprB, Object exprC, ReqlFunction1 func1 )
                            {
                               return contains ( expr, exprA, exprB, exprC, func1 );
                            }
                            internal Contains contains ( Object expr, Object exprA, Object exprB, Object exprC, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                arguments.CoerceAndAdd(func1);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Object exprB, ReqlFunction1 func1 )
                            {
                               return contains ( expr, exprA, exprB, func1 );
                            }
                            internal Contains contains ( Object expr, Object exprA, Object exprB, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(func1);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Object exprB, ReqlFunction1 func1, Object exprC )
                            {
                               return contains ( expr, exprA, exprB, func1, exprC );
                            }
                            internal Contains contains ( Object expr, Object exprA, Object exprB, ReqlFunction1 func1, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprC);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Object exprB, ReqlFunction1 func1, ReqlFunction1 func1A )
                            {
                               return contains ( expr, exprA, exprB, func1, func1A );
                            }
                            internal Contains contains ( Object expr, Object exprA, Object exprB, ReqlFunction1 func1, ReqlFunction1 func1A )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, ReqlFunction1 func1 )
                            {
                               return contains ( expr, exprA, func1 );
                            }
                            internal Contains contains ( Object expr, Object exprA, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, ReqlFunction1 func1, Object exprB )
                            {
                               return contains ( expr, exprA, func1, exprB );
                            }
                            internal Contains contains ( Object expr, Object exprA, ReqlFunction1 func1, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprB);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, ReqlFunction1 func1, Object exprB, Object exprC )
                            {
                               return contains ( expr, exprA, func1, exprB, exprC );
                            }
                            internal Contains contains ( Object expr, Object exprA, ReqlFunction1 func1, Object exprB, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, ReqlFunction1 func1, Object exprB, ReqlFunction1 func1A )
                            {
                               return contains ( expr, exprA, func1, exprB, func1A );
                            }
                            internal Contains contains ( Object expr, Object exprA, ReqlFunction1 func1, Object exprB, ReqlFunction1 func1A )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(func1A);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A )
                            {
                               return contains ( expr, exprA, func1, func1A );
                            }
                            internal Contains contains ( Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprB )
                            {
                               return contains ( expr, exprA, func1, func1A, exprB );
                            }
                            internal Contains contains ( Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(exprB);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                            {
                               return contains ( expr, exprA, func1, func1A, func1B );
                            }
                            internal Contains contains ( Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(func1B);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1 )
                            {
                               return contains ( expr, func1 );
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, Object exprA )
                            {
                               return contains ( expr, func1, exprA );
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, Object exprA, Object exprB )
                            {
                               return contains ( expr, func1, exprA, exprB );
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, Object exprA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, Object exprA, Object exprB, Object exprC )
                            {
                               return contains ( expr, func1, exprA, exprB, exprC );
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, Object exprA, Object exprB, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, Object exprA, Object exprB, ReqlFunction1 func1A )
                            {
                               return contains ( expr, func1, exprA, exprB, func1A );
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, Object exprA, Object exprB, ReqlFunction1 func1A )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(func1A);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A )
                            {
                               return contains ( expr, func1, exprA, func1A );
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1A);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, Object exprB )
                            {
                               return contains ( expr, func1, exprA, func1A, exprB );
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(exprB);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, ReqlFunction1 func1B )
                            {
                               return contains ( expr, func1, exprA, func1A, func1B );
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, ReqlFunction1 func1B )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(func1B);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A )
                            {
                               return contains ( expr, func1, func1A );
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA )
                            {
                               return contains ( expr, func1, func1A, exprA );
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(exprA);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, Object exprB )
                            {
                               return contains ( expr, func1, func1A, exprA, exprB );
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, ReqlFunction1 func1B )
                            {
                               return contains ( expr, func1, func1A, exprA, func1B );
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, ReqlFunction1 func1B )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1B);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                            {
                               return contains ( expr, func1, func1A, func1B );
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(func1B);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, Object exprA )
                            {
                               return contains ( expr, func1, func1A, func1B, exprA );
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(func1B);
                                arguments.CoerceAndAdd(exprA);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Returns whether or not a sequence contains all the specified values, or if functions are
/// provided instead, returns whether or not a sequence contains values matching all the
/// specified functions.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, ReqlFunction1 func1C )
                            {
                               return contains ( expr, func1, func1A, func1B, func1C );
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, ReqlFunction1 func1C )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(func1B);
                                arguments.CoerceAndAdd(func1C);
                                return new Contains (arguments);
                            }
/// <summary>
/// <para>Creates an object from a list of key-value pairs, where the keys must
/// be strings.  <code>r.object(A, B, C, D)</code> is equivalent to
/// <code>r.expr([[A, B], [C, D]]).coerce_to('OBJECT')</code>.</para>
///</summary>
/// <example><para>Example: Create a simple object.</para>
/// <code>r.object('id', 5, 'data', ['foo', 'bar']).run(conn, callback)
/// </code></example>
                            public ReqlObject Object_ ( params object[] exprs )
                            {
                               return object_ ( exprs );
                            }
                            internal ReqlObject object_ ( params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAddAll(exprs);
                                return new ReqlObject (arguments);
                            }
/// <summary>
/// <para>Produce a single value from a sequence through repeated application of a reduction
/// function.</para>
///</summary>
/// <example><para>Example: Return the number of documents in the table `posts.</para>
/// <code>r.table("posts").map(function(doc) {
///     return 1
/// }).reduce(function(left, right) {
///     return left.add(right)
/// }).run(conn, callback);
/// </code></example>
                            public Reduce Reduce ( Object expr, Javascript js )
                            {
                               return reduce ( expr, js );
                            }
                            internal Reduce reduce ( Object expr, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                return new Reduce (arguments);
                            }
/// <summary>
/// <para>Produce a single value from a sequence through repeated application of a reduction
/// function.</para>
///</summary>
/// <example><para>Example: Return the number of documents in the table `posts.</para>
/// <code>r.table("posts").map(function(doc) {
///     return 1
/// }).reduce(function(left, right) {
///     return left.add(right)
/// }).run(conn, callback);
/// </code></example>
                            public Reduce Reduce ( Object expr, ReqlFunction2 func2 )
                            {
                               return reduce ( expr, func2 );
                            }
                            internal Reduce reduce ( Object expr, ReqlFunction2 func2 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func2);
                                return new Reduce (arguments);
                            }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
///</summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                            public Map Map ( Object expr, Javascript js )
                            {
                               return map ( expr, js );
                            }
                            internal Map map ( Object expr, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                return new Map (arguments);
                            }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
///</summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                            public Map Map ( Object expr, Object exprA, Javascript js )
                            {
                               return map ( expr, exprA, js );
                            }
                            internal Map map ( Object expr, Object exprA, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                return new Map (arguments);
                            }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
///</summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                            public Map Map ( Object expr, Object exprA, Object exprB, Javascript js )
                            {
                               return map ( expr, exprA, exprB, js );
                            }
                            internal Map map ( Object expr, Object exprA, Object exprB, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(js);
                                return new Map (arguments);
                            }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
///</summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                            public Map Map ( Object expr, Object exprA, Object exprB, Object exprC, Javascript js )
                            {
                               return map ( expr, exprA, exprB, exprC, js );
                            }
                            internal Map map ( Object expr, Object exprA, Object exprB, Object exprC, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                arguments.CoerceAndAdd(js);
                                return new Map (arguments);
                            }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
///</summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                            public Map Map ( Object expr, Object exprA, Object exprB, Object exprC, ReqlFunction4 func4 )
                            {
                               return map ( expr, exprA, exprB, exprC, func4 );
                            }
                            internal Map map ( Object expr, Object exprA, Object exprB, Object exprC, ReqlFunction4 func4 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                arguments.CoerceAndAdd(func4);
                                return new Map (arguments);
                            }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
///</summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                            public Map Map ( Object expr, Object exprA, Object exprB, ReqlFunction3 func3 )
                            {
                               return map ( expr, exprA, exprB, func3 );
                            }
                            internal Map map ( Object expr, Object exprA, Object exprB, ReqlFunction3 func3 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(func3);
                                return new Map (arguments);
                            }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
///</summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                            public Map Map ( Object expr, Object exprA, ReqlFunction2 func2 )
                            {
                               return map ( expr, exprA, func2 );
                            }
                            internal Map map ( Object expr, Object exprA, ReqlFunction2 func2 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func2);
                                return new Map (arguments);
                            }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
///</summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                            public Map Map ( Object expr, ReqlFunction0 func0 )
                            {
                               return map ( expr, func0 );
                            }
                            internal Map map ( Object expr, ReqlFunction0 func0 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func0);
                                return new Map (arguments);
                            }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
///</summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                            public Map Map ( Object expr, ReqlFunction1 func1 )
                            {
                               return map ( expr, func1 );
                            }
                            internal Map map ( Object expr, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                return new Map (arguments);
                            }
/// <summary>
/// <para>Remove duplicate elements from the sequence.</para>
///</summary>
/// <example><para>Example: Which unique villains have been vanquished by marvel heroes?</para>
/// <code>r.table('marvel').concatMap(function(hero) {
///     return hero('villainList')
/// }).distinct().run(conn, callback)
/// </code></example>
                            public Distinct Distinct ( Object expr )
                            {
                               return distinct ( expr );
                            }
                            internal Distinct distinct ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Distinct (arguments);
                            }
/// <summary>
/// <para>Count the number of elements in the sequence. With a single argument, count the number
/// of elements equal to it. If the argument is a function, it is equivalent to calling
/// filter before count.</para>
///</summary>
/// <example><para>Example: Just how many super heroes are there?</para>
/// <code>r.table('marvel').count().add(r.table('dc').count()).run(conn, callback)
/// </code></example>
                            public Count Count ( Object expr )
                            {
                               return count ( expr );
                            }
                            internal Count count ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Count (arguments);
                            }
/// <summary>
/// <para>Count the number of elements in the sequence. With a single argument, count the number
/// of elements equal to it. If the argument is a function, it is equivalent to calling
/// filter before count.</para>
///</summary>
/// <example><para>Example: Just how many super heroes are there?</para>
/// <code>r.table('marvel').count().add(r.table('dc').count()).run(conn, callback)
/// </code></example>
                            public Count Count ( Object expr, Javascript js )
                            {
                               return count ( expr, js );
                            }
                            internal Count count ( Object expr, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                return new Count (arguments);
                            }
/// <summary>
/// <para>Count the number of elements in the sequence. With a single argument, count the number
/// of elements equal to it. If the argument is a function, it is equivalent to calling
/// filter before count.</para>
///</summary>
/// <example><para>Example: Just how many super heroes are there?</para>
/// <code>r.table('marvel').count().add(r.table('dc').count()).run(conn, callback)
/// </code></example>
                            public Count Count ( Object expr, Object exprA )
                            {
                               return count ( expr, exprA );
                            }
                            internal Count count ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Count (arguments);
                            }
/// <summary>
/// <para>Count the number of elements in the sequence. With a single argument, count the number
/// of elements equal to it. If the argument is a function, it is equivalent to calling
/// filter before count.</para>
///</summary>
/// <example><para>Example: Just how many super heroes are there?</para>
/// <code>r.table('marvel').count().add(r.table('dc').count()).run(conn, callback)
/// </code></example>
                            public Count Count ( Object expr, ReqlFunction1 func1 )
                            {
                               return count ( expr, func1 );
                            }
                            internal Count count ( Object expr, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                return new Count (arguments);
                            }
/// <summary>
/// <para>Concatenate two or more sequences.</para>
///</summary>
/// <example><para>Example: Construct a stream of all heroes.</para>
/// <code>r.table('marvel').union(r.table('dc')).run(conn, callback);
/// </code></example>
                            public Union Union ( Object expr, params object[] exprs )
                            {
                               return union ( expr, exprs );
                            }
                            internal Union union ( Object expr, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAddAll(exprs);
                                return new Union (arguments);
                            }
/// <summary>
/// <para>Generate a stream of sequential integers in a specified range.</para>
///</summary>
/// <example><para>Example: Return a four-element range of <code>[0, 1, 2, 3]</code>.</para>
/// <code>&gt; r.range(4).run(conn, callback)
/// 
/// [0, 1, 2, 3]
/// </code></example>
                            public Range Range (  )
                            {
                               return range (  );
                            }
                            internal Range range (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Range (arguments);
                            }
/// <summary>
/// <para>Generate a stream of sequential integers in a specified range.</para>
///</summary>
/// <example><para>Example: Return a four-element range of <code>[0, 1, 2, 3]</code>.</para>
/// <code>&gt; r.range(4).run(conn, callback)
/// 
/// [0, 1, 2, 3]
/// </code></example>
                            public Range Range ( Object expr )
                            {
                               return range ( expr );
                            }
                            internal Range range ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Range (arguments);
                            }
/// <summary>
/// <para>Generate a stream of sequential integers in a specified range.</para>
///</summary>
/// <example><para>Example: Return a four-element range of <code>[0, 1, 2, 3]</code>.</para>
/// <code>&gt; r.range(4).run(conn, callback)
/// 
/// [0, 1, 2, 3]
/// </code></example>
                            public Range Range ( Object expr, Object exprA )
                            {
                               return range ( expr, exprA );
                            }
                            internal Range range ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Range (arguments);
                            }
/// <summary>
/// <para>Gets the type of a value.</para>
///</summary>
/// <example><para>Example: Get the type of a string.</para>
/// <code>r.expr("foo").typeOf().run(conn, callback)
/// </code></example>
                            public TypeOf TypeOf ( Object expr )
                            {
                               return typeOf ( expr );
                            }
                            internal TypeOf typeOf ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new TypeOf (arguments);
                            }
/// <summary>
/// <para>Create a database. A RethinkDB database is a collection of tables, similar to
/// relational databases.</para>
/// <para>If successful, the operation returns an object: <code>{created: 1}</code>. If a database with the
/// same name already exists the operation throws <code>RqlRuntimeError</code>.</para>
/// <para>Note: that you can only use alphanumeric characters and underscores for the database name.</para>
///</summary>
/// <example><para>Example: Create a database named 'superheroes'.</para>
/// <code>r.dbCreate('superheroes').run(conn, callback)
/// </code></example>
                            public DbCreate DbCreate ( Object expr )
                            {
                               return dbCreate ( expr );
                            }
                            internal DbCreate dbCreate ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new DbCreate (arguments);
                            }
/// <summary>
/// <para>Drop a database. The database, all its tables, and corresponding data will be deleted.</para>
/// <para>If successful, the operation returns the object <code>{dropped: 1}</code>. If the specified database
/// doesn't exist a <code>RqlRuntimeError</code> is thrown.</para>
///</summary>
/// <example><para>Example: Drop a database named 'superheroes'.</para>
/// <code>r.dbDrop('superheroes').run(conn, callback)
/// </code></example>
                            public DbDrop DbDrop ( Object expr )
                            {
                               return dbDrop ( expr );
                            }
                            internal DbDrop dbDrop ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new DbDrop (arguments);
                            }
/// <summary>
/// <para>List all database names in the system. The result is a list of strings.</para>
///</summary>
/// <example><para>Example: List all databases.</para>
/// <code>r.dbList().run(conn, callback)
/// </code></example>
                            public DbList DbList (  )
                            {
                               return dbList (  );
                            }
                            internal DbList dbList (  )
                            {
                                Arguments arguments = new Arguments();
                                return new DbList (arguments);
                            }
/// <summary>
/// <para>Create a table. A RethinkDB table is a collection of JSON documents.</para>
///</summary>
/// <example><para>Example: Create a table named 'dc_universe' with the default settings.</para>
/// <code>r.db('test').tableCreate('dc_universe').run(conn, callback)
/// </code></example>
                            public TableCreate TableCreate ( Object expr )
                            {
                               return tableCreate ( expr );
                            }
                            internal TableCreate tableCreate ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new TableCreate (arguments);
                            }
/// <summary>
/// <para>Drop a table. The table and all its data will be deleted.</para>
///</summary>
/// <example><para>Example: Drop a table named 'dc_universe'.</para>
/// <code>r.db('test').tableDrop('dc_universe').run(conn, callback)
/// </code></example>
                            public TableDrop TableDrop ( Object expr )
                            {
                               return tableDrop ( expr );
                            }
                            internal TableDrop tableDrop ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new TableDrop (arguments);
                            }
/// <summary>
/// <para>List all table names in a database. The result is a list of strings.</para>
///</summary>
/// <example><para>Example: List all tables of the 'test' database.</para>
/// <code>r.db('test').tableList().run(conn, callback)
/// </code></example>
                            public TableList TableList (  )
                            {
                               return tableList (  );
                            }
                            internal TableList tableList (  )
                            {
                                Arguments arguments = new Arguments();
                                return new TableList (arguments);
                            }
/// <summary>
/// <para>Wait for a table or all the tables in a database to be ready. A table may be temporarily unavailable after creation, rebalancing or reconfiguring. The <code>wait</code> command blocks until the given table (or database) is fully up to date.</para>
///</summary>
/// <example><para>Example: Wait for a table to be ready.</para>
/// <code>&gt; r.table('superheroes').wait().run(conn, callback);
/// </code></example>
                            public Wait Wait_ (  )
                            {
                               return wait_ (  );
                            }
                            internal Wait wait_ (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Wait (arguments);
                            }
/// <summary>
/// <para>Reconfigure a table's sharding and replication.</para>
///</summary>
/// <example><para>Example: Reconfigure a table.</para>
/// <code>&gt; r.table('superheroes').reconfigure({shards: 2, replicas: 1}).run(conn, callback);
/// </code></example>
                            public Reconfigure Reconfigure (  )
                            {
                               return reconfigure (  );
                            }
                            internal Reconfigure reconfigure (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Reconfigure (arguments);
                            }
/// <summary>
/// <para>Rebalances the shards of a table. When called on a database, all the tables in that database will be rebalanced.</para>
///</summary>
/// <example><para>Example: Rebalance a table.</para>
/// <code>&gt; r.table('superheroes').rebalance().run(conn, callback);
/// </code></example>
                            public Rebalance Rebalance (  )
                            {
                               return rebalance (  );
                            }
                            internal Rebalance rebalance (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Rebalance (arguments);
                            }
                            public Funcall Do_ ( Javascript js )
                            {
                               return do_ ( js );
                            }
                            internal Funcall do_ ( Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(js);
                                return new Funcall (arguments);
                            }
                            public Funcall Do_ ( Object expr, Javascript js )
                            {
                               return do_ ( expr, js );
                            }
                            internal Funcall do_ ( Object expr, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                return new Funcall (arguments);
                            }
                            public Funcall Do_ ( Object expr, Object exprA, Javascript js )
                            {
                               return do_ ( expr, exprA, js );
                            }
                            internal Funcall do_ ( Object expr, Object exprA, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                return new Funcall (arguments);
                            }
                            public Funcall Do_ ( Object expr, Object exprA, Object exprB, Javascript js )
                            {
                               return do_ ( expr, exprA, exprB, js );
                            }
                            internal Funcall do_ ( Object expr, Object exprA, Object exprB, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(js);
                                return new Funcall (arguments);
                            }
                            public Funcall Do_ ( Object expr, Object exprA, Object exprB, ReqlFunction3 func3 )
                            {
                               return do_ ( expr, exprA, exprB, func3 );
                            }
                            internal Funcall do_ ( Object expr, Object exprA, Object exprB, ReqlFunction3 func3 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(func3);
                                return new Funcall (arguments);
                            }
                            public Funcall Do_ ( Object expr, Object exprA, ReqlFunction2 func2 )
                            {
                               return do_ ( expr, exprA, func2 );
                            }
                            internal Funcall do_ ( Object expr, Object exprA, ReqlFunction2 func2 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func2);
                                return new Funcall (arguments);
                            }
                            public Funcall Do_ ( Object expr, params object[] exprs )
                            {
                               return do_ ( expr, exprs );
                            }
                            internal Funcall do_ ( Object expr, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAddAll(exprs);
                                return new Funcall (arguments);
                            }
                            public Funcall Do_ ( Object expr, ReqlFunction1 func1 )
                            {
                               return do_ ( expr, func1 );
                            }
                            internal Funcall do_ ( Object expr, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                return new Funcall (arguments);
                            }
                            public Funcall Do_ ( ReqlFunction0 func0 )
                            {
                               return do_ ( func0 );
                            }
                            internal Funcall do_ ( ReqlFunction0 func0 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(func0);
                                return new Funcall (arguments);
                            }
/// <summary>
/// <para>If the <code>test</code> expression returns <code>false</code> or <code>null</code>, the <code>false_branch</code> will be evaluated.
/// Otherwise, the <code>true_branch</code> will be evaluated.</para>
/// <para>The <code>branch</code> command is effectively an <code>if</code> renamed due to language constraints.
/// The type of the result is determined by the type of the branch that gets executed.</para>
///</summary>
/// <example><para>Example: Return heroes and superheroes.</para>
/// <code>r.table('marvel').map(
///     r.branch(
///         r.row('victories').gt(100),
///         r.row('name').add(' is a superhero'),
///         r.row('name').add(' is a hero')
///     )
/// ).run(conn, callback)
/// </code></example>
                            public Branch Branch ( Object expr, Object exprA, Object exprB, params object[] exprs )
                            {
                               return branch ( expr, exprA, exprB, exprs );
                            }
                            internal Branch branch ( Object expr, Object exprA, Object exprB, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAddAll(exprs);
                                return new Branch (arguments);
                            }
/// <summary>
/// <para>Compute the logical "or" of two or more values.</para>
///</summary>
/// <example><para>Example: Return whether either <code>a</code> or <code>b</code> evaluate to true.</para>
/// <code>var a = true, b = false;
/// r.expr(a).or(b).run(conn, callback);
/// // result passed to callback
/// true
/// </code></example>
                            public Or Or ( Object expr, Object exprA, params object[] exprs )
                            {
                               return or ( expr, exprA, exprs );
                            }
                            internal Or or ( Object expr, Object exprA, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAddAll(exprs);
                                return new Or (arguments);
                            }
/// <summary>
/// <para>Compute the logical "and" of two or more values.</para>
///</summary>
/// <example><para>Example: Return whether both <code>a</code> and <code>b</code> evaluate to true.</para>
/// <code>var a = true, b = false;
/// r.expr(a).and(b).run(conn, callback);
/// // result passed to callback
/// false
/// </code></example>
                            public And And ( Object expr, params object[] exprs )
                            {
                               return and ( expr, exprs );
                            }
                            internal And and ( Object expr, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAddAll(exprs);
                                return new And (arguments);
                            }
                            public Asc Asc ( Javascript js )
                            {
                               return asc ( js );
                            }
                            internal Asc asc ( Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(js);
                                return new Asc (arguments);
                            }
                            public Asc Asc ( Object expr )
                            {
                               return asc ( expr );
                            }
                            internal Asc asc ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Asc (arguments);
                            }
                            public Asc Asc ( ReqlFunction1 func1 )
                            {
                               return asc ( func1 );
                            }
                            internal Asc asc ( ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(func1);
                                return new Asc (arguments);
                            }
                            public Desc Desc ( Javascript js )
                            {
                               return desc ( js );
                            }
                            internal Desc desc ( Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(js);
                                return new Desc (arguments);
                            }
                            public Desc Desc ( Object expr )
                            {
                               return desc ( expr );
                            }
                            internal Desc desc ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Desc (arguments);
                            }
                            public Desc Desc ( ReqlFunction1 func1 )
                            {
                               return desc ( func1 );
                            }
                            internal Desc desc ( ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(func1);
                                return new Desc (arguments);
                            }
/// <summary>
/// <para>Get information about a ReQL value.</para>
///</summary>
/// <example><para>Example: Get information about a table such as primary key, or cache size.</para>
/// <code>r.table('marvel').info().run(conn, callback)
/// </code></example>
                            public Info Info ( Object expr )
                            {
                               return info ( expr );
                            }
                            internal Info info ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Info (arguments);
                            }
/// <summary>
/// <para>Parse a JSON string on the server.</para>
///</summary>
/// <example><para>Example: Send an array to the server.</para>
/// <code>r.json("[1,2,3]").run(conn, callback)
/// </code></example>
                            public Json Json ( Object expr )
                            {
                               return json ( expr );
                            }
                            internal Json json ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Json (arguments);
                            }
/// <summary>
/// <para>Create a time object based on an ISO 8601 date-time string (e.g. '2013-01-01T01:01:01+00:00'). We support all valid ISO 8601 formats except for week dates. If you pass an ISO 8601 date-time without a time zone, you must specify the time zone with the <code>defaultTimezone</code> argument. Read more about the ISO 8601 format at <a href="http://en.wikipedia.org/wiki/ISO_8601">Wikipedia</a>.</para>
///</summary>
/// <example><para>Example: Update the time of John's birth.</para>
/// <code>r.table("user").get("John").update({birth: r.ISO8601('1986-11-03T08:30:00-07:00')}).run(conn, callback)
/// </code></example>
                            public Iso8601 Iso8601 ( Object expr )
                            {
                               return iso8601 ( expr );
                            }
                            internal Iso8601 iso8601 ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Iso8601 (arguments);
                            }
/// <summary>
/// <para>Create a time object based on seconds since epoch. The first argument is a double and
/// will be rounded to three decimal places (millisecond-precision).</para>
///</summary>
/// <example><para>Example: Update the birthdate of the user "John" to November 3rd, 1986.</para>
/// <code>r.table("user").get("John").update({birthdate: r.epochTime(531360000)})
///     .run(conn, callback)
/// </code></example>
                            public EpochTime EpochTime ( Object expr )
                            {
                               return epochTime ( expr );
                            }
                            internal EpochTime epochTime ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new EpochTime (arguments);
                            }
/// <summary>
/// <para>Return a time object representing the current time in UTC. The command now() is computed once when the server receives the query, so multiple instances of r.now() will always return the same time inside a query.</para>
///</summary>
/// <example><para>Example: Add a new user with the time at which he subscribed.</para>
/// <code>r.table("users").insert({
///     name: "John",
///     subscription_date: r.now()
/// }).run(conn, callback)
/// </code></example>
                            public Now Now (  )
                            {
                               return now (  );
                            }
                            internal Now now (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Now (arguments);
                            }
/// <summary>
/// <para>Create a time object for a specific time.</para>
/// <para>A few restrictions exist on the arguments:</para>
/// <ul>
/// <li><code>year</code> is an integer between 1400 and 9,999.</li>
/// <li><code>month</code> is an integer between 1 and 12.</li>
/// <li><code>day</code> is an integer between 1 and 31.</li>
/// <li><code>hour</code> is an integer.</li>
/// <li><code>minutes</code> is an integer.</li>
/// <li><code>seconds</code> is a double. Its value will be rounded to three decimal places
/// (millisecond-precision).</li>
/// <li><code>timezone</code> can be <code>'Z'</code> (for UTC) or a string with the format <code>±[hh]:[mm]</code>.</li>
/// </ul>
///</summary>
/// <example><para>Example: Update the birthdate of the user "John" to November 3rd, 1986 UTC.</para>
/// <code>r.table("user").get("John").update({birthdate: r.time(1986, 11, 3, 'Z')})
///     .run(conn, callback)
/// </code></example>
                            public Time Time ( Object expr, Object exprA, Object exprB, Object exprC )
                            {
                               return time ( expr, exprA, exprB, exprC );
                            }
                            internal Time time ( Object expr, Object exprA, Object exprB, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                return new Time (arguments);
                            }
/// <summary>
/// <para>Create a time object for a specific time.</para>
/// <para>A few restrictions exist on the arguments:</para>
/// <ul>
/// <li><code>year</code> is an integer between 1400 and 9,999.</li>
/// <li><code>month</code> is an integer between 1 and 12.</li>
/// <li><code>day</code> is an integer between 1 and 31.</li>
/// <li><code>hour</code> is an integer.</li>
/// <li><code>minutes</code> is an integer.</li>
/// <li><code>seconds</code> is a double. Its value will be rounded to three decimal places
/// (millisecond-precision).</li>
/// <li><code>timezone</code> can be <code>'Z'</code> (for UTC) or a string with the format <code>±[hh]:[mm]</code>.</li>
/// </ul>
///</summary>
/// <example><para>Example: Update the birthdate of the user "John" to November 3rd, 1986 UTC.</para>
/// <code>r.table("user").get("John").update({birthdate: r.time(1986, 11, 3, 'Z')})
///     .run(conn, callback)
/// </code></example>
                            public Time Time ( Object expr, Object exprA, Object exprB, Object exprC, Object exprD, Object exprE, Object exprF )
                            {
                               return time ( expr, exprA, exprB, exprC, exprD, exprE, exprF );
                            }
                            internal Time time ( Object expr, Object exprA, Object exprB, Object exprC, Object exprD, Object exprE, Object exprF )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                arguments.CoerceAndAdd(exprD);
                                arguments.CoerceAndAdd(exprE);
                                arguments.CoerceAndAdd(exprF);
                                return new Time (arguments);
                            }
                            public Monday Monday (  )
                            {
                               return monday (  );
                            }
                            internal Monday monday (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Monday (arguments);
                            }
                            public Tuesday Tuesday (  )
                            {
                               return tuesday (  );
                            }
                            internal Tuesday tuesday (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Tuesday (arguments);
                            }
                            public Wednesday Wednesday (  )
                            {
                               return wednesday (  );
                            }
                            internal Wednesday wednesday (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Wednesday (arguments);
                            }
                            public Thursday Thursday (  )
                            {
                               return thursday (  );
                            }
                            internal Thursday thursday (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Thursday (arguments);
                            }
                            public Friday Friday (  )
                            {
                               return friday (  );
                            }
                            internal Friday friday (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Friday (arguments);
                            }
                            public Saturday Saturday (  )
                            {
                               return saturday (  );
                            }
                            internal Saturday saturday (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Saturday (arguments);
                            }
                            public Sunday Sunday (  )
                            {
                               return sunday (  );
                            }
                            internal Sunday sunday (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Sunday (arguments);
                            }
                            public January January (  )
                            {
                               return january (  );
                            }
                            internal January january (  )
                            {
                                Arguments arguments = new Arguments();
                                return new January (arguments);
                            }
                            public February February (  )
                            {
                               return february (  );
                            }
                            internal February february (  )
                            {
                                Arguments arguments = new Arguments();
                                return new February (arguments);
                            }
                            public March March (  )
                            {
                               return march (  );
                            }
                            internal March march (  )
                            {
                                Arguments arguments = new Arguments();
                                return new March (arguments);
                            }
                            public April April (  )
                            {
                               return april (  );
                            }
                            internal April april (  )
                            {
                                Arguments arguments = new Arguments();
                                return new April (arguments);
                            }
                            public May May (  )
                            {
                               return may (  );
                            }
                            internal May may (  )
                            {
                                Arguments arguments = new Arguments();
                                return new May (arguments);
                            }
                            public June June (  )
                            {
                               return june (  );
                            }
                            internal June june (  )
                            {
                                Arguments arguments = new Arguments();
                                return new June (arguments);
                            }
                            public July July (  )
                            {
                               return july (  );
                            }
                            internal July july (  )
                            {
                                Arguments arguments = new Arguments();
                                return new July (arguments);
                            }
                            public August August (  )
                            {
                               return august (  );
                            }
                            internal August august (  )
                            {
                                Arguments arguments = new Arguments();
                                return new August (arguments);
                            }
                            public September September (  )
                            {
                               return september (  );
                            }
                            internal September september (  )
                            {
                                Arguments arguments = new Arguments();
                                return new September (arguments);
                            }
                            public October October (  )
                            {
                               return october (  );
                            }
                            internal October october (  )
                            {
                                Arguments arguments = new Arguments();
                                return new October (arguments);
                            }
                            public November November (  )
                            {
                               return november (  );
                            }
                            internal November november (  )
                            {
                                Arguments arguments = new Arguments();
                                return new November (arguments);
                            }
                            public December December (  )
                            {
                               return december (  );
                            }
                            internal December december (  )
                            {
                                Arguments arguments = new Arguments();
                                return new December (arguments);
                            }
/// <summary>
/// <para>Replace an object in a field instead of merging it with an existing object in a <code>merge</code> or <code>update</code> operation.</para>
/// <para><code>js
/// r.table('users').get(1).update({ data: r.literal({ age: 19, job: 'Engineer' }) }).run(conn, callback)</code></para>
///</summary>
/// <example></example>
                            public Literal Literal (  )
                            {
                               return literal (  );
                            }
                            internal Literal literal (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Literal (arguments);
                            }
/// <summary>
/// <para>Replace an object in a field instead of merging it with an existing object in a <code>merge</code> or <code>update</code> operation.</para>
/// <para><code>js
/// r.table('users').get(1).update({ data: r.literal({ age: 19, job: 'Engineer' }) }).run(conn, callback)</code></para>
///</summary>
/// <example></example>
                            public Literal Literal ( Object expr )
                            {
                               return literal ( expr );
                            }
                            internal Literal literal ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Literal (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr )
                            {
                               return group ( expr );
                            }
                            internal Group group ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Javascript js )
                            {
                               return group ( expr, js );
                            }
                            internal Group group ( Object expr, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Javascript jsA )
                            {
                               return group ( expr, js, jsA );
                            }
                            internal Group group ( Object expr, Javascript js, Javascript jsA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Javascript jsA, Javascript jsB )
                            {
                               return group ( expr, js, jsA, jsB );
                            }
                            internal Group group ( Object expr, Javascript js, Javascript jsA, Javascript jsB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(jsB);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Javascript jsA, Javascript jsB, Javascript jsC )
                            {
                               return group ( expr, js, jsA, jsB, jsC );
                            }
                            internal Group group ( Object expr, Javascript js, Javascript jsA, Javascript jsB, Javascript jsC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(jsB);
                                arguments.CoerceAndAdd(jsC);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Javascript jsA, Javascript jsB, Object exprA )
                            {
                               return group ( expr, js, jsA, jsB, exprA );
                            }
                            internal Group group ( Object expr, Javascript js, Javascript jsA, Javascript jsB, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(jsB);
                                arguments.CoerceAndAdd(exprA);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Javascript jsA, Object exprA )
                            {
                               return group ( expr, js, jsA, exprA );
                            }
                            internal Group group ( Object expr, Javascript js, Javascript jsA, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(exprA);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Javascript jsA, Object exprA, Javascript jsB )
                            {
                               return group ( expr, js, jsA, exprA, jsB );
                            }
                            internal Group group ( Object expr, Javascript js, Javascript jsA, Object exprA, Javascript jsB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(jsB);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Javascript jsA, Object exprA, Object exprB )
                            {
                               return group ( expr, js, jsA, exprA, exprB );
                            }
                            internal Group group ( Object expr, Javascript js, Javascript jsA, Object exprA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Object exprA )
                            {
                               return group ( expr, js, exprA );
                            }
                            internal Group group ( Object expr, Javascript js, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Object exprA, Javascript jsA )
                            {
                               return group ( expr, js, exprA, jsA );
                            }
                            internal Group group ( Object expr, Javascript js, Object exprA, Javascript jsA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(jsA);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Object exprA, Javascript jsA, Javascript jsB )
                            {
                               return group ( expr, js, exprA, jsA, jsB );
                            }
                            internal Group group ( Object expr, Javascript js, Object exprA, Javascript jsA, Javascript jsB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(jsB);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Object exprA, Javascript jsA, Object exprB )
                            {
                               return group ( expr, js, exprA, jsA, exprB );
                            }
                            internal Group group ( Object expr, Javascript js, Object exprA, Javascript jsA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(exprB);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Object exprA, Object exprB )
                            {
                               return group ( expr, js, exprA, exprB );
                            }
                            internal Group group ( Object expr, Javascript js, Object exprA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Object exprA, Object exprB, Javascript jsA )
                            {
                               return group ( expr, js, exprA, exprB, jsA );
                            }
                            internal Group group ( Object expr, Javascript js, Object exprA, Object exprB, Javascript jsA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(jsA);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Object exprA, Object exprB, Object exprC )
                            {
                               return group ( expr, js, exprA, exprB, exprC );
                            }
                            internal Group group ( Object expr, Javascript js, Object exprA, Object exprB, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Object exprA )
                            {
                               return group ( expr, exprA );
                            }
                            internal Group group ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Javascript js )
                            {
                               return group ( expr, exprA, js );
                            }
                            internal Group group ( Object expr, Object exprA, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Javascript js, Javascript jsA )
                            {
                               return group ( expr, exprA, js, jsA );
                            }
                            internal Group group ( Object expr, Object exprA, Javascript js, Javascript jsA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Javascript js, Javascript jsA, Javascript jsB )
                            {
                               return group ( expr, exprA, js, jsA, jsB );
                            }
                            internal Group group ( Object expr, Object exprA, Javascript js, Javascript jsA, Javascript jsB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(jsB);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Javascript js, Javascript jsA, Object exprB )
                            {
                               return group ( expr, exprA, js, jsA, exprB );
                            }
                            internal Group group ( Object expr, Object exprA, Javascript js, Javascript jsA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(exprB);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Javascript js, Object exprB )
                            {
                               return group ( expr, exprA, js, exprB );
                            }
                            internal Group group ( Object expr, Object exprA, Javascript js, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprB);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Javascript js, Object exprB, Javascript jsA )
                            {
                               return group ( expr, exprA, js, exprB, jsA );
                            }
                            internal Group group ( Object expr, Object exprA, Javascript js, Object exprB, Javascript jsA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(jsA);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Javascript js, Object exprB, Object exprC )
                            {
                               return group ( expr, exprA, js, exprB, exprC );
                            }
                            internal Group group ( Object expr, Object exprA, Javascript js, Object exprB, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Object exprB )
                            {
                               return group ( expr, exprA, exprB );
                            }
                            internal Group group ( Object expr, Object exprA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Object exprB, Javascript js )
                            {
                               return group ( expr, exprA, exprB, js );
                            }
                            internal Group group ( Object expr, Object exprA, Object exprB, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(js);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Object exprB, Javascript js, Javascript jsA )
                            {
                               return group ( expr, exprA, exprB, js, jsA );
                            }
                            internal Group group ( Object expr, Object exprA, Object exprB, Javascript js, Javascript jsA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Object exprB, Javascript js, Object exprC )
                            {
                               return group ( expr, exprA, exprB, js, exprC );
                            }
                            internal Group group ( Object expr, Object exprA, Object exprB, Javascript js, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprC);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Object exprB, Object exprC )
                            {
                               return group ( expr, exprA, exprB, exprC );
                            }
                            internal Group group ( Object expr, Object exprA, Object exprB, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Object exprB, Object exprC, Javascript js )
                            {
                               return group ( expr, exprA, exprB, exprC, js );
                            }
                            internal Group group ( Object expr, Object exprA, Object exprB, Object exprC, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                arguments.CoerceAndAdd(js);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Object exprB, Object exprC, Object exprD )
                            {
                               return group ( expr, exprA, exprB, exprC, exprD );
                            }
                            internal Group group ( Object expr, Object exprA, Object exprB, Object exprC, Object exprD )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                arguments.CoerceAndAdd(exprD);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Object exprB, Object exprC, ReqlFunction1 func1 )
                            {
                               return group ( expr, exprA, exprB, exprC, func1 );
                            }
                            internal Group group ( Object expr, Object exprA, Object exprB, Object exprC, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                arguments.CoerceAndAdd(func1);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Object exprB, ReqlFunction1 func1 )
                            {
                               return group ( expr, exprA, exprB, func1 );
                            }
                            internal Group group ( Object expr, Object exprA, Object exprB, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(func1);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Object exprB, ReqlFunction1 func1, Object exprC )
                            {
                               return group ( expr, exprA, exprB, func1, exprC );
                            }
                            internal Group group ( Object expr, Object exprA, Object exprB, ReqlFunction1 func1, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprC);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Object exprB, ReqlFunction1 func1, ReqlFunction1 func1A )
                            {
                               return group ( expr, exprA, exprB, func1, func1A );
                            }
                            internal Group group ( Object expr, Object exprA, Object exprB, ReqlFunction1 func1, ReqlFunction1 func1A )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Object exprA, ReqlFunction1 func1 )
                            {
                               return group ( expr, exprA, func1 );
                            }
                            internal Group group ( Object expr, Object exprA, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Object exprA, ReqlFunction1 func1, Object exprB )
                            {
                               return group ( expr, exprA, func1, exprB );
                            }
                            internal Group group ( Object expr, Object exprA, ReqlFunction1 func1, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprB);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Object exprA, ReqlFunction1 func1, Object exprB, Object exprC )
                            {
                               return group ( expr, exprA, func1, exprB, exprC );
                            }
                            internal Group group ( Object expr, Object exprA, ReqlFunction1 func1, Object exprB, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Object exprA, ReqlFunction1 func1, Object exprB, ReqlFunction1 func1A )
                            {
                               return group ( expr, exprA, func1, exprB, func1A );
                            }
                            internal Group group ( Object expr, Object exprA, ReqlFunction1 func1, Object exprB, ReqlFunction1 func1A )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(func1A);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A )
                            {
                               return group ( expr, exprA, func1, func1A );
                            }
                            internal Group group ( Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprB )
                            {
                               return group ( expr, exprA, func1, func1A, exprB );
                            }
                            internal Group group ( Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(exprB);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                            {
                               return group ( expr, exprA, func1, func1A, func1B );
                            }
                            internal Group group ( Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(func1B);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1 )
                            {
                               return group ( expr, func1 );
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, Object exprA )
                            {
                               return group ( expr, func1, exprA );
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, Object exprA, Object exprB )
                            {
                               return group ( expr, func1, exprA, exprB );
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, Object exprA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, Object exprA, Object exprB, Object exprC )
                            {
                               return group ( expr, func1, exprA, exprB, exprC );
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, Object exprA, Object exprB, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, Object exprA, Object exprB, ReqlFunction1 func1A )
                            {
                               return group ( expr, func1, exprA, exprB, func1A );
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, Object exprA, Object exprB, ReqlFunction1 func1A )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(func1A);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A )
                            {
                               return group ( expr, func1, exprA, func1A );
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1A);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, Object exprB )
                            {
                               return group ( expr, func1, exprA, func1A, exprB );
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(exprB);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, ReqlFunction1 func1B )
                            {
                               return group ( expr, func1, exprA, func1A, func1B );
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, ReqlFunction1 func1B )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(func1B);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A )
                            {
                               return group ( expr, func1, func1A );
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA )
                            {
                               return group ( expr, func1, func1A, exprA );
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(exprA);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, Object exprB )
                            {
                               return group ( expr, func1, func1A, exprA, exprB );
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, ReqlFunction1 func1B )
                            {
                               return group ( expr, func1, func1A, exprA, func1B );
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, ReqlFunction1 func1B )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1B);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                            {
                               return group ( expr, func1, func1A, func1B );
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(func1B);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, Object exprA )
                            {
                               return group ( expr, func1, func1A, func1B, exprA );
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(func1B);
                                arguments.CoerceAndAdd(exprA);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.  Commands chained after <code>group</code> will be
/// called on each of these grouped sub-streams, producing grouped data.</para>
///</summary>
/// <example><para>Example: What is each player's best game?</para>
/// <code>r.table('games').group('player').max('points').run(conn, callback)
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, ReqlFunction1 func1C )
                            {
                               return group ( expr, func1, func1A, func1B, func1C );
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, ReqlFunction1 func1C )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(func1B);
                                arguments.CoerceAndAdd(func1C);
                                return new Group (arguments);
                            }
/// <summary>
/// <para>Sums all the elements of a sequence.  If called with a field name,
/// sums all the values of that field in the sequence, skipping elements
/// of the sequence that lack that field.  If called with a function,
/// calls that function on every element of the sequence and sums the
/// results, skipping elements of the sequence where that function returns
/// <code>null</code> or a non-existence error.</para>
///</summary>
/// <example><para>Example: What's 3 + 5 + 7?</para>
/// <code>r.expr([3, 5, 7]).sum().run(conn, callback)
/// </code></example>
                            public Sum Sum ( Object expr )
                            {
                               return sum ( expr );
                            }
                            internal Sum sum ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Sum (arguments);
                            }
/// <summary>
/// <para>Sums all the elements of a sequence.  If called with a field name,
/// sums all the values of that field in the sequence, skipping elements
/// of the sequence that lack that field.  If called with a function,
/// calls that function on every element of the sequence and sums the
/// results, skipping elements of the sequence where that function returns
/// <code>null</code> or a non-existence error.</para>
///</summary>
/// <example><para>Example: What's 3 + 5 + 7?</para>
/// <code>r.expr([3, 5, 7]).sum().run(conn, callback)
/// </code></example>
                            public Sum Sum ( Object expr, Javascript js )
                            {
                               return sum ( expr, js );
                            }
                            internal Sum sum ( Object expr, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                return new Sum (arguments);
                            }
/// <summary>
/// <para>Sums all the elements of a sequence.  If called with a field name,
/// sums all the values of that field in the sequence, skipping elements
/// of the sequence that lack that field.  If called with a function,
/// calls that function on every element of the sequence and sums the
/// results, skipping elements of the sequence where that function returns
/// <code>null</code> or a non-existence error.</para>
///</summary>
/// <example><para>Example: What's 3 + 5 + 7?</para>
/// <code>r.expr([3, 5, 7]).sum().run(conn, callback)
/// </code></example>
                            public Sum Sum ( Object expr, Object exprA )
                            {
                               return sum ( expr, exprA );
                            }
                            internal Sum sum ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Sum (arguments);
                            }
/// <summary>
/// <para>Sums all the elements of a sequence.  If called with a field name,
/// sums all the values of that field in the sequence, skipping elements
/// of the sequence that lack that field.  If called with a function,
/// calls that function on every element of the sequence and sums the
/// results, skipping elements of the sequence where that function returns
/// <code>null</code> or a non-existence error.</para>
///</summary>
/// <example><para>Example: What's 3 + 5 + 7?</para>
/// <code>r.expr([3, 5, 7]).sum().run(conn, callback)
/// </code></example>
                            public Sum Sum ( Object expr, ReqlFunction1 func1 )
                            {
                               return sum ( expr, func1 );
                            }
                            internal Sum sum ( Object expr, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                return new Sum (arguments);
                            }
/// <summary>
/// <para>Averages all the elements of a sequence.  If called with a field name,
/// averages all the values of that field in the sequence, skipping
/// elements of the sequence that lack that field.  If called with a
/// function, calls that function on every element of the sequence and
/// averages the results, skipping elements of the sequence where that
/// function returns <code>null</code> or a non-existence error.</para>
///</summary>
/// <example><para>Example: What's the average of 3, 5, and 7?</para>
/// <code>r.expr([3, 5, 7]).avg().run(conn, callback)
/// </code></example>
                            public Avg Avg ( Object expr )
                            {
                               return avg ( expr );
                            }
                            internal Avg avg ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Avg (arguments);
                            }
/// <summary>
/// <para>Averages all the elements of a sequence.  If called with a field name,
/// averages all the values of that field in the sequence, skipping
/// elements of the sequence that lack that field.  If called with a
/// function, calls that function on every element of the sequence and
/// averages the results, skipping elements of the sequence where that
/// function returns <code>null</code> or a non-existence error.</para>
///</summary>
/// <example><para>Example: What's the average of 3, 5, and 7?</para>
/// <code>r.expr([3, 5, 7]).avg().run(conn, callback)
/// </code></example>
                            public Avg Avg ( Object expr, Javascript js )
                            {
                               return avg ( expr, js );
                            }
                            internal Avg avg ( Object expr, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                return new Avg (arguments);
                            }
/// <summary>
/// <para>Averages all the elements of a sequence.  If called with a field name,
/// averages all the values of that field in the sequence, skipping
/// elements of the sequence that lack that field.  If called with a
/// function, calls that function on every element of the sequence and
/// averages the results, skipping elements of the sequence where that
/// function returns <code>null</code> or a non-existence error.</para>
///</summary>
/// <example><para>Example: What's the average of 3, 5, and 7?</para>
/// <code>r.expr([3, 5, 7]).avg().run(conn, callback)
/// </code></example>
                            public Avg Avg ( Object expr, Object exprA )
                            {
                               return avg ( expr, exprA );
                            }
                            internal Avg avg ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Avg (arguments);
                            }
/// <summary>
/// <para>Averages all the elements of a sequence.  If called with a field name,
/// averages all the values of that field in the sequence, skipping
/// elements of the sequence that lack that field.  If called with a
/// function, calls that function on every element of the sequence and
/// averages the results, skipping elements of the sequence where that
/// function returns <code>null</code> or a non-existence error.</para>
///</summary>
/// <example><para>Example: What's the average of 3, 5, and 7?</para>
/// <code>r.expr([3, 5, 7]).avg().run(conn, callback)
/// </code></example>
                            public Avg Avg ( Object expr, ReqlFunction1 func1 )
                            {
                               return avg ( expr, func1 );
                            }
                            internal Avg avg ( Object expr, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                return new Avg (arguments);
                            }
/// <summary>
/// <para>Finds the minimum element of a sequence.</para>
///</summary>
/// <example><para>Example: Return the minimum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).min().run(conn, callback);
/// </code></example>
                            public Min Min ( Object expr )
                            {
                               return min ( expr );
                            }
                            internal Min min ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Min (arguments);
                            }
/// <summary>
/// <para>Finds the minimum element of a sequence.</para>
///</summary>
/// <example><para>Example: Return the minimum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).min().run(conn, callback);
/// </code></example>
                            public Min Min ( Object expr, Javascript js )
                            {
                               return min ( expr, js );
                            }
                            internal Min min ( Object expr, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                return new Min (arguments);
                            }
/// <summary>
/// <para>Finds the minimum element of a sequence.</para>
///</summary>
/// <example><para>Example: Return the minimum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).min().run(conn, callback);
/// </code></example>
                            public Min Min ( Object expr, Object exprA )
                            {
                               return min ( expr, exprA );
                            }
                            internal Min min ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Min (arguments);
                            }
/// <summary>
/// <para>Finds the minimum element of a sequence.</para>
///</summary>
/// <example><para>Example: Return the minimum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).min().run(conn, callback);
/// </code></example>
                            public Min Min ( Object expr, ReqlFunction1 func1 )
                            {
                               return min ( expr, func1 );
                            }
                            internal Min min ( Object expr, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                return new Min (arguments);
                            }
/// <summary>
/// <para>Finds the maximum element of a sequence.</para>
///</summary>
/// <example><para>Example: Return the maximum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).max().run(conn, callback);
/// </code></example>
                            public Max Max ( Object expr )
                            {
                               return max ( expr );
                            }
                            internal Max max ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Max (arguments);
                            }
/// <summary>
/// <para>Finds the maximum element of a sequence.</para>
///</summary>
/// <example><para>Example: Return the maximum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).max().run(conn, callback);
/// </code></example>
                            public Max Max ( Object expr, Javascript js )
                            {
                               return max ( expr, js );
                            }
                            internal Max max ( Object expr, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                return new Max (arguments);
                            }
/// <summary>
/// <para>Finds the maximum element of a sequence.</para>
///</summary>
/// <example><para>Example: Return the maximum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).max().run(conn, callback);
/// </code></example>
                            public Max Max ( Object expr, Object exprA )
                            {
                               return max ( expr, exprA );
                            }
                            internal Max max ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Max (arguments);
                            }
/// <summary>
/// <para>Finds the maximum element of a sequence.</para>
///</summary>
/// <example><para>Example: Return the maximum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).max().run(conn, callback);
/// </code></example>
                            public Max Max ( Object expr, ReqlFunction1 func1 )
                            {
                               return max ( expr, func1 );
                            }
                            internal Max max ( Object expr, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                return new Max (arguments);
                            }
/// <summary>
/// <para>Generate a random number between given (or implied) bounds. <code>random</code> takes zero, one or two arguments.</para>
///</summary>
/// <example><para>Example: Generate a random number in the range <code>[0,1)</code></para>
/// <code>r.random().run(conn, callback)
/// </code></example>
                            public Random Random (  )
                            {
                               return random (  );
                            }
                            internal Random random (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Random (arguments);
                            }
/// <summary>
/// <para>Generate a random number between given (or implied) bounds. <code>random</code> takes zero, one or two arguments.</para>
///</summary>
/// <example><para>Example: Generate a random number in the range <code>[0,1)</code></para>
/// <code>r.random().run(conn, callback)
/// </code></example>
                            public Random Random ( Object expr )
                            {
                               return random ( expr );
                            }
                            internal Random random ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Random (arguments);
                            }
/// <summary>
/// <para>Generate a random number between given (or implied) bounds. <code>random</code> takes zero, one or two arguments.</para>
///</summary>
/// <example><para>Example: Generate a random number in the range <code>[0,1)</code></para>
/// <code>r.random().run(conn, callback)
/// </code></example>
                            public Random Random ( Object expr, Object exprA )
                            {
                               return random ( expr, exprA );
                            }
                            internal Random random ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Random (arguments);
                            }
/// <summary>
/// <para><code>r.args</code> is a special term that's used to splice an array of arguments
/// into another term.  This is useful when you want to call a variadic
/// term such as <code>getAll</code> with a set of arguments produced at runtime.</para>
/// <para>This is analogous to using apply in JavaScript.</para>
///</summary>
/// <example><para>Example: Get Alice and Bob from the table <code>people</code>.</para>
/// <code>r.table('people').getAll('Alice', 'Bob').run(conn, callback)
/// // or
/// r.table('people').getAll(r.args(['Alice', 'Bob'])).run(conn, callback)
/// </code></example>
                            public Args Args ( Object expr )
                            {
                               return args ( expr );
                            }
                            internal Args args ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Args (arguments);
                            }
/// <summary>
/// <para>Encapsulate binary data within a query.</para>
///</summary>
/// <example><para>Example: Save an avatar image to a existing user record.</para>
/// <code>var fs = require('fs');
/// fs.readFile('./defaultAvatar.png', function (err, avatarImage) {
///     if (err) {
///         // Handle error
///     }
///     else {
///         r.table('users').get(100).update({
///             avatar: avatarImage
///         })
///     }
/// });
/// </code></example>
                            public Binary Binary ( Object expr )
                            {
                               return binary ( expr );
                            }
                            internal Binary binary ( Object expr )
                            {
                                   var byteArray = expr as byte[];
                                   if( byteArray != null ){
                                     return new Binary(byteArray);
                                   }
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Binary (arguments);
                            }
/// <summary>
/// <para>Convert a <a href="http://geojson.org">GeoJSON</a> object to a ReQL geometry object.</para>
///</summary>
/// <example><para>Example: Convert a GeoJSON object to a ReQL geometry object.</para>
/// <code>var geoJson = {
///     'type': 'Point',
///     'coordinates': [ -122.423246, 37.779388 ]
/// };
/// r.table('geo').insert({
///     id: 'sfo',
///     name: 'San Francisco',
///     location: r.geojson(geoJson)
/// }).run(conn, callback);
/// </code></example>
                            public Geojson Geojson ( Object expr )
                            {
                               return geojson ( expr );
                            }
                            internal Geojson geojson ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Geojson (arguments);
                            }
/// <summary>
/// <para>Construct a geometry object of type Point. The point is specified by two floating point numbers, the longitude (&minus;180 to 180) and the latitude (&minus;90 to 90) of the point on a perfect sphere.</para>
///</summary>
/// <example><para>Example: Define a point.</para>
/// <code>r.table('geo').insert({
///     id: 1,
///     name: 'San Francisco',
///     location: r.point(-122.423246,37.779388)
/// }).run(conn, callback);
/// </code></example>
                            public Point Point ( Object expr, Object exprA )
                            {
                               return point ( expr, exprA );
                            }
                            internal Point point ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Point (arguments);
                            }
/// <summary>
/// <para>Construct a geometry object of type Line. The line can be specified in one of two ways:</para>
/// <ul>
/// <li>Two or more two-item arrays, specifying longitude and latitude numbers of the line's vertices;</li>
/// <li>Two or more <a href="/api/javascript/point">Point</a> objects specifying the line's vertices.</li>
/// </ul>
///</summary>
/// <example><para>Example: Define a line.</para>
/// <code>r.table('geo').insert({
///     id: 101,
///     route: r.line([-122.423246,37.779388], [-121.886420,37.329898])
/// }).run(conn, callback);
/// </code></example>
                            public Line Line ( Object expr, Object exprA, params object[] exprs )
                            {
                               return line ( expr, exprA, exprs );
                            }
                            internal Line line ( Object expr, Object exprA, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAddAll(exprs);
                                return new Line (arguments);
                            }
/// <summary>
/// <para>Construct a geometry object of type Polygon. The Polygon can be specified in one of two ways:</para>
/// <ul>
/// <li>Three or more two-item arrays, specifying longitude and latitude numbers of the polygon's vertices;</li>
/// <li>Three or more <a href="/api/javascript/point">Point</a> objects specifying the polygon's vertices.</li>
/// </ul>
///</summary>
/// <example><para>Example: Define a polygon.</para>
/// <code>r.table('geo').insert({
///     id: 101,
///     rectangle: r.polygon(
///         [-122.423246,37.779388],
///         [-122.423246,37.329898],
///         [-121.886420,37.329898],
///         [-121.886420,37.779388]
///     )
/// }).run(conn, callback);
/// </code></example>
                            public Polygon Polygon ( Object expr, Object exprA, Object exprB, params object[] exprs )
                            {
                               return polygon ( expr, exprA, exprB, exprs );
                            }
                            internal Polygon polygon ( Object expr, Object exprA, Object exprB, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAddAll(exprs);
                                return new Polygon (arguments);
                            }
/// <summary>
/// <para>Compute the distance between a point and another geometry object. At least one of the geometry objects specified must be a point.</para>
///</summary>
/// <example><para>Example: Compute the distance between two points on the Earth in kilometers.</para>
/// <code>var point1 = r.point(-122.423246,37.779388);
/// var point2 = r.point(-117.220406,32.719464);
/// r.distance(point1, point2, {unit: 'km'}).run(conn, callback);
/// // result returned to callback 
/// 734.1252496021841
/// </code></example>
                            public Distance Distance ( Object expr, Object exprA )
                            {
                               return distance ( expr, exprA );
                            }
                            internal Distance distance ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Distance (arguments);
                            }
/// <summary>
/// <para>Tests whether two geometry objects intersect with one another. When applied to a sequence of geometry objects, <code>intersects</code> acts as a <a href="/api/javascript/filter">filter</a>, returning a sequence of objects from the sequence that intersect with the argument.</para>
///</summary>
/// <example><para>Example: Is <code>point2</code> within a 2000-meter circle around <code>point1</code>?</para>
/// <code>var point1 = r.point(-117.220406,32.719464);
/// var point2 = r.point(-117.206201,32.725186);
/// r.circle(point1, 2000).intersects(point2).run(conn, callback);
/// // result returned to callback 
/// true
/// </code></example>
                            public Intersects Intersects ( Object expr, Object exprA )
                            {
                               return intersects ( expr, exprA );
                            }
                            internal Intersects intersects ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Intersects (arguments);
                            }
/// <summary>
/// <para>Construct a circular line or polygon. A circle in RethinkDB is a polygon or line <em>approximating</em> a circle of a given radius around a given center, consisting of a specified number of vertices (default 32).</para>
///</summary>
/// <example><para>Example: Define a circle.</para>
/// <code>r.table('geo').insert({
///     id: 300,
///     name: 'Hayes Valley',
///     neighborhood: r.circle([-122.423246,37.779388], 1000)
/// }).run(conn, callback);
/// </code></example>
                            public Circle Circle ( Object expr )
                            {
                               return circle ( expr );
                            }
                            internal Circle circle ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Circle (arguments);
                            }
/// <summary>
/// <para>Construct a circular line or polygon. A circle in RethinkDB is a polygon or line <em>approximating</em> a circle of a given radius around a given center, consisting of a specified number of vertices (default 32).</para>
///</summary>
/// <example><para>Example: Define a circle.</para>
/// <code>r.table('geo').insert({
///     id: 300,
///     name: 'Hayes Valley',
///     neighborhood: r.circle([-122.423246,37.779388], 1000)
/// }).run(conn, callback);
/// </code></example>
                            public Circle Circle ( Object expr, Object exprA )
                            {
                               return circle ( expr, exprA );
                            }
                            internal Circle circle ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Circle (arguments);
                            }
/// <summary>
/// <para>Construct a circular line or polygon. A circle in RethinkDB is a polygon or line <em>approximating</em> a circle of a given radius around a given center, consisting of a specified number of vertices (default 32).</para>
///</summary>
/// <example><para>Example: Define a circle.</para>
/// <code>r.table('geo').insert({
///     id: 300,
///     name: 'Hayes Valley',
///     neighborhood: r.circle([-122.423246,37.779388], 1000)
/// }).run(conn, callback);
/// </code></example>
                            public Circle Circle ( Object expr, Object exprA, Object exprB )
                            {
                               return circle ( expr, exprA, exprB );
                            }
                            internal Circle circle ( Object expr, Object exprA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                return new Circle (arguments);
                            }
                            public Minval Minval (  )
                            {
                               return minval (  );
                            }
                            internal Minval minval (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Minval (arguments);
                            }
                            public Maxval Maxval (  )
                            {
                               return maxval (  );
                            }
                            internal Maxval maxval (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Maxval (arguments);
                            }



    }
}
