








//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;

namespace RethinkDb.Driver.Ast {
    public class TopLevel {

        public ReqlExpr expr(Object value){
            return Util.ToReqlExpr(value);
        }

        public ReqlExpr row(params object[] values) {
            throw new ReqlDriverError("r.row is not implemented in the C# driver. Use lambda syntax instead.");
        }

                    public Javascript js ( Object expr )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        return new Javascript (arguments);
                    }
/// <summary>
/// Return a UUID (universally unique identifier), a string that can be used as a unique ID.
///</summary>
/// <example><strong>Example:</strong> Generate a UUID.
/// <code>&gt; r.uuid().run(conn, callback)
/// // result returned to callback
/// 27961a0e-f4e8-4eb3-bf95-c5203e1d87b9
/// </code></example>
                    public Uuid uuid (  )
                    {
                        Arguments arguments = new Arguments();
                        return new Uuid (arguments);
                    }
/// <summary>
/// Retrieve data from the specified URL over HTTP.  The return type depends on the <code>resultFormat</code> option, which checks the <code>Content-Type</code> of the response by default.
///</summary>
/// <example><strong>Example:</strong> Perform a simple HTTP <code>GET</code> request, and store the result in a table.
/// <code>r.table('posts').insert(r.http('http://httpbin.org/get')).run(conn, callback)
/// </code></example>
                    public Http http ( Object expr )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        return new Http (arguments);
                    }
/// <summary>
/// Throw a runtime error. If called with no arguments inside the second argument to <code>default</code>, re-throw the current error.
///</summary>
/// <example><strong>Example:</strong> Iron Man can't possibly have lost a battle:
/// <code>r.table('marvel').get('IronMan').do(function(ironman) {
///     return r.branch(ironman('victories').lt(ironman('battles')),
///         r.error('impossible code path'),
///         ironman)
/// }).run(conn, callback)
/// </code></example>
                    public Error error ( Object expr )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        return new Error (arguments);
                    }
/// <summary>
/// Reference a database.
///</summary>
/// <example><strong>Example:</strong> Explicitly specify a database for a query.
/// <code>r.db('heroes').table('marvel').run(conn, callback)
/// </code></example>
                    public Db db ( Object expr )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        return new Db (arguments);
                    }
/// <summary>
/// Select all documents in a table. This command can be chained with other commands to do
/// further processing on the data.
///</summary>
/// <example><strong>Example:</strong> Return all documents in the table 'marvel' of the default database.
/// <code>r.table('marvel').run(conn, callback)
/// </code></example>
                    public Table table ( Object expr )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        return new Table (arguments);
                    }
/// <summary>
/// Select all documents in a table. This command can be chained with other commands to do
/// further processing on the data.
///</summary>
/// <example><strong>Example:</strong> Return all documents in the table 'marvel' of the default database.
/// <code>r.table('marvel').run(conn, callback)
/// </code></example>
                    public Table table ( Db db, Object expr )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(db);
                        arguments.CoerceAndAdd(expr);
                        return new Table (arguments);
                    }
/// <summary>
/// Test if two values are equal.
///</summary>
/// <example><strong>Example:</strong> Does 2 equal 2?
/// <code>r.expr(2).eq(2).run(conn, callback)
/// </code></example>
                    public Eq eq ( Object expr, Object exprA, params object[] exprs )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAddAll(exprs);
                        return new Eq (arguments);
                    }
/// <summary>
/// Test if two values are not equal.
///</summary>
/// <example><strong>Example:</strong> Does 2 not equal 2?
/// <code>r.expr(2).ne(2).run(conn, callback)
/// </code></example>
                    public Ne ne ( Object expr, Object exprA, params object[] exprs )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAddAll(exprs);
                        return new Ne (arguments);
                    }
/// <summary>
/// Test if the first value is less than other.
///</summary>
/// <example><strong>Example:</strong> Is 2 less than 2?
/// <code>r.expr(2).lt(2).run(conn, callback)
/// </code></example>
                    public Lt lt ( Object expr, Object exprA, params object[] exprs )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAddAll(exprs);
                        return new Lt (arguments);
                    }
/// <summary>
/// Test if the first value is less than or equal to other.
///</summary>
/// <example><strong>Example:</strong> Is 2 less than or equal to 2?
/// <code>r.expr(2).le(2).run(conn, callback)
/// </code></example>
                    public Le le ( Object expr, Object exprA, params object[] exprs )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAddAll(exprs);
                        return new Le (arguments);
                    }
/// <summary>
/// Test if the first value is greater than other.
///</summary>
/// <example><strong>Example:</strong> Is 2 greater than 2?
/// <code>r.expr(2).gt(2).run(conn, callback)
/// </code></example>
                    public Gt gt ( Object expr, Object exprA, params object[] exprs )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAddAll(exprs);
                        return new Gt (arguments);
                    }
/// <summary>
/// Test if the first value is greater than or equal to other.
///</summary>
/// <example><strong>Example:</strong> Is 2 greater than or equal to 2?
/// <code>r.expr(2).ge(2).run(conn, callback)
/// </code></example>
                    public Ge ge ( Object expr, Object exprA, params object[] exprs )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAddAll(exprs);
                        return new Ge (arguments);
                    }
/// <summary>
/// Compute the logical inverse (not) of an expression.
/// <code>not</code> can be called either via method chaining, immediately after an expression that evaluates as a boolean value, or by passing the expression as a parameter to <code>not</code>.
///</summary>
/// <example><strong>Example:</strong> Not true is false.
/// <code>r(true).not().run(conn, callback)
/// r.not(true).run(conn, callback)
/// </code></example>
                    public Not not ( Object expr )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        return new Not (arguments);
                    }
/// <summary>
/// Sum two numbers, concatenate two strings, or concatenate 2 arrays.
///</summary>
/// <example><strong>Example:</strong> It's as easy as 2 + 2 = 4.
/// <code>r.expr(2).add(2).run(conn, callback)
/// </code></example>
                    public Add add ( Object expr, params object[] exprs )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAddAll(exprs);
                        return new Add (arguments);
                    }
/// <summary>
/// Subtract two numbers.
///</summary>
/// <example><strong>Example:</strong> It's as easy as 2 - 2 = 0.
/// <code>r.expr(2).sub(2).run(conn, callback)
/// </code></example>
                    public Sub sub ( Object expr, params object[] exprs )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAddAll(exprs);
                        return new Sub (arguments);
                    }
/// <summary>
/// Multiply two numbers, or make a periodic array.
///</summary>
/// <example><strong>Example:</strong> It's as easy as 2 * 2 = 4.
/// <code>r.expr(2).mul(2).run(conn, callback)
/// </code></example>
                    public Mul mul ( Object expr, params object[] exprs )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAddAll(exprs);
                        return new Mul (arguments);
                    }
/// <summary>
/// Divide two numbers.
///</summary>
/// <example><strong>Example:</strong> It's as easy as 2 / 2 = 1.
/// <code>r.expr(2).div(2).run(conn, callback)
/// </code></example>
                    public Div div ( Object expr, params object[] exprs )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAddAll(exprs);
                        return new Div (arguments);
                    }
/// <summary>
/// Find the remainder when dividing two numbers.
///</summary>
/// <example><strong>Example:</strong> It's as easy as 2 % 2 = 0.
/// <code>r.expr(2).mod(2).run(conn, callback)
/// </code></example>
                    public Mod mod ( Object expr, Object exprA )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(exprA);
                        return new Mod (arguments);
                    }
/// <summary>
/// Creates an object from a list of key-value pairs, where the keys must
/// be strings.  <code>r.object(A, B, C, D)</code> is equivalent to
/// <code>r.expr([[A, B], [C, D]]).coerce_to('OBJECT')</code>.
///</summary>
/// <example><strong>Example:</strong> Create a simple object.
/// <code>r.object('id', 5, 'data', ['foo', 'bar']).run(conn, callback)
/// </code></example>
                    public ReqlObject object_ ( params object[] exprs )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAddAll(exprs);
                        return new ReqlObject (arguments);
                    }
/// <summary>
/// Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.
///</summary>
/// <example><strong>Example:</strong> Return the first five squares.
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                    public Map map ( Object expr, ReqlFunction1 func1 )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(func1);
                        return new Map (arguments);
                    }
/// <summary>
/// Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.
///</summary>
/// <example><strong>Example:</strong> Return the first five squares.
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                    public Map map ( Object expr, Object exprA, ReqlFunction2 func2 )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(func2);
                        return new Map (arguments);
                    }
/// <summary>
/// Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.
///</summary>
/// <example><strong>Example:</strong> Return the first five squares.
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                    public Map map ( Object expr, Object exprA, Object exprB, ReqlFunction3 func3 )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(exprB);
                        arguments.CoerceAndAdd(func3);
                        return new Map (arguments);
                    }
/// <summary>
/// Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.
///</summary>
/// <example><strong>Example:</strong> Return the first five squares.
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                    public Map map ( Object expr, Object exprA, Object exprB, Object exprC, ReqlFunction4 func4 )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(exprB);
                        arguments.CoerceAndAdd(exprC);
                        arguments.CoerceAndAdd(func4);
                        return new Map (arguments);
                    }
/// <summary>
/// Concatenate two or more sequences.
///</summary>
/// <example><strong>Example:</strong> Construct a stream of all heroes.
/// <code>r.table('marvel').union(r.table('dc')).run(conn, callback);
/// </code></example>
                    public Union union ( params object[] exprs )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAddAll(exprs);
                        return new Union (arguments);
                    }
/// <summary>
/// Generate a stream of sequential integers in a specified range.
///</summary>
/// <example><strong>Example:</strong> Return a four-element range of <code>[0, 1, 2, 3]</code>.
/// <code>&gt; r.range(4).run(conn, callback)
/// 
/// [0, 1, 2, 3]
/// </code></example>
                    public Range range (  )
                    {
                        Arguments arguments = new Arguments();
                        return new Range (arguments);
                    }
/// <summary>
/// Generate a stream of sequential integers in a specified range.
///</summary>
/// <example><strong>Example:</strong> Return a four-element range of <code>[0, 1, 2, 3]</code>.
/// <code>&gt; r.range(4).run(conn, callback)
/// 
/// [0, 1, 2, 3]
/// </code></example>
                    public Range range ( Object expr )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        return new Range (arguments);
                    }
/// <summary>
/// Generate a stream of sequential integers in a specified range.
///</summary>
/// <example><strong>Example:</strong> Return a four-element range of <code>[0, 1, 2, 3]</code>.
/// <code>&gt; r.range(4).run(conn, callback)
/// 
/// [0, 1, 2, 3]
/// </code></example>
                    public Range range ( Object expr, Object exprA )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(exprA);
                        return new Range (arguments);
                    }
/// <summary>
/// Gets the type of a value.
///</summary>
/// <example><strong>Example:</strong> Get the type of a string.
/// <code>r.expr("foo").typeOf().run(conn, callback)
/// </code></example>
                    public TypeOf typeOf_ ( Object expr )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        return new TypeOf (arguments);
                    }
/// <summary>
/// Create a database. A RethinkDB database is a collection of tables, similar to
/// relational databases.
/// If successful, the operation returns an object: <code>{created: 1}</code>. If a database with the
/// same name already exists the operation throws <code>RqlRuntimeError</code>.
/// Note: that you can only use alphanumeric characters and underscores for the database name.
///</summary>
/// <example><strong>Example:</strong> Create a database named 'superheroes'.
/// <code>r.dbCreate('superheroes').run(conn, callback)
/// </code></example>
                    public DbCreate dbCreate ( Object expr )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        return new DbCreate (arguments);
                    }
/// <summary>
/// Drop a database. The database, all its tables, and corresponding data will be deleted.
/// If successful, the operation returns the object <code>{dropped: 1}</code>. If the specified database
/// doesn't exist a <code>RqlRuntimeError</code> is thrown.
///</summary>
/// <example><strong>Example:</strong> Drop a database named 'superheroes'.
/// <code>r.dbDrop('superheroes').run(conn, callback)
/// </code></example>
                    public DbDrop dbDrop ( Object expr )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        return new DbDrop (arguments);
                    }
/// <summary>
/// List all database names in the system. The result is a list of strings.
///</summary>
/// <example><strong>Example:</strong> List all databases.
/// <code>r.dbList().run(conn, callback)
/// </code></example>
                    public DbList dbList (  )
                    {
                        Arguments arguments = new Arguments();
                        return new DbList (arguments);
                    }
/// <summary>
/// Create a table. A RethinkDB table is a collection of JSON documents.
///</summary>
/// <example><strong>Example:</strong> Create a table named 'dc_universe' with the default settings.
/// <code>r.db('test').tableCreate('dc_universe').run(conn, callback)
/// </code></example>
                    public TableCreate tableCreate ( Db db, Object expr )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(db);
                        arguments.CoerceAndAdd(expr);
                        return new TableCreate (arguments);
                    }
/// <summary>
/// Drop a table. The table and all its data will be deleted.
///</summary>
/// <example><strong>Example:</strong> Drop a table named 'dc_universe'.
/// <code>r.db('test').tableDrop('dc_universe').run(conn, callback)
/// </code></example>
                    public TableDrop tableDrop ( Object expr )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        return new TableDrop (arguments);
                    }
/// <summary>
/// Drop a table. The table and all its data will be deleted.
///</summary>
/// <example><strong>Example:</strong> Drop a table named 'dc_universe'.
/// <code>r.db('test').tableDrop('dc_universe').run(conn, callback)
/// </code></example>
                    public TableDrop tableDrop ( Db db, Object expr )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(db);
                        arguments.CoerceAndAdd(expr);
                        return new TableDrop (arguments);
                    }
/// <summary>
/// List all table names in a database. The result is a list of strings.
///</summary>
/// <example><strong>Example:</strong> List all tables of the 'test' database.
/// <code>r.db('test').tableList().run(conn, callback)
/// </code></example>
                    public TableList tableList ( Db db )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(db);
                        return new TableList (arguments);
                    }
/// <summary>
/// Wait for a table or all the tables in a database to be ready. A table may be temporarily unavailable after creation, rebalancing or reconfiguring. The <code>wait</code> command blocks until the given table (or database) is fully up to date.
///</summary>
/// <example><strong>Example:</strong> Wait for a table to be ready.
/// <code>&gt; r.table('superheroes').wait().run(conn, callback);
/// </code></example>
                    public Wait wait_ (  )
                    {
                        Arguments arguments = new Arguments();
                        return new Wait (arguments);
                    }
/// <summary>
/// Wait for a table or all the tables in a database to be ready. A table may be temporarily unavailable after creation, rebalancing or reconfiguring. The <code>wait</code> command blocks until the given table (or database) is fully up to date.
///</summary>
/// <example><strong>Example:</strong> Wait for a table to be ready.
/// <code>&gt; r.table('superheroes').wait().run(conn, callback);
/// </code></example>
                    public Wait wait_ ( Table table )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(table);
                        return new Wait (arguments);
                    }
/// <summary>
/// Wait for a table or all the tables in a database to be ready. A table may be temporarily unavailable after creation, rebalancing or reconfiguring. The <code>wait</code> command blocks until the given table (or database) is fully up to date.
///</summary>
/// <example><strong>Example:</strong> Wait for a table to be ready.
/// <code>&gt; r.table('superheroes').wait().run(conn, callback);
/// </code></example>
                    public Wait wait_ ( Db db )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(db);
                        return new Wait (arguments);
                    }
/// <summary>
/// Reconfigure a table's sharding and replication.
///</summary>
/// <example><strong>Example:</strong> Reconfigure a table.
/// <code>&gt; r.table('superheroes').reconfigure({shards: 2, replicas: 1}).run(conn, callback);
/// </code></example>
                    public Reconfigure reconfigure (  )
                    {
                        Arguments arguments = new Arguments();
                        return new Reconfigure (arguments);
                    }
/// <summary>
/// Reconfigure a table's sharding and replication.
///</summary>
/// <example><strong>Example:</strong> Reconfigure a table.
/// <code>&gt; r.table('superheroes').reconfigure({shards: 2, replicas: 1}).run(conn, callback);
/// </code></example>
                    public Reconfigure reconfigure ( Table table )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(table);
                        return new Reconfigure (arguments);
                    }
/// <summary>
/// Reconfigure a table's sharding and replication.
///</summary>
/// <example><strong>Example:</strong> Reconfigure a table.
/// <code>&gt; r.table('superheroes').reconfigure({shards: 2, replicas: 1}).run(conn, callback);
/// </code></example>
                    public Reconfigure reconfigure ( Db db )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(db);
                        return new Reconfigure (arguments);
                    }
/// <summary>
/// Rebalances the shards of a table. When called on a database, all the tables in that database will be rebalanced.
///</summary>
/// <example><strong>Example:</strong> Rebalance a table.
/// <code>&gt; r.table('superheroes').rebalance().run(conn, callback);
/// </code></example>
                    public Rebalance rebalance (  )
                    {
                        Arguments arguments = new Arguments();
                        return new Rebalance (arguments);
                    }
/// <summary>
/// Rebalances the shards of a table. When called on a database, all the tables in that database will be rebalanced.
///</summary>
/// <example><strong>Example:</strong> Rebalance a table.
/// <code>&gt; r.table('superheroes').rebalance().run(conn, callback);
/// </code></example>
                    public Rebalance rebalance ( Db db )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(db);
                        return new Rebalance (arguments);
                    }
/// <summary>
/// Rebalances the shards of a table. When called on a database, all the tables in that database will be rebalanced.
///</summary>
/// <example><strong>Example:</strong> Rebalance a table.
/// <code>&gt; r.table('superheroes').rebalance().run(conn, callback);
/// </code></example>
                    public Rebalance rebalance ( Table table )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(table);
                        return new Rebalance (arguments);
                    }
                    public Funcall do_ ( Object expr, params object[] exprs )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAddAll(exprs);
                        return new Funcall (arguments);
                    }
                    public Funcall do_ ( Object expr, ReqlFunction1 func1 )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(func1);
                        return new Funcall (arguments);
                    }
                    public Funcall do_ ( Object expr, Object exprA, ReqlFunction2 func2 )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(func2);
                        return new Funcall (arguments);
                    }
                    public Funcall do_ ( Object expr, Object exprA, Object exprB, ReqlFunction3 func3 )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(exprB);
                        arguments.CoerceAndAdd(func3);
                        return new Funcall (arguments);
                    }
                    public Funcall do_ ( Object expr, Object exprA, Object exprB, Object exprC, ReqlFunction4 func4 )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(exprB);
                        arguments.CoerceAndAdd(exprC);
                        arguments.CoerceAndAdd(func4);
                        return new Funcall (arguments);
                    }
/// <summary>
/// If the <code>test</code> expression returns <code>false</code> or <code>null</code>, the <code>false_branch</code> will be evaluated.
/// Otherwise, the <code>true_branch</code> will be evaluated.
/// The <code>branch</code> command is effectively an <code>if</code> renamed due to language constraints.
/// The type of the result is determined by the type of the branch that gets executed.
///</summary>
/// <example><strong>Example:</strong> Return heroes and superheroes.
/// <code>r.table('marvel').map(
///     r.branch(
///         r.row('victories').gt(100),
///         r.row('name').add(' is a superhero'),
///         r.row('name').add(' is a hero')
///     )
/// ).run(conn, callback)
/// </code></example>
                    public Branch branch ( Object expr, Object exprA, Object exprB )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(exprB);
                        return new Branch (arguments);
                    }
/// <summary>
/// Compute the logical "or" of two or more values.
///</summary>
/// <example><strong>Example:</strong> Return whether either <code>a</code> or <code>b</code> evaluate to true.
/// <code>var a = true, b = false;
/// r.expr(a).or(b).run(conn, callback);
/// // result passed to callback
/// true
/// </code></example>
                    public Or or ( Object expr, Object exprA, params object[] exprs )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAddAll(exprs);
                        return new Or (arguments);
                    }
/// <summary>
/// Compute the logical "and" of two or more values.
///</summary>
/// <example><strong>Example:</strong> Return whether both <code>a</code> and <code>b</code> evaluate to true.
/// <code>var a = true, b = false;
/// r.expr(a).and(b).run(conn, callback);
/// // result passed to callback
/// false
/// </code></example>
                    public And and ( Object expr, params object[] exprs )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAddAll(exprs);
                        return new And (arguments);
                    }
                    public Asc asc ( Object expr )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        return new Asc (arguments);
                    }
                    public Desc desc ( Object expr )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        return new Desc (arguments);
                    }
/// <summary>
/// Get information about a ReQL value.
///</summary>
/// <example><strong>Example:</strong> Get information about a table such as primary key, or cache size.
/// <code>r.table('marvel').info().run(conn, callback)
/// </code></example>
                    public Info info ( Object expr )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        return new Info (arguments);
                    }
/// <summary>
/// Parse a JSON string on the server.
///</summary>
/// <example><strong>Example:</strong> Send an array to the server.
/// <code>r.json("[1,2,3]").run(conn, callback)
/// </code></example>
                    public Json json ( Object expr )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        return new Json (arguments);
                    }
/// <summary>
/// Create a time object based on an ISO 8601 date-time string (e.g. '2013-01-01T01:01:01+00:00'). We support all valid ISO 8601 formats except for week dates. If you pass an ISO 8601 date-time without a time zone, you must specify the time zone with the <code>defaultTimezone</code> argument. Read more about the ISO 8601 format at <a href="http://en.wikipedia.org/wiki/ISO_8601">Wikipedia</a>.
///</summary>
/// <example><strong>Example:</strong> Update the time of John's birth.
/// <code>r.table("user").get("John").update({birth: r.ISO8601('1986-11-03T08:30:00-07:00')}).run(conn, callback)
/// </code></example>
                    public Iso8601 iso8601 ( Object expr )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        return new Iso8601 (arguments);
                    }
/// <summary>
/// Create a time object based on seconds since epoch. The first argument is a double and
/// will be rounded to three decimal places (millisecond-precision).
///</summary>
/// <example><strong>Example:</strong> Update the birthdate of the user "John" to November 3rd, 1986.
/// <code>r.table("user").get("John").update({birthdate: r.epochTime(531360000)})
///     .run(conn, callback)
/// </code></example>
                    public EpochTime epochTime ( Object expr )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        return new EpochTime (arguments);
                    }
/// <summary>
/// Return a time object representing the current time in UTC. The command now() is computed once when the server receives the query, so multiple instances of r.now() will always return the same time inside a query.
///</summary>
/// <example><strong>Example:</strong> Add a new user with the time at which he subscribed.
/// <code>r.table("users").insert({
///     name: "John",
///     subscription_date: r.now()
/// }).run(conn, callback)
/// </code></example>
                    public Now now (  )
                    {
                        Arguments arguments = new Arguments();
                        return new Now (arguments);
                    }
/// <summary>
/// Create a time object for a specific time.
/// A few restrictions exist on the arguments:
/// <ul>
/// <li><code>year</code> is an integer between 1400 and 9,999.</li>
/// <li><code>month</code> is an integer between 1 and 12.</li>
/// <li><code>day</code> is an integer between 1 and 31.</li>
/// <li><code>hour</code> is an integer.</li>
/// <li><code>minutes</code> is an integer.</li>
/// <li><code>seconds</code> is a double. Its value will be rounded to three decimal places
/// (millisecond-precision).</li>
/// <li><code>timezone</code> can be <code>'Z'</code> (for UTC) or a string with the format <code>±[hh]:[mm]</code>.</li>
/// </ul>
///</summary>
/// <example><strong>Example:</strong> Update the birthdate of the user "John" to November 3rd, 1986 UTC.
/// <code>r.table("user").get("John").update({birthdate: r.time(1986, 11, 3, 'Z')})
///     .run(conn, callback)
/// </code></example>
                    public Time time ( Object expr, Object exprA, Object exprB, Object exprC )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(exprB);
                        arguments.CoerceAndAdd(exprC);
                        return new Time (arguments);
                    }
/// <summary>
/// Create a time object for a specific time.
/// A few restrictions exist on the arguments:
/// <ul>
/// <li><code>year</code> is an integer between 1400 and 9,999.</li>
/// <li><code>month</code> is an integer between 1 and 12.</li>
/// <li><code>day</code> is an integer between 1 and 31.</li>
/// <li><code>hour</code> is an integer.</li>
/// <li><code>minutes</code> is an integer.</li>
/// <li><code>seconds</code> is a double. Its value will be rounded to three decimal places
/// (millisecond-precision).</li>
/// <li><code>timezone</code> can be <code>'Z'</code> (for UTC) or a string with the format <code>±[hh]:[mm]</code>.</li>
/// </ul>
///</summary>
/// <example><strong>Example:</strong> Update the birthdate of the user "John" to November 3rd, 1986 UTC.
/// <code>r.table("user").get("John").update({birthdate: r.time(1986, 11, 3, 'Z')})
///     .run(conn, callback)
/// </code></example>
                    public Time time ( Object expr, Object exprA, Object exprB, Object exprC, Object exprD, Object exprE, Object exprF )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(exprB);
                        arguments.CoerceAndAdd(exprC);
                        arguments.CoerceAndAdd(exprD);
                        arguments.CoerceAndAdd(exprE);
                        arguments.CoerceAndAdd(exprF);
                        return new Time (arguments);
                    }
                    public Monday monday (  )
                    {
                        Arguments arguments = new Arguments();
                        return new Monday (arguments);
                    }
                    public Tuesday tuesday (  )
                    {
                        Arguments arguments = new Arguments();
                        return new Tuesday (arguments);
                    }
                    public Wednesday wednesday (  )
                    {
                        Arguments arguments = new Arguments();
                        return new Wednesday (arguments);
                    }
                    public Thursday thursday (  )
                    {
                        Arguments arguments = new Arguments();
                        return new Thursday (arguments);
                    }
                    public Friday friday (  )
                    {
                        Arguments arguments = new Arguments();
                        return new Friday (arguments);
                    }
                    public Saturday saturday (  )
                    {
                        Arguments arguments = new Arguments();
                        return new Saturday (arguments);
                    }
                    public Sunday sunday (  )
                    {
                        Arguments arguments = new Arguments();
                        return new Sunday (arguments);
                    }
                    public January january (  )
                    {
                        Arguments arguments = new Arguments();
                        return new January (arguments);
                    }
                    public February february (  )
                    {
                        Arguments arguments = new Arguments();
                        return new February (arguments);
                    }
                    public March march (  )
                    {
                        Arguments arguments = new Arguments();
                        return new March (arguments);
                    }
                    public April april (  )
                    {
                        Arguments arguments = new Arguments();
                        return new April (arguments);
                    }
                    public May may (  )
                    {
                        Arguments arguments = new Arguments();
                        return new May (arguments);
                    }
                    public June june (  )
                    {
                        Arguments arguments = new Arguments();
                        return new June (arguments);
                    }
                    public July july (  )
                    {
                        Arguments arguments = new Arguments();
                        return new July (arguments);
                    }
                    public August august (  )
                    {
                        Arguments arguments = new Arguments();
                        return new August (arguments);
                    }
                    public September september (  )
                    {
                        Arguments arguments = new Arguments();
                        return new September (arguments);
                    }
                    public October october (  )
                    {
                        Arguments arguments = new Arguments();
                        return new October (arguments);
                    }
                    public November november (  )
                    {
                        Arguments arguments = new Arguments();
                        return new November (arguments);
                    }
                    public December december (  )
                    {
                        Arguments arguments = new Arguments();
                        return new December (arguments);
                    }
/// <summary>
/// Replace an object in a field instead of merging it with an existing object in a <code>merge</code> or <code>update</code> operation.
/// <code>js
/// r.table('users').get(1).update({ data: r.literal({ age: 19, job: 'Engineer' }) }).run(conn, callback)</code>
///</summary>
/// <example></example>
                    public Literal literal (  )
                    {
                        Arguments arguments = new Arguments();
                        return new Literal (arguments);
                    }
/// <summary>
/// Replace an object in a field instead of merging it with an existing object in a <code>merge</code> or <code>update</code> operation.
/// <code>js
/// r.table('users').get(1).update({ data: r.literal({ age: 19, job: 'Engineer' }) }).run(conn, callback)</code>
///</summary>
/// <example></example>
                    public Literal literal ( Object expr )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        return new Literal (arguments);
                    }
/// <summary>
/// Generate a random number between given (or implied) bounds. <code>random</code> takes zero, one or two arguments.
///</summary>
/// <example><strong>Example:</strong> Generate a random number in the range <code>[0,1)</code>
/// <code>r.random().run(conn, callback)
/// </code></example>
                    public Random random (  )
                    {
                        Arguments arguments = new Arguments();
                        return new Random (arguments);
                    }
/// <summary>
/// Generate a random number between given (or implied) bounds. <code>random</code> takes zero, one or two arguments.
///</summary>
/// <example><strong>Example:</strong> Generate a random number in the range <code>[0,1)</code>
/// <code>r.random().run(conn, callback)
/// </code></example>
                    public Random random ( Object expr )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        return new Random (arguments);
                    }
/// <summary>
/// Generate a random number between given (or implied) bounds. <code>random</code> takes zero, one or two arguments.
///</summary>
/// <example><strong>Example:</strong> Generate a random number in the range <code>[0,1)</code>
/// <code>r.random().run(conn, callback)
/// </code></example>
                    public Random random ( Object expr, Object exprA )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(exprA);
                        return new Random (arguments);
                    }
/// <summary>
/// <code>r.args</code> is a special term that's used to splice an array of arguments
/// into another term.  This is useful when you want to call a variadic
/// term such as <code>getAll</code> with a set of arguments produced at runtime.
/// This is analogous to using <strong>apply</strong> in JavaScript.
///</summary>
/// <example><strong>Example:</strong> Get Alice and Bob from the table <code>people</code>.
/// <code>r.table('people').getAll('Alice', 'Bob').run(conn, callback)
/// // or
/// r.table('people').getAll(r.args(['Alice', 'Bob'])).run(conn, callback)
/// </code></example>
                    public Args args ( Object expr )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        return new Args (arguments);
                    }
/// <summary>
/// Encapsulate binary data within a query.
///</summary>
/// <example><strong>Example:</strong> Save an avatar image to a existing user record.
/// <code>var fs = require('fs');
/// fs.readFile('./defaultAvatar.png', function (err, avatarImage) {
///     if (err) {
///         // Handle error
///     }
///     else {
///         r.table('users').get(100).update({
///             avatar: avatarImage
///         })
///     }
/// });
/// </code></example>
                    public Binary binary ( Object expr )
                    {
                        var byteArray = expr as byte[];
                        if( expr != null ){
                            return new Binary(byteArray);
                        }
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        return new Binary (arguments);
                    }
/// <summary>
/// Convert a <a href="http://geojson.org">GeoJSON</a> object to a ReQL geometry object.
///</summary>
/// <example><strong>Example:</strong> Convert a GeoJSON object to a ReQL geometry object.
/// <code>var geoJson = {
///     'type': 'Point',
///     'coordinates': [ -122.423246, 37.779388 ]
/// };
/// r.table('geo').insert({
///     id: 'sfo',
///     name: 'San Francisco',
///     location: r.geojson(geoJson)
/// }).run(conn, callback);
/// </code></example>
                    public Geojson geojson ( Object expr )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        return new Geojson (arguments);
                    }
/// <summary>
/// Construct a geometry object of type Point. The point is specified by two floating point numbers, the longitude (&minus;180 to 180) and the latitude (&minus;90 to 90) of the point on a perfect sphere.
///</summary>
/// <example><strong>Example:</strong> Define a point.
/// <code>r.table('geo').insert({
///     id: 1,
///     name: 'San Francisco',
///     location: r.point(-122.423246,37.779388)
/// }).run(conn, callback);
/// </code></example>
                    public Point point ( Object expr, Object exprA )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(exprA);
                        return new Point (arguments);
                    }
/// <summary>
/// Construct a geometry object of type Line. The line can be specified in one of two ways:
/// <ul>
/// <li>Two or more two-item arrays, specifying longitude and latitude numbers of the line's vertices;</li>
/// <li>Two or more <a href="/api/javascript/point">Point</a> objects specifying the line's vertices.</li>
/// </ul>
///</summary>
/// <example><strong>Example:</strong> Define a line.
/// <code>r.table('geo').insert({
///     id: 101,
///     route: r.line([-122.423246,37.779388], [-121.886420,37.329898])
/// }).run(conn, callback);
/// </code></example>
                    public Line line ( Object expr, Object exprA, params object[] exprs )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAddAll(exprs);
                        return new Line (arguments);
                    }
/// <summary>
/// Construct a geometry object of type Polygon. The Polygon can be specified in one of two ways:
/// <ul>
/// <li>Three or more two-item arrays, specifying longitude and latitude numbers of the polygon's vertices;</li>
/// <li>Three or more <a href="/api/javascript/point">Point</a> objects specifying the polygon's vertices.</li>
/// </ul>
///</summary>
/// <example><strong>Example:</strong> Define a polygon.
/// <code>r.table('geo').insert({
///     id: 101,
///     rectangle: r.polygon(
///         [-122.423246,37.779388],
///         [-122.423246,37.329898],
///         [-121.886420,37.329898],
///         [-121.886420,37.779388]
///     )
/// }).run(conn, callback);
/// </code></example>
                    public Polygon polygon ( Object expr, Object exprA, Object exprB, params object[] exprs )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(exprB);
                        arguments.CoerceAndAddAll(exprs);
                        return new Polygon (arguments);
                    }
/// <summary>
/// Compute the distance between a point and another geometry object. At least one of the geometry objects specified must be a point.
///</summary>
/// <example><strong>Example:</strong> Compute the distance between two points on the Earth in kilometers.
/// <code>var point1 = r.point(-122.423246,37.779388);
/// var point2 = r.point(-117.220406,32.719464);
/// r.distance(point1, point2, {unit: 'km'}).run(conn, callback);
/// // result returned to callback 
/// 734.1252496021841
/// </code></example>
                    public Distance distance ( Object expr, Object exprA )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(exprA);
                        return new Distance (arguments);
                    }
/// <summary>
/// Tests whether two geometry objects intersect with one another. When applied to a sequence of geometry objects, <code>intersects</code> acts as a <a href="/api/javascript/filter">filter</a>, returning a sequence of objects from the sequence that intersect with the argument.
///</summary>
/// <example><strong>Example:</strong> Is <code>point2</code> within a 2000-meter circle around <code>point1</code>?
/// <code>var point1 = r.point(-117.220406,32.719464);
/// var point2 = r.point(-117.206201,32.725186);
/// r.circle(point1, 2000).intersects(point2).run(conn, callback);
/// // result returned to callback 
/// true
/// </code></example>
                    public Intersects intersects ( Object expr, Object exprA )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(exprA);
                        return new Intersects (arguments);
                    }
/// <summary>
/// Construct a circular line or polygon. A circle in RethinkDB is a polygon or line <em>approximating</em> a circle of a given radius around a given center, consisting of a specified number of vertices (default 32).
///</summary>
/// <example><strong>Example:</strong> Define a circle.
/// <code>r.table('geo').insert({
///     id: 300,
///     name: 'Hayes Valley',
///     neighborhood: r.circle([-122.423246,37.779388], 1000)
/// }).run(conn, callback);
/// </code></example>
                    public Circle circle ( Object expr )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        return new Circle (arguments);
                    }
/// <summary>
/// Construct a circular line or polygon. A circle in RethinkDB is a polygon or line <em>approximating</em> a circle of a given radius around a given center, consisting of a specified number of vertices (default 32).
///</summary>
/// <example><strong>Example:</strong> Define a circle.
/// <code>r.table('geo').insert({
///     id: 300,
///     name: 'Hayes Valley',
///     neighborhood: r.circle([-122.423246,37.779388], 1000)
/// }).run(conn, callback);
/// </code></example>
                    public Circle circle ( Object expr, Object exprA )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(exprA);
                        return new Circle (arguments);
                    }
/// <summary>
/// Construct a circular line or polygon. A circle in RethinkDB is a polygon or line <em>approximating</em> a circle of a given radius around a given center, consisting of a specified number of vertices (default 32).
///</summary>
/// <example><strong>Example:</strong> Define a circle.
/// <code>r.table('geo').insert({
///     id: 300,
///     name: 'Hayes Valley',
///     neighborhood: r.circle([-122.423246,37.779388], 1000)
/// }).run(conn, callback);
/// </code></example>
                    public Circle circle ( Object expr, Object exprA, Object exprB )
                    {
                        Arguments arguments = new Arguments();
                        arguments.CoerceAndAdd(expr);
                        arguments.CoerceAndAdd(exprA);
                        arguments.CoerceAndAdd(exprB);
                        return new Circle (arguments);
                    }
                    public Minval minval (  )
                    {
                        Arguments arguments = new Arguments();
                        return new Minval (arguments);
                    }
                    public Maxval maxval (  )
                    {
                        Arguments arguments = new Arguments();
                        return new Maxval (arguments);
                    }



    }
}
