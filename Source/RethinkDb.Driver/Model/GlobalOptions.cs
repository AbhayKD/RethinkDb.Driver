



//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

namespace RethinkDb.Driver.Model {
    public class GlobalOptions {
        
            public bool? UseOutdated { get; set; }
            public string TimeFormat { get; set; }
            public bool? Profile { get; set; }
            public string Durability { get; set; }
            public string GroupFormat { get; set; }
            public bool? Noreply { get; set; }
            public string Db { get; set; }
            public double? ArrayLimit { get; set; }
            public string BinaryFormat { get; set; }
            public double? MinBatchRows { get; set; }
            public double? MaxBatchRows { get; set; }
            public double? MaxBatchBytes { get; set; }
            public double? MaxBatchSeconds { get; set; }
            public double? FirstBatchScaledownFactor { get; set; }

        public OptArgs toOptArgs(){
             var ret = new OptArgs();
            
                 if( this.UseOutdated != null )
                    ret.with("use_outdated", this.UseOutdated);
                 if( this.TimeFormat != null )
                    ret.with("time_format", this.TimeFormat);
                 if( this.Profile != null )
                    ret.with("profile", this.Profile);
                 if( this.Durability != null )
                    ret.with("durability", this.Durability);
                 if( this.GroupFormat != null )
                    ret.with("group_format", this.GroupFormat);
                 if( this.Noreply != null )
                    ret.with("noreply", this.Noreply);
                 if( this.Db != null )
                    ret.with("db", this.Db);
                 if( this.ArrayLimit != null )
                    ret.with("array_limit", this.ArrayLimit);
                 if( this.BinaryFormat != null )
                    ret.with("binary_format", this.BinaryFormat);
                 if( this.MinBatchRows != null )
                    ret.with("min_batch_rows", this.MinBatchRows);
                 if( this.MaxBatchRows != null )
                    ret.with("max_batch_rows", this.MaxBatchRows);
                 if( this.MaxBatchBytes != null )
                    ret.with("max_batch_bytes", this.MaxBatchBytes);
                 if( this.MaxBatchSeconds != null )
                    ret.with("max_batch_seconds", this.MaxBatchSeconds);
                 if( this.FirstBatchScaledownFactor != null )
                    ret.with("first_batch_scaledown_factor", this.FirstBatchScaledownFactor);

            return ret;
        }

        
            public static GlobalOptions withUseOutdated (bool? useOutdated ){
                return new GlobalOptions{ UseOutdated = useOutdated };
            }
            public static GlobalOptions withTimeFormat (string timeFormat ){
                return new GlobalOptions{ TimeFormat = timeFormat };
            }
            public static GlobalOptions withProfile (bool? profile ){
                return new GlobalOptions{ Profile = profile };
            }
            public static GlobalOptions withDurability (string durability ){
                return new GlobalOptions{ Durability = durability };
            }
            public static GlobalOptions withGroupFormat (string groupFormat ){
                return new GlobalOptions{ GroupFormat = groupFormat };
            }
            public static GlobalOptions withNoreply (bool? noreply ){
                return new GlobalOptions{ Noreply = noreply };
            }
            public static GlobalOptions withDb (string db ){
                return new GlobalOptions{ Db = db };
            }
            public static GlobalOptions withArrayLimit (double? arrayLimit ){
                return new GlobalOptions{ ArrayLimit = arrayLimit };
            }
            public static GlobalOptions withBinaryFormat (string binaryFormat ){
                return new GlobalOptions{ BinaryFormat = binaryFormat };
            }
            public static GlobalOptions withMinBatchRows (double? minBatchRows ){
                return new GlobalOptions{ MinBatchRows = minBatchRows };
            }
            public static GlobalOptions withMaxBatchRows (double? maxBatchRows ){
                return new GlobalOptions{ MaxBatchRows = maxBatchRows };
            }
            public static GlobalOptions withMaxBatchBytes (double? maxBatchBytes ){
                return new GlobalOptions{ MaxBatchBytes = maxBatchBytes };
            }
            public static GlobalOptions withMaxBatchSeconds (double? maxBatchSeconds ){
                return new GlobalOptions{ MaxBatchSeconds = maxBatchSeconds };
            }
            public static GlobalOptions withFirstBatchScaledownFactor (double? firstBatchScaledownFactor ){
                return new GlobalOptions{ FirstBatchScaledownFactor = firstBatchScaledownFactor };
            }
    
    }
}
