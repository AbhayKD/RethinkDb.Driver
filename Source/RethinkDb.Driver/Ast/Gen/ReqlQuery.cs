



//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;

namespace RethinkDb.Driver.Ast.Gen {
    public class ReqlQuery : ReqlAst {
    

        protected ReqlQuery (ReqlAst previous, TermType termType, Arguments args, OptArgs optargs) : base(previous, termType, args, optargs)
        {
        }

    /* Static Factories */

    /* Special Methods */
            public Eq eq (params object[] fields){
                    return new Eq (this, new Arguments(fields), new OptArgs());
            }
            public Ne ne (params object[] fields){
                    return new Ne (this, new Arguments(fields), new OptArgs());
            }
            public Lt lt (params object[] fields){
                    return new Lt (this, new Arguments(fields), new OptArgs());
            }
            public Le le (params object[] fields){
                    return new Le (this, new Arguments(fields), new OptArgs());
            }
            public Gt gt (params object[] fields){
                    return new Gt (this, new Arguments(fields), new OptArgs());
            }
            public Ge ge (params object[] fields){
                    return new Ge (this, new Arguments(fields), new OptArgs());
            }
            public Not not (params object[] fields){
                    return new Not (this, new Arguments(fields), new OptArgs());
            }
            public Add add (params object[] fields){
                    return new Add (this, new Arguments(fields), new OptArgs());
            }
            public Sub sub (params object[] fields){
                    return new Sub (this, new Arguments(fields), new OptArgs());
            }
            public Mul mul (params object[] fields){
                    return new Mul (this, new Arguments(fields), new OptArgs());
            }
            public Div div (params object[] fields){
                    return new Div (this, new Arguments(fields), new OptArgs());
            }
            public Mod mod (params object[] fields){
                    return new Mod (this, new Arguments(fields), new OptArgs());
            }
            public Map map (params object[] fields){
                    return new Map (this, new Arguments(fields), new OptArgs());
            }
            public Union union (params object[] fields){
                    return new Union (this, new Arguments(fields), new OptArgs());
            }
            public TypeOf typeOf (params object[] fields){
                    return new TypeOf (this, new Arguments(fields), new OptArgs());
            }
            public Funcall funcall (params object[] fields){
                    return new Funcall (this, new Arguments(fields), new OptArgs());
            }
            public Or or (params object[] fields){
                    return new Or (this, new Arguments(fields), new OptArgs());
            }
            public And and (params object[] fields){
                    return new And (this, new Arguments(fields), new OptArgs());
            }
            public Info info (params object[] fields){
                    return new Info (this, new Arguments(fields), new OptArgs());
            }
            public Distance distance (params object[] fields){
                    return new Distance (this, new Arguments(fields), new OptArgs());
            }
            public Intersects intersects (params object[] fields){
                    return new Intersects (this, new Arguments(fields), new OptArgs());
            }

    }
}
