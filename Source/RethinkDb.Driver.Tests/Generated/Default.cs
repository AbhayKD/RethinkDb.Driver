




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class Default : GeneratedTest {



        [Test]
        public void YamlTest(){

             
             {
                 //JavaQuery, default.yaml, #1
                 //ExpectedOriginal: 1
                 var expected = 1;
                 
                 //Original: r.expr(1).default(2)
                 var obtained = runOrCatch( r.expr(1).default_(2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #2
                 //ExpectedOriginal: 2
                 var expected = 2;
                 
                 //Original: r.expr(null).default(2)
                 var obtained = runOrCatch( r.expr(null).default_(2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #3
                 //ExpectedOriginal: 2
                 var expected = 2;
                 
                 //Original: r.expr({})['b'].default(2)
                 var obtained = runOrCatch( r.expr(new MapObject()).bracket("b").default_(2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #4
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\"a\"`.", [])
                 var expected = err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\"a\"`.", Arrays.asList());
                 
                 //Original: r.expr(r.expr('a')['b']).default(2)
                 var obtained = runOrCatch( r.expr(r.expr("a").bracket("b")).default_(2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #5
                 //ExpectedOriginal: 2
                 var expected = 2;
                 
                 //Original: r.expr([]).reduce(lambda a,b:a+b).default(2)
                 var obtained = runOrCatch( r.expr(Arrays.asList()).reduce((a, b) => r.add(a, b)).default_(2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #6
                 //ExpectedOriginal: 2
                 var expected = 2;
                 
                 //Original: r.expr([]).union([]).reduce(lambda a,b:a+b).default(2)
                 var obtained = runOrCatch( r.expr(Arrays.asList()).union(Arrays.asList()).reduce((a, b) => r.add(a, b)).default_(2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #7
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Cannot convert STRING to SEQUENCE", [])
                 var expected = err("ReqlQueryLogicError", "Cannot convert STRING to SEQUENCE", Arrays.asList());
                 
                 //Original: r.expr('a').reduce(lambda a,b:a+b).default(2)
                 var obtained = runOrCatch( r.expr("a").reduce((a, b) => r.add(a, b)).default_(2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #8
                 //ExpectedOriginal: 2
                 var expected = 2;
                 
                 //Original: (r.expr(null) + 5).default(2)
                 var obtained = runOrCatch( r.add(r.expr(null), 5).default_(2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #9
                 //ExpectedOriginal: 2
                 var expected = 2;
                 
                 //Original: (5 + r.expr(null)).default(2)
                 var obtained = runOrCatch( r.add(5, r.expr(null)).default_(2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #10
                 //ExpectedOriginal: 2
                 var expected = 2;
                 
                 //Original: (5 - r.expr(null)).default(2)
                 var obtained = runOrCatch( r.sub(5, r.expr(null)).default_(2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #11
                 //ExpectedOriginal: 2
                 var expected = 2;
                 
                 //Original: (r.expr(null) - 5).default(2)
                 var obtained = runOrCatch( r.sub(r.expr(null), 5).default_(2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #12
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Expected type STRING but found NUMBER.", [])
                 var expected = err("ReqlQueryLogicError", "Expected type STRING but found NUMBER.", Arrays.asList());
                 
                 //Original: (r.expr('a') + 5).default(2)
                 var obtained = runOrCatch( r.add(r.expr("a"), 5).default_(2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #13
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", [])
                 var expected = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", Arrays.asList());
                 
                 //Original: (5 + r.expr('a')).default(2)
                 var obtained = runOrCatch( r.add(5, r.expr("a")).default_(2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #14
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", [])
                 var expected = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", Arrays.asList());
                 
                 //Original: (r.expr('a') - 5).default(2)
                 var obtained = runOrCatch( r.sub(r.expr("a"), 5).default_(2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #15
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", [])
                 var expected = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", Arrays.asList());
                 
                 //Original: (5 - r.expr('a')).default(2)
                 var obtained = runOrCatch( r.sub(5, r.expr("a")).default_(2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #16
                 //ExpectedOriginal: 1
                 var expected = 1;
                 
                 //Original: r.expr(1).default(r.error())
                 var obtained = runOrCatch( r.expr(1).default_(r.error()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #17
                 //ExpectedOriginal: (null)
                 var expected = null as object;
                 
                 //Original: r.expr(null).default(r.error())
                 var obtained = runOrCatch( r.expr(null).default_(r.error()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #18
                 //ExpectedOriginal: err("ReqlNonExistenceError", "No attribute `b` in object:", [])
                 var expected = err("ReqlNonExistenceError", "No attribute `b` in object:", Arrays.asList());
                 
                 //Original: r.expr({})['b'].default(r.error())
                 var obtained = runOrCatch( r.expr(new MapObject()).bracket("b").default_(r.error()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #19
                 //ExpectedOriginal: err("ReqlNonExistenceError", "Cannot reduce over an empty stream.", [])
                 var expected = err("ReqlNonExistenceError", "Cannot reduce over an empty stream.", Arrays.asList());
                 
                 //Original: r.expr([]).reduce(lambda a,b:a+b).default(r.error)
                 var obtained = runOrCatch( r.expr(Arrays.asList()).reduce((a, b) => r.add(a, b)).default_(r.error()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #20
                 //ExpectedOriginal: err("ReqlNonExistenceError", "Cannot reduce over an empty stream.", [])
                 var expected = err("ReqlNonExistenceError", "Cannot reduce over an empty stream.", Arrays.asList());
                 
                 //Original: r.expr([]).union([]).reduce(lambda a,b:a+b).default(r.error)
                 var obtained = runOrCatch( r.expr(Arrays.asList()).union(Arrays.asList()).reduce((a, b) => r.add(a, b)).default_(r.error()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #21
                 //ExpectedOriginal: err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", [])
                 var expected = err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", Arrays.asList());
                 
                 //Original: (r.expr(null) + 5).default(r.error)
                 var obtained = runOrCatch( r.add(r.expr(null), 5).default_(r.error()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #22
                 //ExpectedOriginal: err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", [])
                 var expected = err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", Arrays.asList());
                 
                 //Original: (5 + r.expr(null)).default(r.error)
                 var obtained = runOrCatch( r.add(5, r.expr(null)).default_(r.error()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #23
                 //ExpectedOriginal: err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", [])
                 var expected = err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", Arrays.asList());
                 
                 //Original: (5 - r.expr(null)).default(r.error)
                 var obtained = runOrCatch( r.sub(5, r.expr(null)).default_(r.error()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #24
                 //ExpectedOriginal: err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", [])
                 var expected = err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", Arrays.asList());
                 
                 //Original: (r.expr(null) - 5).default(r.error)
                 var obtained = runOrCatch( r.sub(r.expr(null), 5).default_(r.error()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #25
                 //ExpectedOriginal: 1
                 var expected = 1;
                 
                 //Original: r.expr(1).default(lambda e:e)
                 var obtained = runOrCatch( r.expr(1).default_(e => e) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #26
                 //ExpectedOriginal: (null)
                 var expected = null as object;
                 
                 //Original: r.expr(null).default(lambda e:e)
                 var obtained = runOrCatch( r.expr(null).default_(e => e) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #27
                 //ExpectedOriginal: ("No attribute `b` in object:\n{}")
                 var expected = "No attribute `b` in object:\n{}";
                 
                 //Original: r.expr({})['b'].default(lambda e:e)
                 var obtained = runOrCatch( r.expr(new MapObject()).bracket("b").default_(e => e) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #28
                 //ExpectedOriginal: ("Cannot reduce over an empty stream.")
                 var expected = "Cannot reduce over an empty stream.";
                 
                 //Original: r.expr([]).reduce(lambda a,b:a+b).default(lambda e:e)
                 var obtained = runOrCatch( r.expr(Arrays.asList()).reduce((a, b) => r.add(a, b)).default_(e => e) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #29
                 //ExpectedOriginal: ("Cannot reduce over an empty stream.")
                 var expected = "Cannot reduce over an empty stream.";
                 
                 //Original: r.expr([]).union([]).reduce(lambda a,b:a+b).default(lambda e:e)
                 var obtained = runOrCatch( r.expr(Arrays.asList()).union(Arrays.asList()).reduce((a, b) => r.add(a, b)).default_(e => e) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #30
                 //ExpectedOriginal: ("Expected type NUMBER but found NULL.")
                 var expected = "Expected type NUMBER but found NULL.";
                 
                 //Original: (r.expr(null) + 5).default(lambda e:e)
                 var obtained = runOrCatch( r.add(r.expr(null), 5).default_(e => e) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #31
                 //ExpectedOriginal: ("Expected type NUMBER but found NULL.")
                 var expected = "Expected type NUMBER but found NULL.";
                 
                 //Original: (5 + r.expr(null)).default(lambda e:e)
                 var obtained = runOrCatch( r.add(5, r.expr(null)).default_(e => e) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #32
                 //ExpectedOriginal: ("Expected type NUMBER but found NULL.")
                 var expected = "Expected type NUMBER but found NULL.";
                 
                 //Original: (5 - r.expr(null)).default(lambda e:e)
                 var obtained = runOrCatch( r.sub(5, r.expr(null)).default_(e => e) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #33
                 //ExpectedOriginal: ("Expected type NUMBER but found NULL.")
                 var expected = "Expected type NUMBER but found NULL.";
                 
                 //Original: (r.expr(null) - 5).default(lambda e:e)
                 var obtained = runOrCatch( r.sub(r.expr(null), 5).default_(e => e) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             //JavaDef, default.yaml, #Templates.YamlTest+DefTest.
             //Original: arr = r.expr([{'a':1},{'a':null},{}]).order_by('a')
             
OrderBy arr = (OrderBy) r.expr(Arrays.asList(new MapObject().with("a", 1), new MapObject().with("a", null), new MapObject())).orderBy("a");             
             
             {
                 //JavaQuery, default.yaml, #35
                 //ExpectedOriginal: [{'a': 1}]
                 var expected = Arrays.asList(new MapObject().with("a", 1));
                 
                 //Original: arr.filter(lambda x:x['a'].eq(1))
                 var obtained = runOrCatch( arr.filter(x => x.bracket("a").eq(1)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #36
                 //ExpectedOriginal: [{'a': 1}]
                 var expected = Arrays.asList(new MapObject().with("a", 1));
                 
                 //Original: arr.filter(lambda x:x['a'].eq(1), default=False)
                 var obtained = runOrCatch( arr.filter(x => x.bracket("a").eq(1)).optArg("default", false) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #37
                 //ExpectedOriginal: [{}, {'a': 1}]
                 var expected = Arrays.asList(new MapObject(), new MapObject().with("a", 1));
                 
                 //Original: arr.filter(lambda x:x['a'].eq(1), default=True)
                 var obtained = runOrCatch( arr.filter(x => x.bracket("a").eq(1)).optArg("default", true) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #38
                 //ExpectedOriginal: [{}, {'a': 1}]
                 var expected = Arrays.asList(new MapObject(), new MapObject().with("a", 1));
                 
                 //Original: arr.filter(lambda x:x['a'].eq(1), default=r.js('true'))
                 var obtained = runOrCatch( arr.filter(x => x.bracket("a").eq(1)).optArg("default", r.js("true")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #39
                 //ExpectedOriginal: [{'a': 1}]
                 var expected = Arrays.asList(new MapObject().with("a", 1));
                 
                 //Original: arr.filter(lambda x:x['a'].eq(1), default=r.js('false'))
                 var obtained = runOrCatch( arr.filter(x => x.bracket("a").eq(1)).optArg("default", r.js("false")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #40
                 //ExpectedOriginal: err("ReqlNonExistenceError", "No attribute `a` in object:", [])
                 var expected = err("ReqlNonExistenceError", "No attribute `a` in object:", Arrays.asList());
                 
                 //Original: arr.filter(lambda x:x['a'].eq(1), default=r.error())
                 var obtained = runOrCatch( arr.filter(x => x.bracket("a").eq(1)).optArg("default", r.error()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #41
                 //ExpectedOriginal: [{'a': 1}]
                 var expected = Arrays.asList(new MapObject().with("a", 1));
                 
                 //Original: r.expr(False).do(lambda d:arr.filter(lambda x:x['a'].eq(1), default=d))
                 var obtained = runOrCatch( r.expr(false).do_(d => arr.filter(x => x.bracket("a").eq(1)).optArg("default", d)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #42
                 //ExpectedOriginal: [{}, {'a': 1}]
                 var expected = Arrays.asList(new MapObject(), new MapObject().with("a", 1));
                 
                 //Original: r.expr(True).do(lambda d:arr.filter(lambda x:x['a'].eq(1), default=d)).order_by('a')
                 var obtained = runOrCatch( r.expr(true).do_(d => arr.filter(x => x.bracket("a").eq(1)).optArg("default", d)).orderBy("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #43
                 //ExpectedOriginal: [{'a': 1}]
                 var expected = Arrays.asList(new MapObject().with("a", 1));
                 
                 //Original: arr.filter(lambda x:x['a'].default(0).eq(1))
                 var obtained = runOrCatch( arr.filter(x => x.bracket("a").default_(0).eq(1)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #44
                 //ExpectedOriginal: ([{}, {'a':null}, {'a':1}])
                 var expected = Arrays.asList(new MapObject(), new MapObject().with("a", null), new MapObject().with("a", 1));
                 
                 //Original: arr.filter(lambda x:x['a'].default(1).eq(1)).order_by('a')
                 var obtained = runOrCatch( arr.filter(x => x.bracket("a").default_(1).eq(1)).orderBy("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #45
                 //ExpectedOriginal: [{'a': 1}]
                 var expected = Arrays.asList(new MapObject().with("a", 1));
                 
                 //Original: arr.filter(lambda x:x['a'].default(r.error()).eq(1))
                 var obtained = runOrCatch( arr.filter(x => x.bracket("a").default_(r.error()).eq(1)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #46
                 //ExpectedOriginal: [{'a': 1}]
                 var expected = Arrays.asList(new MapObject().with("a", 1));
                 
                 //Original: r.expr(0).do(lambda i:arr.filter(lambda x:x['a'].default(i).eq(1)))
                 var obtained = runOrCatch( r.expr(0).do_(i => arr.filter(x => x.bracket("a").default_(i).eq(1))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #47
                 //ExpectedOriginal: ([{},{'a':null},{'a':1}])
                 var expected = Arrays.asList(new MapObject(), new MapObject().with("a", null), new MapObject().with("a", 1));
                 
                 //Original: r.expr(1).do(lambda i:arr.filter(lambda x:x['a'].default(i).eq(1))).order_by('a')
                 var obtained = runOrCatch( r.expr(1).do_(i => arr.filter(x => x.bracket("a").default_(i).eq(1))).orderBy("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #48
                 //ExpectedOriginal: [{'a': 1}]
                 var expected = Arrays.asList(new MapObject().with("a", 1));
                 
                 //Original: arr.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)))
                 var obtained = runOrCatch( arr.filter(x => r.or(x.bracket("a").eq(1), x.bracket("a").bracket("b").eq(2))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #49
                 //ExpectedOriginal: [{'a': 1}]
                 var expected = Arrays.asList(new MapObject().with("a", 1));
                 
                 //Original: arr.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)), default=False)
                 var obtained = runOrCatch( arr.filter(x => r.or(x.bracket("a").eq(1), x.bracket("a").bracket("b").eq(2))).optArg("default", false) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #50
                 //ExpectedOriginal: ([{}, {'a':null}, {'a':1}])
                 var expected = Arrays.asList(new MapObject(), new MapObject().with("a", null), new MapObject().with("a", 1));
                 
                 //Original: arr.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)), default=True).order_by('a')
                 var obtained = runOrCatch( arr.filter(x => r.or(x.bracket("a").eq(1), x.bracket("a").bracket("b").eq(2))).optArg("default", true).orderBy("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #51
                 //ExpectedOriginal: err("ReqlNonExistenceError", "No attribute `a` in object:", [])
                 var expected = err("ReqlNonExistenceError", "No attribute `a` in object:", Arrays.asList());
                 
                 //Original: arr.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)), default=r.error())
                 var obtained = runOrCatch( arr.filter(x => r.or(x.bracket("a").eq(1), x.bracket("a").bracket("b").eq(2))).optArg("default", r.error()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #52
                 //ExpectedOriginal: partial({'tables_created':1})
                 var expected = partial(new MapObject().with("tables_created", 1));
                 
                 //Original: r.table_create('default_test')
                 var obtained = runOrCatch( r.tableCreate("default_test") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #53
                 //ExpectedOriginal: ({'deleted':0.0,'replaced':0.0,'generated_keys':arrlen(3,uuid()),'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':3})
                 var expected = new MapObject().with("deleted", 0.0).with("replaced", 0.0).with("generated_keys", arrlen(3, uuid())).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 3);
                 
                 //Original: r.table('default_test').insert(arr)
                 var obtained = runOrCatch( r.table("default_test").insert(arr) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             //JavaDef, default.yaml, #Templates.YamlTest+DefTest.
             //Original: tbl = r.table('default_test').order_by('a').pluck('a')
             
Pluck tbl = (Pluck) r.table("default_test").orderBy("a").pluck("a");             
             
             {
                 //JavaQuery, default.yaml, #55
                 //ExpectedOriginal: [{'a': 1}]
                 var expected = Arrays.asList(new MapObject().with("a", 1));
                 
                 //Original: tbl.filter(lambda x:x['a'].eq(1))
                 var obtained = runOrCatch( tbl.filter(x => x.bracket("a").eq(1)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #56
                 //ExpectedOriginal: [{'a': 1}]
                 var expected = Arrays.asList(new MapObject().with("a", 1));
                 
                 //Original: tbl.filter(lambda x:x['a'].eq(1), default=False)
                 var obtained = runOrCatch( tbl.filter(x => x.bracket("a").eq(1)).optArg("default", false) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #57
                 //ExpectedOriginal: [{}, {'a': 1}]
                 var expected = Arrays.asList(new MapObject(), new MapObject().with("a", 1));
                 
                 //Original: tbl.filter(lambda x:x['a'].eq(1), default=True)
                 var obtained = runOrCatch( tbl.filter(x => x.bracket("a").eq(1)).optArg("default", true) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #58
                 //ExpectedOriginal: err("ReqlNonExistenceError", "No attribute `a` in object:", [])
                 var expected = err("ReqlNonExistenceError", "No attribute `a` in object:", Arrays.asList());
                 
                 //Original: tbl.filter(lambda x:x['a'].eq(1), default=r.error())
                 var obtained = runOrCatch( tbl.filter(x => x.bracket("a").eq(1)).optArg("default", r.error()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #59
                 //ExpectedOriginal: [{'a': 1}]
                 var expected = Arrays.asList(new MapObject().with("a", 1));
                 
                 //Original: r.expr(False).do(lambda d:tbl.filter(lambda x:x['a'].eq(1), default=d))
                 var obtained = runOrCatch( r.expr(false).do_(d => tbl.filter(x => x.bracket("a").eq(1)).optArg("default", d)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #60
                 //ExpectedOriginal: [{}, {'a': 1}]
                 var expected = Arrays.asList(new MapObject(), new MapObject().with("a", 1));
                 
                 //Original: r.expr(True).do(lambda d:tbl.filter(lambda x:x['a'].eq(1), default=d)).order_by('a')
                 var obtained = runOrCatch( r.expr(true).do_(d => tbl.filter(x => x.bracket("a").eq(1)).optArg("default", d)).orderBy("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #61
                 //ExpectedOriginal: [{'a': 1}]
                 var expected = Arrays.asList(new MapObject().with("a", 1));
                 
                 //Original: tbl.filter(lambda x:x['a'].default(0).eq(1))
                 var obtained = runOrCatch( tbl.filter(x => x.bracket("a").default_(0).eq(1)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #62
                 //ExpectedOriginal: ([{}, {'a':null}, {'a':1}])
                 var expected = Arrays.asList(new MapObject(), new MapObject().with("a", null), new MapObject().with("a", 1));
                 
                 //Original: tbl.filter(lambda x:x['a'].default(1).eq(1)).order_by('a')
                 var obtained = runOrCatch( tbl.filter(x => x.bracket("a").default_(1).eq(1)).orderBy("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #63
                 //ExpectedOriginal: [{'a': 1}]
                 var expected = Arrays.asList(new MapObject().with("a", 1));
                 
                 //Original: tbl.filter(lambda x:x['a'].default(r.error()).eq(1))
                 var obtained = runOrCatch( tbl.filter(x => x.bracket("a").default_(r.error()).eq(1)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #64
                 //ExpectedOriginal: [{'a': 1}]
                 var expected = Arrays.asList(new MapObject().with("a", 1));
                 
                 //Original: r.expr(0).do(lambda i:tbl.filter(lambda x:x['a'].default(i).eq(1)))
                 var obtained = runOrCatch( r.expr(0).do_(i => tbl.filter(x => x.bracket("a").default_(i).eq(1))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #65
                 //ExpectedOriginal: ([{},{'a':null},{'a':1}])
                 var expected = Arrays.asList(new MapObject(), new MapObject().with("a", null), new MapObject().with("a", 1));
                 
                 //Original: r.expr(1).do(lambda i:tbl.filter(lambda x:x['a'].default(i).eq(1))).order_by('a')
                 var obtained = runOrCatch( r.expr(1).do_(i => tbl.filter(x => x.bracket("a").default_(i).eq(1))).orderBy("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #66
                 //ExpectedOriginal: [{'a': 1}]
                 var expected = Arrays.asList(new MapObject().with("a", 1));
                 
                 //Original: tbl.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)))
                 var obtained = runOrCatch( tbl.filter(x => r.or(x.bracket("a").eq(1), x.bracket("a").bracket("b").eq(2))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #67
                 //ExpectedOriginal: [{'a': 1}]
                 var expected = Arrays.asList(new MapObject().with("a", 1));
                 
                 //Original: tbl.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)), default=False)
                 var obtained = runOrCatch( tbl.filter(x => r.or(x.bracket("a").eq(1), x.bracket("a").bracket("b").eq(2))).optArg("default", false) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #68
                 //ExpectedOriginal: ([{}, {'a':null}, {'a':1}])
                 var expected = Arrays.asList(new MapObject(), new MapObject().with("a", null), new MapObject().with("a", 1));
                 
                 //Original: tbl.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)), default=True).order_by('a')
                 var obtained = runOrCatch( tbl.filter(x => r.or(x.bracket("a").eq(1), x.bracket("a").bracket("b").eq(2))).optArg("default", true).orderBy("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #69
                 //ExpectedOriginal: err("ReqlNonExistenceError", "No attribute `a` in object:", [])
                 var expected = err("ReqlNonExistenceError", "No attribute `a` in object:", Arrays.asList());
                 
                 //Original: tbl.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)), default=r.error())
                 var obtained = runOrCatch( tbl.filter(x => r.or(x.bracket("a").eq(1), x.bracket("a").bracket("b").eq(2))).optArg("default", r.error()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, default.yaml, #70
                 //ExpectedOriginal: partial({'tables_dropped':1})
                 var expected = partial(new MapObject().with("tables_dropped", 1));
                 
                 //Original: r.table_drop('default_test')
                 var obtained = runOrCatch( r.tableDrop("default_test") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             

        }
    }
}
