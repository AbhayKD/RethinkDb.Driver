




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class Regression3637 : GeneratedTest {

            public static Table tbl = r.db(DbName).table("tbl");


        [Test]
        public void YamlTest(){

             TestCounter++;
             
             {
                 //JavaQuery, regression/3637.yaml, #1
                 /* ExpectedOriginal: partial({'inserted':2}) */
                 var expected_ = partial(r.hashMap("inserted", 2L));
                 
                 /* Original: tbl.insert([{'id':0.0, 'value':'abc'}, {'id':[1, -0.0], 'value':'def'}]) */
                 var obtained = runOrCatch( tbl.insert(r.array(r.hashMap("id", 0.0).with("value", "abc"), r.hashMap("id", r.array(1L, -0.0)).with("value", "def"))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/3637.yaml, #2
                 /* ExpectedOriginal: {'value': 'abc', 'id': 0.0} */
                 var expected_ = r.hashMap("value", "abc").with("id", 0.0);
                 
                 /* Original: tbl.get(0.0) */
                 var obtained = runOrCatch( tbl.get(0.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/3637.yaml, #3
                 /* ExpectedOriginal: {'value': 'abc', 'id': 0.0} */
                 var expected_ = r.hashMap("value", "abc").with("id", 0.0);
                 
                 /* Original: tbl.get(-0.0) */
                 var obtained = runOrCatch( tbl.get(-0.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/3637.yaml, #4
                 /* ExpectedOriginal: {'value': 'def', 'id': [1, -0.0]} */
                 var expected_ = r.hashMap("value", "def").with("id", r.array(1L, -0.0));
                 
                 /* Original: tbl.get([1, 0.0]) */
                 var obtained = runOrCatch( tbl.get(r.array(1L, 0.0)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/3637.yaml, #5
                 /* ExpectedOriginal: {'value': 'def', 'id': [1, -0.0]} */
                 var expected_ = r.hashMap("value", "def").with("id", r.array(1L, -0.0));
                 
                 /* Original: tbl.get([1, -0.0]) */
                 var obtained = runOrCatch( tbl.get(r.array(1L, -0.0)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/3637.yaml, #6
                 /* ExpectedOriginal: {"id":0} */
                 var expected_ = "{\"id\":0}";
                 
                 /* Original: tbl.get(0.0).pluck('id').to_json_string() */
                 var obtained = runOrCatch( tbl.get(0.0).pluck("id").toJsonString() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/3637.yaml, #7
                 /* ExpectedOriginal: {"id":0} */
                 var expected_ = "{\"id\":0}";
                 
                 /* Original: tbl.get(-0.0).pluck('id').to_json_string() */
                 var obtained = runOrCatch( tbl.get(-0.0).pluck("id").toJsonString() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/3637.yaml, #8
                 /* ExpectedOriginal: {"id":[1,-0.0]} */
                 var expected_ = "{\"id\":[1,-0.0]}";
                 
                 /* Original: tbl.get([1, 0.0]).pluck('id').to_json_string() */
                 var obtained = runOrCatch( tbl.get(r.array(1L, 0.0)).pluck("id").toJsonString() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/3637.yaml, #9
                 /* ExpectedOriginal: {"id":[1,-0.0]} */
                 var expected_ = "{\"id\":[1,-0.0]}";
                 
                 /* Original: tbl.get([1, -0.0]).pluck('id').to_json_string() */
                 var obtained = runOrCatch( tbl.get(r.array(1L, -0.0)).pluck("id").toJsonString() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/3637.yaml, #10
                 /* ExpectedOriginal: partial({'errors':1}) */
                 var expected_ = partial(r.hashMap("errors", 1L));
                 
                 /* Original: tbl.insert({'id':0.0}) */
                 var obtained = runOrCatch( tbl.insert(r.hashMap("id", 0.0)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/3637.yaml, #10
                 /* ExpectedOriginal: partial({'errors':1}) */
                 var expected_ = partial(r.hashMap("errors", 1L));
                 
                 /* Original: tbl.insert({'id':[1,0.0]}) */
                 var obtained = runOrCatch( tbl.insert(r.hashMap("id", r.array(1L, 0.0))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/3637.yaml, #11
                 /* ExpectedOriginal: partial({'errors':1}) */
                 var expected_ = partial(r.hashMap("errors", 1L));
                 
                 /* Original: tbl.insert({'id':-0.0}) */
                 var obtained = runOrCatch( tbl.insert(r.hashMap("id", -0.0)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/3637.yaml, #11
                 /* ExpectedOriginal: partial({'errors':1}) */
                 var expected_ = partial(r.hashMap("errors", 1L));
                 
                 /* Original: tbl.insert({'id':[1,-0.0]}) */
                 var obtained = runOrCatch( tbl.insert(r.hashMap("id", r.array(1L, -0.0))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             

        }
    }
}
