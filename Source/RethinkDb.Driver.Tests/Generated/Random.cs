




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class Random : GeneratedTest {



        [Test]
        public void YamlTest(){

             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #1
                 //ExpectedOriginal: 3
                 var expected = 3.0;
                 
                 //Original: r.expr([1,2,3]).sample(3).distinct().count()
                 var obtained = runOrCatch( r.expr(r.array(1.0, 2.0, 3.0)).sample(3.0).distinct().count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #2
                 //ExpectedOriginal: 3
                 var expected = 3.0;
                 
                 //Original: r.expr([1,2,3]).sample(3).count()
                 var obtained = runOrCatch( r.expr(r.array(1.0, 2.0, 3.0)).sample(3.0).count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #3
                 //ExpectedOriginal: 3
                 var expected = 3.0;
                 
                 //Original: r.expr([1,2,3,4,5,6]).sample(3).distinct().count()
                 var obtained = runOrCatch( r.expr(r.array(1.0, 2.0, 3.0, 4.0, 5.0, 6.0)).sample(3.0).distinct().count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #4
                 //ExpectedOriginal: 3
                 var expected = 3.0;
                 
                 //Original: r.expr([1,2,3]).sample(4).distinct().count()
                 var obtained = runOrCatch( r.expr(r.array(1.0, 2.0, 3.0)).sample(4.0).distinct().count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #6
                 //ExpectedOriginal: err('ReqlQueryLogicError', 'Number of items to sample must be non-negative, got `-1`.', [0])
                 var expected = err("ReqlQueryLogicError", "Number of items to sample must be non-negative, got `-1`.", r.array(0.0));
                 
                 //Original: r.expr([1,2,3]).sample(-1)
                 var obtained = runOrCatch( r.expr(r.array(1.0, 2.0, 3.0)).sample(-1.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #7
                 //ExpectedOriginal: err('ReqlQueryLogicError', 'Cannot convert NUMBER to SEQUENCE', [0])
                 var expected = err("ReqlQueryLogicError", "Cannot convert NUMBER to SEQUENCE", r.array(0.0));
                 
                 //Original: r.expr(1).sample(1)
                 var obtained = runOrCatch( r.expr(1.0).sample(1.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #8
                 //ExpectedOriginal: err('ReqlQueryLogicError', 'Cannot convert OBJECT to SEQUENCE', [0])
                 var expected = err("ReqlQueryLogicError", "Cannot convert OBJECT to SEQUENCE", r.array(0.0));
                 
                 //Original: r.expr({}).sample(1)
                 var obtained = runOrCatch( r.expr(r.hashMap()).sample(1.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #9
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random().do(lambda x:r.and_(x.ge(0), x.lt(1)))
                 var obtained = runOrCatch( r.random().do_(x => r.and(x.ge(0.0), x.lt(1.0))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #9
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(1, float=True).do(lambda x:r.and_(x.ge(0), x.lt(1)))
                 var obtained = runOrCatch( r.random(1.0).optArg("float", true).do_(x => r.and(x.ge(0.0), x.lt(1.0))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #9
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(0, 1, float=True).do(lambda x:r.and_(x.ge(0), x.lt(1)))
                 var obtained = runOrCatch( r.random(0.0, 1.0).optArg("float", true).do_(x => r.and(x.ge(0.0), x.lt(1.0))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #9
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(1, 0, float=True).do(lambda x:r.and_(x.le(1), x.gt(0)))
                 var obtained = runOrCatch( r.random(1.0, 0.0).optArg("float", true).do_(x => r.and(x.le(1.0), x.gt(0.0))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #9
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(r.expr(0), 1, float=True).do(lambda x:r.and_(x.ge(0), x.lt(1)))
                 var obtained = runOrCatch( r.random(r.expr(0.0), 1.0).optArg("float", true).do_(x => r.and(x.ge(0.0), x.lt(1.0))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #9
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(1, r.expr(0), float=True).do(lambda x:r.and_(x.le(1), x.gt(0)))
                 var obtained = runOrCatch( r.random(1.0, r.expr(0.0)).optArg("float", true).do_(x => r.and(x.le(1.0), x.gt(0.0))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #9
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(r.expr(1), r.expr(0), float=True).do(lambda x:r.and_(x.le(1), x.gt(0)))
                 var obtained = runOrCatch( r.random(r.expr(1.0), r.expr(0.0)).optArg("float", true).do_(x => r.and(x.le(1.0), x.gt(0.0))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #10
                 //ExpectedOriginal: None
                 var expected = null as object;
                 
                 //Original: r.random(0.495, float=True).do(lambda x:r.and_(x.ge(0), x.lt(0.495)))
                 var obtained = runOrCatch( r.random(0.495).optArg("float", true).do_(x => r.and(x.ge(0.0), x.lt(0.495))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #10
                 //ExpectedOriginal: None
                 var expected = null as object;
                 
                 //Original: r.random(-0.495, float=True).do(lambda x:r.and_(x.le(0), x.gt(-0.495)))
                 var obtained = runOrCatch( r.random(-0.495).optArg("float", true).do_(x => r.and(x.le(0.0), x.gt(-0.495))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #10
                 //ExpectedOriginal: None
                 var expected = null as object;
                 
                 //Original: r.random(1823756.24, float=True).do(lambda x:r.and_(x.ge(0), x.lt(1823756.24)))
                 var obtained = runOrCatch( r.random(1823756.24).optArg("float", true).do_(x => r.and(x.ge(0.0), x.lt(1823756.24))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #10
                 //ExpectedOriginal: None
                 var expected = null as object;
                 
                 //Original: r.random(-1823756.24, float=True).do(lambda x:r.and_(x.le(0), x.gt(-1823756.24)))
                 var obtained = runOrCatch( r.random(-1823756.24).optArg("float", true).do_(x => r.and(x.le(0.0), x.gt(-1823756.24))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #11
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(10.5, 20.153, float=True).do(lambda x:r.and_(x.ge(10.5), x.lt(20.153)))
                 var obtained = runOrCatch( r.random(10.5, 20.153).optArg("float", true).do_(x => r.and(x.ge(10.5), x.lt(20.153))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #11
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(20.153, 10.5, float=True).do(lambda x:r.and_(x.le(20.153), x.gt(10.5)))
                 var obtained = runOrCatch( r.random(20.153, 10.5).optArg("float", true).do_(x => r.and(x.le(20.153), x.gt(10.5))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #11
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(31415926.1, 31415926, float=True).do(lambda x:r.and_(x.le(31415926.1), x.gt(31415926)))
                 var obtained = runOrCatch( r.random(31415926.1, 31415926.0).optArg("float", true).do_(x => r.and(x.le(31415926.1), x.gt(31415926.0))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #12
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(-10.5, 20.153, float=True).do(lambda x:r.and_(x.ge(-10.5), x.lt(20.153)))
                 var obtained = runOrCatch( r.random(-10.5, 20.153).optArg("float", true).do_(x => r.and(x.ge(-10.5), x.lt(20.153))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #12
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(-20.153, -10.5, float=True).do(lambda x:r.and_(x.ge(-20.153), x.lt(-10.5)))
                 var obtained = runOrCatch( r.random(-20.153, -10.5).optArg("float", true).do_(x => r.and(x.ge(-20.153), x.lt(-10.5))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #12
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(-31415926, -31415926.1, float=True).do(lambda x:r.and_(x.le(-31415926), x.gt(-31415926.1)))
                 var obtained = runOrCatch( r.random(-31415926.0, -31415926.1).optArg("float", true).do_(x => r.and(x.le(-31415926.0), x.gt(-31415926.1))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #13
                 //ExpectedOriginal: 2
                 var expected = 2.0;
                 
                 //Original: r.expr([r.random(), r.random()]).distinct().count()
                 var obtained = runOrCatch( r.expr(r.array(r.random(), r.random())).distinct().count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #13
                 //ExpectedOriginal: 2
                 var expected = 2.0;
                 
                 //Original: r.expr([r.random(1, float=True), r.random(1, float=True)]).distinct().count()
                 var obtained = runOrCatch( r.expr(r.array(r.random(1.0).optArg("float", true), r.random(1.0).optArg("float", true))).distinct().count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #13
                 //ExpectedOriginal: 2
                 var expected = 2.0;
                 
                 //Original: r.expr([r.random(0, 1, float=True), r.random(0, 1, float=True)]).distinct().count()
                 var obtained = runOrCatch( r.expr(r.array(r.random(0.0, 1.0).optArg("float", true), r.random(0.0, 1.0).optArg("float", true))).distinct().count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #14
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(0, float=True).eq(0)
                 var obtained = runOrCatch( r.random(0.0).optArg("float", true).eq(0.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #14
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(5, 5, float=True).eq(5)
                 var obtained = runOrCatch( r.random(5.0, 5.0).optArg("float", true).eq(5.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #14
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(-499384756758, -499384756758, float=True).eq(-499384756758)
                 var obtained = runOrCatch( r.random(-499384756758.0, -499384756758.0).optArg("float", true).eq(-499384756758.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #14
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(-93.94757, -93.94757, float=True).eq(-93.94757)
                 var obtained = runOrCatch( r.random(-93.94757, -93.94757).optArg("float", true).eq(-93.94757) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #14
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(294.69148, 294.69148, float=True).eq(294.69148)
                 var obtained = runOrCatch( r.random(294.69148, 294.69148).optArg("float", true).eq(294.69148) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             //JavaDef, random.yaml, #Templates.YamlTest+DefTest.
             //Original: float_max = sys.float_info.max
             
double float_max = (double) double.MaxValue;             
             
             //JavaDef, random.yaml, #Templates.YamlTest+DefTest.
             //Original: float_min = sys.float_info.min
             
double float_min = (double) double.MinValue;             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #17
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(-float_max, float_max, float=True).do(lambda x:r.and_(x.ge(-float_max), x.lt(float_max)))
                 var obtained = runOrCatch( r.random(-float_max, float_max).optArg("float", true).do_(x => r.and(x.ge(-float_max), x.lt(float_max))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #17
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(float_max, -float_max, float=True).do(lambda x:r.and_(x.le(float_max), x.gt(-float_max)))
                 var obtained = runOrCatch( r.random(float_max, -float_max).optArg("float", true).do_(x => r.and(x.le(float_max), x.gt(-float_max))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #17
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(float_min, float_max, float=True).do(lambda x:r.and_(x.ge(float_min), x.lt(float_max)))
                 var obtained = runOrCatch( r.random(float_min, float_max).optArg("float", true).do_(x => r.and(x.ge(float_min), x.lt(float_max))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #17
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(float_min, -float_max, float=True).do(lambda x:r.and_(x.le(float_min), x.gt(-float_max)))
                 var obtained = runOrCatch( r.random(float_min, -float_max).optArg("float", true).do_(x => r.and(x.le(float_min), x.gt(-float_max))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #17
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(-float_min, float_max, float=True).do(lambda x:r.and_(x.ge(-float_min), x.lt(float_max)))
                 var obtained = runOrCatch( r.random(-float_min, float_max).optArg("float", true).do_(x => r.and(x.ge(-float_min), x.lt(float_max))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #17
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(-float_min, -float_max, float=True).do(lambda x:r.and_(x.le(-float_min), x.gt(-float_max)))
                 var obtained = runOrCatch( r.random(-float_min, -float_max).optArg("float", true).do_(x => r.and(x.le(-float_min), x.gt(-float_max))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             //JavaDef, random.yaml, #Templates.YamlTest+DefTest.
             //Original: upper_limit = 2**53 - 1
             
double upper_limit = (double) Math.Pow(2.0, 53.0) - 1.0;             
             
             //JavaDef, random.yaml, #Templates.YamlTest+DefTest.
             //Original: lower_limit = 1 - (2**53)
             
double lower_limit = (double) 1.0 - Math.Pow(2.0, 53.0);             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #20
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(256).do(lambda x:r.and_(x.ge(0), x.lt(256)))
                 var obtained = runOrCatch( r.random(256.0).do_(x => r.and(x.ge(0.0), x.lt(256.0))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #20
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(0, 256).do(lambda x:r.and_(x.ge(0), x.lt(256)))
                 var obtained = runOrCatch( r.random(0.0, 256.0).do_(x => r.and(x.ge(0.0), x.lt(256.0))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #20
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(r.expr(256)).do(lambda x:r.and_(x.ge(0), x.lt(256)))
                 var obtained = runOrCatch( r.random(r.expr(256.0)).do_(x => r.and(x.ge(0.0), x.lt(256.0))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #20
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(r.expr(0), 256).do(lambda x:r.and_(x.ge(0), x.lt(256)))
                 var obtained = runOrCatch( r.random(r.expr(0.0), 256.0).do_(x => r.and(x.ge(0.0), x.lt(256.0))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #20
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(0, r.expr(256)).do(lambda x:r.and_(x.ge(0), x.lt(256)))
                 var obtained = runOrCatch( r.random(0.0, r.expr(256.0)).do_(x => r.and(x.ge(0.0), x.lt(256.0))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #20
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(r.expr(0), r.expr(256)).do(lambda x:r.and_(x.ge(0), x.lt(256)))
                 var obtained = runOrCatch( r.random(r.expr(0.0), r.expr(256.0)).do_(x => r.and(x.ge(0.0), x.lt(256.0))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #21
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(10, 20).do(lambda x:r.and_(x.ge(10), x.lt(20)))
                 var obtained = runOrCatch( r.random(10.0, 20.0).do_(x => r.and(x.ge(10.0), x.lt(20.0))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #21
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(9347849, 120937493).do(lambda x:r.and_(x.ge(9347849), x.lt(120937493)))
                 var obtained = runOrCatch( r.random(9347849.0, 120937493.0).do_(x => r.and(x.ge(9347849.0), x.lt(120937493.0))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #22
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(-10, 20).do(lambda x:r.and_(x.ge(-10), x.lt(20)))
                 var obtained = runOrCatch( r.random(-10.0, 20.0).do_(x => r.and(x.ge(-10.0), x.lt(20.0))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #22
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(-20, -10).do(lambda x:r.and_(x.ge(-20), x.lt(-10)))
                 var obtained = runOrCatch( r.random(-20.0, -10.0).do_(x => r.and(x.ge(-20.0), x.lt(-10.0))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #22
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.random(-120937493, -9347849).do(lambda x:r.and_(x.ge(-120937493), x.lt(-9347849)))
                 var obtained = runOrCatch( r.random(-120937493.0, -9347849.0).do_(x => r.and(x.ge(-120937493.0), x.lt(-9347849.0))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #23
                 //ExpectedOriginal: 2
                 var expected = 2.0;
                 
                 //Original: r.expr([r.random(upper_limit), r.random(upper_limit)]).distinct().count()
                 var obtained = runOrCatch( r.expr(r.array(r.random(upper_limit), r.random(upper_limit))).distinct().count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #24
                 //ExpectedOriginal: 2
                 var expected = 2.0;
                 
                 //Original: r.expr([upper_limit,upper_limit]).map(lambda x:r.random(x)).distinct().count()
                 var obtained = runOrCatch( r.expr(r.array(upper_limit, upper_limit)).map(x => r.random(x)).distinct().count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #25
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Upper bound (-0.5) could not be safely converted to an integer.", [])
                 var expected = err("ReqlQueryLogicError", "Upper bound (-0.5) could not be safely converted to an integer.", r.array());
                 
                 //Original: r.random(-0.5)
                 var obtained = runOrCatch( r.random(-0.5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #26
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Upper bound (0.25) could not be safely converted to an integer.", [])
                 var expected = err("ReqlQueryLogicError", "Upper bound (0.25) could not be safely converted to an integer.", r.array());
                 
                 //Original: r.random(0.25)
                 var obtained = runOrCatch( r.random(0.25) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #27
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Upper bound (0.75) could not be safely converted to an integer.", [])
                 var expected = err("ReqlQueryLogicError", "Upper bound (0.75) could not be safely converted to an integer.", r.array());
                 
                 //Original: r.random(-10, 0.75)
                 var obtained = runOrCatch( r.random(-10.0, 0.75) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #28
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Lower bound (-120549.25) could not be safely converted to an integer.", [])
                 var expected = err("ReqlQueryLogicError", "Lower bound (-120549.25) could not be safely converted to an integer.", r.array());
                 
                 //Original: r.random(-120549.25, 39458)
                 var obtained = runOrCatch( r.random(-120549.25, 39458.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #29
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Lower bound (-6.5) could not be safely converted to an integer.", [])
                 var expected = err("ReqlQueryLogicError", "Lower bound (-6.5) could not be safely converted to an integer.", r.array());
                 
                 //Original: r.random(-6.5, 8.125)
                 var obtained = runOrCatch( r.random(-6.5, 8.125) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #30
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Generating a random integer requires one or two bounds.", [])
                 var expected = err("ReqlQueryLogicError", "Generating a random integer requires one or two bounds.", r.array());
                 
                 //Original: r.random(float=False)
                 var obtained = runOrCatch( r.random().optArg("float", false) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #31
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Lower bound (0) is not less than upper bound (0).", [])
                 var expected = err("ReqlQueryLogicError", "Lower bound (0) is not less than upper bound (0).", r.array());
                 
                 //Original: r.random(0)
                 var obtained = runOrCatch( r.random(0.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #32
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Lower bound (0) is not less than upper bound (0).", [])
                 var expected = err("ReqlQueryLogicError", "Lower bound (0) is not less than upper bound (0).", r.array());
                 
                 //Original: r.random(0, 0)
                 var obtained = runOrCatch( r.random(0.0, 0.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #33
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Lower bound (515) is not less than upper bound (515).", [])
                 var expected = err("ReqlQueryLogicError", "Lower bound (515) is not less than upper bound (515).", r.array());
                 
                 //Original: r.random(515, 515)
                 var obtained = runOrCatch( r.random(515.0, 515.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #34
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Lower bound (-956) is not less than upper bound (-956).", [])
                 var expected = err("ReqlQueryLogicError", "Lower bound (-956) is not less than upper bound (-956).", r.array());
                 
                 //Original: r.random(-956, -956)
                 var obtained = runOrCatch( r.random(-956.0, -956.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #35
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Lower bound (0) is not less than upper bound (-10).", [])
                 var expected = err("ReqlQueryLogicError", "Lower bound (0) is not less than upper bound (-10).", r.array());
                 
                 //Original: r.random(-10)
                 var obtained = runOrCatch( r.random(-10.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #36
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Lower bound (20) is not less than upper bound (2).", [])
                 var expected = err("ReqlQueryLogicError", "Lower bound (20) is not less than upper bound (2).", r.array());
                 
                 //Original: r.random(20, 2)
                 var obtained = runOrCatch( r.random(20.0, 2.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #37
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Lower bound (2) is not less than upper bound (-20).", [])
                 var expected = err("ReqlQueryLogicError", "Lower bound (2) is not less than upper bound (-20).", r.array());
                 
                 //Original: r.random(2, -20)
                 var obtained = runOrCatch( r.random(2.0, -20.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, random.yaml, #38
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Lower bound (1456) is not less than upper bound (0).", [])
                 var expected = err("ReqlQueryLogicError", "Lower bound (1456) is not less than upper bound (0).", r.array());
                 
                 //Original: r.random(1456, 0)
                 var obtained = runOrCatch( r.random(1456.0, 0.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             

        }
    }
}
