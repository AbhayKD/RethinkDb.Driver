




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class MathLogicFloorCeilRound : GeneratedTest {



        [Test]
        public void YamlTest(){

             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #1
                 /* ExpectedOriginal: "NUMBER" */
                 var expected = "NUMBER";
                 
                 /* Original: r.floor(1.0).type_of() */
                 var obtained = runOrCatch( r.floor(1.0).typeOf() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #2
                 /* ExpectedOriginal: 1.0 */
                 var expected = 1.0;
                 
                 /* Original: r.floor(1.0) */
                 var obtained = runOrCatch( r.floor(1.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #3
                 /* ExpectedOriginal: 1.0 */
                 var expected = 1.0;
                 
                 /* Original: r.expr(1.0).floor() */
                 var obtained = runOrCatch( r.expr(1.0).floor() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #4
                 /* ExpectedOriginal: 0.0 */
                 var expected = 0.0;
                 
                 /* Original: r.floor(0.5) */
                 var obtained = runOrCatch( r.floor(0.5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #5
                 /* ExpectedOriginal: 1.0 */
                 var expected = 1.0;
                 
                 /* Original: r.floor(1.0) */
                 var obtained = runOrCatch( r.floor(1.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #6
                 /* ExpectedOriginal: 1.0 */
                 var expected = 1.0;
                 
                 /* Original: r.floor(1.5) */
                 var obtained = runOrCatch( r.floor(1.5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #7
                 /* ExpectedOriginal: -1.0 */
                 var expected = -1.0;
                 
                 /* Original: r.floor(-0.5) */
                 var obtained = runOrCatch( r.floor(-0.5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #8
                 /* ExpectedOriginal: -1.0 */
                 var expected = -1.0;
                 
                 /* Original: r.floor(-1.0) */
                 var obtained = runOrCatch( r.floor(-1.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #9
                 /* ExpectedOriginal: -2.0 */
                 var expected = -2.0;
                 
                 /* Original: r.floor(-1.5) */
                 var obtained = runOrCatch( r.floor(-1.5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #10
                 /* ExpectedOriginal: err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", []) */
                 var expected = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", r.array());
                 
                 /* Original: r.expr('X').floor() */
                 var obtained = runOrCatch( r.expr("X").floor() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #11
                 /* ExpectedOriginal: "NUMBER" */
                 var expected = "NUMBER";
                 
                 /* Original: r.ceil(1.0).type_of() */
                 var obtained = runOrCatch( r.ceil(1.0).typeOf() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #12
                 /* ExpectedOriginal: 1.0 */
                 var expected = 1.0;
                 
                 /* Original: r.ceil(1.0) */
                 var obtained = runOrCatch( r.ceil(1.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #13
                 /* ExpectedOriginal: 1.0 */
                 var expected = 1.0;
                 
                 /* Original: r.expr(1.0).ceil() */
                 var obtained = runOrCatch( r.expr(1.0).ceil() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #14
                 /* ExpectedOriginal: 1.0 */
                 var expected = 1.0;
                 
                 /* Original: r.ceil(0.5) */
                 var obtained = runOrCatch( r.ceil(0.5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #15
                 /* ExpectedOriginal: 1.0 */
                 var expected = 1.0;
                 
                 /* Original: r.ceil(1.0) */
                 var obtained = runOrCatch( r.ceil(1.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #16
                 /* ExpectedOriginal: 2.0 */
                 var expected = 2.0;
                 
                 /* Original: r.ceil(1.5) */
                 var obtained = runOrCatch( r.ceil(1.5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #17
                 /* ExpectedOriginal: 0.0 */
                 var expected = 0.0;
                 
                 /* Original: r.ceil(-0.5) */
                 var obtained = runOrCatch( r.ceil(-0.5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #18
                 /* ExpectedOriginal: -1.0 */
                 var expected = -1.0;
                 
                 /* Original: r.ceil(-1.0) */
                 var obtained = runOrCatch( r.ceil(-1.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #19
                 /* ExpectedOriginal: -1.0 */
                 var expected = -1.0;
                 
                 /* Original: r.ceil(-1.5) */
                 var obtained = runOrCatch( r.ceil(-1.5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #20
                 /* ExpectedOriginal: err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", []) */
                 var expected = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", r.array());
                 
                 /* Original: r.expr('X').ceil() */
                 var obtained = runOrCatch( r.expr("X").ceil() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #21
                 /* ExpectedOriginal: "NUMBER" */
                 var expected = "NUMBER";
                 
                 /* Original: r.round(1.0).type_of() */
                 var obtained = runOrCatch( r.round(1.0).typeOf() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #22
                 /* ExpectedOriginal: 1.0 */
                 var expected = 1.0;
                 
                 /* Original: r.round(1.0) */
                 var obtained = runOrCatch( r.round(1.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #23
                 /* ExpectedOriginal: 1.0 */
                 var expected = 1.0;
                 
                 /* Original: r.expr(1.0).round() */
                 var obtained = runOrCatch( r.expr(1.0).round() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #24
                 /* ExpectedOriginal: 1.0 */
                 var expected = 1.0;
                 
                 /* Original: r.round(0.5) */
                 var obtained = runOrCatch( r.round(0.5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #25
                 /* ExpectedOriginal: -1.0 */
                 var expected = -1.0;
                 
                 /* Original: r.round(-0.5) */
                 var obtained = runOrCatch( r.round(-0.5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #26
                 /* ExpectedOriginal: 0.0 */
                 var expected = 0.0;
                 
                 /* Original: r.round(0.0) */
                 var obtained = runOrCatch( r.round(0.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #27
                 /* ExpectedOriginal: 1.0 */
                 var expected = 1.0;
                 
                 /* Original: r.round(1.0) */
                 var obtained = runOrCatch( r.round(1.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #28
                 /* ExpectedOriginal: 10.0 */
                 var expected = 10.0;
                 
                 /* Original: r.round(10.0) */
                 var obtained = runOrCatch( r.round(10.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #29
                 /* ExpectedOriginal: 1000000000.0 */
                 var expected = 1000000000.0;
                 
                 /* Original: r.round(1000000000.0) */
                 var obtained = runOrCatch( r.round(1000000000.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #30
                 /* ExpectedOriginal: 1e20 */
                 var expected = 1e+20;
                 
                 /* Original: r.round(1e20) */
                 var obtained = runOrCatch( r.round(1e+20) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #31
                 /* ExpectedOriginal: -1.0 */
                 var expected = -1.0;
                 
                 /* Original: r.round(-1.0) */
                 var obtained = runOrCatch( r.round(-1.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #32
                 /* ExpectedOriginal: -10.0 */
                 var expected = -10.0;
                 
                 /* Original: r.round(-10.0) */
                 var obtained = runOrCatch( r.round(-10.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #33
                 /* ExpectedOriginal: -1000000000.0 */
                 var expected = -1000000000.0;
                 
                 /* Original: r.round(-1000000000.0) */
                 var obtained = runOrCatch( r.round(-1000000000.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #34
                 /* ExpectedOriginal: -1e20 */
                 var expected = -1e+20;
                 
                 /* Original: r.round(-1e20) */
                 var obtained = runOrCatch( r.round(-1e+20) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #35
                 /* ExpectedOriginal: 0.0 */
                 var expected = 0.0;
                 
                 /* Original: r.round(0.1) */
                 var obtained = runOrCatch( r.round(0.1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #36
                 /* ExpectedOriginal: 1.0 */
                 var expected = 1.0;
                 
                 /* Original: r.round(1.1) */
                 var obtained = runOrCatch( r.round(1.1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #37
                 /* ExpectedOriginal: 10.0 */
                 var expected = 10.0;
                 
                 /* Original: r.round(10.1) */
                 var obtained = runOrCatch( r.round(10.1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #38
                 /* ExpectedOriginal: 1000000000.0 */
                 var expected = 1000000000.0;
                 
                 /* Original: r.round(1000000000.1) */
                 var obtained = runOrCatch( r.round(1000000000.1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #39
                 /* ExpectedOriginal: -1.0 */
                 var expected = -1.0;
                 
                 /* Original: r.round(-1.1) */
                 var obtained = runOrCatch( r.round(-1.1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #40
                 /* ExpectedOriginal: -10.0 */
                 var expected = -10.0;
                 
                 /* Original: r.round(-10.1) */
                 var obtained = runOrCatch( r.round(-10.1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #41
                 /* ExpectedOriginal: -1000000000.0 */
                 var expected = -1000000000.0;
                 
                 /* Original: r.round(-1000000000.1) */
                 var obtained = runOrCatch( r.round(-1000000000.1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #42
                 /* ExpectedOriginal: 1.0 */
                 var expected = 1.0;
                 
                 /* Original: r.round(0.9) */
                 var obtained = runOrCatch( r.round(0.9) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #43
                 /* ExpectedOriginal: 10.0 */
                 var expected = 10.0;
                 
                 /* Original: r.round(9.9) */
                 var obtained = runOrCatch( r.round(9.9) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #44
                 /* ExpectedOriginal: 1000000000.0 */
                 var expected = 1000000000.0;
                 
                 /* Original: r.round(999999999.9) */
                 var obtained = runOrCatch( r.round(999999999.9) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #45
                 /* ExpectedOriginal: -1.0 */
                 var expected = -1.0;
                 
                 /* Original: r.round(-0.9) */
                 var obtained = runOrCatch( r.round(-0.9) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #46
                 /* ExpectedOriginal: -10.0 */
                 var expected = -10.0;
                 
                 /* Original: r.round(-9.9) */
                 var obtained = runOrCatch( r.round(-9.9) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #47
                 /* ExpectedOriginal: -1000000000.0 */
                 var expected = -1000000000.0;
                 
                 /* Original: r.round(-999999999.9) */
                 var obtained = runOrCatch( r.round(-999999999.9) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/floor_ceil_round.yaml, #48
                 /* ExpectedOriginal: err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", []) */
                 var expected = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", r.array());
                 
                 /* Original: r.expr('X').round() */
                 var obtained = runOrCatch( r.expr("X").round() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             

        }
    }
}
