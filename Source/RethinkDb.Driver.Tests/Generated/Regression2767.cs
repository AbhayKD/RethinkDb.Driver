




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class Regression2767 : GeneratedTest {

            public static Table tbl = r.db(DbName).table("tbl");


        [Test]
        public void YamlTest(){

             TestCounter++;
             
             {
                 //JavaQuery, regression/2767.yaml, #1
                 /* ExpectedOriginal: ({'created':1}) */
                 var expected_ = r.hashMap("created", 1);
                 
                 /* Original: tbl.index_create('foo', lambda x:(x['a']+[1,2,3,4,5]+[6,7,8,9,10]).count()) */
                 var obtained = runOrCatch( tbl.indexCreate("foo", x => x.g("a").add(r.array(1, 2, 3, 4, 5)).add(r.array(6, 7, 8, 9, 10)).count()) ,
                                            new OptArgs()
                     .with("array_limit", 6)
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/2767.yaml, #2
                 /* ExpectedOriginal: None */
                 var expected_ = null as object;
                 
                 /* Original: tbl.index_wait() */
                 var obtained = runOrCatch( tbl.indexWait() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/2767.yaml, #3
                 /* ExpectedOriginal: ({'deleted':0,'replaced':0,'unchanged':0,'errors':0,'skipped':0,'inserted':1}) */
                 var expected_ = r.hashMap("deleted", 0).with("replaced", 0).with("unchanged", 0).with("errors", 0).with("skipped", 0).with("inserted", 1);
                 
                 /* Original: tbl.insert({'id':1,'a':[1,2,3,4,5]}) */
                 var obtained = runOrCatch( tbl.insert(r.hashMap("id", 1).with("a", r.array(1, 2, 3, 4, 5))) ,
                                            new OptArgs()
                     .with("array_limit", 6)
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/2767.yaml, #4
                 /* ExpectedOriginal: ([{'id':1,'a':[1,2,3,4,5]}]) */
                 var expected_ = r.array(r.hashMap("id", 1).with("a", r.array(1, 2, 3, 4, 5)));
                 
                 /* Original: tbl.coerce_to('array') */
                 var obtained = runOrCatch( tbl.coerceTo("array") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/2767.yaml, #5
                 /* ExpectedOriginal: ([{'id':1,'a':[1,2,3,4,5]}]) */
                 var expected_ = r.array(r.hashMap("id", 1).with("a", r.array(1, 2, 3, 4, 5)));
                 
                 /* Original: tbl.get_all(15, index='foo').coerce_to('array') */
                 var obtained = runOrCatch( tbl.getAll(15).optArg("index", "foo").coerceTo("array") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/2767.yaml, #6
                 /* ExpectedOriginal: ([{'id':1,'a':[1,2,3,4,5]}]) */
                 var expected_ = r.array(r.hashMap("id", 1).with("a", r.array(1, 2, 3, 4, 5)));
                 
                 /* Original: tbl.get_all(15, index='foo').coerce_to('array') */
                 var obtained = runOrCatch( tbl.getAll(15).optArg("index", "foo").coerceTo("array") ,
                                            new OptArgs()
                     .with("array_limit", 6)
                    );
                 assertEquals(expected_, obtained);
             }
             

        }
    }
}
