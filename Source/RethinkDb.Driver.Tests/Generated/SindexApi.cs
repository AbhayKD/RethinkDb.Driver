




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class SindexApi : GeneratedTest {

        public SindexApi (){
                tableVars.Add( "tbl" );
        }


            public static Table tbl = r.db(DbName).table("tbl");


        [Test]
        public void YamlTest(){

             
             //JavaDef, sindex/api.yaml, #Templates.YamlTest+DefTest.
             //Original: rows = [{'id':0, 'a':0, 'b':0, 'c':0, 'm':[1,2,3]}, {'id':1, 'a':0, 'b':0, 'c':0, 'm':[4,5,6]}, {'id':2, 'a':0, 'b':0, 'c':1, 'm':7}, {'id':3, 'a':0, 'b':1, 'c':1, 'm':[10,11,12]}, {'id':4, 'a':4, 'b':4, 'c':4, 'm':[14,15,16]}]
             
var rows = (IList) (r.array(r.hashMap("id", 0L).with("a", 0L).with("b", 0L).with("c", 0L).with("m", r.array(1L, 2L, 3L)), r.hashMap("id", 1L).with("a", 0L).with("b", 0L).with("c", 0L).with("m", r.array(4L, 5L, 6L)), r.hashMap("id", 2L).with("a", 0L).with("b", 0L).with("c", 1L).with("m", 7L), r.hashMap("id", 3L).with("a", 0L).with("b", 1L).with("c", 1L).with("m", r.array(10L, 11L, 12L)), r.hashMap("id", 4L).with("a", 4L).with("b", 4L).with("c", 4L).with("m", r.array(14L, 15L, 16L))));             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #2
                 /* ExpectedOriginal: ({'deleted':0,'inserted':4,'skipped':0,'errors':0,'replaced':0,'unchanged':0}) */
                 var expected_ = r.hashMap("deleted", 0L).with("inserted", 4L).with("skipped", 0L).with("errors", 0L).with("replaced", 0L).with("unchanged", 0L);
                 
                 /* Original: tbl.insert([{'id':0, 'a':0, 'b':0, 'c':0, 'm':[1,2,3]}, {'id':1, 'a':0, 'b':0, 'c':0, 'm':[4,5,6]}, {'id':2, 'a':0, 'b':0, 'c':1, 'm':7}, {'id':3, 'a':0, 'b':1, 'c':1, 'm':[10,11,12]}]) */
                 var obtained = runOrCatch( tbl.insert(r.array(r.hashMap("id", 0L).with("a", 0L).with("b", 0L).with("c", 0L).with("m", r.array(1L, 2L, 3L)), r.hashMap("id", 1L).with("a", 0L).with("b", 0L).with("c", 0L).with("m", r.array(4L, 5L, 6L)), r.hashMap("id", 2L).with("a", 0L).with("b", 0L).with("c", 1L).with("m", 7L), r.hashMap("id", 3L).with("a", 0L).with("b", 1L).with("c", 1L).with("m", r.array(10L, 11L, 12L)))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #5
                 /* ExpectedOriginal: err_regex('ReqlOpFailedError','Index `rename-foo` does not exist or index `rename-bar` already exists on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]',[]) */
                 var expected_ = err_regex("ReqlOpFailedError", "Index `rename-foo` does not exist or index `rename-bar` already exists on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]", r.array());
                 
                 /* Original: tbl.index_rename('rename-foo','rename-bar') */
                 var obtained = runOrCatch( tbl.indexRename("rename-foo", "rename-bar") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #6
                 /* ExpectedOriginal: err_regex('ReqlOpFailedError','Index `rename-fake` does not exist or index `rename-stuff` already exists on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]',[]) */
                 var expected_ = err_regex("ReqlOpFailedError", "Index `rename-fake` does not exist or index `rename-stuff` already exists on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]", r.array());
                 
                 /* Original: tbl.index_rename('rename-fake','rename-stuff') */
                 var obtained = runOrCatch( tbl.indexRename("rename-fake", "rename-stuff") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #7
                 /* ExpectedOriginal: err('ReqlQueryLogicError','Index name conflict:'+' `id` is the name of the primary key.',[]) */
                 var expected_ = err("ReqlQueryLogicError", "Index name conflict:" + " `id` is the name of the primary key.", r.array());
                 
                 /* Original: tbl.index_rename('id','rename-stuff') */
                 var obtained = runOrCatch( tbl.indexRename("id", "rename-stuff") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #8
                 /* ExpectedOriginal: err('ReqlQueryLogicError','Index name conflict:'+' `id` is the name of the primary key.',[]) */
                 var expected_ = err("ReqlQueryLogicError", "Index name conflict:" + " `id` is the name of the primary key.", r.array());
                 
                 /* Original: tbl.index_rename('rename-stuff','id') */
                 var obtained = runOrCatch( tbl.indexRename("rename-stuff", "id") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #9
                 /* ExpectedOriginal: ({'renamed':0}) */
                 var expected_ = r.hashMap("renamed", 0L);
                 
                 /* Original: tbl.index_rename('rename-foo','rename-foo') */
                 var obtained = runOrCatch( tbl.indexRename("rename-foo", "rename-foo") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #10
                 /* ExpectedOriginal: ({'renamed':0}) */
                 var expected_ = r.hashMap("renamed", 0L);
                 
                 /* Original: tbl.index_rename('rename-foo','rename-foo',overwrite=True) */
                 var obtained = runOrCatch( tbl.indexRename("rename-foo", "rename-foo").optArg("overwrite", true) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #11
                 /* ExpectedOriginal: ({'renamed':1}) */
                 var expected_ = r.hashMap("renamed", 1L);
                 
                 /* Original: tbl.index_rename('rename-foo','rename-bar',overwrite=True) */
                 var obtained = runOrCatch( tbl.indexRename("rename-foo", "rename-bar").optArg("overwrite", true) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #12
                 /* ExpectedOriginal: ({'renamed':1}) */
                 var expected_ = r.hashMap("renamed", 1L);
                 
                 /* Original: tbl.index_rename('rename-bar','rename-stuff',overwrite=True) */
                 var obtained = runOrCatch( tbl.indexRename("rename-bar", "rename-stuff").optArg("overwrite", true) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #13
                 /* ExpectedOriginal: ({'renamed':1}) */
                 var expected_ = r.hashMap("renamed", 1L);
                 
                 /* Original: tbl.index_rename('rename-stuff','rename-last') */
                 var obtained = runOrCatch( tbl.indexRename("rename-stuff", "rename-last") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #14
                 /* ExpectedOriginal: ({'created':1}) */
                 var expected_ = r.hashMap("created", 1L);
                 
                 /* Original: tbl.index_create('minval', lambda:r.minval) */
                 var obtained = runOrCatch( tbl.indexCreate("minval", () => r.minval()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #15
                 /* ExpectedOriginal: ({'created':1}) */
                 var expected_ = r.hashMap("created", 1L);
                 
                 /* Original: tbl.index_create('maxval', lambda:r.maxval) */
                 var obtained = runOrCatch( tbl.indexCreate("maxval", () => r.maxval()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #16
                 /* ExpectedOriginal: bag([{'index':'rename-last','ready':true}, {'index':'minval','ready':true}, {'index':'maxval','ready':true}]) */
                 var expected_ = bag(r.array(r.hashMap("index", "rename-last").with("ready", true), r.hashMap("index", "minval").with("ready", true), r.hashMap("index", "maxval").with("ready", true)));
                 
                 /* Original: tbl.index_wait('rename-last', 'minval', 'maxval').pluck('index', 'ready') */
                 var obtained = runOrCatch( tbl.indexWait("rename-last", "minval", "maxval").pluck("index", "ready") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #17
                 /* ExpectedOriginal: 3 */
                 var expected_ = 3L;
                 
                 /* Original: tbl.get_all(0, index='rename-last').count() */
                 var obtained = runOrCatch( tbl.getAll(0L).optArg("index", "rename-last").count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #18
                 /* ExpectedOriginal: 0 */
                 var expected_ = 0L;
                 
                 /* Original: tbl.get_all(r.minval, index='minval').count() */
                 var obtained = runOrCatch( tbl.getAll(r.minval()).optArg("index", "minval").count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #19
                 /* ExpectedOriginal: 0 */
                 var expected_ = 0L;
                 
                 /* Original: tbl.get_all(r.maxval, index='maxval').count() */
                 var obtained = runOrCatch( tbl.getAll(r.maxval()).optArg("index", "maxval").count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #20
                 /* ExpectedOriginal: 0 */
                 var expected_ = 0L;
                 
                 /* Original: tbl.between(r.minval, r.maxval, index='minval').count() */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.maxval()).optArg("index", "minval").count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #21
                 /* ExpectedOriginal: ({'created':1}) */
                 var expected_ = r.hashMap("created", 1L);
                 
                 /* Original: tbl.index_create('rename-last-dup', tbl.index_status('rename-last').nth(0).get_field('function')) */
                 var obtained = runOrCatch( tbl.indexCreate("rename-last-dup", tbl.indexStatus("rename-last").nth(0L).g("function")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #22
                 /* ExpectedOriginal: [{'index': 'rename-last-dup', 'ready': True}] */
                 var expected_ = r.array(r.hashMap("index", "rename-last-dup").with("ready", true));
                 
                 /* Original: tbl.index_wait('rename-last-dup').pluck('index', 'ready') */
                 var obtained = runOrCatch( tbl.indexWait("rename-last-dup").pluck("index", "ready") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #23
                 /* ExpectedOriginal: 3 */
                 var expected_ = 3L;
                 
                 /* Original: tbl.get_all(0, index='rename-last-dup').count() */
                 var obtained = runOrCatch( tbl.getAll(0L).optArg("index", "rename-last-dup").count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #24
                 /* ExpectedOriginal: ({'dropped':1}) */
                 var expected_ = r.hashMap("dropped", 1L);
                 
                 /* Original: tbl.index_drop('rename-last-dup') */
                 var obtained = runOrCatch( tbl.indexDrop("rename-last-dup") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #24
                 /* ExpectedOriginal: ({'dropped':1}) */
                 var expected_ = r.hashMap("dropped", 1L);
                 
                 /* Original: tbl.index_drop('minval') */
                 var obtained = runOrCatch( tbl.indexDrop("minval") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #24
                 /* ExpectedOriginal: ({'dropped':1}) */
                 var expected_ = r.hashMap("dropped", 1L);
                 
                 /* Original: tbl.index_drop('maxval') */
                 var obtained = runOrCatch( tbl.indexDrop("maxval") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #25
                 /* ExpectedOriginal: (['rename-last']) */
                 var expected_ = r.array("rename-last");
                 
                 /* Original: tbl.index_list() */
                 var obtained = runOrCatch( tbl.indexList() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #26
                 /* ExpectedOriginal: ({'dropped':1}) */
                 var expected_ = r.hashMap("dropped", 1L);
                 
                 /* Original: tbl.index_drop('rename-last') */
                 var obtained = runOrCatch( tbl.indexDrop("rename-last") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #35
                 /* ExpectedOriginal: None */
                 var expected_ = null as object;
                 
                 /* Original: tbl.index_wait().pluck('index', 'ready') */
                 var obtained = runOrCatch( tbl.indexWait().pluck("index", "ready") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #36
                 /* ExpectedOriginal: None */
                 var expected_ = null as object;
                 
                 /* Original: tbl.get(True) */
                 var obtained = runOrCatch( tbl.get(true) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #37
                 /* ExpectedOriginal: (null) */
                 var expected_ = null as object;
                 
                 /* Original: tbl.get([]) */
                 var obtained = runOrCatch( tbl.get(r.array()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #38
                 /* ExpectedOriginal: (null) */
                 var expected_ = null as object;
                 
                 /* Original: tbl.get(-1) */
                 var obtained = runOrCatch( tbl.get(-1L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #39
                 /* ExpectedOriginal: 1 */
                 var expected_ = 1L;
                 
                 /* Original: tbl.get(1)['id'] */
                 var obtained = runOrCatch( tbl.get(1L).g("id") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #40
                 /* ExpectedOriginal: ('SELECTION<OBJECT>') */
                 var expected_ = "SELECTION<OBJECT>";
                 
                 /* Original: tbl.get(1).type_of() */
                 var obtained = runOrCatch( tbl.get(1L).typeOf() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #41
                 /* ExpectedOriginal: ({'replaced':0,'skipped':0,'deleted':0,'unchanged':1,'errors':0,'inserted':0}) */
                 var expected_ = r.hashMap("replaced", 0L).with("skipped", 0L).with("deleted", 0L).with("unchanged", 1L).with("errors", 0L).with("inserted", 0L);
                 
                 /* Original: tbl.get(1).update(lambda x:null) */
                 var obtained = runOrCatch( tbl.get(1L).update(x => null) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #43
                 /* ExpectedOriginal: None */
                 var expected_ = null as object;
                 
                 /* Original: tbl.get_all(True, index='id') */
                 var obtained = runOrCatch( tbl.getAll(true).optArg("index", "id") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #44
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.get_all(-1, index='id') */
                 var obtained = runOrCatch( tbl.getAll(-1L).optArg("index", "id") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #45
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.get_all(-1) */
                 var obtained = runOrCatch( tbl.getAll(-1L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #46
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.get_all([-1]) */
                 var obtained = runOrCatch( tbl.getAll(r.array(-1L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #47
                 /* ExpectedOriginal: 1 */
                 var expected_ = 1L;
                 
                 /* Original: tbl.get_all(1, index='id')[0]['id'] */
                 var obtained = runOrCatch( tbl.getAll(1L).optArg("index", "id").nth(0L).g("id") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #48
                 /* ExpectedOriginal: 1 */
                 var expected_ = 1L;
                 
                 /* Original: tbl.get_all(1)[0]['id'] */
                 var obtained = runOrCatch( tbl.getAll(1L).nth(0L).g("id") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #49
                 /* ExpectedOriginal: [1, 2, 3] */
                 var expected_ = r.array(1L, 2L, 3L);
                 
                 /* Original: tbl.get_all(1,2,3, index='id').map(lambda x:x["id"]).coerce_to("ARRAY") */
                 var obtained = runOrCatch( tbl.getAll(1L, 2L, 3L).optArg("index", "id").map(x => x.g("id")).coerceTo("ARRAY") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #50
                 /* ExpectedOriginal: [1, 2, 3] */
                 var expected_ = r.array(1L, 2L, 3L);
                 
                 /* Original: tbl.get_all(1,2,3).map(lambda x:x["id"]).coerce_to("ARRAY") */
                 var obtained = runOrCatch( tbl.getAll(1L, 2L, 3L).map(x => x.g("id")).coerceTo("ARRAY") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #51
                 /* ExpectedOriginal: ('SELECTION<STREAM>') */
                 var expected_ = "SELECTION<STREAM>";
                 
                 /* Original: tbl.get_all(1, index='id').type_of() */
                 var obtained = runOrCatch( tbl.getAll(1L).optArg("index", "id").typeOf() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #52
                 /* ExpectedOriginal: ('SELECTION<STREAM>') */
                 var expected_ = "SELECTION<STREAM>";
                 
                 /* Original: tbl.get_all(1).type_of() */
                 var obtained = runOrCatch( tbl.getAll(1L).typeOf() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #53
                 /* ExpectedOriginal: ({'replaced':0,'skipped':0,'deleted':0,'unchanged':1,'errors':0,'inserted':0}) */
                 var expected_ = r.hashMap("replaced", 0L).with("skipped", 0L).with("deleted", 0L).with("unchanged", 1L).with("errors", 0L).with("inserted", 0L);
                 
                 /* Original: tbl.get_all(1, index='id').update(lambda x:null) */
                 var obtained = runOrCatch( tbl.getAll(1L).optArg("index", "id").update(x => null) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #54
                 /* ExpectedOriginal: ({'replaced':0,'skipped':0,'deleted':0,'unchanged':1,'errors':0,'inserted':0}) */
                 var expected_ = r.hashMap("replaced", 0L).with("skipped", 0L).with("deleted", 0L).with("unchanged", 1L).with("errors", 0L).with("inserted", 0L);
                 
                 /* Original: tbl.get_all(1).update(lambda x:null) */
                 var obtained = runOrCatch( tbl.getAll(1L).update(x => null) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #55
                 /* ExpectedOriginal: ({'replaced':0,'skipped':0,'deleted':0,'unchanged':3,'errors':0,'inserted':0}) */
                 var expected_ = r.hashMap("replaced", 0L).with("skipped", 0L).with("deleted", 0L).with("unchanged", 3L).with("errors", 0L).with("inserted", 0L);
                 
                 /* Original: tbl.get_all(1,2,3, index='id').update(lambda x:null) */
                 var obtained = runOrCatch( tbl.getAll(1L, 2L, 3L).optArg("index", "id").update(x => null) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #56
                 /* ExpectedOriginal: ({'replaced':0,'skipped':0,'deleted':0,'unchanged':3,'errors':0,'inserted':0}) */
                 var expected_ = r.hashMap("replaced", 0L).with("skipped", 0L).with("deleted", 0L).with("unchanged", 3L).with("errors", 0L).with("inserted", 0L);
                 
                 /* Original: tbl.get_all(1,2,3).update(lambda x:null) */
                 var obtained = runOrCatch( tbl.getAll(1L, 2L, 3L).update(x => null) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #57
                 /* ExpectedOriginal: err_regex("ReqlOpFailedError", "Index `fake` was not found on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]", []) */
                 var expected_ = err_regex("ReqlOpFailedError", "Index `fake` was not found on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]", r.array());
                 
                 /* Original: tbl.get_all(0, index='fake') */
                 var obtained = runOrCatch( tbl.getAll(0L).optArg("index", "fake") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #58
                 /* ExpectedOriginal: err("ReqlQueryLogicError", "Cannot use a geospatial index with `get_all`. Use `get_intersecting` instead.", []) */
                 var expected_ = err("ReqlQueryLogicError", "Cannot use a geospatial index with `get_all`. Use `get_intersecting` instead.", r.array());
                 
                 /* Original: tbl.get_all(r.point(0, 0)) */
                 var obtained = runOrCatch( tbl.getAll(r.point(0L, 0L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #59
                 /* ExpectedOriginal: err("ReqlQueryLogicError", "Expected type STRING but found BOOL.", []) */
                 var expected_ = err("ReqlQueryLogicError", "Expected type STRING but found BOOL.", r.array());
                 
                 /* Original: tbl.get_all(0, index=False) */
                 var obtained = runOrCatch( tbl.getAll(0L).optArg("index", false) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #60
                 /* ExpectedOriginal: None */
                 var expected_ = null as object;
                 
                 /* Original: tbl.get_all(True, index='id') */
                 var obtained = runOrCatch( tbl.getAll(true).optArg("index", "id") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #61
                 /* ExpectedOriginal: ([]) */
                 var expected_ = r.array();
                 
                 /* Original: tbl.get_all([], index='id') */
                 var obtained = runOrCatch( tbl.getAll(r.array()).optArg("index", "id") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #62
                 /* ExpectedOriginal: None */
                 var expected_ = null as object;
                 
                 /* Original: tbl.get_all(True, index='idi') */
                 var obtained = runOrCatch( tbl.getAll(true).optArg("index", "idi") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #63
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.get_all([], index='idi') */
                 var obtained = runOrCatch( tbl.getAll(r.array()).optArg("index", "idi") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #64
                 /* ExpectedOriginal: 1 */
                 var expected_ = 1L;
                 
                 /* Original: tbl.get_all(1, index='id')[0]['id'] */
                 var obtained = runOrCatch( tbl.getAll(1L).optArg("index", "id").nth(0L).g("id") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #65
                 /* ExpectedOriginal: 1 */
                 var expected_ = 1L;
                 
                 /* Original: tbl.get_all(1, index='idi')[0]['id'] */
                 var obtained = runOrCatch( tbl.getAll(1L).optArg("index", "idi").nth(0L).g("id") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #66
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.get_all(1, index='ai') */
                 var obtained = runOrCatch( tbl.getAll(1L).optArg("index", "ai") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #67
                 /* ExpectedOriginal: [3] */
                 var expected_ = r.array(3L);
                 
                 /* Original: tbl.get_all(1, index='bi').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.getAll(1L).optArg("index", "bi").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #68
                 /* ExpectedOriginal: err('ReqlQueryLogicError', 'Indexed order_by can only be performed on a TABLE or TABLE_SLICE.', [0]) */
                 var expected_ = err("ReqlQueryLogicError", "Indexed order_by can only be performed on a TABLE or TABLE_SLICE.", r.array(0L));
                 
                 /* Original: tbl.get_all(1, index='bi').order_by(index='id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.getAll(1L).optArg("index", "bi").orderBy().optArg("index", "id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #69
                 /* ExpectedOriginal: err('ReqlQueryLogicError', 'Expected type TABLE_SLICE but found SELECTION:', [0]) */
                 var expected_ = err("ReqlQueryLogicError", "Expected type TABLE_SLICE but found SELECTION:", r.array(0L));
                 
                 /* Original: tbl.get_all(1, index='bi').between(1, 1, index='id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.getAll(1L).optArg("index", "bi").between(1L, 1L).optArg("index", "id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #70
                 /* ExpectedOriginal: [2, 3] */
                 var expected_ = r.array(2L, 3L);
                 
                 /* Original: tbl.get_all(1, index='ci').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.getAll(1L).optArg("index", "ci").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #71
                 /* ExpectedOriginal: ('SELECTION<STREAM>') */
                 var expected_ = "SELECTION<STREAM>";
                 
                 /* Original: tbl.get_all(1, index='ci').type_of() */
                 var obtained = runOrCatch( tbl.getAll(1L).optArg("index", "ci").typeOf() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #72
                 /* ExpectedOriginal: ({'replaced':0,'skipped':0,'deleted':0,'unchanged':2,'errors':0,'inserted':0}) */
                 var expected_ = r.hashMap("replaced", 0L).with("skipped", 0L).with("deleted", 0L).with("unchanged", 2L).with("errors", 0L).with("inserted", 0L);
                 
                 /* Original: tbl.get_all(1, index='ci').update(lambda x:null) */
                 var obtained = runOrCatch( tbl.getAll(1L).optArg("index", "ci").update(x => null) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #73
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.get_all(1, index='brokeni') */
                 var obtained = runOrCatch( tbl.getAll(1L).optArg("index", "brokeni") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #74
                 /* ExpectedOriginal: ([rows[0]]) */
                 var expected_ = r.array(rows.get(0));
                 
                 /* Original: tbl.get_all(1, index='mi') */
                 var obtained = runOrCatch( tbl.getAll(1L).optArg("index", "mi") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #75
                 /* ExpectedOriginal: ([rows[0]]) */
                 var expected_ = r.array(rows.get(0));
                 
                 /* Original: tbl.get_all(2, index='mi') */
                 var obtained = runOrCatch( tbl.getAll(2L).optArg("index", "mi") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #76
                 /* ExpectedOriginal: ([rows[1]]) */
                 var expected_ = r.array(rows.get(1));
                 
                 /* Original: tbl.get_all(5, index='mi') */
                 var obtained = runOrCatch( tbl.getAll(5L).optArg("index", "mi") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #77
                 /* ExpectedOriginal: ([rows[2]]) */
                 var expected_ = r.array(rows.get(2));
                 
                 /* Original: tbl.get_all(7, index='mi') */
                 var obtained = runOrCatch( tbl.getAll(7L).optArg("index", "mi") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #78
                 /* ExpectedOriginal: err_regex("ReqlOpFailedError", "Index `fake` was not found on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]", []) */
                 var expected_ = err_regex("ReqlOpFailedError", "Index `fake` was not found on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]", r.array());
                 
                 /* Original: tbl.eq_join('id', tbl, index='fake') */
                 var obtained = runOrCatch( tbl.eqJoin("id", tbl).optArg("index", "fake") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #79
                 /* ExpectedOriginal: err("ReqlQueryLogicError", "Expected type STRING but found BOOL.", []) */
                 var expected_ = err("ReqlQueryLogicError", "Expected type STRING but found BOOL.", r.array());
                 
                 /* Original: tbl.eq_join('id', tbl, index=False) */
                 var obtained = runOrCatch( tbl.eqJoin("id", tbl).optArg("index", false) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #80
                 /* ExpectedOriginal: ([{'left':rows[1],'right':rows[0]}]) */
                 var expected_ = r.array(r.hashMap("left", rows.get(1)).with("right", rows.get(0)));
                 
                 /* Original: tbl.filter({'id':1}).eq_join('id', tbl, index='mi') */
                 var obtained = runOrCatch( tbl.filter(r.hashMap("id", 1L)).eqJoin("id", tbl).optArg("index", "mi") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #81
                 /* ExpectedOriginal: ([{'left':rows[0],'right':rows[0]}]) */
                 var expected_ = r.array(r.hashMap("left", rows.get(0)).with("right", rows.get(0)));
                 
                 /* Original: tbl.filter({'id':0}).eq_join('id', tbl) */
                 var obtained = runOrCatch( tbl.filter(r.hashMap("id", 0L)).eqJoin("id", tbl) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #82
                 /* ExpectedOriginal: ([{'left':rows[0],'right':rows[0]}]) */
                 var expected_ = r.array(r.hashMap("left", rows.get(0)).with("right", rows.get(0)));
                 
                 /* Original: tbl.filter({'id':0}).eq_join(lambda x:x['id'], tbl) */
                 var obtained = runOrCatch( tbl.filter(r.hashMap("id", 0L)).eqJoin(x => x.g("id"), tbl) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #83
                 /* ExpectedOriginal: ([{'left':rows[0],'right':rows[0]}]) */
                 var expected_ = r.array(r.hashMap("left", rows.get(0)).with("right", rows.get(0)));
                 
                 /* Original: tbl.filter({'id':0}).eq_join('id', tbl, index='id') */
                 var obtained = runOrCatch( tbl.filter(r.hashMap("id", 0L)).eqJoin("id", tbl).optArg("index", "id") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #84
                 /* ExpectedOriginal: ([{'left':rows[0],'right':rows[0]}]) */
                 var expected_ = r.array(r.hashMap("left", rows.get(0)).with("right", rows.get(0)));
                 
                 /* Original: tbl.filter({'id':0}).eq_join(lambda x:x['id'], tbl, index='id') */
                 var obtained = runOrCatch( tbl.filter(r.hashMap("id", 0L)).eqJoin(x => x.g("id"), tbl).optArg("index", "id") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #85
                 /* ExpectedOriginal: ([{'left':rows[0],'right':rows[0]}]) */
                 var expected_ = r.array(r.hashMap("left", rows.get(0)).with("right", rows.get(0)));
                 
                 /* Original: tbl.filter({'id':0}).eq_join('id', tbl, index='idi') */
                 var obtained = runOrCatch( tbl.filter(r.hashMap("id", 0L)).eqJoin("id", tbl).optArg("index", "idi") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #86
                 /* ExpectedOriginal: ([{'left':rows[0],'right':rows[0]}]) */
                 var expected_ = r.array(r.hashMap("left", rows.get(0)).with("right", rows.get(0)));
                 
                 /* Original: tbl.filter({'id':0}).eq_join(lambda x:x['id'], tbl, index='idi') */
                 var obtained = runOrCatch( tbl.filter(r.hashMap("id", 0L)).eqJoin(x => x.g("id"), tbl).optArg("index", "idi") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #87
                 /* ExpectedOriginal: ([{'right':rows[0],'left':rows[0]}, {'right':rows[1],'left':rows[0]}, {'right':rows[2],'left':rows[0]}, {'right':rows[3],'left':rows[0]}]) */
                 var expected_ = r.array(r.hashMap("right", rows.get(0)).with("left", rows.get(0)), r.hashMap("right", rows.get(1)).with("left", rows.get(0)), r.hashMap("right", rows.get(2)).with("left", rows.get(0)), r.hashMap("right", rows.get(3)).with("left", rows.get(0)));
                 
                 /* Original: tbl.filter({'id':0}).eq_join('id', tbl, index='ai').order_by('right') */
                 var obtained = runOrCatch( tbl.filter(r.hashMap("id", 0L)).eqJoin("id", tbl).optArg("index", "ai").orderBy("right") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #88
                 /* ExpectedOriginal: ([{'right':rows[0],'left':rows[0]}, {'right':rows[1],'left':rows[0]}, {'right':rows[2],'left':rows[0]}]) */
                 var expected_ = r.array(r.hashMap("right", rows.get(0)).with("left", rows.get(0)), r.hashMap("right", rows.get(1)).with("left", rows.get(0)), r.hashMap("right", rows.get(2)).with("left", rows.get(0)));
                 
                 /* Original: tbl.filter({'id':0}).eq_join('id', tbl, index='bi').order_by('right') */
                 var obtained = runOrCatch( tbl.filter(r.hashMap("id", 0L)).eqJoin("id", tbl).optArg("index", "bi").orderBy("right") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #89
                 /* ExpectedOriginal: ([{'right':rows[0],'left':rows[0]}, {'right':rows[1],'left':rows[0]}]) */
                 var expected_ = r.array(r.hashMap("right", rows.get(0)).with("left", rows.get(0)), r.hashMap("right", rows.get(1)).with("left", rows.get(0)));
                 
                 /* Original: tbl.filter({'id':0}).eq_join('id', tbl, index='ci').order_by('right') */
                 var obtained = runOrCatch( tbl.filter(r.hashMap("id", 0L)).eqJoin("id", tbl).optArg("index", "ci").orderBy("right") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #90
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.filter({'id':0}).eq_join('id', tbl, index='brokeni') */
                 var obtained = runOrCatch( tbl.filter(r.hashMap("id", 0L)).eqJoin("id", tbl).optArg("index", "brokeni") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #91
                 /* ExpectedOriginal: ([{'left':rows[0],'right':rows[0]}, {'left':rows[1],'right':rows[0]}, {'left':rows[0],'right':rows[1]}, {'left':rows[1],'right':rows[1]}, {'left':rows[0],'right':rows[2]}, {'left':rows[1],'right':rows[2]}, {'left':rows[2],'right':rows[3]}, {'left':rows[3],'right':rows[3]}]) */
                 var expected_ = r.array(r.hashMap("left", rows.get(0)).with("right", rows.get(0)), r.hashMap("left", rows.get(1)).with("right", rows.get(0)), r.hashMap("left", rows.get(0)).with("right", rows.get(1)), r.hashMap("left", rows.get(1)).with("right", rows.get(1)), r.hashMap("left", rows.get(0)).with("right", rows.get(2)), r.hashMap("left", rows.get(1)).with("right", rows.get(2)), r.hashMap("left", rows.get(2)).with("right", rows.get(3)), r.hashMap("left", rows.get(3)).with("right", rows.get(3)));
                 
                 /* Original: tbl.eq_join('c', tbl, index='bi').order_by('right', 'left') */
                 var obtained = runOrCatch( tbl.eqJoin("c", tbl).optArg("index", "bi").orderBy("right", "left") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #92
                 /* ExpectedOriginal: err("ReqlQueryLogicError", "Index name conflict: `id` is the name of the primary key.", []) */
                 var expected_ = err("ReqlQueryLogicError", "Index name conflict: `id` is the name of the primary key.", r.array());
                 
                 /* Original: tbl.index_create('id') */
                 var obtained = runOrCatch( tbl.indexCreate("id") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #93
                 /* ExpectedOriginal: ({'created':1}) */
                 var expected_ = r.hashMap("created", 1L);
                 
                 /* Original: tbl.index_create('c') */
                 var obtained = runOrCatch( tbl.indexCreate("c") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #94
                 /* ExpectedOriginal: ({'created':1}) */
                 var expected_ = r.hashMap("created", 1L);
                 
                 /* Original: tbl.index_create('broken') */
                 var obtained = runOrCatch( tbl.indexCreate("broken") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #95
                 /* ExpectedOriginal: None */
                 var expected_ = null as object;
                 
                 /* Original: tbl.index_wait('broken') */
                 var obtained = runOrCatch( tbl.indexWait("broken") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #96
                 /* ExpectedOriginal: [2, 3] */
                 var expected_ = r.array(2L, 3L);
                 
                 /* Original: tbl.get_all(1, index='c').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.getAll(1L).optArg("index", "c").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #97
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.get_all(1, index='broken').order_by('broken').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.getAll(1L).optArg("index", "broken").orderBy("broken").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #98
                 /* ExpectedOriginal: ({'created':1}) */
                 var expected_ = r.hashMap("created", 1L);
                 
                 /* Original: tbl.index_create('nil', lambda x:null) */
                 var obtained = runOrCatch( tbl.indexCreate("nil", x => null) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #99
                 /* ExpectedOriginal: None */
                 var expected_ = null as object;
                 
                 /* Original: tbl.index_wait().pluck('index', 'ready') */
                 var obtained = runOrCatch( tbl.indexWait().pluck("index", "ready") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #100
                 /* ExpectedOriginal: err("ReqlNonExistenceError", "Secondary keys must be a number, string, bool, pseudotype, or array (got nu""ll of type NULL).", []) */
                 var expected_ = err("ReqlNonExistenceError", "Secondary keys must be a number, string, bool, pseudotype, or array (got null of type NULL).", r.array());
                 
                 /* Original: tbl.get_all(null, index='nil') */
                 var obtained = runOrCatch( tbl.getAll((ReqlExpr) null).optArg("index", "nil") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #101
                 /* ExpectedOriginal: ({'deleted':0,'inserted':1,'skipped':0,'errors':0,'replaced':0,'unchanged':0}) */
                 var expected_ = r.hashMap("deleted", 0L).with("inserted", 1L).with("skipped", 0L).with("errors", 0L).with("replaced", 0L).with("unchanged", 0L);
                 
                 /* Original: tbl.insert({'id':4, 'a':4, 'b':4, 'c':4, 'm':[14,15,16]}) */
                 var obtained = runOrCatch( tbl.insert(r.hashMap("id", 4L).with("a", 4L).with("b", 4L).with("c", 4L).with("m", r.array(14L, 15L, 16L))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #103
                 /* ExpectedOriginal: ([{'right':rows[0],'left':rows[0]}, {'right':rows[1],'left':rows[0]}, {'right':rows[2],'left':rows[1]}, {'right':rows[3],'left':rows[1]}, {'right':rows[4],'left':rows[4]}]) */
                 var expected_ = r.array(r.hashMap("right", rows.get(0)).with("left", rows.get(0)), r.hashMap("right", rows.get(1)).with("left", rows.get(0)), r.hashMap("right", rows.get(2)).with("left", rows.get(1)), r.hashMap("right", rows.get(3)).with("left", rows.get(1)), r.hashMap("right", rows.get(4)).with("left", rows.get(4)));
                 
                 /* Original: tbl.eq_join('id', tbl, index='c').order_by('left', 'right').coerce_to("ARRAY") */
                 var obtained = runOrCatch( tbl.eqJoin("id", tbl).optArg("index", "c").orderBy("left", "right").coerceTo("ARRAY") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #104
                 /* ExpectedOriginal: ([{'right':rows[0],'left':rows[0]}, {'right':rows[1],'left':rows[0]}, {'right':rows[2],'left':rows[1]}, {'right':rows[3],'left':rows[1]}, {'right':rows[4],'left':rows[4]}]) */
                 var expected_ = r.array(r.hashMap("right", rows.get(0)).with("left", rows.get(0)), r.hashMap("right", rows.get(1)).with("left", rows.get(0)), r.hashMap("right", rows.get(2)).with("left", rows.get(1)), r.hashMap("right", rows.get(3)).with("left", rows.get(1)), r.hashMap("right", rows.get(4)).with("left", rows.get(4)));
                 
                 /* Original: tbl.eq_join('id', tbl, index='ci').order_by('left', 'right') */
                 var obtained = runOrCatch( tbl.eqJoin("id", tbl).optArg("index", "ci").orderBy("left", "right") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #105
                 /* ExpectedOriginal: err('ReqlQueryLogicError', 'Cannot use `nu' + 'll` in BETWEEN, use `r.minval` or `r.maxval` to denote unboundedness.') */
                 var expected_ = err("ReqlQueryLogicError", "Cannot use `nu" + "ll` in BETWEEN, use `r.minval` or `r.maxval` to denote unboundedness.");
                 
                 /* Original: tbl.between(null, 2, index='id').count() */
                 var obtained = runOrCatch( tbl.between((ReqlExpr) null, 2L).optArg("index", "id").count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #105
                 /* ExpectedOriginal: err('ReqlQueryLogicError', 'Cannot use `nu' + 'll` in BETWEEN, use `r.minval` or `r.maxval` to denote unboundedness.') */
                 var expected_ = err("ReqlQueryLogicError", "Cannot use `nu" + "ll` in BETWEEN, use `r.minval` or `r.maxval` to denote unboundedness.");
                 
                 /* Original: tbl.between(2, null, index='id').count() */
                 var obtained = runOrCatch( tbl.between(2L, (ReqlExpr) null).optArg("index", "id").count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #105
                 /* ExpectedOriginal: err('ReqlQueryLogicError', 'Cannot use `nu' + 'll` in BETWEEN, use `r.minval` or `r.maxval` to denote unboundedness.') */
                 var expected_ = err("ReqlQueryLogicError", "Cannot use `nu" + "ll` in BETWEEN, use `r.minval` or `r.maxval` to denote unboundedness.");
                 
                 /* Original: tbl.between(null, null, index='id').count() */
                 var obtained = runOrCatch( tbl.between((ReqlExpr) null, (ReqlExpr) null).optArg("index", "id").count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #106
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(r.minval, r.maxval).order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.maxval()).orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #107
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(r.minval, r.maxval).order_by(index='id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.maxval()).orderBy().optArg("index", "id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #108
                 /* ExpectedOriginal: err('ReqlQueryLogicError', 'Cannot perform multiple BETWEENs on the same table.', [0]) */
                 var expected_ = err("ReqlQueryLogicError", "Cannot perform multiple BETWEENs on the same table.", r.array(0L));
                 
                 /* Original: tbl.between(r.minval, r.maxval).between(r.minval, r.maxval).map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.maxval()).between(r.minval(), r.maxval()).map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #109
                 /* ExpectedOriginal: ([0, 1, 2]) */
                 var expected_ = r.array(0L, 1L, 2L);
                 
                 /* Original: tbl.order_by(index='id').between(r.minval, 3).map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.orderBy().optArg("index", "id").between(r.minval(), 3L).map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #110
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(0, r.maxval).order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, r.maxval()).orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #111
                 /* ExpectedOriginal: [0, 1, 2, 3] */
                 var expected_ = r.array(0L, 1L, 2L, 3L);
                 
                 /* Original: tbl.between(r.minval, 4).order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), 4L).orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #112
                 /* ExpectedOriginal: [0, 1, 2, 3] */
                 var expected_ = r.array(0L, 1L, 2L, 3L);
                 
                 /* Original: tbl.between(0, 4).order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, 4L).orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #113
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(-1, 5).order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(-1L, 5L).orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #114
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(5, 5).order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(5L, 5L).orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #115
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(5, r.maxval).order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(5L, r.maxval()).orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #116
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(-1, -1).order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(-1L, -1L).orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #117
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(r.minval, -1).order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), -1L).orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #118
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(r.minval, r.maxval, right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.maxval()).optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #119
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(0, r.maxval, right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, r.maxval()).optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #120
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(r.minval, 4, right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), 4L).optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #121
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(0, 4, right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, 4L).optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #122
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(-1, 5, right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(-1L, 5L).optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #123
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(5, 5, right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(5L, 5L).optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #124
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(5, r.maxval, right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(5L, r.maxval()).optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #125
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(-1, -1, right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(-1L, -1L).optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #126
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(r.minval, -1, right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), -1L).optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #127
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(r.minval, r.maxval, index='id').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.maxval()).optArg("index", "id").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #128
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(0, r.maxval, index='id').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, r.maxval()).optArg("index", "id").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #129
                 /* ExpectedOriginal: [0, 1, 2, 3] */
                 var expected_ = r.array(0L, 1L, 2L, 3L);
                 
                 /* Original: tbl.between(r.minval, 4, index='id').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), 4L).optArg("index", "id").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #130
                 /* ExpectedOriginal: [0, 1, 2, 3] */
                 var expected_ = r.array(0L, 1L, 2L, 3L);
                 
                 /* Original: tbl.between(0, 4, index='id').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, 4L).optArg("index", "id").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #131
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(-1, 5, index='id').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(-1L, 5L).optArg("index", "id").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #132
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(5, 5, index='id').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(5L, 5L).optArg("index", "id").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #133
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(5, r.maxval, index='id').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(5L, r.maxval()).optArg("index", "id").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #134
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(-1, -1, index='id').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(-1L, -1L).optArg("index", "id").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #135
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(r.minval, -1, index='id').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), -1L).optArg("index", "id").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #136
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(r.minval, r.maxval, index='id', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.maxval()).optArg("index", "id").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #137
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(0, r.maxval, index='id', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, r.maxval()).optArg("index", "id").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #138
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(r.minval, 4, index='id', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), 4L).optArg("index", "id").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #139
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(0, 4, index='id', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, 4L).optArg("index", "id").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #140
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(-1, 5, index='id', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(-1L, 5L).optArg("index", "id").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #141
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(5, 5, index='id', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(5L, 5L).optArg("index", "id").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #142
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(5, r.maxval, index='id', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(5L, r.maxval()).optArg("index", "id").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #143
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(-1, -1, index='id', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(-1L, -1L).optArg("index", "id").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #144
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(r.minval, -1, index='id', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), -1L).optArg("index", "id").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #145
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(r.minval, r.maxval, index='idi').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.maxval()).optArg("index", "idi").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #146
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(0, r.maxval, index='idi').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, r.maxval()).optArg("index", "idi").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #147
                 /* ExpectedOriginal: [0, 1, 2, 3] */
                 var expected_ = r.array(0L, 1L, 2L, 3L);
                 
                 /* Original: tbl.between(r.minval, 4, index='idi').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), 4L).optArg("index", "idi").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #148
                 /* ExpectedOriginal: [0, 1, 2, 3] */
                 var expected_ = r.array(0L, 1L, 2L, 3L);
                 
                 /* Original: tbl.between(0, 4, index='idi').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, 4L).optArg("index", "idi").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #149
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(-1, 5, index='idi').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(-1L, 5L).optArg("index", "idi").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #150
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(5, 5, index='idi').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(5L, 5L).optArg("index", "idi").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #151
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(5, r.maxval, index='idi').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(5L, r.maxval()).optArg("index", "idi").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #152
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(-1, -1, index='idi').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(-1L, -1L).optArg("index", "idi").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #153
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(r.minval, -1, index='idi').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), -1L).optArg("index", "idi").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #154
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(r.minval, r.maxval, index='idi', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.maxval()).optArg("index", "idi").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #155
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(0, r.maxval, index='idi', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, r.maxval()).optArg("index", "idi").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #156
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(r.minval, 4, index='idi', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), 4L).optArg("index", "idi").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #157
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(0, 4, index='idi', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, 4L).optArg("index", "idi").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #158
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(-1, 5, index='idi', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(-1L, 5L).optArg("index", "idi").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #159
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(5, 5, index='idi', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(5L, 5L).optArg("index", "idi").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #160
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(5, r.maxval, index='idi', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(5L, r.maxval()).optArg("index", "idi").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #161
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(-1, -1, index='idi', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(-1L, -1L).optArg("index", "idi").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #162
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(r.minval, -1, index='idi', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), -1L).optArg("index", "idi").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #163
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(r.minval, r.maxval, index='ai').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.maxval()).optArg("index", "ai").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #164
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(0, r.maxval, index='ai').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, r.maxval()).optArg("index", "ai").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #165
                 /* ExpectedOriginal: [0, 1, 2, 3] */
                 var expected_ = r.array(0L, 1L, 2L, 3L);
                 
                 /* Original: tbl.between(r.minval, 4, index='ai').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), 4L).optArg("index", "ai").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #166
                 /* ExpectedOriginal: [0, 1, 2, 3] */
                 var expected_ = r.array(0L, 1L, 2L, 3L);
                 
                 /* Original: tbl.between(0, 4, index='ai').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, 4L).optArg("index", "ai").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #167
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(0, 5, index='ai').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, 5L).optArg("index", "ai").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #168
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(r.minval, r.maxval, index='ai', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.maxval()).optArg("index", "ai").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #169
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(0, r.maxval, index='ai', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, r.maxval()).optArg("index", "ai").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #170
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(r.minval, 4, index='ai', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), 4L).optArg("index", "ai").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #171
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(0, 4, index='ai', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, 4L).optArg("index", "ai").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #172
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(0, 5, index='ai', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, 5L).optArg("index", "ai").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #173
                 /* ExpectedOriginal: [0, 1, 2, 3] */
                 var expected_ = r.array(0L, 1L, 2L, 3L);
                 
                 /* Original: tbl.between(0, 3, index='ai').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, 3L).optArg("index", "ai").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #174
                 /* ExpectedOriginal: [0, 1, 2, 3] */
                 var expected_ = r.array(0L, 1L, 2L, 3L);
                 
                 /* Original: tbl.between(0, 1, index='ai').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, 1L).optArg("index", "ai").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #175
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(0, 0, index='ai').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, 0L).optArg("index", "ai").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #176
                 /* ExpectedOriginal: [0, 1, 2, 3] */
                 var expected_ = r.array(0L, 1L, 2L, 3L);
                 
                 /* Original: tbl.between(-1, 2, index='ai').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(-1L, 2L).optArg("index", "ai").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #177
                 /* ExpectedOriginal: [0, 1, 2, 3] */
                 var expected_ = r.array(0L, 1L, 2L, 3L);
                 
                 /* Original: tbl.between(0, 3, index='ai', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, 3L).optArg("index", "ai").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #178
                 /* ExpectedOriginal: [0, 1, 2, 3] */
                 var expected_ = r.array(0L, 1L, 2L, 3L);
                 
                 /* Original: tbl.between(0, 1, index='ai', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, 1L).optArg("index", "ai").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #179
                 /* ExpectedOriginal: [0, 1, 2, 3] */
                 var expected_ = r.array(0L, 1L, 2L, 3L);
                 
                 /* Original: tbl.between(0, 0, index='ai', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, 0L).optArg("index", "ai").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #180
                 /* ExpectedOriginal: [0, 1, 2, 3] */
                 var expected_ = r.array(0L, 1L, 2L, 3L);
                 
                 /* Original: tbl.between(-1, 2, index='ai', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(-1L, 2L).optArg("index", "ai").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #181
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(1, 1, index='ai').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(1L, 1L).optArg("index", "ai").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #182
                 /* ExpectedOriginal: [4] */
                 var expected_ = r.array(4L);
                 
                 /* Original: tbl.between(1, r.maxval, index='ai').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(1L, r.maxval()).optArg("index", "ai").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #183
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(5, r.maxval, index='ai').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(5L, r.maxval()).optArg("index", "ai").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #184
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(r.minval, 0, index='ai').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), 0L).optArg("index", "ai").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #185
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(-1, -1, index='ai').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(-1L, -1L).optArg("index", "ai").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #186
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(r.minval, -1, index='ai').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), -1L).optArg("index", "ai").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #187
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(1, 1, index='ai', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(1L, 1L).optArg("index", "ai").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #188
                 /* ExpectedOriginal: [4] */
                 var expected_ = r.array(4L);
                 
                 /* Original: tbl.between(1, r.maxval, index='ai', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(1L, r.maxval()).optArg("index", "ai").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #189
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(5, r.maxval, index='ai', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(5L, r.maxval()).optArg("index", "ai").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #190
                 /* ExpectedOriginal: [0, 1, 2, 3] */
                 var expected_ = r.array(0L, 1L, 2L, 3L);
                 
                 /* Original: tbl.between(r.minval, 0, index='ai', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), 0L).optArg("index", "ai").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #191
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(-1, -1, index='ai', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(-1L, -1L).optArg("index", "ai").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #192
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(r.minval, -1, index='ai', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), -1L).optArg("index", "ai").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #193
                 /* ExpectedOriginal: [0, 1] */
                 var expected_ = r.array(0L, 1L);
                 
                 /* Original: tbl.between(0, 1, index='c').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, 1L).optArg("index", "c").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #194
                 /* ExpectedOriginal: [0, 1] */
                 var expected_ = r.array(0L, 1L);
                 
                 /* Original: tbl.between(-1, 1, index='c').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(-1L, 1L).optArg("index", "c").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #195
                 /* ExpectedOriginal: [0, 1] */
                 var expected_ = r.array(0L, 1L);
                 
                 /* Original: tbl.between(r.minval, 1, index='c').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), 1L).optArg("index", "c").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #196
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(0, r.maxval, index='c').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, r.maxval()).optArg("index", "c").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #197
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(-1, r.maxval, index='c').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(-1L, r.maxval()).optArg("index", "c").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #198
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(r.minval, r.maxval, index='c').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.maxval()).optArg("index", "c").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #199
                 /* ExpectedOriginal: [2, 3, 4] */
                 var expected_ = r.array(2L, 3L, 4L);
                 
                 /* Original: tbl.between(1, r.maxval, index='c').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(1L, r.maxval()).optArg("index", "c").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #200
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(1, 1, index='c').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(1L, 1L).optArg("index", "c").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #201
                 /* ExpectedOriginal: [0, 1, 2, 3] */
                 var expected_ = r.array(0L, 1L, 2L, 3L);
                 
                 /* Original: tbl.between(0, 1, index='c', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, 1L).optArg("index", "c").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #202
                 /* ExpectedOriginal: [0, 1, 2, 3] */
                 var expected_ = r.array(0L, 1L, 2L, 3L);
                 
                 /* Original: tbl.between(-1, 1, index='c', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(-1L, 1L).optArg("index", "c").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #203
                 /* ExpectedOriginal: [0, 1, 2, 3] */
                 var expected_ = r.array(0L, 1L, 2L, 3L);
                 
                 /* Original: tbl.between(r.minval, 1, index='c', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), 1L).optArg("index", "c").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #204
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(0, r.maxval, index='c', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(0L, r.maxval()).optArg("index", "c").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #205
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(-1, r.maxval, index='c', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(-1L, r.maxval()).optArg("index", "c").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #206
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(r.minval, r.maxval, index='c', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.maxval()).optArg("index", "c").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #207
                 /* ExpectedOriginal: [2, 3, 4] */
                 var expected_ = r.array(2L, 3L, 4L);
                 
                 /* Original: tbl.between(1, r.maxval, index='c', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(1L, r.maxval()).optArg("index", "c").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #208
                 /* ExpectedOriginal: [2, 3] */
                 var expected_ = r.array(2L, 3L);
                 
                 /* Original: tbl.between(1, 1, index='c', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(1L, 1L).optArg("index", "c").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #209
                 /* ExpectedOriginal: ({'created':1}) */
                 var expected_ = r.hashMap("created", 1L);
                 
                 /* Original: tbl.index_create('bc', lambda row:[row['b'], row['c']]) */
                 var obtained = runOrCatch( tbl.indexCreate("bc", row => r.array(row.g("b"), row.g("c"))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #210
                 /* ExpectedOriginal: ({'created':1}) */
                 var expected_ = r.hashMap("created", 1L);
                 
                 /* Original: tbl.index_create('cb', lambda row:[row['c'], row['b']]) */
                 var obtained = runOrCatch( tbl.indexCreate("cb", row => r.array(row.g("c"), row.g("b"))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #211
                 /* ExpectedOriginal: None */
                 var expected_ = null as object;
                 
                 /* Original: tbl.index_wait().pluck('index', 'ready') */
                 var obtained = runOrCatch( tbl.indexWait().pluck("index", "ready") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #212
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(r.minval, [0, 0], index='bc').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.array(0L, 0L)).optArg("index", "bc").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #213
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between(r.minval, [0, 0], index='cb').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.array(0L, 0L)).optArg("index", "cb").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #214
                 /* ExpectedOriginal: [0, 1] */
                 var expected_ = r.array(0L, 1L);
                 
                 /* Original: tbl.between(r.minval, [0, 1], index='bc').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.array(0L, 1L)).optArg("index", "bc").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #215
                 /* ExpectedOriginal: [0, 1] */
                 var expected_ = r.array(0L, 1L);
                 
                 /* Original: tbl.between(r.minval, [0, 1], index='cb').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.array(0L, 1L)).optArg("index", "cb").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #216
                 /* ExpectedOriginal: [0, 1, 2] */
                 var expected_ = r.array(0L, 1L, 2L);
                 
                 /* Original: tbl.between(r.minval, [1, 0], index='bc').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.array(1L, 0L)).optArg("index", "bc").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #217
                 /* ExpectedOriginal: [0, 1] */
                 var expected_ = r.array(0L, 1L);
                 
                 /* Original: tbl.between(r.minval, [1, 0], index='cb').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.array(1L, 0L)).optArg("index", "cb").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #218
                 /* ExpectedOriginal: [0, 1, 2] */
                 var expected_ = r.array(0L, 1L, 2L);
                 
                 /* Original: tbl.between(r.minval, [1, 1], index='bc').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.array(1L, 1L)).optArg("index", "bc").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #219
                 /* ExpectedOriginal: [0, 1, 2] */
                 var expected_ = r.array(0L, 1L, 2L);
                 
                 /* Original: tbl.between(r.minval, [1, 1], index='cb').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.array(1L, 1L)).optArg("index", "cb").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #220
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(r.minval, r.maxval, index='bc').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.maxval()).optArg("index", "bc").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #221
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(r.minval, r.maxval, index='cb').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.maxval()).optArg("index", "cb").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #222
                 /* ExpectedOriginal: [0, 1] */
                 var expected_ = r.array(0L, 1L);
                 
                 /* Original: tbl.between(r.minval, [0, 0], index='bc', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.array(0L, 0L)).optArg("index", "bc").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #223
                 /* ExpectedOriginal: [0, 1] */
                 var expected_ = r.array(0L, 1L);
                 
                 /* Original: tbl.between(r.minval, [0, 0], index='cb', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.array(0L, 0L)).optArg("index", "cb").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #224
                 /* ExpectedOriginal: [0, 1, 2] */
                 var expected_ = r.array(0L, 1L, 2L);
                 
                 /* Original: tbl.between(r.minval, [0, 1], index='bc', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.array(0L, 1L)).optArg("index", "bc").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #225
                 /* ExpectedOriginal: [0, 1] */
                 var expected_ = r.array(0L, 1L);
                 
                 /* Original: tbl.between(r.minval, [0, 1], index='cb', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.array(0L, 1L)).optArg("index", "cb").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #226
                 /* ExpectedOriginal: [0, 1, 2] */
                 var expected_ = r.array(0L, 1L, 2L);
                 
                 /* Original: tbl.between(r.minval, [1, 0], index='bc', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.array(1L, 0L)).optArg("index", "bc").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #227
                 /* ExpectedOriginal: [0, 1, 2] */
                 var expected_ = r.array(0L, 1L, 2L);
                 
                 /* Original: tbl.between(r.minval, [1, 0], index='cb', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.array(1L, 0L)).optArg("index", "cb").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #228
                 /* ExpectedOriginal: [0, 1, 2, 3] */
                 var expected_ = r.array(0L, 1L, 2L, 3L);
                 
                 /* Original: tbl.between(r.minval, [1, 1], index='bc', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.array(1L, 1L)).optArg("index", "bc").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #229
                 /* ExpectedOriginal: [0, 1, 2, 3] */
                 var expected_ = r.array(0L, 1L, 2L, 3L);
                 
                 /* Original: tbl.between(r.minval, [1, 1], index='cb', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.array(1L, 1L)).optArg("index", "cb").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #230
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(r.minval, r.maxval, index='bc', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.maxval()).optArg("index", "bc").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #231
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between(r.minval, r.maxval, index='cb', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.maxval()).optArg("index", "cb").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #232
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([0, 0], [0, 0], index='bc').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 0L), r.array(0L, 0L)).optArg("index", "bc").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #233
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([0, 0], [0, 0], index='cb').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 0L), r.array(0L, 0L)).optArg("index", "cb").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #234
                 /* ExpectedOriginal: [0, 1] */
                 var expected_ = r.array(0L, 1L);
                 
                 /* Original: tbl.between([0, 0], [0, 1], index='bc').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 0L), r.array(0L, 1L)).optArg("index", "bc").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #235
                 /* ExpectedOriginal: [0, 1] */
                 var expected_ = r.array(0L, 1L);
                 
                 /* Original: tbl.between([0, 0], [0, 1], index='cb').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 0L), r.array(0L, 1L)).optArg("index", "cb").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #236
                 /* ExpectedOriginal: [0, 1, 2] */
                 var expected_ = r.array(0L, 1L, 2L);
                 
                 /* Original: tbl.between([0, 0], [1, 0], index='bc').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 0L), r.array(1L, 0L)).optArg("index", "bc").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #237
                 /* ExpectedOriginal: [0, 1] */
                 var expected_ = r.array(0L, 1L);
                 
                 /* Original: tbl.between([0, 0], [1, 0], index='cb').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 0L), r.array(1L, 0L)).optArg("index", "cb").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #238
                 /* ExpectedOriginal: [0, 1, 2] */
                 var expected_ = r.array(0L, 1L, 2L);
                 
                 /* Original: tbl.between([0, 0], [1, 1], index='bc').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 0L), r.array(1L, 1L)).optArg("index", "bc").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #239
                 /* ExpectedOriginal: [0, 1, 2] */
                 var expected_ = r.array(0L, 1L, 2L);
                 
                 /* Original: tbl.between([0, 0], [1, 1], index='cb').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 0L), r.array(1L, 1L)).optArg("index", "cb").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #240
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between([0, 0], r.maxval, index='bc').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 0L), r.maxval()).optArg("index", "bc").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #241
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between([0, 0], r.maxval, index='cb').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 0L), r.maxval()).optArg("index", "cb").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #242
                 /* ExpectedOriginal: [0, 1] */
                 var expected_ = r.array(0L, 1L);
                 
                 /* Original: tbl.between([0, 0], [0, 0], index='bc', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 0L), r.array(0L, 0L)).optArg("index", "bc").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #243
                 /* ExpectedOriginal: [0, 1] */
                 var expected_ = r.array(0L, 1L);
                 
                 /* Original: tbl.between([0, 0], [0, 0], index='cb', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 0L), r.array(0L, 0L)).optArg("index", "cb").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #244
                 /* ExpectedOriginal: [0, 1, 2] */
                 var expected_ = r.array(0L, 1L, 2L);
                 
                 /* Original: tbl.between([0, 0], [0, 1], index='bc', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 0L), r.array(0L, 1L)).optArg("index", "bc").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #245
                 /* ExpectedOriginal: [0, 1] */
                 var expected_ = r.array(0L, 1L);
                 
                 /* Original: tbl.between([0, 0], [0, 1], index='cb', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 0L), r.array(0L, 1L)).optArg("index", "cb").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #246
                 /* ExpectedOriginal: [0, 1, 2] */
                 var expected_ = r.array(0L, 1L, 2L);
                 
                 /* Original: tbl.between([0, 0], [1, 0], index='bc', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 0L), r.array(1L, 0L)).optArg("index", "bc").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #247
                 /* ExpectedOriginal: [0, 1, 2] */
                 var expected_ = r.array(0L, 1L, 2L);
                 
                 /* Original: tbl.between([0, 0], [1, 0], index='cb', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 0L), r.array(1L, 0L)).optArg("index", "cb").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #248
                 /* ExpectedOriginal: [0, 1, 2, 3] */
                 var expected_ = r.array(0L, 1L, 2L, 3L);
                 
                 /* Original: tbl.between([0, 0], [1, 1], index='bc', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 0L), r.array(1L, 1L)).optArg("index", "bc").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #249
                 /* ExpectedOriginal: [0, 1, 2, 3] */
                 var expected_ = r.array(0L, 1L, 2L, 3L);
                 
                 /* Original: tbl.between([0, 0], [1, 1], index='cb', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 0L), r.array(1L, 1L)).optArg("index", "cb").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #250
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between([0, 0], r.maxval, index='bc', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 0L), r.maxval()).optArg("index", "bc").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #251
                 /* ExpectedOriginal: [0, 1, 2, 3, 4] */
                 var expected_ = r.array(0L, 1L, 2L, 3L, 4L);
                 
                 /* Original: tbl.between([0, 0], r.maxval, index='cb', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 0L), r.maxval()).optArg("index", "cb").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #252
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([0, 1], [0, 0], index='bc').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 1L), r.array(0L, 0L)).optArg("index", "bc").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #253
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([0, 1], [0, 0], index='cb').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 1L), r.array(0L, 0L)).optArg("index", "cb").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #254
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([0, 1], [0, 1], index='bc').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 1L), r.array(0L, 1L)).optArg("index", "bc").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #255
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([0, 1], [0, 1], index='cb').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 1L), r.array(0L, 1L)).optArg("index", "cb").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #256
                 /* ExpectedOriginal: [2] */
                 var expected_ = r.array(2L);
                 
                 /* Original: tbl.between([0, 1], [1, 0], index='bc').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 1L), r.array(1L, 0L)).optArg("index", "bc").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #257
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([0, 1], [1, 0], index='cb').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 1L), r.array(1L, 0L)).optArg("index", "cb").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #258
                 /* ExpectedOriginal: [2] */
                 var expected_ = r.array(2L);
                 
                 /* Original: tbl.between([0, 1], [1, 1], index='bc').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 1L), r.array(1L, 1L)).optArg("index", "bc").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #259
                 /* ExpectedOriginal: [2] */
                 var expected_ = r.array(2L);
                 
                 /* Original: tbl.between([0, 1], [1, 1], index='cb').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 1L), r.array(1L, 1L)).optArg("index", "cb").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #260
                 /* ExpectedOriginal: [2, 3, 4] */
                 var expected_ = r.array(2L, 3L, 4L);
                 
                 /* Original: tbl.between([0, 1], r.maxval, index='bc').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 1L), r.maxval()).optArg("index", "bc").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #261
                 /* ExpectedOriginal: [2, 3, 4] */
                 var expected_ = r.array(2L, 3L, 4L);
                 
                 /* Original: tbl.between([0, 1], r.maxval, index='cb').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 1L), r.maxval()).optArg("index", "cb").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #262
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([0, 1], [0, 0], index='bc', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 1L), r.array(0L, 0L)).optArg("index", "bc").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #263
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([0, 1], [0, 0], index='cb', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 1L), r.array(0L, 0L)).optArg("index", "cb").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #264
                 /* ExpectedOriginal: [2] */
                 var expected_ = r.array(2L);
                 
                 /* Original: tbl.between([0, 1], [0, 1], index='bc', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 1L), r.array(0L, 1L)).optArg("index", "bc").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #265
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([0, 1], [0, 1], index='cb', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 1L), r.array(0L, 1L)).optArg("index", "cb").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #266
                 /* ExpectedOriginal: [2] */
                 var expected_ = r.array(2L);
                 
                 /* Original: tbl.between([0, 1], [1, 0], index='bc', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 1L), r.array(1L, 0L)).optArg("index", "bc").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #267
                 /* ExpectedOriginal: [2] */
                 var expected_ = r.array(2L);
                 
                 /* Original: tbl.between([0, 1], [1, 0], index='cb', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 1L), r.array(1L, 0L)).optArg("index", "cb").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #268
                 /* ExpectedOriginal: [2, 3] */
                 var expected_ = r.array(2L, 3L);
                 
                 /* Original: tbl.between([0, 1], [1, 1], index='bc', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 1L), r.array(1L, 1L)).optArg("index", "bc").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #269
                 /* ExpectedOriginal: [2, 3] */
                 var expected_ = r.array(2L, 3L);
                 
                 /* Original: tbl.between([0, 1], [1, 1], index='cb', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 1L), r.array(1L, 1L)).optArg("index", "cb").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #270
                 /* ExpectedOriginal: [2, 3, 4] */
                 var expected_ = r.array(2L, 3L, 4L);
                 
                 /* Original: tbl.between([0, 1], r.maxval, index='bc', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 1L), r.maxval()).optArg("index", "bc").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #271
                 /* ExpectedOriginal: [2, 3, 4] */
                 var expected_ = r.array(2L, 3L, 4L);
                 
                 /* Original: tbl.between([0, 1], r.maxval, index='cb', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(0L, 1L), r.maxval()).optArg("index", "cb").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #272
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([1, 0], [0, 0], index='bc').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 0L), r.array(0L, 0L)).optArg("index", "bc").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #273
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([1, 0], [0, 0], index='cb').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 0L), r.array(0L, 0L)).optArg("index", "cb").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #274
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([1, 0], [0, 1], index='bc').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 0L), r.array(0L, 1L)).optArg("index", "bc").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #275
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([1, 0], [0, 1], index='cb').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 0L), r.array(0L, 1L)).optArg("index", "cb").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #276
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([1, 0], [1, 0], index='bc').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 0L), r.array(1L, 0L)).optArg("index", "bc").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #277
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([1, 0], [1, 0], index='cb').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 0L), r.array(1L, 0L)).optArg("index", "cb").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #278
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([1, 0], [1, 1], index='bc').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 0L), r.array(1L, 1L)).optArg("index", "bc").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #279
                 /* ExpectedOriginal: [2] */
                 var expected_ = r.array(2L);
                 
                 /* Original: tbl.between([1, 0], [1, 1], index='cb').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 0L), r.array(1L, 1L)).optArg("index", "cb").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #280
                 /* ExpectedOriginal: [3, 4] */
                 var expected_ = r.array(3L, 4L);
                 
                 /* Original: tbl.between([1, 0], r.maxval, index='bc').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 0L), r.maxval()).optArg("index", "bc").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #281
                 /* ExpectedOriginal: [2, 3, 4] */
                 var expected_ = r.array(2L, 3L, 4L);
                 
                 /* Original: tbl.between([1, 0], r.maxval, index='cb').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 0L), r.maxval()).optArg("index", "cb").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #282
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([1, 0], [0, 0], index='bc', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 0L), r.array(0L, 0L)).optArg("index", "bc").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #283
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([1, 0], [0, 0], index='cb', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 0L), r.array(0L, 0L)).optArg("index", "cb").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #284
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([1, 0], [0, 1], index='bc', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 0L), r.array(0L, 1L)).optArg("index", "bc").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #285
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([1, 0], [0, 1], index='cb', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 0L), r.array(0L, 1L)).optArg("index", "cb").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #286
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([1, 0], [1, 0], index='bc', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 0L), r.array(1L, 0L)).optArg("index", "bc").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #287
                 /* ExpectedOriginal: [2] */
                 var expected_ = r.array(2L);
                 
                 /* Original: tbl.between([1, 0], [1, 0], index='cb', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 0L), r.array(1L, 0L)).optArg("index", "cb").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #288
                 /* ExpectedOriginal: [3] */
                 var expected_ = r.array(3L);
                 
                 /* Original: tbl.between([1, 0], [1, 1], index='bc', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 0L), r.array(1L, 1L)).optArg("index", "bc").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #289
                 /* ExpectedOriginal: [2, 3] */
                 var expected_ = r.array(2L, 3L);
                 
                 /* Original: tbl.between([1, 0], [1, 1], index='cb', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 0L), r.array(1L, 1L)).optArg("index", "cb").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #290
                 /* ExpectedOriginal: [3, 4] */
                 var expected_ = r.array(3L, 4L);
                 
                 /* Original: tbl.between([1, 0], r.maxval, index='bc', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 0L), r.maxval()).optArg("index", "bc").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #291
                 /* ExpectedOriginal: [2, 3, 4] */
                 var expected_ = r.array(2L, 3L, 4L);
                 
                 /* Original: tbl.between([1, 0], r.maxval, index='cb', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 0L), r.maxval()).optArg("index", "cb").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #292
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([1, 1], [0, 0], index='bc').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 1L), r.array(0L, 0L)).optArg("index", "bc").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #293
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([1, 1], [0, 0], index='cb').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 1L), r.array(0L, 0L)).optArg("index", "cb").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #294
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([1, 1], [0, 1], index='bc').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 1L), r.array(0L, 1L)).optArg("index", "bc").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #295
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([1, 1], [0, 1], index='cb').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 1L), r.array(0L, 1L)).optArg("index", "cb").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #296
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([1, 1], [1, 0], index='bc').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 1L), r.array(1L, 0L)).optArg("index", "bc").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #297
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([1, 1], [1, 0], index='cb').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 1L), r.array(1L, 0L)).optArg("index", "cb").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #298
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([1, 1], [1, 1], index='bc').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 1L), r.array(1L, 1L)).optArg("index", "bc").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #299
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([1, 1], [1, 1], index='cb').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 1L), r.array(1L, 1L)).optArg("index", "cb").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #300
                 /* ExpectedOriginal: [3, 4] */
                 var expected_ = r.array(3L, 4L);
                 
                 /* Original: tbl.between([1, 1], r.maxval, index='bc').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 1L), r.maxval()).optArg("index", "bc").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #301
                 /* ExpectedOriginal: [3, 4] */
                 var expected_ = r.array(3L, 4L);
                 
                 /* Original: tbl.between([1, 1], r.maxval, index='cb').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 1L), r.maxval()).optArg("index", "cb").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #302
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([1, 1], [0, 0], index='bc', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 1L), r.array(0L, 0L)).optArg("index", "bc").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #303
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([1, 1], [0, 0], index='cb', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 1L), r.array(0L, 0L)).optArg("index", "cb").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #304
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([1, 1], [0, 1], index='bc', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 1L), r.array(0L, 1L)).optArg("index", "bc").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #305
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([1, 1], [0, 1], index='cb', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 1L), r.array(0L, 1L)).optArg("index", "cb").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #306
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([1, 1], [1, 0], index='bc', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 1L), r.array(1L, 0L)).optArg("index", "bc").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #307
                 /* ExpectedOriginal: [] */
                 var expected_ = r.array();
                 
                 /* Original: tbl.between([1, 1], [1, 0], index='cb', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 1L), r.array(1L, 0L)).optArg("index", "cb").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #308
                 /* ExpectedOriginal: [3] */
                 var expected_ = r.array(3L);
                 
                 /* Original: tbl.between([1, 1], [1, 1], index='bc', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 1L), r.array(1L, 1L)).optArg("index", "bc").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #309
                 /* ExpectedOriginal: [3] */
                 var expected_ = r.array(3L);
                 
                 /* Original: tbl.between([1, 1], [1, 1], index='cb', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 1L), r.array(1L, 1L)).optArg("index", "cb").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #310
                 /* ExpectedOriginal: [3, 4] */
                 var expected_ = r.array(3L, 4L);
                 
                 /* Original: tbl.between([1, 1], r.maxval, index='bc', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 1L), r.maxval()).optArg("index", "bc").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #311
                 /* ExpectedOriginal: [3, 4] */
                 var expected_ = r.array(3L, 4L);
                 
                 /* Original: tbl.between([1, 1], r.maxval, index='cb', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(r.array(1L, 1L), r.maxval()).optArg("index", "cb").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #312
                 /* ExpectedOriginal: ([0,0,0]) */
                 var expected_ = r.array(0L, 0L, 0L);
                 
                 /* Original: tbl.between(1, 3, index='mi', right_bound='closed').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(1L, 3L).optArg("index", "mi").optArg("right_bound", "closed").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #313
                 /* ExpectedOriginal: ([0,0,0,1,1,1,2,3,3,3,4,4,4]) */
                 var expected_ = r.array(0L, 0L, 0L, 1L, 1L, 1L, 2L, 3L, 3L, 3L, 4L, 4L, 4L);
                 
                 /* Original: tbl.between(1, 16, index='mi', right_bound='closed').order_by('id').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.between(1L, 16L).optArg("index", "mi").optArg("right_bound", "closed").orderBy("id").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/api.yaml, #314
                 /* ExpectedOriginal: ([0,0,0,1,1,1,2,3,3,3,4,4,4]) */
                 var expected_ = r.array(0L, 0L, 0L, 1L, 1L, 1L, 2L, 3L, 3L, 3L, 4L, 4L, 4L);
                 
                 /* Original: tbl.order_by(index='mi').map(lambda x:x['id']) */
                 var obtained = runOrCatch( tbl.orderBy().optArg("index", "mi").map(x => x.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             

        }
    }
}
