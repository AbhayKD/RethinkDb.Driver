




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class DatumObject : GeneratedTest {



        [Test]
        public void YamlTest(){

             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #1
                 //ExpectedOriginal: ({})
                 var expected = new MapObject();
                 
                 //Original: r.expr({})
                 var obtained = runOrCatch( r.expr(new MapObject()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #2
                 //ExpectedOriginal: {'a':1}
                 var expected = new MapObject().with("a", 1);
                 
                 //Original: r.expr({'a':1})
                 var obtained = runOrCatch( r.expr(new MapObject().with("a", 1)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #3
                 //ExpectedOriginal: {'a':1, 'b':'two', 'c':True}
                 var expected = new MapObject().with("a", 1).with("b", "two").with("c", true);
                 
                 //Original: r.expr({'a':1, 'b':'two', 'c':True})
                 var obtained = runOrCatch( r.expr(new MapObject().with("a", 1).with("b", "two").with("c", true)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #4
                 //ExpectedOriginal: ({'a':1})
                 var expected = new MapObject().with("a", 1);
                 
                 //Original: r.expr({'a':r.expr(1)})
                 var obtained = runOrCatch( r.expr(new MapObject().with("a", r.expr(1))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #5
                 //ExpectedOriginal: ({'a':{'b':[{'c':2}, 'a', 4]}})
                 var expected = new MapObject().with("a", new MapObject().with("b", Arrays.asList(new MapObject().with("c", 2), "a", 4)));
                 
                 //Original: r.expr({'a':{'b':[{'c':2}, 'a', 4]}})
                 var obtained = runOrCatch( r.expr(new MapObject().with("a", new MapObject().with("b", Arrays.asList(new MapObject().with("c", 2), "a", 4)))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #6
                 //ExpectedOriginal: OBJECT
                 var expected = "OBJECT";
                 
                 //Original: r.expr({'a':1}).type_of()
                 var obtained = runOrCatch( r.expr(new MapObject().with("a", 1)).typeOf() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #7
                 //ExpectedOriginal: ('{"a":1}')
                 var expected = "{\"a\":1}";
                 
                 //Original: r.expr({'a':1}).coerce_to('string')
                 var obtained = runOrCatch( r.expr(new MapObject().with("a", 1)).coerceTo("string") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #8
                 //ExpectedOriginal: ({'a':1})
                 var expected = new MapObject().with("a", 1);
                 
                 //Original: r.expr({'a':1}).coerce_to('object')
                 var obtained = runOrCatch( r.expr(new MapObject().with("a", 1)).coerceTo("object") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #9
                 //ExpectedOriginal: [['a', 1]]
                 var expected = Arrays.asList(Arrays.asList("a", 1));
                 
                 //Original: r.expr({'a':1}).coerce_to('array')
                 var obtained = runOrCatch( r.expr(new MapObject().with("a", 1)).coerceTo("array") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #10
                 //ExpectedOriginal: err_regex("ReqlDriverError", "Object keys must be strings.*")
                 var expected = err_regex("ReqlDriverError", "Object keys must be strings.*");
                 
                 //Original: r.expr({12:'a'})
                 var obtained = runOrCatch( r.expr(new MapObject().with(12, "a")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #11
                 //ExpectedOriginal: err_regex("ReqlDriverError", "Object keys must be strings.*")
                 var expected = err_regex("ReqlDriverError", "Object keys must be strings.*");
                 
                 //Original: r.expr({'a':{12:'b'}})
                 var obtained = runOrCatch( r.expr(new MapObject().with("a", new MapObject().with(12, "b"))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #14
                 //ExpectedOriginal: err("ReqlDriverError", "Second argument to `r.expr` must be a number.")
                 var expected = err("ReqlDriverError", "Second argument to `r.expr` must be a number.");
                 
                 //Original: r.expr({}, "foo")
                 var obtained = runOrCatch( r.expr(new MapObject(), "foo") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #16
                 //ExpectedOriginal: ({})
                 var expected = new MapObject();
                 
                 //Original: r.object()
                 var obtained = runOrCatch( r.object() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #17
                 //ExpectedOriginal: ({'a':1,'b':2})
                 var expected = new MapObject().with("a", 1).with("b", 2);
                 
                 //Original: r.object('a', 1, 'b', 2)
                 var obtained = runOrCatch( r.object("a", 1, "b", 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #18
                 //ExpectedOriginal: ({'cd':3})
                 var expected = new MapObject().with("cd", 3);
                 
                 //Original: r.object('c'+'d', 3)
                 var obtained = runOrCatch( r.object(r.add("c", "d"), 3) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #19
                 //ExpectedOriginal: err("ReqlQueryLogicError", "OBJECT expects an even number of arguments (but found 3).", [])
                 var expected = err("ReqlQueryLogicError", "OBJECT expects an even number of arguments (but found 3).", Arrays.asList());
                 
                 //Original: r.object('o','d','d')
                 var obtained = runOrCatch( r.object("o", "d", "d") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #20
                 //ExpectedOriginal: err("ReqlQueryLogicError","Expected type STRING but found NUMBER.",[])
                 var expected = err("ReqlQueryLogicError", "Expected type STRING but found NUMBER.", Arrays.asList());
                 
                 //Original: r.object(1, 1)
                 var obtained = runOrCatch( r.object(1, 1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #21
                 //ExpectedOriginal: err("ReqlQueryLogicError","Duplicate key `e` in object.  (got `4` and `5` as values)",[])
                 var expected = err("ReqlQueryLogicError", "Duplicate key `e` in object.  (got `4` and `5` as values)", Arrays.asList());
                 
                 //Original: r.object('e', 4, 'e', 5)
                 var obtained = runOrCatch( r.object("e", 4, "e", 5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #22
                 //ExpectedOriginal: err("ReqlQueryLogicError","Expected type DATUM but found DATABASE:",[])
                 var expected = err("ReqlQueryLogicError", "Expected type DATUM but found DATABASE:", Arrays.asList());
                 
                 //Original: r.object('g', r.db('test'))
                 var obtained = runOrCatch( r.object("g", r.db("test")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             

        }
    }
}
