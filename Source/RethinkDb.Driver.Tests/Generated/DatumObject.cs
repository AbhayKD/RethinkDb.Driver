




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;
using static RethinkDb.Driver.Tests.TestingCommon;

namespace RethinkDb.Driver.Test.Generated {

    // Tests conversion to and from the RQL object type

    [TestFixture]
    public class DatumObject : GeneratedTest {

        public DatumObject (){
        }




        [Test]
        public void YamlTest(){

             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #6
                 /* ExpectedOriginal: {} */
                 var expected_ = r.hashMap();
                 
                 /* Original: r.expr({}) */
                 var obtained = runOrCatch( r.expr(r.hashMap()) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #11
                 /* ExpectedOriginal: {'a':1} */
                 var expected_ = r.hashMap("a", 1L);
                 
                 /* Original: r.expr({'a':1}) */
                 var obtained = runOrCatch( r.expr(r.hashMap("a", 1L)) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #16
                 /* ExpectedOriginal: {'a':1, 'b':'two', 'c':True} */
                 var expected_ = r.hashMap("a", 1L).with("b", "two").with("c", true);
                 
                 /* Original: r.expr({'a':1, 'b':'two', 'c':True}) */
                 var obtained = runOrCatch( r.expr(r.hashMap("a", 1L).with("b", "two").with("c", true)) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #20
                 /* ExpectedOriginal: {'a':1} */
                 var expected_ = r.hashMap("a", 1L);
                 
                 /* Original: r.expr({'a':r.expr(1)}) */
                 var obtained = runOrCatch( r.expr(r.hashMap("a", r.expr(1L))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #23
                 /* ExpectedOriginal: {'a':{'b':[{'c':2}, 'a', 4]}} */
                 var expected_ = r.hashMap("a", r.hashMap("b", r.array(r.hashMap("c", 2L), "a", 4L)));
                 
                 /* Original: r.expr({'a':{'b':[{'c':2}, 'a', 4]}}) */
                 var obtained = runOrCatch( r.expr(r.hashMap("a", r.hashMap("b", r.array(r.hashMap("c", 2L), "a", 4L)))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #26
                 /* ExpectedOriginal: OBJECT */
                 var expected_ = "OBJECT";
                 
                 /* Original: r.expr({'a':1}).type_of() */
                 var obtained = runOrCatch( r.expr(r.hashMap("a", 1L)).typeOf() ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #30
                 /* ExpectedOriginal: {"a":1} */
                 var expected_ = "{\"a\":1}";
                 
                 /* Original: r.expr({'a':1}).coerce_to('string') */
                 var obtained = runOrCatch( r.expr(r.hashMap("a", 1L)).coerceTo("string") ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #34
                 /* ExpectedOriginal: {'a':1} */
                 var expected_ = r.hashMap("a", 1L);
                 
                 /* Original: r.expr({'a':1}).coerce_to('object') */
                 var obtained = runOrCatch( r.expr(r.hashMap("a", 1L)).coerceTo("object") ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #37
                 /* ExpectedOriginal: [['a',1]] */
                 var expected_ = r.array(r.array("a", 1L));
                 
                 /* Original: r.expr({'a':1}).coerce_to('array') */
                 var obtained = runOrCatch( r.expr(r.hashMap("a", 1L)).coerceTo("array") ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #66
                 /* ExpectedOriginal: {} */
                 var expected_ = r.hashMap();
                 
                 /* Original: r.object() */
                 var obtained = runOrCatch( r.object_() ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #69
                 /* ExpectedOriginal: {'a':1,'b':2} */
                 var expected_ = r.hashMap("a", 1L).with("b", 2L);
                 
                 /* Original: r.object('a', 1, 'b', 2) */
                 var obtained = runOrCatch( r.object_("a", 1L, "b", 2L) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #72
                 /* ExpectedOriginal: {'cd':3} */
                 var expected_ = r.hashMap("cd", 3L);
                 
                 /* Original: r.object('c'+'d', 3) */
                 var obtained = runOrCatch( r.object_(r.add("c", "d"), 3L) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #78
                 /* ExpectedOriginal: err("ReqlQueryLogicError","Expected type STRING but found NUMBER.",[]) */
                 var expected_ = err("ReqlQueryLogicError", "Expected type STRING but found NUMBER.", r.array());
                 
                 /* Original: r.object(1, 1) */
                 var obtained = runOrCatch( r.object_(1L, 1L) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #81
                 /* ExpectedOriginal: err("ReqlQueryLogicError","Duplicate key \"e\" in object.  (got 4 and 5 as values)",[]) */
                 var expected_ = err("ReqlQueryLogicError", "Duplicate key \"e\" in object.  (got 4 and 5 as values)", r.array());
                 
                 /* Original: r.object('e', 4, 'e', 5) */
                 var obtained = runOrCatch( r.object_("e", 4L, "e", 5L) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/object.yaml, #84
                 /* ExpectedOriginal: err("ReqlQueryLogicError","Expected type DATUM but found DATABASE:",[]) */
                 var expected_ = err("ReqlQueryLogicError", "Expected type DATUM but found DATABASE:", r.array());
                 
                 /* Original: r.object('g', r.db('test')) */
                 var obtained = runOrCatch( r.object_("g", r.db("test")) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             

        }
    }
}
