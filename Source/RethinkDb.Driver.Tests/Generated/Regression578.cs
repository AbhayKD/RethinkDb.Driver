




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class Regression578 : GeneratedTest {

        public Regression578 (){
                tableVars.Add( "tbl" );
        }


            public static Table tbl = r.db(DbName).table("tbl");


        [Test]
        public void YamlTest(){

             TestCounter++;
             
             {
                 //JavaQuery, regression/578.yaml, #1
                 /* ExpectedOriginal: ({'created':1}) */
                 var expected_ = r.hashMap("created", 1L);
                 
                 /* Original: tbl.index_create("578", lambda rec:1) */
                 var obtained = runOrCatch( tbl.indexCreate("578", rec => 1L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/578.yaml, #2
                 /* ExpectedOriginal: ([{'ready':True, 'index':'578'}]) */
                 var expected_ = r.array(r.hashMap("ready", true).with("index", "578"));
                 
                 /* Original: tbl.index_wait("578").pluck('index', 'ready') */
                 var obtained = runOrCatch( tbl.indexWait("578").pluck("index", "ready") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/578.yaml, #3
                 /* ExpectedOriginal: err_regex("ReqlOpFailedError", "Index `578` already exists on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]", []) */
                 var expected_ = err_regex("ReqlOpFailedError", "Index `578` already exists on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]", r.array());
                 
                 /* Original: tbl.index_create("578", lambda rec:1) */
                 var obtained = runOrCatch( tbl.indexCreate("578", rec => 1L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/578.yaml, #4
                 /* ExpectedOriginal: ({'dropped':1}) */
                 var expected_ = r.hashMap("dropped", 1L);
                 
                 /* Original: tbl.index_drop("578") */
                 var obtained = runOrCatch( tbl.indexDrop("578") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/578.yaml, #5
                 /* ExpectedOriginal: err_regex("ReqlOpFailedError", "Index `578` does not exist on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]", []) */
                 var expected_ = err_regex("ReqlOpFailedError", "Index `578` does not exist on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]", r.array());
                 
                 /* Original: tbl.index_drop("578") */
                 var obtained = runOrCatch( tbl.indexDrop("578") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             

        }
    }
}
