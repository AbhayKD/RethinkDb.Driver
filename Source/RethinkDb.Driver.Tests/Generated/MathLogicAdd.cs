




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class MathLogicAdd : GeneratedTest {



        [Test]
        public void YamlTest(){

             
             {
                 //JavaQuery, math_logic/add.yaml, #1
                 //ExpectedOriginal: 2
                 var expected = 2;
                 
                 //Original: (r.expr(1) + 1)
                 var obtained = runOrCatch( r.add(r.expr(1), 1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, math_logic/add.yaml, #1
                 //ExpectedOriginal: 2
                 var expected = 2;
                 
                 //Original: (1 + r.expr(1))
                 var obtained = runOrCatch( r.add(1, r.expr(1)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, math_logic/add.yaml, #1
                 //ExpectedOriginal: 2
                 var expected = 2;
                 
                 //Original: (r.expr(1).add(1))
                 var obtained = runOrCatch( r.expr(1).add(1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, math_logic/add.yaml, #2
                 //ExpectedOriginal: 0
                 var expected = 0;
                 
                 //Original: r.expr(-1) + 1
                 var obtained = runOrCatch( r.add(r.expr(-1), 1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, math_logic/add.yaml, #3
                 //ExpectedOriginal: 10.25
                 var expected = 10.25;
                 
                 //Original: r.expr(1.75) + 8.5
                 var obtained = runOrCatch( r.add(r.expr(1.75), 8.5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, math_logic/add.yaml, #4
                 //ExpectedOriginal: 
                 var expected = "";
                 
                 //Original: r.expr('') + ''
                 var obtained = runOrCatch( r.add(r.expr(""), "") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, math_logic/add.yaml, #5
                 //ExpectedOriginal: abcdef
                 var expected = "abcdef";
                 
                 //Original: r.expr('abc') + 'def'
                 var obtained = runOrCatch( r.add(r.expr("abc"), "def") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, math_logic/add.yaml, #6
                 //ExpectedOriginal: [1, 2, 3, 4, 5, 6, 7, 8]
                 var expected = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8);
                 
                 //Original: r.expr([1,2]) + [3] + [4,5] + [6,7,8]
                 var obtained = runOrCatch( r.add(r.add(r.add(r.expr(Arrays.asList(1, 2)), Arrays.asList(3)), Arrays.asList(4, 5)), Arrays.asList(6, 7, 8)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, math_logic/add.yaml, #9
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", [1])
                 var expected = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", Arrays.asList(1));
                 
                 //Original: r.expr(1) + 'a'
                 var obtained = runOrCatch( r.add(r.expr(1), "a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, math_logic/add.yaml, #10
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Expected type STRING but found NUMBER.", [1])
                 var expected = err("ReqlQueryLogicError", "Expected type STRING but found NUMBER.", Arrays.asList(1));
                 
                 //Original: r.expr('a') + 1
                 var obtained = runOrCatch( r.add(r.expr("a"), 1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, math_logic/add.yaml, #11
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Expected type ARRAY but found NUMBER.", [1])
                 var expected = err("ReqlQueryLogicError", "Expected type ARRAY but found NUMBER.", Arrays.asList(1));
                 
                 //Original: r.expr([]) + 1
                 var obtained = runOrCatch( r.add(r.expr(Arrays.asList()), 1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             

        }
    }
}
