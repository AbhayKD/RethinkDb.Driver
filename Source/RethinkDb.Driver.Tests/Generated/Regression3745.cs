




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class Regression3745 : GeneratedTest {

        public Regression3745 (){
                tableVars.Add( "tbl" );
        }


            public static Table tbl = r.db(DbName).table("tbl");


        [Test]
        public void YamlTest(){

             TestCounter++;
             
             {
                 //JavaQuery, regression/3745.yaml, #1
                 /* ExpectedOriginal: partial({'inserted':2}) */
                 var expected_ = partial(r.hashMap("inserted", 2L));
                 
                 /* Original: tbl.insert([ {'id':0, 'a':5}, {'id':1, 'a':6} ]) */
                 var obtained = runOrCatch( tbl.insert(r.array(r.hashMap("id", 0L).with("a", 5L), r.hashMap("id", 1L).with("a", 6L))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/3745.yaml, #2
                 /* ExpectedOriginal: ({'a':11}) */
                 var expected_ = r.hashMap("a", 11L);
                 
                 /* Original: tbl.reduce(lambda x,y:r.object('a', r.add(x['a'], y['a']))) */
                 var obtained = runOrCatch( tbl.reduce((x, y) => r.object_("a", r.add(x.g("a"), y.g("a")))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/3745.yaml, #3
                 /* ExpectedOriginal: err('ReqlQueryLogicError','Cannot convert NUMBER to SEQUENCE') */
                 var expected_ = err("ReqlQueryLogicError", "Cannot convert NUMBER to SEQUENCE");
                 
                 /* Original: tbl.reduce(lambda x,y:r.expr(0)[0]) */
                 var obtained = runOrCatch( tbl.reduce((x, y) => r.expr(0L).nth(0L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             

        }
    }
}
