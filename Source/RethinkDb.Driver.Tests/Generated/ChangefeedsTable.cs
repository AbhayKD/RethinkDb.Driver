




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class ChangefeedsTable : GeneratedTest {

            public static Table tbl = r.db(DbName).table("tbl");


        [Test]
        public void YamlTest(){

             
             //JavaDef, changefeeds/table.yaml, #Templates.YamlTest+DefTest.
             //Original: all = tbl.changes()
             
Changes all = (Changes) tbl.changes();             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #2
                 //ExpectedOriginal: partial({'errors':0, 'inserted':2})
                 var expected = partial(new MapObject().with("errors", 0).with("inserted", 2));
                 
                 //Original: tbl.insert([{'id':1}, {'id':2}])
                 var obtained = runOrCatch( tbl.insert(Arrays.asList(new MapObject().with("id", 1), new MapObject().with("id", 2))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #3
                 //ExpectedOriginal: bag([{'old_val':null, 'new_val':{'id':1}}, {'old_val':null, 'new_val':{'id':2}}])
                 var expected = bag(Arrays.asList(new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 1)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 2))));
                 
                 //Original: fetch(all, 2)
                 var obtained = runOrCatch( fetch(all, 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #4
                 //ExpectedOriginal: partial({'errors':0, 'replaced':1})
                 var expected = partial(new MapObject().with("errors", 0).with("replaced", 1));
                 
                 //Original: tbl.get(1).update({'version':1})
                 var obtained = runOrCatch( tbl.get(1).update(new MapObject().with("version", 1)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #5
                 //ExpectedOriginal: [{'old_val': {'id': 1}, 'new_val': {'id': 1, 'version': 1}}]
                 var expected = Arrays.asList(new MapObject().with("old_val", new MapObject().with("id", 1)).with("new_val", new MapObject().with("id", 1).with("version", 1)));
                 
                 //Original: fetch(all, 1)
                 var obtained = runOrCatch( fetch(all, 1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #6
                 //ExpectedOriginal: partial({'errors':0, 'deleted':1})
                 var expected = partial(new MapObject().with("errors", 0).with("deleted", 1));
                 
                 //Original: tbl.get(1).delete()
                 var obtained = runOrCatch( tbl.get(1).delete() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #7
                 //ExpectedOriginal: [{'old_val': {'id': 1, 'version': 1}, 'new_val': None}]
                 var expected = Arrays.asList(new MapObject().with("old_val", new MapObject().with("id", 1).with("version", 1)).with("new_val", null));
                 
                 //Original: fetch(all, 1)
                 var obtained = runOrCatch( fetch(all, 1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             //JavaDef, changefeeds/table.yaml, #Templates.YamlTest+DefTest.
             //Original: pluck = tbl.changes().pluck({'new_val':['version']})
             
Pluck pluck = (Pluck) tbl.changes().pluck(new MapObject().with("new_val", Arrays.asList("version")));             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #9
                 //ExpectedOriginal: partial({'errors':0, 'inserted':1})
                 var expected = partial(new MapObject().with("errors", 0).with("inserted", 1));
                 
                 //Original: tbl.insert([{'id':5, 'version':5}])
                 var obtained = runOrCatch( tbl.insert(Arrays.asList(new MapObject().with("id", 5).with("version", 5))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #10
                 //ExpectedOriginal: [{'new_val': {'version': 5}}]
                 var expected = Arrays.asList(new MapObject().with("new_val", new MapObject().with("version", 5)));
                 
                 //Original: fetch(pluck, 1)
                 var obtained = runOrCatch( fetch(pluck, 1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             //JavaDef, changefeeds/table.yaml, #Templates.YamlTest+DefTest.
             //Original: ordered = tbl.changes().order_by('id')
             
OrderBy ordered = (OrderBy) tbl.changes().orderBy("id");             
             
             //JavaDef, changefeeds/table.yaml, #Templates.YamlTest+DefTest.
             //Original: vtbl = r.db('rethinkdb').table('_debug_scratch')
             
Table vtbl = (Table) r.db("rethinkdb").table("_debug_scratch");             
             
             //JavaDef, changefeeds/table.yaml, #Templates.YamlTest+DefTest.
             //Original: allVirtual = vtbl.changes()
             
Changes allVirtual = (Changes) vtbl.changes();             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #14
                 //ExpectedOriginal: partial({'errors':0, 'inserted':2})
                 var expected = partial(new MapObject().with("errors", 0).with("inserted", 2));
                 
                 //Original: vtbl.insert([{'id':1}, {'id':2}])
                 var obtained = runOrCatch( vtbl.insert(Arrays.asList(new MapObject().with("id", 1), new MapObject().with("id", 2))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #15
                 //ExpectedOriginal: bag([{'old_val':null, 'new_val':{'id':1}}, {'old_val':null, 'new_val':{'id':2}}])
                 var expected = bag(Arrays.asList(new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 1)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 2))));
                 
                 //Original: fetch(allVirtual, 2)
                 var obtained = runOrCatch( fetch(allVirtual, 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #16
                 //ExpectedOriginal: partial({'errors':0, 'replaced':1})
                 var expected = partial(new MapObject().with("errors", 0).with("replaced", 1));
                 
                 //Original: vtbl.get(1).update({'version':1})
                 var obtained = runOrCatch( vtbl.get(1).update(new MapObject().with("version", 1)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #17
                 //ExpectedOriginal: [{'old_val': {'id': 1}, 'new_val': {'id': 1, 'version': 1}}]
                 var expected = Arrays.asList(new MapObject().with("old_val", new MapObject().with("id", 1)).with("new_val", new MapObject().with("id", 1).with("version", 1)));
                 
                 //Original: fetch(allVirtual, 1)
                 var obtained = runOrCatch( fetch(allVirtual, 1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #18
                 //ExpectedOriginal: partial({'errors':0, 'deleted':1})
                 var expected = partial(new MapObject().with("errors", 0).with("deleted", 1));
                 
                 //Original: vtbl.get(1).delete()
                 var obtained = runOrCatch( vtbl.get(1).delete() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #19
                 //ExpectedOriginal: [{'old_val': {'id': 1, 'version': 1}, 'new_val': None}]
                 var expected = Arrays.asList(new MapObject().with("old_val", new MapObject().with("id", 1).with("version", 1)).with("new_val", null));
                 
                 //Original: fetch(allVirtual, 1)
                 var obtained = runOrCatch( fetch(allVirtual, 1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             //JavaDef, changefeeds/table.yaml, #Templates.YamlTest+DefTest.
             //Original: vpluck = vtbl.changes().pluck({'new_val':['version']})
             
Pluck vpluck = (Pluck) vtbl.changes().pluck(new MapObject().with("new_val", Arrays.asList("version")));             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #21
                 //ExpectedOriginal: partial({'errors':0, 'inserted':1})
                 var expected = partial(new MapObject().with("errors", 0).with("inserted", 1));
                 
                 //Original: vtbl.insert([{'id':5, 'version':5}])
                 var obtained = runOrCatch( vtbl.insert(Arrays.asList(new MapObject().with("id", 5).with("version", 5))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #22
                 //ExpectedOriginal: [{'new_val': {'version': 5}}]
                 var expected = Arrays.asList(new MapObject().with("new_val", new MapObject().with("version", 5)));
                 
                 //Original: fetch(vpluck, 1)
                 var obtained = runOrCatch( fetch(vpluck, 1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             

        }
    }
}
