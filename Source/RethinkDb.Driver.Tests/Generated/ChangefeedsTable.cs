




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;
using static RethinkDb.Driver.Tests.TestingCommon;

namespace RethinkDb.Driver.Test.Generated {

    // Test changefeeds on a table

    [TestFixture]
    public class ChangefeedsTable : GeneratedTest {

        public ChangefeedsTable (){
                tableVars.Add( "tbl" );
        }


            public static Table tbl = r.db(DbName).table("tbl");


        [Test]
        public void YamlTest(){

             
             //JavaDef, changefeeds/table.yaml, #9
             //Original: all = tbl.changes()
             
                 var all = maybeRun( (Changes) (tbl.changes()) , conn);
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #15
                 /* ExpectedOriginal: partial({'errors':0, 'inserted':2}) */
                 var expected_ = partial(r.hashMap("errors", 0L).with("inserted", 2L));
                 
                 /* Original: tbl.insert([{'id':1}, {'id':2}]) */
                 var obtained = runOrCatch( tbl.insert(r.array(r.hashMap("id", 1L), r.hashMap("id", 2L))) ,
                                            new OptArgs()
                    , conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #17
                 /* ExpectedOriginal: bag([{'old_val':null, 'new_val':{'id':1}}, {'old_val':null, 'new_val':{'id':2}}]) */
                 var expected_ = bag(r.array(r.hashMap("old_val", null).with("new_val", r.hashMap("id", 1L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 2L))));
                 
                 /* Original: fetch(all, 2) */
                 var obtained = runOrCatch( fetch(all, 2L) ,
                                            new OptArgs()
                    , conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #22
                 /* ExpectedOriginal: partial({'errors':0, 'replaced':1}) */
                 var expected_ = partial(r.hashMap("errors", 0L).with("replaced", 1L));
                 
                 /* Original: tbl.get(1).update({'version':1}) */
                 var obtained = runOrCatch( tbl.get(1L).update(r.hashMap("version", 1L)) ,
                                            new OptArgs()
                    , conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #24
                 /* ExpectedOriginal: [{'old_val':{'id':1}, 'new_val':{'id':1, 'version':1}}] */
                 var expected_ = r.array(r.hashMap("old_val", r.hashMap("id", 1L)).with("new_val", r.hashMap("id", 1L).with("version", 1L)));
                 
                 /* Original: fetch(all, 1) */
                 var obtained = runOrCatch( fetch(all, 1L) ,
                                            new OptArgs()
                    , conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #29
                 /* ExpectedOriginal: partial({'errors':0, 'deleted':1}) */
                 var expected_ = partial(r.hashMap("errors", 0L).with("deleted", 1L));
                 
                 /* Original: tbl.get(1).delete() */
                 var obtained = runOrCatch( tbl.get(1L).delete() ,
                                            new OptArgs()
                    , conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #31
                 /* ExpectedOriginal: [{'old_val':{'id':1, 'version':1}, 'new_val':null}] */
                 var expected_ = r.array(r.hashMap("old_val", r.hashMap("id", 1L).with("version", 1L)).with("new_val", null));
                 
                 /* Original: fetch(all, 1) */
                 var obtained = runOrCatch( fetch(all, 1L) ,
                                            new OptArgs()
                    , conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             
             //JavaDef, changefeeds/table.yaml, #36
             //Original: pluck = tbl.changes().pluck({'new_val':['version']})
             
                 var pluck = maybeRun( (Pluck) (tbl.changes().pluck(r.hashMap("new_val", r.array("version")))) , conn);
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #37
                 /* ExpectedOriginal: partial({'errors':0, 'inserted':1}) */
                 var expected_ = partial(r.hashMap("errors", 0L).with("inserted", 1L));
                 
                 /* Original: tbl.insert([{'id':5, 'version':5}]) */
                 var obtained = runOrCatch( tbl.insert(r.array(r.hashMap("id", 5L).with("version", 5L))) ,
                                            new OptArgs()
                    , conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #39
                 /* ExpectedOriginal: [{'new_val':{'version':5}}] */
                 var expected_ = r.array(r.hashMap("new_val", r.hashMap("version", 5L)));
                 
                 /* Original: fetch(pluck, 1) */
                 var obtained = runOrCatch( fetch(pluck, 1L) ,
                                            new OptArgs()
                    , conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #44
                 /* ExpectedOriginal: err('ReqlQueryLogicError', "Cannot call a terminal (`reduce`, `count`, etc.) on an infinite stream (such as a changefeed).") */
                 var expected_ = err("ReqlQueryLogicError", "Cannot call a terminal (`reduce`, `count`, etc.) on an infinite stream (such as a changefeed).");
                 
                 /* Original: tbl.changes().order_by('id') */
                 var obtained = runOrCatch( tbl.changes().orderBy("id") ,
                                            new OptArgs()
                    , conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             
             //JavaDef, changefeeds/table.yaml, #71
             //Original: vtbl = r.db('rethinkdb').table('_debug_scratch')
             
                 var vtbl = (Table) (r.db("rethinkdb").table("_debug_scratch"));
             
             
             //JavaDef, changefeeds/table.yaml, #72
             //Original: allVirtual = vtbl.changes()
             
                 var allVirtual = maybeRun( (Changes) (vtbl.changes()) , conn);
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #76
                 /* ExpectedOriginal: partial({'errors':0, 'inserted':2}) */
                 var expected_ = partial(r.hashMap("errors", 0L).with("inserted", 2L));
                 
                 /* Original: vtbl.insert([{'id':1}, {'id':2}]) */
                 var obtained = runOrCatch( vtbl.insert(r.array(r.hashMap("id", 1L), r.hashMap("id", 2L))) ,
                                            new OptArgs()
                    , conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #78
                 /* ExpectedOriginal: bag([{'old_val':null, 'new_val':{'id':1}}, {'old_val':null, 'new_val':{'id':2}}]) */
                 var expected_ = bag(r.array(r.hashMap("old_val", null).with("new_val", r.hashMap("id", 1L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 2L))));
                 
                 /* Original: fetch(allVirtual, 2) */
                 var obtained = runOrCatch( fetch(allVirtual, 2L) ,
                                            new OptArgs()
                    , conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #83
                 /* ExpectedOriginal: partial({'errors':0, 'replaced':1}) */
                 var expected_ = partial(r.hashMap("errors", 0L).with("replaced", 1L));
                 
                 /* Original: vtbl.get(1).update({'version':1}) */
                 var obtained = runOrCatch( vtbl.get(1L).update(r.hashMap("version", 1L)) ,
                                            new OptArgs()
                    , conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #85
                 /* ExpectedOriginal: [{'old_val':{'id':1}, 'new_val':{'id':1, 'version':1}}] */
                 var expected_ = r.array(r.hashMap("old_val", r.hashMap("id", 1L)).with("new_val", r.hashMap("id", 1L).with("version", 1L)));
                 
                 /* Original: fetch(allVirtual, 1) */
                 var obtained = runOrCatch( fetch(allVirtual, 1L) ,
                                            new OptArgs()
                    , conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #90
                 /* ExpectedOriginal: partial({'errors':0, 'deleted':1}) */
                 var expected_ = partial(r.hashMap("errors", 0L).with("deleted", 1L));
                 
                 /* Original: vtbl.get(1).delete() */
                 var obtained = runOrCatch( vtbl.get(1L).delete() ,
                                            new OptArgs()
                    , conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #92
                 /* ExpectedOriginal: [{'old_val':{'id':1, 'version':1}, 'new_val':null}] */
                 var expected_ = r.array(r.hashMap("old_val", r.hashMap("id", 1L).with("version", 1L)).with("new_val", null));
                 
                 /* Original: fetch(allVirtual, 1) */
                 var obtained = runOrCatch( fetch(allVirtual, 1L) ,
                                            new OptArgs()
                    , conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             
             //JavaDef, changefeeds/table.yaml, #97
             //Original: vpluck = vtbl.changes().pluck({'new_val':['version']})
             
                 var vpluck = maybeRun( (Pluck) (vtbl.changes().pluck(r.hashMap("new_val", r.array("version")))) , conn);
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #98
                 /* ExpectedOriginal: partial({'errors':0, 'inserted':1}) */
                 var expected_ = partial(r.hashMap("errors", 0L).with("inserted", 1L));
                 
                 /* Original: vtbl.insert([{'id':5, 'version':5}]) */
                 var obtained = runOrCatch( vtbl.insert(r.array(r.hashMap("id", 5L).with("version", 5L))) ,
                                            new OptArgs()
                    , conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/table.yaml, #100
                 /* ExpectedOriginal: [{'new_val':{'version':5}}] */
                 var expected_ = r.array(r.hashMap("new_val", r.hashMap("version", 5L)));
                 
                 /* Original: fetch(vpluck, 1) */
                 var obtained = runOrCatch( fetch(vpluck, 1L) ,
                                            new OptArgs()
                    , conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             

        }
    }
}
