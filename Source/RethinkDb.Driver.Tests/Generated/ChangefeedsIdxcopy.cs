




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class ChangefeedsIdxcopy : GeneratedTest {

            public static Table tbl = r.db(DbName).table("tbl");


        [Test]
        public void YamlTest(){

             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/idxcopy.yaml, #1
                 /* ExpectedOriginal: partial({'created':1}) */
                 var expected = partial(r.hashMap("created", 1));
                 
                 /* Original: tbl.index_create('a') */
                 var obtained = runOrCatch( tbl.indexCreate("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/idxcopy.yaml, #2
                 /* ExpectedOriginal: None */
                 var expected = null as object;
                 
                 /* Original: tbl.index_wait('a') */
                 var obtained = runOrCatch( tbl.indexWait("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             //JavaDef, changefeeds/idxcopy.yaml, #Templates.YamlTest+DefTest.
             //Original: feed = tbl.order_by(index='a').limit(10).changes(squash=2).limit(9)
             
Limit feed = (Limit) (tbl.orderBy().optArg("index", "a").limit(10).changes().optArg("squash", 2).limit(9));             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/idxcopy.yaml, #5
                 /* ExpectedOriginal: partial({'deleted':3, 'errors':0}) */
                 var expected = partial(r.hashMap("deleted", 3).with("errors", 0));
                 
                 /* Original: tbl.get_all(0, 1, 8, index='id').delete() */
                 var obtained = runOrCatch( tbl.getAll(0, 1, 8).optArg("index", "id").delete() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/idxcopy.yaml, #6
                 /* ExpectedOriginal: None */
                 var expected = null as object;
                 
                 /* Original: wait(2) */
                 var obtained = runOrCatch( wait_(2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, changefeeds/idxcopy.yaml, #7
                 /* ExpectedOriginal: bag([ {"new_val":{"a":5, "id":2}, "old_val":nil}, {"new_val":{"a":5, "id":3}, "old_val":nil}, {"new_val":{"a":5, "id":4}, "old_val":nil}, {"new_val":{"a":5, "id":5}, "old_val":nil}, {"new_val":{"a":5, "id":6}, "old_val":nil}, {"new_val":{"a":5, "id":7}, "old_val":nil}, {"new_val":{"a":5, "id":9}, "old_val":nil}, {"new_val":{"a":5, "id":10}, "old_val":nil}, {"new_val":{"a":5, "id":11}, "old_val":nil}]) */
                 var expected = bag(r.array(r.hashMap("new_val", r.hashMap("a", 5).with("id", 2)).with("old_val", null), r.hashMap("new_val", r.hashMap("a", 5).with("id", 3)).with("old_val", null), r.hashMap("new_val", r.hashMap("a", 5).with("id", 4)).with("old_val", null), r.hashMap("new_val", r.hashMap("a", 5).with("id", 5)).with("old_val", null), r.hashMap("new_val", r.hashMap("a", 5).with("id", 6)).with("old_val", null), r.hashMap("new_val", r.hashMap("a", 5).with("id", 7)).with("old_val", null), r.hashMap("new_val", r.hashMap("a", 5).with("id", 9)).with("old_val", null), r.hashMap("new_val", r.hashMap("a", 5).with("id", 10)).with("old_val", null), r.hashMap("new_val", r.hashMap("a", 5).with("id", 11)).with("old_val", null)));
                 
                 /* Original: feed */
                 var obtained = runOrCatch( feed ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             

        }
    }
}
