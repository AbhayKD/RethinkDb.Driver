




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class Regression2930 : GeneratedTest {

            public static Table tbl = r.db(DbName).table("tbl");


        [Test]
        public void YamlTest(){

             TestCounter++;
             
             {
                 //JavaQuery, regression/2930.yaml, #1
                 /* ExpectedOriginal: ({'inserted':999}) */
                 var expected_ = r.hashMap("inserted", 999);
                 
                 /* Original: tbl.insert([{'id':i,'mod':i%5,'foo':5} for i in range(1,1000)]).pluck('first_error', 'inserted') */
                 var obtained = runOrCatch( tbl.insert(Enumerable.Range(1, 1000).Select(i => r.hashMap("id", i).with("mod", r.mod(i, 5)).with("foo", 5)).ToList()).pluck("first_error", "inserted") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/2930.yaml, #2
                 /* ExpectedOriginal: err("ReqlResourceLimitError", "Array over size limit `500`.", [0]) */
                 var expected_ = err("ReqlResourceLimitError", "Array over size limit `500`.", r.array(0));
                 
                 /* Original: tbl.coerce_to('array') */
                 var obtained = runOrCatch( tbl.coerceTo("array") ,
                                            new OptArgs()
                     .with("array_limit", 500)
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/2930.yaml, #3
                 /* ExpectedOriginal: err("ReqlResourceLimitError", "Grouped data over size limit `500`.  Try putting a reduction (like `.reduce` or `.count`) on the end.", [0]) */
                 var expected_ = err("ReqlResourceLimitError", "Grouped data over size limit `500`.  Try putting a reduction (like `.reduce` or `.count`) on the end.", r.array(0));
                 
                 /* Original: tbl.group('mod').coerce_to('array') */
                 var obtained = runOrCatch( tbl.group("mod").coerceTo("array") ,
                                            new OptArgs()
                     .with("array_limit", 500)
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/2930.yaml, #4
                 /* ExpectedOriginal: err("ReqlResourceLimitError", "Grouped data over size limit `500`.  Try putting a reduction (like `.reduce` or `.count`) on the end.", [0]) */
                 var expected_ = err("ReqlResourceLimitError", "Grouped data over size limit `500`.  Try putting a reduction (like `.reduce` or `.count`) on the end.", r.array(0));
                 
                 /* Original: tbl.group('foo').coerce_to('array') */
                 var obtained = runOrCatch( tbl.group("foo").coerceTo("array") ,
                                            new OptArgs()
                     .with("array_limit", 500)
                    );
                 assertEquals(expected_, obtained);
             }
             

        }
    }
}
