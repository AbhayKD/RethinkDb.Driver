




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class MathLogicLogic : GeneratedTest {



        [Test]
        public void YamlTest(){

             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #1
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.expr(true) & true
                 var obtained = runOrCatch( r.and(r.expr(true), true) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #1
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: true & r.expr(true)
                 var obtained = runOrCatch( r.and(true, r.expr(true)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #1
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.and_(true,true)
                 var obtained = runOrCatch( r.and(true, true) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #1
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.expr(true).and_(true)
                 var obtained = runOrCatch( r.expr(true).and(true) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #2
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.expr(true) & false
                 var obtained = runOrCatch( r.and(r.expr(true), false) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #2
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.expr(false) & false
                 var obtained = runOrCatch( r.and(r.expr(false), false) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #2
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: true & r.expr(false)
                 var obtained = runOrCatch( r.and(true, r.expr(false)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #2
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: false & r.expr(false)
                 var obtained = runOrCatch( r.and(false, r.expr(false)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #2
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.and_(true,false)
                 var obtained = runOrCatch( r.and(true, false) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #2
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.and_(false,false)
                 var obtained = runOrCatch( r.and(false, false) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #2
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.expr(true).and_(false)
                 var obtained = runOrCatch( r.expr(true).and(false) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #2
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.expr(false).and_(false)
                 var obtained = runOrCatch( r.expr(false).and(false) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #3
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.expr(true) | true
                 var obtained = runOrCatch( r.or(r.expr(true), true) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #3
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.expr(true) | false
                 var obtained = runOrCatch( r.or(r.expr(true), false) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #3
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: true | r.expr(true)
                 var obtained = runOrCatch( r.or(true, r.expr(true)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #3
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: true | r.expr(false)
                 var obtained = runOrCatch( r.or(true, r.expr(false)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #3
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.or_(true,true)
                 var obtained = runOrCatch( r.or(true, true) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #3
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.or_(true,false)
                 var obtained = runOrCatch( r.or(true, false) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #3
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.expr(true).or_(true)
                 var obtained = runOrCatch( r.expr(true).or(true) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #3
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.expr(true).or_(false)
                 var obtained = runOrCatch( r.expr(true).or(false) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #4
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.expr(false) | false
                 var obtained = runOrCatch( r.or(r.expr(false), false) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #4
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: false | r.expr(false)
                 var obtained = runOrCatch( r.or(false, r.expr(false)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #4
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.and_(false,false)
                 var obtained = runOrCatch( r.and(false, false) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #4
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.expr(false).and_(false)
                 var obtained = runOrCatch( r.expr(false).and(false) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #5
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: ~r.expr(True)
                 var obtained = runOrCatch( r.expr(true).not() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #5
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.not_(True)
                 var obtained = runOrCatch( r.not(true) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #6
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: ~r.expr(False)
                 var obtained = runOrCatch( r.expr(false).not() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #6
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.not_(False)
                 var obtained = runOrCatch( r.not(false) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #7
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.expr(True).not_()
                 var obtained = runOrCatch( r.expr(true).not() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #8
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.expr(False).not_()
                 var obtained = runOrCatch( r.expr(false).not() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #9
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: ~r.and_(True, True) == r.or_(~r.expr(True), ~r.expr(True))
                 var obtained = runOrCatch( r.eq(r.and(true, true).not(), r.or(r.expr(true).not(), r.expr(true).not())) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #9
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: ~r.and_(True, False) == r.or_(~r.expr(True), ~r.expr(False))
                 var obtained = runOrCatch( r.eq(r.and(true, false).not(), r.or(r.expr(true).not(), r.expr(false).not())) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #9
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: ~r.and_(False, False) == r.or_(~r.expr(False), ~r.expr(False))
                 var obtained = runOrCatch( r.eq(r.and(false, false).not(), r.or(r.expr(false).not(), r.expr(false).not())) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #9
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: ~r.and_(False, True) == r.or_(~r.expr(False), ~r.expr(True))
                 var obtained = runOrCatch( r.eq(r.and(false, true).not(), r.or(r.expr(false).not(), r.expr(true).not())) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #10
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.and_(True, True, True, True, True)
                 var obtained = runOrCatch( r.and(true, true, true, true, true) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #11
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.and_(True, True, True, False, True)
                 var obtained = runOrCatch( r.and(true, true, true, false, true) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #12
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.and_(True, False, True, False, True)
                 var obtained = runOrCatch( r.and(true, false, true, false, true) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #13
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.or_(False, False, False, False, False)
                 var obtained = runOrCatch( r.or(false, false, false, false, false) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #14
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.or_(False, False, False, True, False)
                 var obtained = runOrCatch( r.or(false, false, false, true, false) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #15
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.or_(False, True, False, True, False)
                 var obtained = runOrCatch( r.or(false, true, false, true, false) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #16
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\"a\"`.", [])
                 var expected = err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\"a\"`.", r.array());
                 
                 //Original: r.expr(r.expr('a')['b']).default(2)
                 var obtained = runOrCatch( r.expr(r.expr("a").bracket("b")).default_(2.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #18
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.expr(r.and_(True, False) == r.or_(False, True))
                 var obtained = runOrCatch( r.expr(r.eq(r.and(true, false), r.or(false, true))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #20
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.expr(r.and_(True, False) >= r.or_(False, True))
                 var obtained = runOrCatch( r.expr(r.ge(r.and(true, false), r.or(false, true))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #21
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.expr(1) & True
                 var obtained = runOrCatch( r.and(r.expr(1.0), true) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #22
                 //ExpectedOriginal: ("str")
                 var expected = "str";
                 
                 //Original: r.expr(False) | 'str'
                 var obtained = runOrCatch( r.or(r.expr(false), "str") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #23
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: ~r.expr(1)
                 var obtained = runOrCatch( r.expr(1.0).not() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/logic.yaml, #24
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: ~r.expr(null)
                 var obtained = runOrCatch( r.expr(null).not() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             

        }
    }
}
