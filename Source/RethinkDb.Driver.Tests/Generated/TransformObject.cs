




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class TransformObject : GeneratedTest {



        [Test]
        public void YamlTest(){

             
             //JavaDef, transform/object.yaml, #Templates.YamlTest+DefTest.
             //Original: obj = r.expr({'a':1, 'b':2,'c':"str",'d':null,'e':{'f':'buzz'}})
             
MakeObj obj = (MakeObj) (r.expr(r.hashMap("a", 1).with("b", 2).with("c", "str").with("d", null).with("e", r.hashMap("f", "buzz"))));             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #2
                 /* ExpectedOriginal: 1 */
                 var expected_ = 1;
                 
                 /* Original: obj['a'] */
                 var obtained = runOrCatch( obj.g("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #3
                 /* ExpectedOriginal: str */
                 var expected_ = "str";
                 
                 /* Original: obj['c'] */
                 var obtained = runOrCatch( obj.g("c") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #4
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: obj.has_fields('b') */
                 var obtained = runOrCatch( obj.hasFields("b") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #5
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: obj.keys().contains('d') */
                 var obtained = runOrCatch( obj.keys().contains("d") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #6
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: obj.has_fields('d') */
                 var obtained = runOrCatch( obj.hasFields("d") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #7
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: obj.has_fields({'e':'f'}) */
                 var obtained = runOrCatch( obj.hasFields(r.hashMap("e", "f")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #8
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: obj.has_fields({'e':'g'}) */
                 var obtained = runOrCatch( obj.hasFields(r.hashMap("e", "g")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #9
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: obj.has_fields('f') */
                 var obtained = runOrCatch( obj.hasFields("f") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #10
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: obj.has_fields('a', 'b') */
                 var obtained = runOrCatch( obj.hasFields("a", "b") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #11
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: obj.has_fields('a', 'd') */
                 var obtained = runOrCatch( obj.hasFields("a", "d") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #12
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: obj.has_fields('a', 'f') */
                 var obtained = runOrCatch( obj.hasFields("a", "f") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #13
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: obj.has_fields('a', {'e':'f'}) */
                 var obtained = runOrCatch( obj.hasFields("a", r.hashMap("e", "f")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #14
                 /* ExpectedOriginal: 2 */
                 var expected_ = 2;
                 
                 /* Original: r.expr([obj, obj.pluck('a', 'b')]).has_fields('a', 'b').count() */
                 var obtained = runOrCatch( r.expr(r.array(obj, obj.pluck("a", "b"))).hasFields("a", "b").count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #15
                 /* ExpectedOriginal: 1 */
                 var expected_ = 1;
                 
                 /* Original: r.expr([obj, obj.pluck('a', 'b')]).has_fields('a', 'c').count() */
                 var obtained = runOrCatch( r.expr(r.array(obj, obj.pluck("a", "b"))).hasFields("a", "c").count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #16
                 /* ExpectedOriginal: 2 */
                 var expected_ = 2;
                 
                 /* Original: r.expr([obj, obj.pluck('a', 'e')]).has_fields('a', {'e':'f'}).count() */
                 var obtained = runOrCatch( r.expr(r.array(obj, obj.pluck("a", "e"))).hasFields("a", r.hashMap("e", "f")).count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #17
                 /* ExpectedOriginal: ({'a':1}) */
                 var expected_ = r.hashMap("a", 1);
                 
                 /* Original: obj.pluck('a') */
                 var obtained = runOrCatch( obj.pluck("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #18
                 /* ExpectedOriginal: ({'a':1, 'b':2}) */
                 var expected_ = r.hashMap("a", 1).with("b", 2);
                 
                 /* Original: obj.pluck('a', 'b') */
                 var obtained = runOrCatch( obj.pluck("a", "b") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #19
                 /* ExpectedOriginal: ({'b':2, 'c':'str', 'd':null, 'e':{'f':'buzz'}}) */
                 var expected_ = r.hashMap("b", 2).with("c", "str").with("d", null).with("e", r.hashMap("f", "buzz"));
                 
                 /* Original: obj.without('a') */
                 var obtained = runOrCatch( obj.without("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #20
                 /* ExpectedOriginal: ({'c':'str', 'd':null,'e':{'f':'buzz'}}) */
                 var expected_ = r.hashMap("c", "str").with("d", null).with("e", r.hashMap("f", "buzz"));
                 
                 /* Original: obj.without('a', 'b') */
                 var obtained = runOrCatch( obj.without("a", "b") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #21
                 /* ExpectedOriginal: ({'e':{'f':'buzz'}}) */
                 var expected_ = r.hashMap("e", r.hashMap("f", "buzz"));
                 
                 /* Original: obj.without('a', 'b', 'c', 'd') */
                 var obtained = runOrCatch( obj.without("a", "b", "c", "d") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #22
                 /* ExpectedOriginal: ({'a':1, 'b':2, 'c':'str', 'd':null, 'e':{}}) */
                 var expected_ = r.hashMap("a", 1).with("b", 2).with("c", "str").with("d", null).with("e", r.hashMap());
                 
                 /* Original: obj.without({'e':'f'}) */
                 var obtained = runOrCatch( obj.without(r.hashMap("e", "f")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #23
                 /* ExpectedOriginal: ({'a':1, 'b':2, 'c':'str', 'd':null, 'e':{'f':'buzz'}}) */
                 var expected_ = r.hashMap("a", 1).with("b", 2).with("c", "str").with("d", null).with("e", r.hashMap("f", "buzz"));
                 
                 /* Original: obj.without({'e':'buzz'}) */
                 var obtained = runOrCatch( obj.without(r.hashMap("e", "buzz")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #24
                 /* ExpectedOriginal: 1 */
                 var expected_ = 1;
                 
                 /* Original: obj.merge(1) */
                 var obtained = runOrCatch( obj.merge(1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #25
                 /* ExpectedOriginal: ({'a':1, 'b':2, 'c':'str', 'd':null, 'e':-2}) */
                 var expected_ = r.hashMap("a", 1).with("b", 2).with("c", "str").with("d", null).with("e", -2);
                 
                 /* Original: obj.merge({'e':-2}) */
                 var obtained = runOrCatch( obj.merge(r.hashMap("e", -2)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #26
                 /* ExpectedOriginal: ({'a':1, 'b':2, 'c':'str', 'd':null}) */
                 var expected_ = r.hashMap("a", 1).with("b", 2).with("c", "str").with("d", null);
                 
                 /* Original: obj.merge({'e':r.literal()}) */
                 var obtained = runOrCatch( obj.merge(r.hashMap("e", r.literal())) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #27
                 /* ExpectedOriginal: ({'a':1, 'b':2, 'c':'str', 'd':null, 'e':{'f':'quux'}}) */
                 var expected_ = r.hashMap("a", 1).with("b", 2).with("c", "str").with("d", null).with("e", r.hashMap("f", "quux"));
                 
                 /* Original: obj.merge({'e':{'f':'quux'}}) */
                 var obtained = runOrCatch( obj.merge(r.hashMap("e", r.hashMap("f", "quux"))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #28
                 /* ExpectedOriginal: ({'a':1, 'b':2, 'c':'str', 'd':null, 'e':{'f':'buzz', 'g':'quux'}}) */
                 var expected_ = r.hashMap("a", 1).with("b", 2).with("c", "str").with("d", null).with("e", r.hashMap("f", "buzz").with("g", "quux"));
                 
                 /* Original: obj.merge({'e':{'g':'quux'}}) */
                 var obtained = runOrCatch( obj.merge(r.hashMap("e", r.hashMap("g", "quux"))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #29
                 /* ExpectedOriginal: ({'a':1, 'b':2, 'c':'str', 'd':null, 'e':{'g':'quux'}}) */
                 var expected_ = r.hashMap("a", 1).with("b", 2).with("c", "str").with("d", null).with("e", r.hashMap("g", "quux"));
                 
                 /* Original: obj.merge({'e':r.literal({'g':'quux'})}) */
                 var obtained = runOrCatch( obj.merge(r.hashMap("e", r.literal(r.hashMap("g", "quux")))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #30
                 /* ExpectedOriginal: ({'a':-1, 'b':2, 'c':'str', 'd':null, 'e':{'f':'buzz'}}) */
                 var expected_ = r.hashMap("a", -1).with("b", 2).with("c", "str").with("d", null).with("e", r.hashMap("f", "buzz"));
                 
                 /* Original: obj.merge({'a':-1}) */
                 var obtained = runOrCatch( obj.merge(r.hashMap("a", -1)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             
             //JavaDef, transform/object.yaml, #Templates.YamlTest+DefTest.
             //Original: errmsg = 'Stray literal keyword found:'+' literal is only legal inside of the object passed to merge or update and cannot nest inside other literals.'
             
String errmsg = (String) ("Stray literal keyword found:" + " literal is only legal inside of the object passed to merge or update and cannot nest inside other literals.");             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #32
                 /* ExpectedOriginal: err("ReqlQueryLogicError", errmsg, []) */
                 var expected_ = err("ReqlQueryLogicError", errmsg, r.array());
                 
                 /* Original: r.literal('foo') */
                 var obtained = runOrCatch( r.literal("foo") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #33
                 /* ExpectedOriginal: err("ReqlQueryLogicError", errmsg, []) */
                 var expected_ = err("ReqlQueryLogicError", errmsg, r.array());
                 
                 /* Original: obj.merge(r.literal('foo')) */
                 var obtained = runOrCatch( obj.merge(r.literal("foo")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #34
                 /* ExpectedOriginal: err("ReqlQueryLogicError", errmsg, []) */
                 var expected_ = err("ReqlQueryLogicError", errmsg, r.array());
                 
                 /* Original: obj.merge({'foo':r.literal(r.literal('foo'))}) */
                 var obtained = runOrCatch( obj.merge(r.hashMap("foo", r.literal(r.literal("foo")))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             
             //JavaDef, transform/object.yaml, #Templates.YamlTest+DefTest.
             //Original: o = r.expr({'a':{'b':1, 'c':2}, 'd':3})
             
MakeObj o = (MakeObj) (r.expr(r.hashMap("a", r.hashMap("b", 1).with("c", 2)).with("d", 3)));             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #36
                 /* ExpectedOriginal: ({'a':{'b':1, 'c':2}, 'd':3, 'e':4, 'f':5}) */
                 var expected_ = r.hashMap("a", r.hashMap("b", 1).with("c", 2)).with("d", 3).with("e", 4).with("f", 5);
                 
                 /* Original: o.merge({'e':4}, {'f':5}) */
                 var obtained = runOrCatch( o.merge(r.hashMap("e", 4), r.hashMap("f", 5)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #37
                 /* ExpectedOriginal: ([{'a':{'b':1, 'c':2}, 'd':3, 'e':3}, {'a':{'b':1, 'c':2}, 'd':4, 'e':4}]) */
                 var expected_ = r.array(r.hashMap("a", r.hashMap("b", 1).with("c", 2)).with("d", 3).with("e", 3), r.hashMap("a", r.hashMap("b", 1).with("c", 2)).with("d", 4).with("e", 4));
                 
                 /* Original: r.expr([o, o.merge({'d':4})]).merge(lambda row:{'e':row['d']}) */
                 var obtained = runOrCatch( r.expr(r.array(o, o.merge(r.hashMap("d", 4)))).merge(row => r.hashMap("e", row.g("d"))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #39
                 /* ExpectedOriginal: ([{'a':{'b':2, 'c':2}, 'd':3}, {'a':{'b':2, 'c':2}, 'd':4}]) */
                 var expected_ = r.array(r.hashMap("a", r.hashMap("b", 2).with("c", 2)).with("d", 3), r.hashMap("a", r.hashMap("b", 2).with("c", 2)).with("d", 4));
                 
                 /* Original: r.expr([o, o.merge({'d':4})]).merge(lambda row:{'a':{'b':2}}) */
                 var obtained = runOrCatch( r.expr(r.array(o, o.merge(r.hashMap("d", 4)))).merge(row => r.hashMap("a", r.hashMap("b", 2))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #40
                 /* ExpectedOriginal: ([{'a':{'b':2}, 'd':3}, {'a':{'b':2}, 'd':4}]) */
                 var expected_ = r.array(r.hashMap("a", r.hashMap("b", 2)).with("d", 3), r.hashMap("a", r.hashMap("b", 2)).with("d", 4));
                 
                 /* Original: r.expr([o, o.merge({'d':4})]).merge(lambda row:{'a':r.literal({'b':2})}) */
                 var obtained = runOrCatch( r.expr(r.array(o, o.merge(r.hashMap("d", 4)))).merge(row => r.hashMap("a", r.literal(r.hashMap("b", 2)))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #41
                 /* ExpectedOriginal: (['a', 'b', 'c', 'd', 'e']) */
                 var expected_ = r.array("a", "b", "c", "d", "e");
                 
                 /* Original: obj.keys() */
                 var obtained = runOrCatch( obj.keys() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/object.yaml, #42
                 /* ExpectedOriginal: ([1, 2, 'str', null, {'f':'buzz'}]) */
                 var expected_ = r.array(1, 2, "str", null, r.hashMap("f", "buzz"));
                 
                 /* Original: obj.values() */
                 var obtained = runOrCatch( obj.values() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             

        }
    }
}
