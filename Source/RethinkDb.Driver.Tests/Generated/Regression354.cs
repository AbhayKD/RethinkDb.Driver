




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class Regression354 : GeneratedTest {



        [Test]
        public void YamlTest(){

             
             //JavaDef, regression/354.yaml, #Templates.YamlTest+DefTest.
             //Original: arr = r.expr([1,2,3,4,5])
             
var arr = (MakeArray) (r.expr(r.array(1L, 2L, 3L, 4L, 5L)));             
             TestCounter++;
             
             {
                 //JavaQuery, regression/354.yaml, #2
                 /* ExpectedOriginal: [3, 4, 5] */
                 var expected_ = r.array(3L, 4L, 5L);
                 
                 /* Original: arr.skip(2) */
                 var obtained = runOrCatch( arr.skip(2L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/354.yaml, #3
                 /* ExpectedOriginal: err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", [1]) */
                 var expected_ = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", r.array(1L));
                 
                 /* Original: arr.skip('a') */
                 var obtained = runOrCatch( arr.skip("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/354.yaml, #4
                 /* ExpectedOriginal: err("ReqlQueryLogicError", "Expected type NUMBER but found ARRAY.", [1]) */
                 var expected_ = err("ReqlQueryLogicError", "Expected type NUMBER but found ARRAY.", r.array(1L));
                 
                 /* Original: arr.skip([1,2,3]) */
                 var obtained = runOrCatch( arr.skip(r.array(1L, 2L, 3L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/354.yaml, #5
                 /* ExpectedOriginal: err("ReqlQueryLogicError", "Expected type NUMBER but found OBJECT.", [0, 1]) */
                 var expected_ = err("ReqlQueryLogicError", "Expected type NUMBER but found OBJECT.", r.array(0L, 1L));
                 
                 /* Original: arr.skip({}).count() */
                 var obtained = runOrCatch( arr.skip(r.hashMap()).count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/354.yaml, #6
                 /* ExpectedOriginal: err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", [1]) */
                 var expected_ = err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", r.array(1L));
                 
                 /* Original: arr.skip(null) */
                 var obtained = runOrCatch( arr.skip((ReqlExpr) null) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             

        }
    }
}
