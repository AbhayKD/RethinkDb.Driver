




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class Regression2766 : GeneratedTest {

        public Regression2766 (){
        }




        [Test]
        public void YamlTest(){

             TestCounter++;
             
             {
                 //JavaQuery, regression/2766.yaml, #1
                 /* ExpectedOriginal: err("ReqlQueryLogicError", "Cannot call `bracket` on objects of type `PTYPE<TIME>`.") */
                 var expected_ = err("ReqlQueryLogicError", "Cannot call `bracket` on objects of type `PTYPE<TIME>`.");
                 
                 /* Original: r.now()['epoch_time'] */
                 var obtained = runOrCatch( r.now().g("epoch_time") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/2766.yaml, #2
                 /* ExpectedOriginal: err("ReqlQueryLogicError", "Cannot call `get_field` on objects of type `PTYPE<TIME>`.") */
                 var expected_ = err("ReqlQueryLogicError", "Cannot call `get_field` on objects of type `PTYPE<TIME>`.");
                 
                 /* Original: r.now().get_field('epoch_time') */
                 var obtained = runOrCatch( r.now().g("epoch_time") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/2766.yaml, #3
                 /* ExpectedOriginal: err("ReqlQueryLogicError", "Cannot call `keys` on objects of type `PTYPE<TIME>`.") */
                 var expected_ = err("ReqlQueryLogicError", "Cannot call `keys` on objects of type `PTYPE<TIME>`.");
                 
                 /* Original: r.now().keys() */
                 var obtained = runOrCatch( r.now().keys() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/2766.yaml, #4
                 /* ExpectedOriginal: err("ReqlQueryLogicError", "Cannot call `pluck` on objects of type `PTYPE<TIME>`.") */
                 var expected_ = err("ReqlQueryLogicError", "Cannot call `pluck` on objects of type `PTYPE<TIME>`.");
                 
                 /* Original: r.now().pluck('epoch_time') */
                 var obtained = runOrCatch( r.now().pluck("epoch_time") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/2766.yaml, #5
                 /* ExpectedOriginal: err("ReqlQueryLogicError", "Cannot call `without` on objects of type `PTYPE<TIME>`.") */
                 var expected_ = err("ReqlQueryLogicError", "Cannot call `without` on objects of type `PTYPE<TIME>`.");
                 
                 /* Original: r.now().without('epoch_time') */
                 var obtained = runOrCatch( r.now().without("epoch_time") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/2766.yaml, #6
                 /* ExpectedOriginal: err("ReqlQueryLogicError", "Cannot call `merge` on objects of type `PTYPE<TIME>`.") */
                 var expected_ = err("ReqlQueryLogicError", "Cannot call `merge` on objects of type `PTYPE<TIME>`.");
                 
                 /* Original: r.now().merge({"foo":4}) */
                 var obtained = runOrCatch( r.now().merge(r.hashMap("foo", 4L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/2766.yaml, #7
                 /* ExpectedOriginal: err("ReqlQueryLogicError", "Cannot merge objects of type `PTYPE<TIME>`.") */
                 var expected_ = err("ReqlQueryLogicError", "Cannot merge objects of type `PTYPE<TIME>`.");
                 
                 /* Original: r.expr({"foo":4}).merge(r.now()) */
                 var obtained = runOrCatch( r.expr(r.hashMap("foo", 4L)).merge(r.now()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/2766.yaml, #8
                 /* ExpectedOriginal: err("ReqlQueryLogicError", "Cannot call `has_fields` on objects of type `PTYPE<TIME>`.") */
                 var expected_ = err("ReqlQueryLogicError", "Cannot call `has_fields` on objects of type `PTYPE<TIME>`.");
                 
                 /* Original: r.now().has_fields('epoch_time') */
                 var obtained = runOrCatch( r.now().hasFields("epoch_time") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/2766.yaml, #9
                 /* ExpectedOriginal: err("ReqlQueryLogicError", "Invalid path argument `1404691200`.") */
                 var expected_ = err("ReqlQueryLogicError", "Invalid path argument `1404691200`.");
                 
                 /* Original: r.object().has_fields(r.time(2014, 7, 7, 'Z')) */
                 var obtained = runOrCatch( r.object_().hasFields(r.time(2014L, 7L, 7L, "Z")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/2766.yaml, #10
                 /* ExpectedOriginal: err("ReqlQueryLogicError", "Cannot call `keys` on objects of type `NUMBER`.") */
                 var expected_ = err("ReqlQueryLogicError", "Cannot call `keys` on objects of type `NUMBER`.");
                 
                 /* Original: r.expr(1).keys() */
                 var obtained = runOrCatch( r.expr(1L).keys() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             

        }
    }
}
