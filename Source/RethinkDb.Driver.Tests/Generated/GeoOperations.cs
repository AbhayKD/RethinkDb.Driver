




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class GeoOperations : GeneratedTest {



        [Test]
        public void YamlTest(){

             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #1
                 /* ExpectedOriginal: ("89011.26253835332") */
                 var expected = "89011.26253835332";
                 
                 /* Original: r.distance(r.point(-122, 37), r.point(-123, 37)).coerce_to('STRING') */
                 var obtained = runOrCatch( r.distance(r.point(-122, 37), r.point(-123, 37)).coerceTo("STRING") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #2
                 /* ExpectedOriginal: ("110968.30443995494") */
                 var expected = "110968.30443995494";
                 
                 /* Original: r.distance(r.point(-122, 37), r.point(-122, 36)).coerce_to('STRING') */
                 var obtained = runOrCatch( r.distance(r.point(-122, 37), r.point(-122, 36)).coerceTo("STRING") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #3
                 /* ExpectedOriginal: True */
                 var expected = true;
                 
                 /* Original: r.distance(r.point(-122, 37), r.point(-122, 36)).eq(r.distance(r.point(-122, 36), r.point(-122, 37))) */
                 var obtained = runOrCatch( r.distance(r.point(-122, 37), r.point(-122, 36)).eq(r.distance(r.point(-122, 36), r.point(-122, 37))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #4
                 /* ExpectedOriginal: ("89011.26253835332") */
                 var expected = "89011.26253835332";
                 
                 /* Original: r.point(-122, 37).distance(r.point(-123, 37)).coerce_to('STRING') */
                 var obtained = runOrCatch( r.point(-122, 37).distance(r.point(-123, 37)).coerceTo("STRING") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             //JavaDef, geo/operations.yaml, #Templates.YamlTest+DefTest.
             //Original: someDist = r.distance(r.point(-122, 37), r.point(-123, 37))
             
Distance someDist = (Distance) (r.distance(r.point(-122, 37), r.point(-123, 37)));             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #5
                 /* ExpectedOriginal: True */
                 var expected = true;
                 
                 /* Original: someDist.eq(r.distance(r.point(-122, 37), r.point(-123, 37), unit='m')) */
                 var obtained = runOrCatch( someDist.eq(r.distance(r.point(-122, 37), r.point(-123, 37)).optArg("unit", "m")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #6
                 /* ExpectedOriginal: True */
                 var expected = true;
                 
                 /* Original: someDist.mul(1.0/1000.0).eq(r.distance(r.point(-122, 37), r.point(-123, 37), unit='km')) */
                 var obtained = runOrCatch( someDist.mul(r.div(1.0, 1000.0)).eq(r.distance(r.point(-122, 37), r.point(-123, 37)).optArg("unit", "km")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #7
                 /* ExpectedOriginal: True */
                 var expected = true;
                 
                 /* Original: someDist.mul(1.0/1609.344).eq(r.distance(r.point(-122, 37), r.point(-123, 37), unit='mi')) */
                 var obtained = runOrCatch( someDist.mul(r.div(1.0, 1609.344)).eq(r.distance(r.point(-122, 37), r.point(-123, 37)).optArg("unit", "mi")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #8
                 /* ExpectedOriginal: True */
                 var expected = true;
                 
                 /* Original: someDist.mul(1.0/0.3048).eq(r.distance(r.point(-122, 37), r.point(-123, 37), unit='ft')) */
                 var obtained = runOrCatch( someDist.mul(r.div(1.0, 0.3048)).eq(r.distance(r.point(-122, 37), r.point(-123, 37)).optArg("unit", "ft")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #9
                 /* ExpectedOriginal: True */
                 var expected = true;
                 
                 /* Original: someDist.mul(1.0/1852.0).eq(r.distance(r.point(-122, 37), r.point(-123, 37), unit='nm')) */
                 var obtained = runOrCatch( someDist.mul(r.div(1.0, 1852.0)).eq(r.distance(r.point(-122, 37), r.point(-123, 37)).optArg("unit", "nm")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #10
                 /* ExpectedOriginal: True */
                 var expected = true;
                 
                 /* Original: someDist.eq(r.distance(r.point(-122, 37), r.point(-123, 37), geo_system='WGS84')) */
                 var obtained = runOrCatch( someDist.eq(r.distance(r.point(-122, 37), r.point(-123, 37)).optArg("geo_system", "WGS84")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #11
                 /* ExpectedOriginal: True */
                 var expected = true;
                 
                 /* Original: someDist.div(10).eq(r.distance(r.point(-122, 37), r.point(-123, 37), geo_system={'a':637813.7, 'f':(1.0/298.257223563)})) */
                 var obtained = runOrCatch( someDist.div(10).eq(r.distance(r.point(-122, 37), r.point(-123, 37)).optArg("geo_system", r.hashMap("a", 637813.7).with("f", r.div(1.0, 298.257223563)))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #12
                 /* ExpectedOriginal: ("0.01393875509649327") */
                 var expected = "0.01393875509649327";
                 
                 /* Original: r.distance(r.point(-122, 37), r.point(-123, 37), geo_system='unit_sphere').coerce_to('STRING') */
                 var obtained = runOrCatch( r.distance(r.point(-122, 37), r.point(-123, 37)).optArg("geo_system", "unit_sphere").coerceTo("STRING") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #13
                 /* ExpectedOriginal: ("0") */
                 var expected = "0";
                 
                 /* Original: r.distance(r.point(0, 0), r.point(0, 0)).coerce_to('STRING') */
                 var obtained = runOrCatch( r.distance(r.point(0, 0), r.point(0, 0)).coerceTo("STRING") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #14
                 /* ExpectedOriginal: ("40007862.917250897") */
                 var expected = "40007862.917250897";
                 
                 /* Original: r.distance(r.point(0, 0), r.point(180, 0)).mul(2).coerce_to('STRING') */
                 var obtained = runOrCatch( r.distance(r.point(0, 0), r.point(180, 0)).mul(2).coerceTo("STRING") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #15
                 /* ExpectedOriginal: ("40007862.917250897") */
                 var expected = "40007862.917250897";
                 
                 /* Original: r.distance(r.point(0, -90), r.point(0, 90)).mul(2).coerce_to('STRING') */
                 var obtained = runOrCatch( r.distance(r.point(0, -90), r.point(0, 90)).mul(2).coerceTo("STRING") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #16
                 /* ExpectedOriginal: ("0") */
                 var expected = "0";
                 
                 /* Original: r.distance(r.point(0, 0), r.line([0,0], [0,1])).coerce_to('STRING') */
                 var obtained = runOrCatch( r.distance(r.point(0, 0), r.line(r.array(0, 0), r.array(0, 1))).coerceTo("STRING") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #17
                 /* ExpectedOriginal: ("0") */
                 var expected = "0";
                 
                 /* Original: r.distance(r.line([0,0], [0,1]), r.point(0, 0)).coerce_to('STRING') */
                 var obtained = runOrCatch( r.distance(r.line(r.array(0, 0), r.array(0, 1)), r.point(0, 0)).coerceTo("STRING") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #18
                 /* ExpectedOriginal: True */
                 var expected = true;
                 
                 /* Original: r.distance(r.point(0, 0), r.line([0.1,0], [1,0])).eq(r.distance(r.point(0, 0), r.point(0.1, 0))) */
                 var obtained = runOrCatch( r.distance(r.point(0, 0), r.line(r.array(0.1, 0), r.array(1, 0))).eq(r.distance(r.point(0, 0), r.point(0.1, 0))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #19
                 /* ExpectedOriginal: ("492471.4990055255") */
                 var expected = "492471.4990055255";
                 
                 /* Original: r.distance(r.point(0, 0), r.line([5,-1], [4,2])).coerce_to('STRING') */
                 var obtained = runOrCatch( r.distance(r.point(0, 0), r.line(r.array(5, -1), r.array(4, 2))).coerceTo("STRING") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #20
                 /* ExpectedOriginal: ("492471.4990055255") */
                 var expected = "492471.4990055255";
                 
                 /* Original: r.distance(r.point(0, 0), r.polygon([5,-1], [4,2], [10,10])).coerce_to('STRING') */
                 var obtained = runOrCatch( r.distance(r.point(0, 0), r.polygon(r.array(5, -1), r.array(4, 2), r.array(10, 10))).coerceTo("STRING") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #21
                 /* ExpectedOriginal: ("0") */
                 var expected = "0";
                 
                 /* Original: r.distance(r.point(0, 0), r.polygon([0,-1], [0,1], [10,10])).coerce_to('STRING') */
                 var obtained = runOrCatch( r.distance(r.point(0, 0), r.polygon(r.array(0, -1), r.array(0, 1), r.array(10, 10))).coerceTo("STRING") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #22
                 /* ExpectedOriginal: ("0") */
                 var expected = "0";
                 
                 /* Original: r.distance(r.point(0.5, 0.5), r.polygon([0,-1], [0,1], [10,10])).coerce_to('STRING') */
                 var obtained = runOrCatch( r.distance(r.point(0.5, 0.5), r.polygon(r.array(0, -1), r.array(0, 1), r.array(10, 10))).coerceTo("STRING") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #23
                 /* ExpectedOriginal: False */
                 var expected = false;
                 
                 /* Original: r.circle([0,0], 1, fill=false).eq(r.circle([0,0], 1, fill=true)) */
                 var obtained = runOrCatch( r.circle(r.array(0, 0), 1).optArg("fill", false).eq(r.circle(r.array(0, 0), 1).optArg("fill", true)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #24
                 /* ExpectedOriginal: True */
                 var expected = true;
                 
                 /* Original: r.circle([0,0], 1, fill=false).fill().eq(r.circle([0,0], 1, fill=true)) */
                 var obtained = runOrCatch( r.circle(r.array(0, 0), 1).optArg("fill", false).fill().eq(r.circle(r.array(0, 0), 1).optArg("fill", true)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #25
                 /* ExpectedOriginal: ({'$reql_type$':'GEOMETRY', 'coordinates':[[[0,0],[1,0],[1,1],[0,1],[0,0]],[[0.1,0.1],[0.9,0.1],[0.9,0.9],[0.1,0.9],[0.1,0.1]]], 'type':'Polygon'}) */
                 var expected = r.hashMap("$reql_type$", "GEOMETRY").with("coordinates", r.array(r.array(r.array(0, 0), r.array(1, 0), r.array(1, 1), r.array(0, 1), r.array(0, 0)), r.array(r.array(0.1, 0.1), r.array(0.9, 0.1), r.array(0.9, 0.9), r.array(0.1, 0.9), r.array(0.1, 0.1)))).with("type", "Polygon");
                 
                 /* Original: r.polygon([0,0], [1,0], [1,1], [0,1]).polygon_sub(r.polygon([0.1,0.1], [0.9,0.1], [0.9,0.9], [0.1,0.9])) */
                 var obtained = runOrCatch( r.polygon(r.array(0, 0), r.array(1, 0), r.array(1, 1), r.array(0, 1)).polygonSub(r.polygon(r.array(0.1, 0.1), r.array(0.9, 0.1), r.array(0.9, 0.9), r.array(0.1, 0.9))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #26
                 /* ExpectedOriginal: err('ReqlQueryLogicError', 'The second argument to `polygon_sub` is not contained in the first one.', [0]) */
                 var expected = err("ReqlQueryLogicError", "The second argument to `polygon_sub` is not contained in the first one.", r.array(0));
                 
                 /* Original: r.polygon([0,0], [1,0], [1,1], [0,1]).polygon_sub(r.polygon([0.1,0.9], [0.9,0.0], [0.9,0.9], [0.1,0.9])) */
                 var obtained = runOrCatch( r.polygon(r.array(0, 0), r.array(1, 0), r.array(1, 1), r.array(0, 1)).polygonSub(r.polygon(r.array(0.1, 0.9), r.array(0.9, 0.0), r.array(0.9, 0.9), r.array(0.1, 0.9))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #27
                 /* ExpectedOriginal: err('ReqlQueryLogicError', 'The second argument to `polygon_sub` is not contained in the first one.', [0]) */
                 var expected = err("ReqlQueryLogicError", "The second argument to `polygon_sub` is not contained in the first one.", r.array(0));
                 
                 /* Original: r.polygon([0,0], [1,0], [1,1], [0,1]).polygon_sub(r.polygon([0,0], [2,0], [2,2], [0,2])) */
                 var obtained = runOrCatch( r.polygon(r.array(0, 0), r.array(1, 0), r.array(1, 1), r.array(0, 1)).polygonSub(r.polygon(r.array(0, 0), r.array(2, 0), r.array(2, 2), r.array(0, 2))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #28
                 /* ExpectedOriginal: err('ReqlQueryLogicError', 'The second argument to `polygon_sub` is not contained in the first one.', [0]) */
                 var expected = err("ReqlQueryLogicError", "The second argument to `polygon_sub` is not contained in the first one.", r.array(0));
                 
                 /* Original: r.polygon([0,0], [1,0], [1,1], [0,1]).polygon_sub(r.polygon([0,-2], [1,-2], [-1,1], [0,-1])) */
                 var obtained = runOrCatch( r.polygon(r.array(0, 0), r.array(1, 0), r.array(1, 1), r.array(0, 1)).polygonSub(r.polygon(r.array(0, -2), r.array(1, -2), r.array(-1, 1), r.array(0, -1))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #29
                 /* ExpectedOriginal: err('ReqlQueryLogicError', 'The second argument to `polygon_sub` is not contained in the first one.', [0]) */
                 var expected = err("ReqlQueryLogicError", "The second argument to `polygon_sub` is not contained in the first one.", r.array(0));
                 
                 /* Original: r.polygon([0,0], [1,0], [1,1], [0,1]).polygon_sub(r.polygon([0,-1], [1,-1], [1,0], [0,0])) */
                 var obtained = runOrCatch( r.polygon(r.array(0, 0), r.array(1, 0), r.array(1, 1), r.array(0, 1)).polygonSub(r.polygon(r.array(0, -1), r.array(1, -1), r.array(1, 0), r.array(0, 0))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #30
                 /* ExpectedOriginal: err('ReqlQueryLogicError', 'The second argument to `polygon_sub` is not contained in the first one.', [0]) */
                 var expected = err("ReqlQueryLogicError", "The second argument to `polygon_sub` is not contained in the first one.", r.array(0));
                 
                 /* Original: r.polygon([0,0], [1,0], [1,1], [0,1]).polygon_sub(r.polygon([0.1,-1], [0.9,-1], [0.9,0.5], [0.1,0.5])) */
                 var obtained = runOrCatch( r.polygon(r.array(0, 0), r.array(1, 0), r.array(1, 1), r.array(0, 1)).polygonSub(r.polygon(r.array(0.1, -1), r.array(0.9, -1), r.array(0.9, 0.5), r.array(0.1, 0.5))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #31
                 /* ExpectedOriginal: ({'$reql_type$':'GEOMETRY', 'coordinates':[[[0,0],[1,0],[1,1],[0,1],[0,0]],[[0,0],[0.1,0.9],[0.9,0.9],[0.9,0.1],[0,0]]], 'type':'Polygon'}) */
                 var expected = r.hashMap("$reql_type$", "GEOMETRY").with("coordinates", r.array(r.array(r.array(0, 0), r.array(1, 0), r.array(1, 1), r.array(0, 1), r.array(0, 0)), r.array(r.array(0, 0), r.array(0.1, 0.9), r.array(0.9, 0.9), r.array(0.9, 0.1), r.array(0, 0)))).with("type", "Polygon");
                 
                 /* Original: r.polygon([0,0], [1,0], [1,1], [0,1]).polygon_sub(r.polygon([0,0],[0.1,0.9],[0.9,0.9],[0.9,0.1])) */
                 var obtained = runOrCatch( r.polygon(r.array(0, 0), r.array(1, 0), r.array(1, 1), r.array(0, 1)).polygonSub(r.polygon(r.array(0, 0), r.array(0.1, 0.9), r.array(0.9, 0.9), r.array(0.9, 0.1))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #32
                 /* ExpectedOriginal: err('ReqlQueryLogicError', 'Expected a Polygon with only an outer shell.  This one has holes.', [0]) */
                 var expected = err("ReqlQueryLogicError", "Expected a Polygon with only an outer shell.  This one has holes.", r.array(0));
                 
                 /* Original: r.polygon([0,0], [1,0], [1,1], [0,1]).polygon_sub(r.polygon([0,0],[0.1,0.9],[0.9,0.9],[0.9,0.1]).polygon_sub(r.polygon([0.2,0.2],[0.5,0.8],[0.8,0.2]))) */
                 var obtained = runOrCatch( r.polygon(r.array(0, 0), r.array(1, 0), r.array(1, 1), r.array(0, 1)).polygonSub(r.polygon(r.array(0, 0), r.array(0.1, 0.9), r.array(0.9, 0.9), r.array(0.9, 0.1)).polygonSub(r.polygon(r.array(0.2, 0.2), r.array(0.5, 0.8), r.array(0.8, 0.2)))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/operations.yaml, #33
                 /* ExpectedOriginal: err('ReqlQueryLogicError', 'Expected a Polygon but found a LineString.', []) */
                 var expected = err("ReqlQueryLogicError", "Expected a Polygon but found a LineString.", r.array());
                 
                 /* Original: r.polygon([0,0], [1,0], [1,1], [0,1]).polygon_sub(r.line([0,0],[0.9,0.1],[0.9,0.9],[0.1,0.9])) */
                 var obtained = runOrCatch( r.polygon(r.array(0, 0), r.array(1, 0), r.array(1, 1), r.array(0, 1)).polygonSub(r.line(r.array(0, 0), r.array(0.9, 0.1), r.array(0.9, 0.9), r.array(0.1, 0.9))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             

        }
    }
}
