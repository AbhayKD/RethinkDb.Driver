




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class DatumBinary : GeneratedTest {



        [Test]
        public void YamlTest(){

             
             //JavaDef, datum/binary.yaml, #Templates.YamlTest+DefTest.
             //Original: s = b''
             
byte[] s = (byte[]) "".getBytes(StandardCharsets.UTF_8);             
             
             {
                 //JavaQuery, datum/binary.yaml, #2
                 //ExpectedOriginal: s
                 var expected = s;
                 
                 //Original: r.binary(s)
                 var obtained = runOrCatch( r.binary(s) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #3
                 //ExpectedOriginal: 0
                 var expected = 0;
                 
                 //Original: r.binary(s).count()
                 var obtained = runOrCatch( r.binary(s).count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             //JavaDef, datum/binary.yaml, #Templates.YamlTest+DefTest.
             //Original: s = b'\x00'
             
byte[] s = (byte[]) "\x00".getBytes(StandardCharsets.UTF_8);             
             
             {
                 //JavaQuery, datum/binary.yaml, #5
                 //ExpectedOriginal: s
                 var expected = s;
                 
                 //Original: r.binary(s)
                 var obtained = runOrCatch( r.binary(s) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #6
                 //ExpectedOriginal: 1
                 var expected = 1;
                 
                 //Original: r.binary(s).count()
                 var obtained = runOrCatch( r.binary(s).count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             //JavaDef, datum/binary.yaml, #Templates.YamlTest+DefTest.
             //Original: s = b'\x00\x42'
             
byte[] s = (byte[]) "\x00\x42".getBytes(StandardCharsets.UTF_8);             
             
             {
                 //JavaQuery, datum/binary.yaml, #8
                 //ExpectedOriginal: s
                 var expected = s;
                 
                 //Original: r.binary(s)
                 var obtained = runOrCatch( r.binary(s) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #9
                 //ExpectedOriginal: 2
                 var expected = 2;
                 
                 //Original: r.binary(s).count()
                 var obtained = runOrCatch( r.binary(s).count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             //JavaDef, datum/binary.yaml, #Templates.YamlTest+DefTest.
             //Original: s = b'\x00\xfe\x7a'
             
byte[] s = (byte[]) "\x00\xfez".getBytes(StandardCharsets.UTF_8);             
             
             {
                 //JavaQuery, datum/binary.yaml, #11
                 //ExpectedOriginal: s
                 var expected = s;
                 
                 //Original: r.binary(s)
                 var obtained = runOrCatch( r.binary(s) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #12
                 //ExpectedOriginal: 3
                 var expected = 3;
                 
                 //Original: r.binary(s).count()
                 var obtained = runOrCatch( r.binary(s).count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             //JavaDef, datum/binary.yaml, #Templates.YamlTest+DefTest.
             //Original: s = b'\xed\xfe\x00\xba'
             
byte[] s = (byte[]) "\xed\xfe\x00\xba".getBytes(StandardCharsets.UTF_8);             
             
             {
                 //JavaQuery, datum/binary.yaml, #14
                 //ExpectedOriginal: s
                 var expected = s;
                 
                 //Original: r.binary(s)
                 var obtained = runOrCatch( r.binary(s) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #15
                 //ExpectedOriginal: 4
                 var expected = 4;
                 
                 //Original: r.binary(s).count()
                 var obtained = runOrCatch( r.binary(s).count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             //JavaDef, datum/binary.yaml, #Templates.YamlTest+DefTest.
             //Original: s = b'\x50\xf9\x00\x77\xf9'
             
byte[] s = (byte[]) "P\xf9\x00w\xf9".getBytes(StandardCharsets.UTF_8);             
             
             {
                 //JavaQuery, datum/binary.yaml, #17
                 //ExpectedOriginal: s
                 var expected = s;
                 
                 //Original: r.binary(s)
                 var obtained = runOrCatch( r.binary(s) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #18
                 //ExpectedOriginal: 5
                 var expected = 5;
                 
                 //Original: r.binary(s).count()
                 var obtained = runOrCatch( r.binary(s).count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             //JavaDef, datum/binary.yaml, #Templates.YamlTest+DefTest.
             //Original: s = b'\x2f\xe3\xb5\x57\x00\x92'
             
byte[] s = (byte[]) "/\xe3\xb5W\x00\x92".getBytes(StandardCharsets.UTF_8);             
             
             {
                 //JavaQuery, datum/binary.yaml, #20
                 //ExpectedOriginal: s
                 var expected = s;
                 
                 //Original: r.binary(s)
                 var obtained = runOrCatch( r.binary(s) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #21
                 //ExpectedOriginal: 6
                 var expected = 6;
                 
                 //Original: r.binary(s).count()
                 var obtained = runOrCatch( r.binary(s).count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             //JavaDef, datum/binary.yaml, #Templates.YamlTest+DefTest.
             //Original: s = b'\xa9\x43\x54\xe9\x00\xf8\xfb'
             
byte[] s = (byte[]) "\xa9\x43T\xe9\x00\xf8\xfb".getBytes(StandardCharsets.UTF_8);             
             
             {
                 //JavaQuery, datum/binary.yaml, #23
                 //ExpectedOriginal: s
                 var expected = s;
                 
                 //Original: r.binary(s)
                 var obtained = runOrCatch( r.binary(s) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #24
                 //ExpectedOriginal: 7
                 var expected = 7;
                 
                 //Original: r.binary(s).count()
                 var obtained = runOrCatch( r.binary(s).count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             //JavaDef, datum/binary.yaml, #Templates.YamlTest+DefTest.
             //Original: s = b'\x57\xbb\xe5\x82\x8b\xd3\x00\xf9'
             
byte[] s = (byte[]) "W\xbb\xe5\x82\x8b\xd3\x00\xf9".getBytes(StandardCharsets.UTF_8);             
             
             {
                 //JavaQuery, datum/binary.yaml, #26
                 //ExpectedOriginal: s
                 var expected = s;
                 
                 //Original: r.binary(s)
                 var obtained = runOrCatch( r.binary(s) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #27
                 //ExpectedOriginal: 8
                 var expected = 8;
                 
                 //Original: r.binary(s).count()
                 var obtained = runOrCatch( r.binary(s).count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             //JavaDef, datum/binary.yaml, #Templates.YamlTest+DefTest.
             //Original: s = b'\x44\x1b\x3e\x00\x13\x19\x29\x2a\xbf'
             
byte[] s = (byte[]) "D\x1b>\x00\x13\x19)*\xbf".getBytes(StandardCharsets.UTF_8);             
             
             {
                 //JavaQuery, datum/binary.yaml, #29
                 //ExpectedOriginal: s
                 var expected = s;
                 
                 //Original: r.binary(s)
                 var obtained = runOrCatch( r.binary(s) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #30
                 //ExpectedOriginal: 9
                 var expected = 9;
                 
                 //Original: r.binary(s).count()
                 var obtained = runOrCatch( r.binary(s).count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             //JavaDef, datum/binary.yaml, #Templates.YamlTest+DefTest.
             //Original: s = b'\x8a\x1d\x09\x00\x5d\x60\x6b\x2e\x70\xd9'
             
byte[] s = (byte[]) "\x8a\x1d\x09\x00]`k.p\xd9".getBytes(StandardCharsets.UTF_8);             
             
             {
                 //JavaQuery, datum/binary.yaml, #32
                 //ExpectedOriginal: s
                 var expected = s;
                 
                 //Original: r.binary(s)
                 var obtained = runOrCatch( r.binary(s) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #33
                 //ExpectedOriginal: 10
                 var expected = 10;
                 
                 //Original: r.binary(s).count()
                 var obtained = runOrCatch( r.binary(s).count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             //JavaDef, datum/binary.yaml, #Templates.YamlTest+DefTest.
             //Original: s = b'\x00\xaf\x47\x4b\x38\x99\x14\x8d\x8f\x10\x51'
             
byte[] s = (byte[]) "\x00\xafGK8\x99\x14\x8d\x8f\x10Q".getBytes(StandardCharsets.UTF_8);             
             
             {
                 //JavaQuery, datum/binary.yaml, #35
                 //ExpectedOriginal: s
                 var expected = s;
                 
                 //Original: r.binary(s)
                 var obtained = runOrCatch( r.binary(s) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #36
                 //ExpectedOriginal: 11
                 var expected = 11;
                 
                 //Original: r.binary(s).count()
                 var obtained = runOrCatch( r.binary(s).count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             //JavaDef, datum/binary.yaml, #Templates.YamlTest+DefTest.
             //Original: s = b'\x45\x39\x00\xf7\xc2\x37\xfd\xe0\x38\x82\x40\xa9'
             
byte[] s = (byte[]) "E9\x00\xf7\xc2\x37\xfd\xe0\x38\x82@\xa9".getBytes(StandardCharsets.UTF_8);             
             
             {
                 //JavaQuery, datum/binary.yaml, #38
                 //ExpectedOriginal: s
                 var expected = s;
                 
                 //Original: r.binary(s)
                 var obtained = runOrCatch( r.binary(s) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #39
                 //ExpectedOriginal: 12
                 var expected = 12;
                 
                 //Original: r.binary(s).count()
                 var obtained = runOrCatch( r.binary(s).count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             //JavaDef, datum/binary.yaml, #Templates.YamlTest+DefTest.
             //Original: a = b'\x00'
             
byte[] a = (byte[]) "\x00".getBytes(StandardCharsets.UTF_8);             
             
             //JavaDef, datum/binary.yaml, #Templates.YamlTest+DefTest.
             //Original: b = b'\x00\x01'
             
byte[] b = (byte[]) "\x00\x01".getBytes(StandardCharsets.UTF_8);             
             
             //JavaDef, datum/binary.yaml, #Templates.YamlTest+DefTest.
             //Original: c = b'\x01'
             
byte[] c = (byte[]) "\x01".getBytes(StandardCharsets.UTF_8);             
             
             //JavaDef, datum/binary.yaml, #Templates.YamlTest+DefTest.
             //Original: d = b'\x70\x22'
             
byte[] d = (byte[]) "p\"".getBytes(StandardCharsets.UTF_8);             
             
             //JavaDef, datum/binary.yaml, #Templates.YamlTest+DefTest.
             //Original: e = b'\x80'
             
byte[] e = (byte[]) "\x80".getBytes(StandardCharsets.UTF_8);             
             
             //JavaDef, datum/binary.yaml, #Templates.YamlTest+DefTest.
             //Original: f = b'\xFE'
             
byte[] f = (byte[]) "\xfe".getBytes(StandardCharsets.UTF_8);             
             
             {
                 //JavaQuery, datum/binary.yaml, #46
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.binary(a).eq(r.binary(a))
                 var obtained = runOrCatch( r.binary(a).eq(r.binary(a)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #47
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.binary(a).le(r.binary(a))
                 var obtained = runOrCatch( r.binary(a).le(r.binary(a)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #48
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.binary(a).ge(r.binary(a))
                 var obtained = runOrCatch( r.binary(a).ge(r.binary(a)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #49
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.binary(a).ne(r.binary(a))
                 var obtained = runOrCatch( r.binary(a).ne(r.binary(a)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #50
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.binary(a).lt(r.binary(a))
                 var obtained = runOrCatch( r.binary(a).lt(r.binary(a)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #51
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.binary(a).gt(r.binary(a))
                 var obtained = runOrCatch( r.binary(a).gt(r.binary(a)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #52
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.binary(a).ne(r.binary(b))
                 var obtained = runOrCatch( r.binary(a).ne(r.binary(b)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #53
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.binary(a).lt(r.binary(b))
                 var obtained = runOrCatch( r.binary(a).lt(r.binary(b)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #54
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.binary(a).le(r.binary(b))
                 var obtained = runOrCatch( r.binary(a).le(r.binary(b)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #55
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.binary(a).ge(r.binary(b))
                 var obtained = runOrCatch( r.binary(a).ge(r.binary(b)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #56
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.binary(a).gt(r.binary(b))
                 var obtained = runOrCatch( r.binary(a).gt(r.binary(b)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #57
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.binary(a).eq(r.binary(b))
                 var obtained = runOrCatch( r.binary(a).eq(r.binary(b)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #58
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.binary(b).ne(r.binary(c))
                 var obtained = runOrCatch( r.binary(b).ne(r.binary(c)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #59
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.binary(b).lt(r.binary(c))
                 var obtained = runOrCatch( r.binary(b).lt(r.binary(c)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #60
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.binary(b).le(r.binary(c))
                 var obtained = runOrCatch( r.binary(b).le(r.binary(c)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #61
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.binary(b).ge(r.binary(c))
                 var obtained = runOrCatch( r.binary(b).ge(r.binary(c)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #62
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.binary(b).gt(r.binary(c))
                 var obtained = runOrCatch( r.binary(b).gt(r.binary(c)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #63
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.binary(b).eq(r.binary(c))
                 var obtained = runOrCatch( r.binary(b).eq(r.binary(c)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #64
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.binary(c).ne(r.binary(d))
                 var obtained = runOrCatch( r.binary(c).ne(r.binary(d)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #65
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.binary(c).lt(r.binary(d))
                 var obtained = runOrCatch( r.binary(c).lt(r.binary(d)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #66
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.binary(c).le(r.binary(d))
                 var obtained = runOrCatch( r.binary(c).le(r.binary(d)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #67
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.binary(c).ge(r.binary(d))
                 var obtained = runOrCatch( r.binary(c).ge(r.binary(d)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #68
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.binary(c).gt(r.binary(d))
                 var obtained = runOrCatch( r.binary(c).gt(r.binary(d)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #69
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.binary(c).eq(r.binary(d))
                 var obtained = runOrCatch( r.binary(c).eq(r.binary(d)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #70
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.binary(d).ne(r.binary(e))
                 var obtained = runOrCatch( r.binary(d).ne(r.binary(e)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #71
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.binary(d).lt(r.binary(e))
                 var obtained = runOrCatch( r.binary(d).lt(r.binary(e)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #72
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.binary(d).le(r.binary(e))
                 var obtained = runOrCatch( r.binary(d).le(r.binary(e)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #73
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.binary(d).ge(r.binary(e))
                 var obtained = runOrCatch( r.binary(d).ge(r.binary(e)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #74
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.binary(d).gt(r.binary(e))
                 var obtained = runOrCatch( r.binary(d).gt(r.binary(e)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #75
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.binary(d).eq(r.binary(e))
                 var obtained = runOrCatch( r.binary(d).eq(r.binary(e)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #76
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.binary(e).ne(r.binary(f))
                 var obtained = runOrCatch( r.binary(e).ne(r.binary(f)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #77
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.binary(e).lt(r.binary(f))
                 var obtained = runOrCatch( r.binary(e).lt(r.binary(f)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #78
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.binary(e).le(r.binary(f))
                 var obtained = runOrCatch( r.binary(e).le(r.binary(f)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #79
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.binary(e).ge(r.binary(f))
                 var obtained = runOrCatch( r.binary(e).ge(r.binary(f)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #80
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.binary(e).gt(r.binary(f))
                 var obtained = runOrCatch( r.binary(e).gt(r.binary(f)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #81
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.binary(e).eq(r.binary(f))
                 var obtained = runOrCatch( r.binary(e).eq(r.binary(f)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #82
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.binary(f).eq(r.binary(f))
                 var obtained = runOrCatch( r.binary(f).eq(r.binary(f)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #83
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.binary(f).le(r.binary(f))
                 var obtained = runOrCatch( r.binary(f).le(r.binary(f)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #84
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.binary(f).ge(r.binary(f))
                 var obtained = runOrCatch( r.binary(f).ge(r.binary(f)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #85
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.binary(f).ne(r.binary(f))
                 var obtained = runOrCatch( r.binary(f).ne(r.binary(f)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #86
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.binary(f).lt(r.binary(f))
                 var obtained = runOrCatch( r.binary(f).lt(r.binary(f)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #87
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: r.binary(f).gt(r.binary(f))
                 var obtained = runOrCatch( r.binary(f).gt(r.binary(f)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #88
                 //ExpectedOriginal: u'イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム'.encode('utf-8')
                 var expected = .encode("utf-8");
                 
                 //Original: r.binary(u'イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム'.encode('utf-8'))
                 var obtained = runOrCatch( r.binary("\u30a4\u30ed\u30cf\u30cb\u30db\u30d8\u30c8 \u30c1\u30ea\u30cc\u30eb\u30f2 \u30ef\u30ab\u30e8\u30bf\u30ec\u30bd \u30c4\u30cd\u30ca\u30e9\u30e0".encode("utf-8")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #89
                 //ExpectedOriginal: u'ƀƁƂƃƄƅƆƇƈƉƊƋƌƍƎƏ'.encode('utf-16')
                 var expected = .encode("utf-16");
                 
                 //Original: r.binary(u'ƀƁƂƃƄƅƆƇƈƉƊƋƌƍƎƏ'.encode('utf-16'))
                 var obtained = runOrCatch( r.binary("\u0180\u0181\u0182\u0183\u0184\u0185\u0186\u0187\u0188\u0189\u018a\u018b\u018c\u018d\u018e\u018f".encode("utf-16")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #90
                 //ExpectedOriginal: u'lorem ipsum'.encode('ascii')
                 var expected = .encode("ascii");
                 
                 //Original: r.binary(u'lorem ipsum'.encode('ascii'))
                 var obtained = runOrCatch( r.binary("lorem ipsum".encode("ascii")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #91
                 //ExpectedOriginal: ('foo')
                 var expected = "foo";
                 
                 //Original: r.binary(b'foo').coerce_to('string')
                 var obtained = runOrCatch( r.binary("foo".getBytes(StandardCharsets.UTF_8)).coerceTo("string") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #92
                 //ExpectedOriginal: u'イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム'
                 var expected = "\u30a4\u30ed\u30cf\u30cb\u30db\u30d8\u30c8 \u30c1\u30ea\u30cc\u30eb\u30f2 \u30ef\u30ab\u30e8\u30bf\u30ec\u30bd \u30c4\u30cd\u30ca\u30e9\u30e0";
                 
                 //Original: r.binary(u'イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム'.encode('utf-8')).coerce_to('string')
                 var obtained = runOrCatch( r.binary("\u30a4\u30ed\u30cf\u30cb\u30db\u30d8\u30c8 \u30c1\u30ea\u30cc\u30eb\u30f2 \u30ef\u30ab\u30e8\u30bf\u30ec\u30bd \u30c4\u30cd\u30ca\u30e9\u30e0".encode("utf-8")).coerceTo("string") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #93
                 //ExpectedOriginal: u'lorem ipsum'
                 var expected = "lorem ipsum";
                 
                 //Original: r.binary(u'lorem ipsum'.encode('ascii')).coerce_to('string')
                 var obtained = runOrCatch( r.binary("lorem ipsum".encode("ascii")).coerceTo("string") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #94
                 //ExpectedOriginal: b'foo'
                 var expected = "foo".getBytes(StandardCharsets.UTF_8);
                 
                 //Original: r.expr('foo').coerce_to('binary')
                 var obtained = runOrCatch( r.expr("foo").coerceTo("binary") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #95
                 //ExpectedOriginal: b'foo'
                 var expected = "foo".getBytes(StandardCharsets.UTF_8);
                 
                 //Original: r.binary(b'foo').coerce_to('binary')
                 var obtained = runOrCatch( r.binary("foo".getBytes(StandardCharsets.UTF_8)).coerceTo("binary") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #96
                 //ExpectedOriginal: b'ef'
                 var expected = "ef".getBytes(StandardCharsets.UTF_8);
                 
                 //Original: r.binary(b'abcdefg').slice(-3,-1)
                 var obtained = runOrCatch( r.binary("abcdefg".getBytes(StandardCharsets.UTF_8)).slice(-3, -1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #97
                 //ExpectedOriginal: b'ab'
                 var expected = "ab".getBytes(StandardCharsets.UTF_8);
                 
                 //Original: r.binary(b'abcdefg').slice(0, 2)
                 var obtained = runOrCatch( r.binary("abcdefg".getBytes(StandardCharsets.UTF_8)).slice(0, 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #98
                 //ExpectedOriginal: b'def'
                 var expected = "def".getBytes(StandardCharsets.UTF_8);
                 
                 //Original: r.binary(b'abcdefg').slice(3, -1)
                 var obtained = runOrCatch( r.binary("abcdefg".getBytes(StandardCharsets.UTF_8)).slice(3, -1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #99
                 //ExpectedOriginal: b'cde'
                 var expected = "cde".getBytes(StandardCharsets.UTF_8);
                 
                 //Original: r.binary(b'abcdefg').slice(-5, 5)
                 var obtained = runOrCatch( r.binary("abcdefg".getBytes(StandardCharsets.UTF_8)).slice(-5, 5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #100
                 //ExpectedOriginal: b'ab'
                 var expected = "ab".getBytes(StandardCharsets.UTF_8);
                 
                 //Original: r.binary(b'abcdefg').slice(-8, 2)
                 var obtained = runOrCatch( r.binary("abcdefg".getBytes(StandardCharsets.UTF_8)).slice(-8, 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #101
                 //ExpectedOriginal: b'fg'
                 var expected = "fg".getBytes(StandardCharsets.UTF_8);
                 
                 //Original: r.binary(b'abcdefg').slice(5, 7)
                 var obtained = runOrCatch( r.binary("abcdefg".getBytes(StandardCharsets.UTF_8)).slice(5, 7) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #102
                 //ExpectedOriginal: b'ab'
                 var expected = "ab".getBytes(StandardCharsets.UTF_8);
                 
                 //Original: r.binary(b'abcdefg').slice(-9, 2)
                 var obtained = runOrCatch( r.binary("abcdefg".getBytes(StandardCharsets.UTF_8)).slice(-9, 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #103
                 //ExpectedOriginal: b'fg'
                 var expected = "fg".getBytes(StandardCharsets.UTF_8);
                 
                 //Original: r.binary(b'abcdefg').slice(5, 9)
                 var obtained = runOrCatch( r.binary("abcdefg".getBytes(StandardCharsets.UTF_8)).slice(5, 9) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #104
                 //ExpectedOriginal: b
                 var expected = b;
                 
                 //Original: r.binary(b)
                 var obtained = runOrCatch( r.binary(b) ,
                                            new OptArgs()
                     .with("binary_format", native)
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #105
                 //ExpectedOriginal: ({'$reql_type$':'BINARY','data':'AAE='})
                 var expected = new MapObject().with("$reql_type$", "BINARY").with("data", "AAE=");
                 
                 //Original: r.binary(b)
                 var obtained = runOrCatch( r.binary(b) ,
                                            new OptArgs()
                     .with("binary_format", raw)
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #106
                 //ExpectedOriginal: (b"data")
                 var expected = "data".getBytes(StandardCharsets.UTF_8);
                 
                 //Original: r.binary(r.expr("data"))
                 var obtained = runOrCatch( r.binary(r.expr("data")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #107
                 //ExpectedOriginal: err('ReqlQueryLogicError', 'Expected type STRING but found OBJECT.', [])
                 var expected = err("ReqlQueryLogicError", "Expected type STRING but found OBJECT.", Arrays.asList());
                 
                 //Original: r.binary(r.expr({}))
                 var obtained = runOrCatch( r.binary(r.expr(new MapObject())) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #108
                 //ExpectedOriginal: err('ReqlQueryLogicError', 'Expected type STRING but found ARRAY.', [])
                 var expected = err("ReqlQueryLogicError", "Expected type STRING but found ARRAY.", Arrays.asList());
                 
                 //Original: r.binary(r.expr([]))
                 var obtained = runOrCatch( r.binary(r.expr(Arrays.asList())) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #109
                 //ExpectedOriginal: err('ReqlQueryLogicError','Invalid binary pseudotype:'+' lacking `data` key.',[])
                 var expected = err("ReqlQueryLogicError", "Invalid binary pseudotype:" + " lacking `data` key.", Arrays.asList());
                 
                 //Original: r.expr({'$reql_type$':'BINARY'})
                 var obtained = runOrCatch( r.expr(new MapObject().with("$reql_type$", "BINARY")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #110
                 //ExpectedOriginal: err('ReqlQueryLogicError','Invalid base64 format, data found after padding character \'=\'.',[])
                 var expected = err("ReqlQueryLogicError", "Invalid base64 format, data found after padding character '='.", Arrays.asList());
                 
                 //Original: r.expr({'$reql_type$':'BINARY','data':'ABCDEFGH==AA'})
                 var obtained = runOrCatch( r.expr(new MapObject().with("$reql_type$", "BINARY").with("data", "ABCDEFGH==AA")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #111
                 //ExpectedOriginal: err('ReqlQueryLogicError','Invalid base64 format, data found after padding character \'=\'.',[])
                 var expected = err("ReqlQueryLogicError", "Invalid base64 format, data found after padding character '='.", Arrays.asList());
                 
                 //Original: r.expr({'$reql_type$':'BINARY','data':'ABCDEF==$'})
                 var obtained = runOrCatch( r.expr(new MapObject().with("$reql_type$", "BINARY").with("data", "ABCDEF==$")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #112
                 //ExpectedOriginal: err('ReqlQueryLogicError','Invalid base64 character found:'+' \'^\'.',[])
                 var expected = err("ReqlQueryLogicError", "Invalid base64 character found:" + " '^'.", Arrays.asList());
                 
                 //Original: r.expr({'$reql_type$':'BINARY','data':'A^CDEFGH'})
                 var obtained = runOrCatch( r.expr(new MapObject().with("$reql_type$", "BINARY").with("data", "A^CDEFGH")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #113
                 //ExpectedOriginal: err('ReqlQueryLogicError','Invalid base64 length:'+' 1 character remaining, cannot decode a full byte.',[])
                 var expected = err("ReqlQueryLogicError", "Invalid base64 length:" + " 1 character remaining, cannot decode a full byte.", Arrays.asList());
                 
                 //Original: r.expr({'$reql_type$':'BINARY','data':'ABCDE'})
                 var obtained = runOrCatch( r.expr(new MapObject().with("$reql_type$", "BINARY").with("data", "ABCDE")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #114
                 //ExpectedOriginal: err('ReqlQueryLogicError','Cannot coerce BINARY to ARRAY.',[])
                 var expected = err("ReqlQueryLogicError", "Cannot coerce BINARY to ARRAY.", Arrays.asList());
                 
                 //Original: r.binary(a).coerce_to('array')
                 var obtained = runOrCatch( r.binary(a).coerceTo("array") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #115
                 //ExpectedOriginal: err('ReqlQueryLogicError','Cannot coerce BINARY to OBJECT.',[])
                 var expected = err("ReqlQueryLogicError", "Cannot coerce BINARY to OBJECT.", Arrays.asList());
                 
                 //Original: r.binary(a).coerce_to('object')
                 var obtained = runOrCatch( r.binary(a).coerceTo("object") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #116
                 //ExpectedOriginal: err('ReqlQueryLogicError','Cannot coerce BINARY to BOOL.',[])
                 var expected = err("ReqlQueryLogicError", "Cannot coerce BINARY to BOOL.", Arrays.asList());
                 
                 //Original: r.binary(a).coerce_to('bool')
                 var obtained = runOrCatch( r.binary(a).coerceTo("bool") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #117
                 //ExpectedOriginal: err('ReqlQueryLogicError','Cannot coerce BINARY to NUMBER.',[])
                 var expected = err("ReqlQueryLogicError", "Cannot coerce BINARY to NUMBER.", Arrays.asList());
                 
                 //Original: r.binary(a).coerce_to('number')
                 var obtained = runOrCatch( r.binary(a).coerceTo("number") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, datum/binary.yaml, #118
                 //ExpectedOriginal: err('ReqlQueryLogicError','Cannot coerce BINARY to NULL.',[])
                 var expected = err("ReqlQueryLogicError", "Cannot coerce BINARY to NULL.", Arrays.asList());
                 
                 //Original: r.binary(a).coerce_to('nu'+'ll')
                 var obtained = runOrCatch( r.binary(a).coerceTo(r.add("nu", "ll")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             

        }
    }
}
