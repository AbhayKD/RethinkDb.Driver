




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class Regression2709 : GeneratedTest {

            public static Table tbl = r.db(DbName).table("tbl");


        [Test]
        public void YamlTest(){

             TestCounter++;
             
             {
                 //JavaQuery, regression/2709.yaml, #1
                 /* ExpectedOriginal: ({'inserted':999}) */
                 var expected_ = r.hashMap("inserted", 999);
                 
                 /* Original: tbl.insert([{'result':i} for i in range(1,1000)]).pluck('first_error', 'inserted') */
                 var obtained = runOrCatch( tbl.insert(Enumerable.Range(1, 1000).Select(i => r.hashMap("result", i)).ToList()).pluck("first_error", "inserted") ,
                                            new OptArgs()
                     .with("min_batch_rows", 10)
                     .with("max_batch_rows", 13)
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/2709.yaml, #2
                 /* ExpectedOriginal: (999) */
                 var expected_ = 999;
                 
                 /* Original: tbl.map(lambda thing:'key').count() */
                 var obtained = runOrCatch( tbl.map(thing => "key").count() ,
                                            new OptArgs()
                     .with("min_batch_rows", 10)
                     .with("max_batch_rows", 13)
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/2709.yaml, #3
                 /* ExpectedOriginal: (999) */
                 var expected_ = 999;
                 
                 /* Original: tbl.map(lambda thing:'key').count() */
                 var obtained = runOrCatch( tbl.map(thing => "key").count() ,
                                            new OptArgs()
                     .with("min_batch_rows", 10)
                     .with("max_batch_rows", 13)
                    );
                 assertEquals(expected_, obtained);
             }
             

        }
    }
}
