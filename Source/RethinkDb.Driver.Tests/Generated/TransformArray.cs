




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class TransformArray : GeneratedTest {



        [Test]
        public void YamlTest(){

             
             //JavaDef, transform/array.yaml, #Templates.YamlTest+DefTest.
             //Original: arr = r.expr([1, 2, 3])
             
MakeArray arr = (MakeArray) r.expr(Arrays.asList(1, 2, 3));             
             
             //JavaDef, transform/array.yaml, #Templates.YamlTest+DefTest.
             //Original: dupe_arr = r.expr([1, 1, 2, 3])
             
MakeArray dupe_arr = (MakeArray) r.expr(Arrays.asList(1, 1, 2, 3));             
             
             //JavaDef, transform/array.yaml, #Templates.YamlTest+DefTest.
             //Original: objArr = r.expr([{'a':1, 'b':'a'}, {'a':2, 'b':'b'}, {'a':3, 'b':'c'}])
             
MakeArray objArr = (MakeArray) r.expr(Arrays.asList(new MapObject().with("a", 1).with("b", "a"), new MapObject().with("a", 2).with("b", "b"), new MapObject().with("a", 3).with("b", "c")));             
             
             //JavaDef, transform/array.yaml, #Templates.YamlTest+DefTest.
             //Original: nestedObjArr = r.expr([{'a':1, 'b':{'c':1}}, {'a':2, 'b':{'c':2}}, {'a':3, 'b':{'c':3}}])
             
MakeArray nestedObjArr = (MakeArray) r.expr(Arrays.asList(new MapObject().with("a", 1).with("b", new MapObject().with("c", 1)), new MapObject().with("a", 2).with("b", new MapObject().with("c", 2)), new MapObject().with("a", 3).with("b", new MapObject().with("c", 3))));             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #5
                 //ExpectedOriginal: [1, 2, 3, 4]
                 var expected = Arrays.asList(1, 2, 3, 4);
                 
                 //Original: arr.append(4)
                 var obtained = runOrCatch( arr.append(4) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #6
                 //ExpectedOriginal: [1, 2, 3, 'a']
                 var expected = Arrays.asList(1, 2, 3, "a");
                 
                 //Original: arr.append('a')
                 var obtained = runOrCatch( arr.append("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #7
                 //ExpectedOriginal: [0, 1, 2, 3]
                 var expected = Arrays.asList(0, 1, 2, 3);
                 
                 //Original: arr.prepend(0)
                 var obtained = runOrCatch( arr.prepend(0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #8
                 //ExpectedOriginal: ['a', 1, 2, 3]
                 var expected = Arrays.asList("a", 1, 2, 3);
                 
                 //Original: arr.prepend('a')
                 var obtained = runOrCatch( arr.prepend("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #9
                 //ExpectedOriginal: [3]
                 var expected = Arrays.asList(3);
                 
                 //Original: arr.difference([1,2,2])
                 var obtained = runOrCatch( arr.difference(Arrays.asList(1, 2, 2)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #10
                 //ExpectedOriginal: [1, 2, 3]
                 var expected = Arrays.asList(1, 2, 3);
                 
                 //Original: arr.difference([])
                 var obtained = runOrCatch( arr.difference(Arrays.asList()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #11
                 //ExpectedOriginal: [1, 2, 3]
                 var expected = Arrays.asList(1, 2, 3);
                 
                 //Original: arr.difference(["foo", "bar"])
                 var obtained = runOrCatch( arr.difference(Arrays.asList("foo", "bar")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #12
                 //ExpectedOriginal: [1, 2, 3]
                 var expected = Arrays.asList(1, 2, 3);
                 
                 //Original: dupe_arr.set_insert(1)
                 var obtained = runOrCatch( dupe_arr.setInsert(1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #13
                 //ExpectedOriginal: [1, 2, 3, 4]
                 var expected = Arrays.asList(1, 2, 3, 4);
                 
                 //Original: dupe_arr.set_insert(4)
                 var obtained = runOrCatch( dupe_arr.setInsert(4) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #14
                 //ExpectedOriginal: [1, 2, 3, 4, 5]
                 var expected = Arrays.asList(1, 2, 3, 4, 5);
                 
                 //Original: dupe_arr.set_union([3,4,5,5])
                 var obtained = runOrCatch( dupe_arr.setUnion(Arrays.asList(3, 4, 5, 5)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #15
                 //ExpectedOriginal: [1, 2, 3, 5, 6]
                 var expected = Arrays.asList(1, 2, 3, 5, 6);
                 
                 //Original: dupe_arr.set_union([5,6])
                 var obtained = runOrCatch( dupe_arr.setUnion(Arrays.asList(5, 6)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #16
                 //ExpectedOriginal: [1, 2]
                 var expected = Arrays.asList(1, 2);
                 
                 //Original: dupe_arr.set_intersection([1,1,1,2,2])
                 var obtained = runOrCatch( dupe_arr.setIntersection(Arrays.asList(1, 1, 1, 2, 2)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #17
                 //ExpectedOriginal: []
                 var expected = Arrays.asList();
                 
                 //Original: dupe_arr.set_intersection(["foo"])
                 var obtained = runOrCatch( dupe_arr.setIntersection(Arrays.asList("foo")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #18
                 //ExpectedOriginal: [2, 3]
                 var expected = Arrays.asList(2, 3);
                 
                 //Original: dupe_arr.set_difference([1,1,1,10])
                 var obtained = runOrCatch( dupe_arr.setDifference(Arrays.asList(1, 1, 1, 10)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #19
                 //ExpectedOriginal: [1, 3]
                 var expected = Arrays.asList(1, 3);
                 
                 //Original: dupe_arr.set_difference([2])
                 var obtained = runOrCatch( dupe_arr.setDifference(Arrays.asList(2)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #20
                 //ExpectedOriginal: [2, 3]
                 var expected = Arrays.asList(2, 3);
                 
                 //Original: arr[1:3]
                 var obtained = runOrCatch( arr.slice(1, 3) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #20
                 //ExpectedOriginal: [2, 3]
                 var expected = Arrays.asList(2, 3);
                 
                 //Original: arr.slice(1, 3)
                 var obtained = runOrCatch( arr.slice(1, 3) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #20
                 //ExpectedOriginal: [2, 3]
                 var expected = Arrays.asList(2, 3);
                 
                 //Original: arr.slice(1, 2, right_bound='closed')
                 var obtained = runOrCatch( arr.slice(1, 2).optArg("right_bound", "closed") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #21
                 //ExpectedOriginal: [1, 2]
                 var expected = Arrays.asList(1, 2);
                 
                 //Original: arr[:2]
                 var obtained = runOrCatch( arr.slice(0, 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #21
                 //ExpectedOriginal: [1, 2]
                 var expected = Arrays.asList(1, 2);
                 
                 //Original: arr.slice(0,2)
                 var obtained = runOrCatch( arr.slice(0, 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #22
                 //ExpectedOriginal: [2, 3]
                 var expected = Arrays.asList(2, 3);
                 
                 //Original: arr[1:]
                 var obtained = runOrCatch( arr.slice(1, -1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #22
                 //ExpectedOriginal: [2, 3]
                 var expected = Arrays.asList(2, 3);
                 
                 //Original: arr.slice(1)
                 var obtained = runOrCatch( arr.slice(1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #23
                 //ExpectedOriginal: [2]
                 var expected = Arrays.asList(2);
                 
                 //Original: arr.slice(-2, -1)
                 var obtained = runOrCatch( arr.slice(-2, -1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #24
                 //ExpectedOriginal: [2, 3]
                 var expected = Arrays.asList(2, 3);
                 
                 //Original: arr.skip(1)
                 var obtained = runOrCatch( arr.skip(1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #25
                 //ExpectedOriginal: [3]
                 var expected = Arrays.asList(3);
                 
                 //Original: arr.skip(2)
                 var obtained = runOrCatch( arr.skip(2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #26
                 //ExpectedOriginal: []
                 var expected = Arrays.asList();
                 
                 //Original: arr.skip(12)
                 var obtained = runOrCatch( arr.skip(12) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #27
                 //ExpectedOriginal: [1, 2]
                 var expected = Arrays.asList(1, 2);
                 
                 //Original: arr.limit(2)
                 var obtained = runOrCatch( arr.limit(2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #28
                 //ExpectedOriginal: []
                 var expected = Arrays.asList();
                 
                 //Original: arr.limit(0)
                 var obtained = runOrCatch( arr.limit(0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #29
                 //ExpectedOriginal: [1, 2, 3]
                 var expected = Arrays.asList(1, 2, 3);
                 
                 //Original: arr.limit(12)
                 var obtained = runOrCatch( arr.limit(12) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #30
                 //ExpectedOriginal: [{'a': 1, 'b': 'a'}, {'a': 2, 'b': 'b'}, {'a': 3, 'b': 'c'}]
                 var expected = Arrays.asList(new MapObject().with("a", 1).with("b", "a"), new MapObject().with("a", 2).with("b", "b"), new MapObject().with("a", 3).with("b", "c"));
                 
                 //Original: objArr.pluck('a', 'b')
                 var obtained = runOrCatch( objArr.pluck("a", "b") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #31
                 //ExpectedOriginal: [{'a': 1}, {'a': 2}, {'a': 3}]
                 var expected = Arrays.asList(new MapObject().with("a", 1), new MapObject().with("a", 2), new MapObject().with("a", 3));
                 
                 //Original: objArr.pluck('a')
                 var obtained = runOrCatch( objArr.pluck("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #32
                 //ExpectedOriginal: [{}, {}, {}]
                 var expected = Arrays.asList(new MapObject(), new MapObject(), new MapObject());
                 
                 //Original: objArr.pluck()
                 var obtained = runOrCatch( objArr.pluck() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             //JavaDef, transform/array.yaml, #Templates.YamlTest+DefTest.
             //Original: wftst = objArr.union(objArr.pluck('a')).union(objArr.pluck('b')).union([{'a':null}])
             
Union wftst = (Union) objArr.union(objArr.pluck("a")).union(objArr.pluck("b")).union(Arrays.asList(new MapObject().with("a", null)));             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #34
                 //ExpectedOriginal: ([{'a':1},{'a':2},{'a':3},{'a':1},{'a':2},{'a':3}])
                 var expected = Arrays.asList(new MapObject().with("a", 1), new MapObject().with("a", 2), new MapObject().with("a", 3), new MapObject().with("a", 1), new MapObject().with("a", 2), new MapObject().with("a", 3));
                 
                 //Original: wftst.with_fields('a')
                 var obtained = runOrCatch( wftst.withFields("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #35
                 //ExpectedOriginal: ([{'b':'a'},{'b':'b'},{'b':'c'},{'b':'a'},{'b':'b'},{'b':'c'}])
                 var expected = Arrays.asList(new MapObject().with("b", "a"), new MapObject().with("b", "b"), new MapObject().with("b", "c"), new MapObject().with("b", "a"), new MapObject().with("b", "b"), new MapObject().with("b", "c"));
                 
                 //Original: wftst.with_fields('b')
                 var obtained = runOrCatch( wftst.withFields("b") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #36
                 //ExpectedOriginal: ([{'a':1,'b':'a'},{'a':2,'b':'b'},{'a':3,'b':'c'}])
                 var expected = Arrays.asList(new MapObject().with("a", 1).with("b", "a"), new MapObject().with("a", 2).with("b", "b"), new MapObject().with("a", 3).with("b", "c"));
                 
                 //Original: wftst.with_fields('a', 'b')
                 var obtained = runOrCatch( wftst.withFields("a", "b") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #37
                 //ExpectedOriginal: [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}]
                 var expected = Arrays.asList(new MapObject(), new MapObject(), new MapObject(), new MapObject(), new MapObject(), new MapObject(), new MapObject(), new MapObject(), new MapObject(), new MapObject());
                 
                 //Original: wftst.with_fields()
                 var obtained = runOrCatch( wftst.withFields() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             //JavaDef, transform/array.yaml, #Templates.YamlTest+DefTest.
             //Original: wftst2 = nestedObjArr.union(objArr.pluck({'b':'missing'})).union(nestedObjArr.pluck({'b':'c'}))
             
Union wftst2 = (Union) nestedObjArr.union(objArr.pluck(new MapObject().with("b", "missing"))).union(nestedObjArr.pluck(new MapObject().with("b", "c")));             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #39
                 //ExpectedOriginal: ([{'b':{'c':1}}, {'b':{'c':2}}, {'b':{'c':3}}, {'b':{'c':1}}, {'b':{'c':2}}, {'b':{'c':3}}])
                 var expected = Arrays.asList(new MapObject().with("b", new MapObject().with("c", 1)), new MapObject().with("b", new MapObject().with("c", 2)), new MapObject().with("b", new MapObject().with("c", 3)), new MapObject().with("b", new MapObject().with("c", 1)), new MapObject().with("b", new MapObject().with("c", 2)), new MapObject().with("b", new MapObject().with("c", 3)));
                 
                 //Original: wftst2.with_fields({'b':'c'})
                 var obtained = runOrCatch( wftst2.withFields(new MapObject().with("b", "c")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #40
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Invalid path argument `1`.", [])
                 var expected = err("ReqlQueryLogicError", "Invalid path argument `1`.", Arrays.asList());
                 
                 //Original: wftst.with_fields(1)
                 var obtained = runOrCatch( wftst.withFields(1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #41
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Cannot perform has_fields on a non-object non-sequence `1`.", [])
                 var expected = err("ReqlQueryLogicError", "Cannot perform has_fields on a non-object non-sequence `1`.", Arrays.asList());
                 
                 //Original: r.expr(1).with_fields()
                 var obtained = runOrCatch( r.expr(1).withFields() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #42
                 //ExpectedOriginal: [{}, {}, {}]
                 var expected = Arrays.asList(new MapObject(), new MapObject(), new MapObject());
                 
                 //Original: objArr.without('a', 'b')
                 var obtained = runOrCatch( objArr.without("a", "b") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #43
                 //ExpectedOriginal: [{'b': 'a'}, {'b': 'b'}, {'b': 'c'}]
                 var expected = Arrays.asList(new MapObject().with("b", "a"), new MapObject().with("b", "b"), new MapObject().with("b", "c"));
                 
                 //Original: objArr.without('a')
                 var obtained = runOrCatch( objArr.without("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #44
                 //ExpectedOriginal: [{'a': 1, 'b': 'a'}, {'a': 2, 'b': 'b'}, {'a': 3, 'b': 'c'}]
                 var expected = Arrays.asList(new MapObject().with("a", 1).with("b", "a"), new MapObject().with("a", 2).with("b", "b"), new MapObject().with("a", 3).with("b", "c"));
                 
                 //Original: objArr.without()
                 var obtained = runOrCatch( objArr.without() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #45
                 //ExpectedOriginal: [2, 3, 4]
                 var expected = Arrays.asList(2, 3, 4);
                 
                 //Original: arr.map(lambda v: v + 1)
                 var obtained = runOrCatch( arr.map(v => r.add(v, 1)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #46
                 //ExpectedOriginal: 6
                 var expected = 6;
                 
                 //Original: arr.reduce(lambda a, b: a + b)
                 var obtained = runOrCatch( arr.reduce((a, b) => r.add(a, b)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #47
                 //ExpectedOriginal: 6
                 var expected = 6;
                 
                 //Original: arr.reduce(lambda a, b:a + b)
                 var obtained = runOrCatch( arr.reduce((a, b) => r.add(a, b)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #48
                 //ExpectedOriginal: 12
                 var expected = 12;
                 
                 //Original: arr.union(arr).reduce(lambda a, b: a + b)
                 var obtained = runOrCatch( arr.union(arr).reduce((a, b) => r.add(a, b)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #49
                 //ExpectedOriginal: 12
                 var expected = 12;
                 
                 //Original: arr.union(arr).reduce(lambda a, b:a + b)
                 var obtained = runOrCatch( arr.union(arr).reduce((a, b) => r.add(a, b)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #50
                 //ExpectedOriginal: [{'a': 2, 'b': 'b'}]
                 var expected = Arrays.asList(new MapObject().with("a", 2).with("b", "b"));
                 
                 //Original: objArr.filter(lambda row: row['b'] == 'b')
                 var obtained = runOrCatch( objArr.filter(row => r.eq(row.bracket("b"), "b")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #51
                 //ExpectedOriginal: [1, 2, 1, 2, 1, 2]
                 var expected = Arrays.asList(1, 2, 1, 2, 1, 2);
                 
                 //Original: arr.concat_map(lambda v: [1,2])
                 var obtained = runOrCatch( arr.concatMap(v => Arrays.asList(1, 2)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #52
                 //ExpectedOriginal: [{'v': 1}, {'v2': 2}, {'v': 2}, {'v2': 3}, {'v': 3}, {'v2': 4}]
                 var expected = Arrays.asList(new MapObject().with("v", 1), new MapObject().with("v2", 2), new MapObject().with("v", 2), new MapObject().with("v2", 3), new MapObject().with("v", 3), new MapObject().with("v2", 4));
                 
                 //Original: arr.concat_map(lambda v: [{'v':v}, {'v2':v + 1}])
                 var obtained = runOrCatch( arr.concatMap(v => Arrays.asList(new MapObject().with("v", v), new MapObject().with("v2", r.add(v, 1)))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #53
                 //ExpectedOriginal: [{'a': 1, 'b': 'a'}, {'a': 2, 'b': 'b'}, {'a': 3, 'b': 'c'}]
                 var expected = Arrays.asList(new MapObject().with("a", 1).with("b", "a"), new MapObject().with("a", 2).with("b", "b"), new MapObject().with("a", 3).with("b", "c"));
                 
                 //Original: objArr.order_by('b')
                 var obtained = runOrCatch( objArr.orderBy("b") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #54
                 //ExpectedOriginal: [{'a': 3, 'b': 'c'}, {'a': 2, 'b': 'b'}, {'a': 1, 'b': 'a'}]
                 var expected = Arrays.asList(new MapObject().with("a", 3).with("b", "c"), new MapObject().with("a", 2).with("b", "b"), new MapObject().with("a", 1).with("b", "a"));
                 
                 //Original: objArr.order_by(r.desc('b'))
                 var obtained = runOrCatch( objArr.orderBy(r.desc("b")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #55
                 //ExpectedOriginal: [{'-a': 1}, {'-a': 2}]
                 var expected = Arrays.asList(new MapObject().with("-a", 1), new MapObject().with("-a", 2));
                 
                 //Original: r.expr([{'-a':1},{'-a':2}]).order_by('-a')
                 var obtained = runOrCatch( r.expr(Arrays.asList(new MapObject().with("-a", 1), new MapObject().with("-a", 2))).orderBy("-a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #56
                 //ExpectedOriginal: [1, 2, 3, 4]
                 var expected = Arrays.asList(1, 2, 3, 4);
                 
                 //Original: r.expr([1,1,2,2,2,3,4]).distinct()
                 var obtained = runOrCatch( r.expr(Arrays.asList(1, 1, 2, 2, 2, 3, 4)).distinct() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #57
                 //ExpectedOriginal: 3
                 var expected = 3;
                 
                 //Original: objArr.count()
                 var obtained = runOrCatch( objArr.count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #58
                 //ExpectedOriginal: [1, 2, 3, {'a': 1, 'b': 'a'}, {'a': 2, 'b': 'b'}, {'a': 3, 'b': 'c'}]
                 var expected = Arrays.asList(1, 2, 3, new MapObject().with("a", 1).with("b", "a"), new MapObject().with("a", 2).with("b", "b"), new MapObject().with("a", 3).with("b", "c"));
                 
                 //Original: arr.union(objArr)
                 var obtained = runOrCatch( arr.union(objArr) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #59
                 //ExpectedOriginal: 2
                 var expected = 2;
                 
                 //Original: arr[1]
                 var obtained = runOrCatch( arr.bracket(1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #59
                 //ExpectedOriginal: 2
                 var expected = 2;
                 
                 //Original: arr.nth(1)
                 var obtained = runOrCatch( arr.nth(1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #60
                 //ExpectedOriginal: 1
                 var expected = 1;
                 
                 //Original: arr[0]
                 var obtained = runOrCatch( arr.bracket(0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #61
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.expr([]).is_empty()
                 var obtained = runOrCatch( r.expr(Arrays.asList()).isEmpty() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #62
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: arr.is_empty()
                 var obtained = runOrCatch( arr.isEmpty() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #63
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: arr.contains(2)
                 var obtained = runOrCatch( arr.contains(2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #64
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: arr.contains(2, 3)
                 var obtained = runOrCatch( arr.contains(2, 3) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #65
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: arr.contains(4)
                 var obtained = runOrCatch( arr.contains(4) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #66
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: arr.contains(2, 4)
                 var obtained = runOrCatch( arr.contains(2, 4) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #67
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: arr.contains(2, 2)
                 var obtained = runOrCatch( arr.contains(2, 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #68
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: arr.union(arr).contains(2, 2)
                 var obtained = runOrCatch( arr.union(arr).contains(2, 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #69
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: arr.contains(lambda x:x == 2)
                 var obtained = runOrCatch( arr.contains(x => r.eq(x, 2)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #70
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: arr.contains(lambda x:x == 2, lambda x:x==3)
                 var obtained = runOrCatch( arr.contains(x => r.eq(x, 2), x => r.eq(x, 3)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #71
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: arr.contains(lambda x:x == 4)
                 var obtained = runOrCatch( arr.contains(x => r.eq(x, 4)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #72
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: arr.contains(lambda x:x == 2, lambda x:x==4)
                 var obtained = runOrCatch( arr.contains(x => r.eq(x, 2), x => r.eq(x, 4)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #73
                 //ExpectedOriginal: False
                 var expected = false;
                 
                 //Original: arr.contains(lambda x:x == 2, lambda x:x==2)
                 var obtained = runOrCatch( arr.contains(x => r.eq(x, 2), x => r.eq(x, 2)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #74
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: arr.union(arr).contains(lambda x:x == 2, lambda x:x==2)
                 var obtained = runOrCatch( arr.union(arr).contains(x => r.eq(x, 2), x => r.eq(x, 2)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #75
                 //ExpectedOriginal: [1, 3]
                 var expected = Arrays.asList(1, 3);
                 
                 //Original: r.expr([{'a':1},{'b':2},{'a':3,'c':4}])['a']
                 var obtained = runOrCatch( r.expr(Arrays.asList(new MapObject().with("a", 1), new MapObject().with("b", 2), new MapObject().with("a", 3).with("c", 4))).bracket("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, transform/array.yaml, #76
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\"a\"`.", [])
                 var expected = err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\"a\"`.", Arrays.asList());
                 
                 //Original: r.expr([{'a':1},'a',{'b':2},{'a':3,'c':4}])['a']
                 var obtained = runOrCatch( r.expr(Arrays.asList(new MapObject().with("a", 1), "a", new MapObject().with("b", 2), new MapObject().with("a", 3).with("c", 4))).bracket("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             

        }
    }
}
