




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class MathLogicAliases : GeneratedTest {



        [Test]
        public void YamlTest(){

             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #1
                 //ExpectedOriginal: 1
                 var expected = 1.0;
                 
                 //Original: r.expr(0).add(1)
                 var obtained = runOrCatch( r.expr(0.0).add(1.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #1
                 //ExpectedOriginal: 1
                 var expected = 1.0;
                 
                 //Original: r.add(0, 1)
                 var obtained = runOrCatch( r.add(0.0, 1.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #1
                 //ExpectedOriginal: 1
                 var expected = 1.0;
                 
                 //Original: r.expr(2).sub(1)
                 var obtained = runOrCatch( r.expr(2.0).sub(1.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #1
                 //ExpectedOriginal: 1
                 var expected = 1.0;
                 
                 //Original: r.sub(2, 1)
                 var obtained = runOrCatch( r.sub(2.0, 1.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #1
                 //ExpectedOriginal: 1
                 var expected = 1.0;
                 
                 //Original: r.expr(2).div(2)
                 var obtained = runOrCatch( r.expr(2.0).div(2.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #1
                 //ExpectedOriginal: 1
                 var expected = 1.0;
                 
                 //Original: r.div(2, 2)
                 var obtained = runOrCatch( r.div(2.0, 2.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #1
                 //ExpectedOriginal: 1
                 var expected = 1.0;
                 
                 //Original: r.expr(1).mul(1)
                 var obtained = runOrCatch( r.expr(1.0).mul(1.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #1
                 //ExpectedOriginal: 1
                 var expected = 1.0;
                 
                 //Original: r.mul(1, 1)
                 var obtained = runOrCatch( r.mul(1.0, 1.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #1
                 //ExpectedOriginal: 1
                 var expected = 1.0;
                 
                 //Original: r.expr(1).mod(2)
                 var obtained = runOrCatch( r.expr(1.0).mod(2.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #1
                 //ExpectedOriginal: 1
                 var expected = 1.0;
                 
                 //Original: r.mod(1, 2)
                 var obtained = runOrCatch( r.mod(1.0, 2.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #2
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.expr(True).and_(True)
                 var obtained = runOrCatch( r.expr(true).and(true) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #2
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.expr(True).or_(True)
                 var obtained = runOrCatch( r.expr(true).or(true) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #2
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.and_(True, True)
                 var obtained = runOrCatch( r.and(true, true) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #2
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.or_(True, True)
                 var obtained = runOrCatch( r.or(true, true) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #2
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.expr(False).not_()
                 var obtained = runOrCatch( r.expr(false).not() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #2
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.not_(False)
                 var obtained = runOrCatch( r.not(false) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #3
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.expr(1).eq(1)
                 var obtained = runOrCatch( r.expr(1.0).eq(1.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #3
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.expr(1).ne(2)
                 var obtained = runOrCatch( r.expr(1.0).ne(2.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #3
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.expr(1).lt(2)
                 var obtained = runOrCatch( r.expr(1.0).lt(2.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #3
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.expr(1).gt(0)
                 var obtained = runOrCatch( r.expr(1.0).gt(0.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #3
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.expr(1).le(1)
                 var obtained = runOrCatch( r.expr(1.0).le(1.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #3
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.expr(1).ge(1)
                 var obtained = runOrCatch( r.expr(1.0).ge(1.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #3
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.eq(1, 1)
                 var obtained = runOrCatch( r.eq(1.0, 1.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #3
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.ne(1, 2)
                 var obtained = runOrCatch( r.ne(1.0, 2.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #3
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.lt(1, 2)
                 var obtained = runOrCatch( r.lt(1.0, 2.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #3
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.gt(1, 0)
                 var obtained = runOrCatch( r.gt(1.0, 0.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #3
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.le(1, 1)
                 var obtained = runOrCatch( r.le(1.0, 1.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/aliases.yaml, #3
                 //ExpectedOriginal: True
                 var expected = true;
                 
                 //Original: r.ge(1, 1)
                 var obtained = runOrCatch( r.ge(1.0, 1.0) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             

        }
    }
}
