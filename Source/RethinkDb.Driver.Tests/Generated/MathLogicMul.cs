




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class MathLogicMul : GeneratedTest {



        [Test]
        public void YamlTest(){

             TestCounter++;
             
             {
                 //JavaQuery, math_logic/mul.yaml, #1
                 /* ExpectedOriginal: 2 */
                 var expected_ = 2;
                 
                 /* Original: (r.expr(1) * 2) */
                 var obtained = runOrCatch( r.expr(1).mul(2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/mul.yaml, #1
                 /* ExpectedOriginal: 2 */
                 var expected_ = 2;
                 
                 /* Original: (1 * r.expr(2)) */
                 var obtained = runOrCatch( r.mul(1, r.expr(2)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/mul.yaml, #1
                 /* ExpectedOriginal: 2 */
                 var expected_ = 2;
                 
                 /* Original: (r.expr(1).mul(2)) */
                 var obtained = runOrCatch( r.expr(1).mul(2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/mul.yaml, #2
                 /* ExpectedOriginal: 1 */
                 var expected_ = 1;
                 
                 /* Original: r.expr(-1) * -1 */
                 var obtained = runOrCatch( r.expr(-1).mul(-1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/mul.yaml, #3
                 /* ExpectedOriginal: 6.75 */
                 var expected_ = 6.75;
                 
                 /* Original: r.expr(1.5) * 4.5 */
                 var obtained = runOrCatch( r.expr(1.5).mul(4.5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/mul.yaml, #4
                 /* ExpectedOriginal: [1, 2, 3, 1, 2, 3, 1, 2, 3] */
                 var expected_ = r.array(1, 2, 3, 1, 2, 3, 1, 2, 3);
                 
                 /* Original: r.expr([1,2,3]) * 3 */
                 var obtained = runOrCatch( r.expr(r.array(1, 2, 3)).mul(3) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/mul.yaml, #9
                 /* ExpectedOriginal: err('ReqlQueryLogicError', 'Expected type NUMBER but found STRING.', [0]) */
                 var expected_ = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", r.array(0));
                 
                 /* Original: r.expr('a') * 0.8 */
                 var obtained = runOrCatch( r.expr("a").mul(0.8) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/mul.yaml, #10
                 /* ExpectedOriginal: err('ReqlQueryLogicError', 'Expected type NUMBER but found STRING.', [1]) */
                 var expected_ = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", r.array(1));
                 
                 /* Original: r.expr(1) * 'a' */
                 var obtained = runOrCatch( r.expr(1).mul("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/mul.yaml, #11
                 /* ExpectedOriginal: err('ReqlQueryLogicError', 'Expected type NUMBER but found STRING.', [0]) */
                 var expected_ = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", r.array(0));
                 
                 /* Original: r.expr('b') * 'a' */
                 var obtained = runOrCatch( r.expr("b").mul("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/mul.yaml, #12
                 /* ExpectedOriginal: err('ReqlQueryLogicError', 'Number not an integer: 1.5', [0]) */
                 var expected_ = err("ReqlQueryLogicError", "Number not an integer: 1.5", r.array(0));
                 
                 /* Original: r.expr([]) * 1.5 */
                 var obtained = runOrCatch( r.expr(r.array()).mul(1.5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             

        }
    }
}
