




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class DatumString : GeneratedTest {



        [Test]
        public void YamlTest(){

             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #1
                 /* ExpectedOriginal: str */
                 var expected = "str";
                 
                 /* Original: r.expr('str') */
                 var obtained = runOrCatch( r.expr("str") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #2
                 /* ExpectedOriginal: "str" */
                 var expected = "str";
                 
                 /* Original: r.expr("str") */
                 var obtained = runOrCatch( r.expr("str") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #3
                 /* ExpectedOriginal: str */
                 var expected = "str";
                 
                 /* Original: r.expr(u'str') */
                 var obtained = runOrCatch( r.expr("str") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #4
                 /* ExpectedOriginal: 'こんにちは' */
                 var expected = "\u3053\u3093\u306b\u3061\u306f";
                 
                 /* Original: r.expr(u'こんにちは') */
                 var obtained = runOrCatch( r.expr("\u3053\u3093\u306b\u3061\u306f") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #5
                 /* ExpectedOriginal: STRING */
                 var expected = "STRING";
                 
                 /* Original: r.expr('foo').type_of() */
                 var obtained = runOrCatch( r.expr("foo").typeOf() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #6
                 /* ExpectedOriginal: ('foo') */
                 var expected = "foo";
                 
                 /* Original: r.expr('foo').coerce_to('string') */
                 var obtained = runOrCatch( r.expr("foo").coerceTo("string") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #7
                 /* ExpectedOriginal: -1.2 */
                 var expected = -1.2;
                 
                 /* Original: r.expr('-1.2').coerce_to('NUMBER') */
                 var obtained = runOrCatch( r.expr("-1.2").coerceTo("NUMBER") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #8
                 /* ExpectedOriginal: err("ReqlQueryLogicError", "Could not coerce `--1.2` to NUMBER.", []) */
                 var expected = err("ReqlQueryLogicError", "Could not coerce `--1.2` to NUMBER.", r.array());
                 
                 /* Original: r.expr('--1.2').coerce_to('NUMBER') */
                 var obtained = runOrCatch( r.expr("--1.2").coerceTo("NUMBER") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #9
                 /* ExpectedOriginal: err("ReqlQueryLogicError", "Could not coerce `-1.2-` to NUMBER.", []) */
                 var expected = err("ReqlQueryLogicError", "Could not coerce `-1.2-` to NUMBER.", r.array());
                 
                 /* Original: r.expr('-1.2-').coerce_to('NUMBER') */
                 var obtained = runOrCatch( r.expr("-1.2-").coerceTo("NUMBER") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #10
                 /* ExpectedOriginal: 10 */
                 var expected = 10;
                 
                 /* Original: r.expr('0xa').coerce_to('NUMBER') */
                 var obtained = runOrCatch( r.expr("0xa").coerceTo("NUMBER") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #11
                 /* ExpectedOriginal: err("ReqlQueryLogicError", "Non-finite number: inf", [])
 */
                 var expected = err("ReqlQueryLogicError", "Non-finite number: inf", r.array());
                 
                 /* Original: r.expr('inf').coerce_to('NUMBER') */
                 var obtained = runOrCatch( r.expr("inf").coerceTo("NUMBER") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #12
                 /* ExpectedOriginal: ([]) */
                 var expected = r.array();
                 
                 /* Original: r.expr('').split() */
                 var obtained = runOrCatch( r.expr("").split() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #13
                 /* ExpectedOriginal: ([]) */
                 var expected = r.array();
                 
                 /* Original: r.expr('').split(null) */
                 var obtained = runOrCatch( r.expr("").split((ReqlExpr) null) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #14
                 /* ExpectedOriginal: (['']) */
                 var expected = r.array("");
                 
                 /* Original: r.expr('').split(' ') */
                 var obtained = runOrCatch( r.expr("").split(" ") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #15
                 /* ExpectedOriginal: ([]) */
                 var expected = r.array();
                 
                 /* Original: r.expr('').split('') */
                 var obtained = runOrCatch( r.expr("").split("") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #16
                 /* ExpectedOriginal: ([]) */
                 var expected = r.array();
                 
                 /* Original: r.expr('').split(null, 5) */
                 var obtained = runOrCatch( r.expr("").split((ReqlExpr) null, 5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #17
                 /* ExpectedOriginal: (['']) */
                 var expected = r.array("");
                 
                 /* Original: r.expr('').split(' ', 5) */
                 var obtained = runOrCatch( r.expr("").split(" ", 5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #18
                 /* ExpectedOriginal: ([]) */
                 var expected = r.array();
                 
                 /* Original: r.expr('').split('', 5) */
                 var obtained = runOrCatch( r.expr("").split("", 5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #19
                 /* ExpectedOriginal: (['aaaa', 'bbbb', 'cccc']) */
                 var expected = r.array("aaaa", "bbbb", "cccc");
                 
                 /* Original: r.expr('aaaa bbbb  cccc ').split() */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc ").split() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #20
                 /* ExpectedOriginal: (['aaaa', 'bbbb', 'cccc']) */
                 var expected = r.array("aaaa", "bbbb", "cccc");
                 
                 /* Original: r.expr('aaaa bbbb  cccc ').split(null) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc ").split((ReqlExpr) null) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #21
                 /* ExpectedOriginal: (['aaaa', 'bbbb', '', 'cccc', '']) */
                 var expected = r.array("aaaa", "bbbb", "", "cccc", "");
                 
                 /* Original: r.expr('aaaa bbbb  cccc ').split(' ') */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc ").split(" ") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #22
                 /* ExpectedOriginal: (['a', 'a', 'a', 'a', ' ', 'b', 'b', 'b', 'b', ' ', ' ', 'c', 'c', 'c', 'c', ' ']) */
                 var expected = r.array("a", "a", "a", "a", " ", "b", "b", "b", "b", " ", " ", "c", "c", "c", "c", " ");
                 
                 /* Original: r.expr('aaaa bbbb  cccc ').split('') */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc ").split("") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #23
                 /* ExpectedOriginal: (['aaaa ', '', '', '', '  cccc ']) */
                 var expected = r.array("aaaa ", "", "", "", "  cccc ");
                 
                 /* Original: r.expr('aaaa bbbb  cccc ').split('b') */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc ").split("b") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #24
                 /* ExpectedOriginal: (['aaaa ', '', '  cccc ']) */
                 var expected = r.array("aaaa ", "", "  cccc ");
                 
                 /* Original: r.expr('aaaa bbbb  cccc ').split('bb') */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc ").split("bb") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #25
                 /* ExpectedOriginal: (['aaaa', 'cccc ']) */
                 var expected = r.array("aaaa", "cccc ");
                 
                 /* Original: r.expr('aaaa bbbb  cccc ').split(' bbbb  ') */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc ").split(" bbbb  ") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #26
                 /* ExpectedOriginal: (['aaaa ', '', '  cccc b d ', ' e ', '', ' f']) */
                 var expected = r.array("aaaa ", "", "  cccc b d ", " e ", "", " f");
                 
                 /* Original: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split('bb') */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc b d bb e bbbb f").split("bb") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #27
                 /* ExpectedOriginal: (['aaaa', 'cccc b d bb e bbbb f']) */
                 var expected = r.array("aaaa", "cccc b d bb e bbbb f");
                 
                 /* Original: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ') */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #28
                 /* ExpectedOriginal: (['aaaa', 'cccc b d bb e', 'f']) */
                 var expected = r.array("aaaa", "cccc b d bb e", "f");
                 
                 /* Original: r.expr('aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ') */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #29
                 /* ExpectedOriginal: (['aaaa', 'bbbb', 'cccc']) */
                 var expected = r.array("aaaa", "bbbb", "cccc");
                 
                 /* Original: r.expr('aaaa bbbb  cccc ').split(null, 3) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc ").split((ReqlExpr) null, 3) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #30
                 /* ExpectedOriginal: (['aaaa', 'bbbb', '', 'cccc', '']) */
                 var expected = r.array("aaaa", "bbbb", "", "cccc", "");
                 
                 /* Original: r.expr('aaaa bbbb  cccc ').split(' ', 5) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc ").split(" ", 5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #31
                 /* ExpectedOriginal: (['a', 'a', 'a', 'a', ' ', 'bbbb  cccc ']) */
                 var expected = r.array("a", "a", "a", "a", " ", "bbbb  cccc ");
                 
                 /* Original: r.expr('aaaa bbbb  cccc ').split('', 5) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc ").split("", 5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #32
                 /* ExpectedOriginal: (['aaaa ', '', '', '', '  cccc ']) */
                 var expected = r.array("aaaa ", "", "", "", "  cccc ");
                 
                 /* Original: r.expr('aaaa bbbb  cccc ').split('b', 5) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc ").split("b", 5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #33
                 /* ExpectedOriginal: (['aaaa ', '', '  cccc ']) */
                 var expected = r.array("aaaa ", "", "  cccc ");
                 
                 /* Original: r.expr('aaaa bbbb  cccc ').split('bb', 3) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc ").split("bb", 3) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #34
                 /* ExpectedOriginal: (['aaaa', 'cccc ']) */
                 var expected = r.array("aaaa", "cccc ");
                 
                 /* Original: r.expr('aaaa bbbb  cccc ').split(' bbbb  ', 2) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc ").split(" bbbb  ", 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #35
                 /* ExpectedOriginal: (['aaaa ', '', '  cccc b d ', ' e ', '', ' f']) */
                 var expected = r.array("aaaa ", "", "  cccc b d ", " e ", "", " f");
                 
                 /* Original: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split('bb', 6) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc b d bb e bbbb f").split("bb", 6) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #36
                 /* ExpectedOriginal: (['aaaa', 'cccc b d bb e bbbb f']) */
                 var expected = r.array("aaaa", "cccc b d bb e bbbb f");
                 
                 /* Original: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 2) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #37
                 /* ExpectedOriginal: (['aaaa', 'cccc b d bb e', 'f']) */
                 var expected = r.array("aaaa", "cccc b d bb e", "f");
                 
                 /* Original: r.expr('aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 3) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 3) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #38
                 /* ExpectedOriginal: (['aaaa', 'bbbb', 'cccc ']) */
                 var expected = r.array("aaaa", "bbbb", "cccc ");
                 
                 /* Original: r.expr('aaaa bbbb  cccc ').split(null, 2) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc ").split((ReqlExpr) null, 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #39
                 /* ExpectedOriginal: (["a", "b"]) */
                 var expected = r.array("a", "b");
                 
                 /* Original: r.expr("a  b  ").split(null, 2) */
                 var obtained = runOrCatch( r.expr("a  b  ").split((ReqlExpr) null, 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #40
                 /* ExpectedOriginal: (['aaaa', 'bbbb', '', 'cccc', '']) */
                 var expected = r.array("aaaa", "bbbb", "", "cccc", "");
                 
                 /* Original: r.expr('aaaa bbbb  cccc ').split(' ', 4) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc ").split(" ", 4) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #41
                 /* ExpectedOriginal: (['a', 'a', 'a', 'a', ' bbbb  cccc ']) */
                 var expected = r.array("a", "a", "a", "a", " bbbb  cccc ");
                 
                 /* Original: r.expr('aaaa bbbb  cccc ').split('', 4) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc ").split("", 4) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #42
                 /* ExpectedOriginal: (['aaaa ', '', '', '', '  cccc ']) */
                 var expected = r.array("aaaa ", "", "", "", "  cccc ");
                 
                 /* Original: r.expr('aaaa bbbb  cccc ').split('b', 4) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc ").split("b", 4) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #43
                 /* ExpectedOriginal: (['aaaa ', '', '  cccc ']) */
                 var expected = r.array("aaaa ", "", "  cccc ");
                 
                 /* Original: r.expr('aaaa bbbb  cccc ').split('bb', 2) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc ").split("bb", 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #44
                 /* ExpectedOriginal: (['aaaa', 'cccc ']) */
                 var expected = r.array("aaaa", "cccc ");
                 
                 /* Original: r.expr('aaaa bbbb  cccc ').split(' bbbb  ', 1) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc ").split(" bbbb  ", 1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #45
                 /* ExpectedOriginal: (['aaaa ', '', '  cccc b d ', ' e ', '', ' f']) */
                 var expected = r.array("aaaa ", "", "  cccc b d ", " e ", "", " f");
                 
                 /* Original: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split('bb', 5) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc b d bb e bbbb f").split("bb", 5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #46
                 /* ExpectedOriginal: (['aaaa', 'cccc b d bb e bbbb f']) */
                 var expected = r.array("aaaa", "cccc b d bb e bbbb f");
                 
                 /* Original: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 1) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #47
                 /* ExpectedOriginal: (['aaaa', 'cccc b d bb e', 'f']) */
                 var expected = r.array("aaaa", "cccc b d bb e", "f");
                 
                 /* Original: r.expr('aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 2) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #48
                 /* ExpectedOriginal: (['aaaa', 'bbbb  cccc ']) */
                 var expected = r.array("aaaa", "bbbb  cccc ");
                 
                 /* Original: r.expr('aaaa bbbb  cccc ').split(null, 1) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc ").split((ReqlExpr) null, 1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #49
                 /* ExpectedOriginal: (['aaaa', 'bbbb', ' cccc ']) */
                 var expected = r.array("aaaa", "bbbb", " cccc ");
                 
                 /* Original: r.expr('aaaa bbbb  cccc ').split(' ', 2) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc ").split(" ", 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #50
                 /* ExpectedOriginal: (['a', 'a', 'aa bbbb  cccc ']) */
                 var expected = r.array("a", "a", "aa bbbb  cccc ");
                 
                 /* Original: r.expr('aaaa bbbb  cccc ').split('', 2) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc ").split("", 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #51
                 /* ExpectedOriginal: (['aaaa ', '', 'bb  cccc ']) */
                 var expected = r.array("aaaa ", "", "bb  cccc ");
                 
                 /* Original: r.expr('aaaa bbbb  cccc ').split('b', 2) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc ").split("b", 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #52
                 /* ExpectedOriginal: (['aaaa ', '', '  cccc ']) */
                 var expected = r.array("aaaa ", "", "  cccc ");
                 
                 /* Original: r.expr('aaaa bbbb  cccc ').split('bb', 2) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc ").split("bb", 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #53
                 /* ExpectedOriginal: (['aaaa', 'cccc ']) */
                 var expected = r.array("aaaa", "cccc ");
                 
                 /* Original: r.expr('aaaa bbbb  cccc ').split(' bbbb  ', 2) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc ").split(" bbbb  ", 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #54
                 /* ExpectedOriginal: (['aaaa ', '', '  cccc b d bb e bbbb f']) */
                 var expected = r.array("aaaa ", "", "  cccc b d bb e bbbb f");
                 
                 /* Original: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split('bb', 2) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc b d bb e bbbb f").split("bb", 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #55
                 /* ExpectedOriginal: (['aaaa', 'cccc b d bb e bbbb f']) */
                 var expected = r.array("aaaa", "cccc b d bb e bbbb f");
                 
                 /* Original: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 2) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #56
                 /* ExpectedOriginal: (['aaaa', 'cccc b d bb e', 'f']) */
                 var expected = r.array("aaaa", "cccc b d bb e", "f");
                 
                 /* Original: r.expr('aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 2) */
                 var obtained = runOrCatch( r.expr("aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #57
                 /* ExpectedOriginal: ([]) */
                 var expected = r.array();
                 
                 /* Original: r.expr('  ').split() */
                 var obtained = runOrCatch( r.expr("  ").split() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #58
                 /* ExpectedOriginal: ([]) */
                 var expected = r.array();
                 
                 /* Original: r.expr('  ').split(null) */
                 var obtained = runOrCatch( r.expr("  ").split((ReqlExpr) null) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #59
                 /* ExpectedOriginal: (['', '', '']) */
                 var expected = r.array("", "", "");
                 
                 /* Original: r.expr('  ').split(' ') */
                 var obtained = runOrCatch( r.expr("  ").split(" ") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #60
                 /* ExpectedOriginal: ([]) */
                 var expected = r.array();
                 
                 /* Original: r.expr('  ').split(null, 5) */
                 var obtained = runOrCatch( r.expr("  ").split((ReqlExpr) null, 5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #61
                 /* ExpectedOriginal: (['', '', '']) */
                 var expected = r.array("", "", "");
                 
                 /* Original: r.expr('  ').split(' ', 5) */
                 var obtained = runOrCatch( r.expr("  ").split(" ", 5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #62
                 /* ExpectedOriginal: (['aaaa', 'bbbb', 'cccc']) */
                 var expected = r.array("aaaa", "bbbb", "cccc");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc ').split() */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc ").split() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #63
                 /* ExpectedOriginal: (['aaaa', 'bbbb', 'cccc']) */
                 var expected = r.array("aaaa", "bbbb", "cccc");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc ').split(null) */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc ").split((ReqlExpr) null) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #64
                 /* ExpectedOriginal: (['', '', 'aaaa', 'bbbb', '', 'cccc', '']) */
                 var expected = r.array("", "", "aaaa", "bbbb", "", "cccc", "");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc ').split(' ') */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc ").split(" ") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #65
                 /* ExpectedOriginal: (['  aaaa ', '', '', '', '  cccc ']) */
                 var expected = r.array("  aaaa ", "", "", "", "  cccc ");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc ').split('b') */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc ").split("b") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #66
                 /* ExpectedOriginal: (['  aaaa ', '', '  cccc ']) */
                 var expected = r.array("  aaaa ", "", "  cccc ");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc ').split('bb') */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc ").split("bb") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #67
                 /* ExpectedOriginal: (['  aaaa', 'cccc ']) */
                 var expected = r.array("  aaaa", "cccc ");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc ').split(' bbbb  ') */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc ").split(" bbbb  ") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #68
                 /* ExpectedOriginal: (['  aaaa ', '', '  cccc b d ', ' e ', '', ' f']) */
                 var expected = r.array("  aaaa ", "", "  cccc b d ", " e ", "", " f");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split('bb') */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split("bb") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #69
                 /* ExpectedOriginal: (['  aaaa', 'cccc b d bb e bbbb f']) */
                 var expected = r.array("  aaaa", "cccc b d bb e bbbb f");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ') */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #70
                 /* ExpectedOriginal: (['  aaaa', 'cccc b d bb e', 'f']) */
                 var expected = r.array("  aaaa", "cccc b d bb e", "f");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ') */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #71
                 /* ExpectedOriginal: (['aaaa', 'bbbb', 'cccc']) */
                 var expected = r.array("aaaa", "bbbb", "cccc");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc ').split(null, 3) */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc ").split((ReqlExpr) null, 3) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #72
                 /* ExpectedOriginal: (['', '', 'aaaa', 'bbbb', '', 'cccc ']) */
                 var expected = r.array("", "", "aaaa", "bbbb", "", "cccc ");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc ').split(' ', 5) */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc ").split(" ", 5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #73
                 /* ExpectedOriginal: (['  aaaa ', '', '', '', '  cccc ']) */
                 var expected = r.array("  aaaa ", "", "", "", "  cccc ");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc ').split('b', 5) */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc ").split("b", 5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #74
                 /* ExpectedOriginal: (['  aaaa ', '', '  cccc ']) */
                 var expected = r.array("  aaaa ", "", "  cccc ");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc ').split('bb', 3) */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc ").split("bb", 3) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #75
                 /* ExpectedOriginal: (['  aaaa', 'cccc ']) */
                 var expected = r.array("  aaaa", "cccc ");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc ').split(' bbbb  ', 2) */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc ").split(" bbbb  ", 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #76
                 /* ExpectedOriginal: (['  aaaa ', '', '  cccc b d ', ' e ', '', ' f']) */
                 var expected = r.array("  aaaa ", "", "  cccc b d ", " e ", "", " f");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split('bb', 6) */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split("bb", 6) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #77
                 /* ExpectedOriginal: (['  aaaa', 'cccc b d bb e bbbb f']) */
                 var expected = r.array("  aaaa", "cccc b d bb e bbbb f");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 2) */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #78
                 /* ExpectedOriginal: (['  aaaa', 'cccc b d bb e', 'f']) */
                 var expected = r.array("  aaaa", "cccc b d bb e", "f");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 3) */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 3) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #79
                 /* ExpectedOriginal: (['aaaa', 'bbbb', 'cccc ']) */
                 var expected = r.array("aaaa", "bbbb", "cccc ");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc ').split(null, 2) */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc ").split((ReqlExpr) null, 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #80
                 /* ExpectedOriginal: (["a", "b"]) */
                 var expected = r.array("a", "b");
                 
                 /* Original: r.expr("a  b  ").split(null, 2) */
                 var obtained = runOrCatch( r.expr("a  b  ").split((ReqlExpr) null, 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #81
                 /* ExpectedOriginal: (['', '', 'aaaa', 'bbbb', ' cccc ']) */
                 var expected = r.array("", "", "aaaa", "bbbb", " cccc ");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc ').split(' ', 4) */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc ").split(" ", 4) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #82
                 /* ExpectedOriginal: (['  aaaa ', '', '', '', '  cccc ']) */
                 var expected = r.array("  aaaa ", "", "", "", "  cccc ");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc ').split('b', 4) */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc ").split("b", 4) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #83
                 /* ExpectedOriginal: (['  aaaa ', '', '  cccc ']) */
                 var expected = r.array("  aaaa ", "", "  cccc ");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc ').split('bb', 2) */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc ").split("bb", 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #84
                 /* ExpectedOriginal: (['  aaaa', 'cccc ']) */
                 var expected = r.array("  aaaa", "cccc ");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc ').split(' bbbb  ', 1) */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc ").split(" bbbb  ", 1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #85
                 /* ExpectedOriginal: (['  aaaa ', '', '  cccc b d ', ' e ', '', ' f']) */
                 var expected = r.array("  aaaa ", "", "  cccc b d ", " e ", "", " f");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split('bb', 5) */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split("bb", 5) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #86
                 /* ExpectedOriginal: (['  aaaa', 'cccc b d bb e bbbb f']) */
                 var expected = r.array("  aaaa", "cccc b d bb e bbbb f");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 1) */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #87
                 /* ExpectedOriginal: (['  aaaa', 'cccc b d bb e', 'f']) */
                 var expected = r.array("  aaaa", "cccc b d bb e", "f");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 2) */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #88
                 /* ExpectedOriginal: (['aaaa', 'bbbb  cccc ']) */
                 var expected = r.array("aaaa", "bbbb  cccc ");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc ').split(null, 1) */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc ").split((ReqlExpr) null, 1) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #89
                 /* ExpectedOriginal: (['', '', 'aaaa bbbb  cccc ']) */
                 var expected = r.array("", "", "aaaa bbbb  cccc ");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc ').split(' ', 2) */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc ").split(" ", 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #90
                 /* ExpectedOriginal: (['  aaaa ', '', 'bb  cccc ']) */
                 var expected = r.array("  aaaa ", "", "bb  cccc ");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc ').split('b', 2) */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc ").split("b", 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #91
                 /* ExpectedOriginal: (['  aaaa ', '', '  cccc ']) */
                 var expected = r.array("  aaaa ", "", "  cccc ");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc ').split('bb', 2) */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc ").split("bb", 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #92
                 /* ExpectedOriginal: (['  aaaa', 'cccc ']) */
                 var expected = r.array("  aaaa", "cccc ");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc ').split(' bbbb  ', 2) */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc ").split(" bbbb  ", 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #93
                 /* ExpectedOriginal: (['  aaaa ', '', '  cccc b d bb e bbbb f']) */
                 var expected = r.array("  aaaa ", "", "  cccc b d bb e bbbb f");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split('bb', 2) */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split("bb", 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #94
                 /* ExpectedOriginal: (['  aaaa', 'cccc b d bb e bbbb f']) */
                 var expected = r.array("  aaaa", "cccc b d bb e bbbb f");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 2) */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #95
                 /* ExpectedOriginal: (['  aaaa', 'cccc b d bb e', 'f']) */
                 var expected = r.array("  aaaa", "cccc b d bb e", "f");
                 
                 /* Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 2) */
                 var obtained = runOrCatch( r.expr("  aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 2) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #96
                 /* ExpectedOriginal: ("ABC-DEF-GHJ") */
                 var expected = "ABC-DEF-GHJ";
                 
                 /* Original: r.expr("abc-dEf-GHJ").upcase() */
                 var obtained = runOrCatch( r.expr("abc-dEf-GHJ").upcase() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #97
                 /* ExpectedOriginal: ("abc-def-ghj") */
                 var expected = "abc-def-ghj";
                 
                 /* Original: r.expr("abc-dEf-GHJ").downcase() */
                 var obtained = runOrCatch( r.expr("abc-dEf-GHJ").downcase() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #98
                 /* ExpectedOriginal: (["f", "\u00e9", "o", "o"]) */
                 var expected = r.array("f", "\u00e9", "o", "o");
                 
                 /* Original: r.expr(u"f\u00e9oo").split("") */
                 var obtained = runOrCatch( r.expr("f\u00e9oo").split("") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #99
                 /* ExpectedOriginal: (["f", "e\u0301", "o", "o"]) */
                 var expected = r.array("f", "e\u0301", "o", "o");
                 
                 /* Original: r.expr(u"fe\u0301oo").split("") */
                 var obtained = runOrCatch( r.expr("fe\u0301oo").split("") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #100
                 /* ExpectedOriginal: (["foo", "bar", "baz", "quux", "fred", "barney", "wilma"]) */
                 var expected = r.array("foo", "bar", "baz", "quux", "fred", "barney", "wilma");
                 
                 /* Original: r.expr(u"foo bar\tbaz\nquux\rfred\u000bbarney\u000cwilma").split() */
                 var obtained = runOrCatch( r.expr("foo bar\tbaz\nquux\rfred\u000bbarney\u000cwilma").split() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, datum/string.yaml, #101
                 /* ExpectedOriginal: (["foo", "bar", "baz\u2060quux", "fred", "barney", "wilma", "betty\u200b"]) */
                 var expected = r.array("foo", "bar", "baz\u2060quux", "fred", "barney", "wilma", "betty\u200b");
                 
                 /* Original: r.expr(u"foo\u00a0bar\u2001baz\u2060quux\u2028fred\u2028barney\u2029wilma\u0085betty\u200b").split() */
                 var obtained = runOrCatch( r.expr("foo\u00a0bar\u2001baz\u2060quux\u2028fred\u2028barney\u2029wilma\u0085betty\u200b").split() ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             

        }
    }
}
