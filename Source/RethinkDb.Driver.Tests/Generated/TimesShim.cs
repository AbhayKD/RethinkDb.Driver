




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class TimesShim : GeneratedTest {



        [Test]
        public void YamlTest(){

             
             //JavaDef, times/shim.yaml, #Templates.YamlTest+DefTest.
             //Original: t = 1375147296.68
             
var t = (double) (1375147296.68);             
             TestCounter++;
             
             {
                 //JavaQuery, times/shim.yaml, #2
                 /* ExpectedOriginal: ("2013-07-29T18:21:36.680-07:00") */
                 var expected_ = "2013-07-29T18:21:36.680-07:00";
                 
                 /* Original: r.expr(datetime.fromtimestamp(t, PacificTimeZone())).to_iso8601() */
                 var obtained = runOrCatch( r.expr(datetime.fromtimestamp(t, TimeSpan.Parse("-07:00:00"))).toIso8601() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, times/shim.yaml, #3
                 /* ExpectedOriginal: ("2013-07-30T01:21:36.680+00:00") */
                 var expected_ = "2013-07-30T01:21:36.680+00:00";
                 
                 /* Original: r.expr(datetime.fromtimestamp(t, UTCTimeZone())).to_iso8601() */
                 var obtained = runOrCatch( r.expr(datetime.fromtimestamp(t, TimeSpan.Parse("00:00:00"))).toIso8601() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, times/shim.yaml, #4
                 /* ExpectedOriginal: (1375147296.68) */
                 var expected_ = 1375147296.68;
                 
                 /* Original: r.expr(datetime.fromtimestamp(t, PacificTimeZone())).to_epoch_time() */
                 var obtained = runOrCatch( r.expr(datetime.fromtimestamp(t, TimeSpan.Parse("-07:00:00"))).toEpochTime() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, times/shim.yaml, #5
                 /* ExpectedOriginal: (1375147296.68) */
                 var expected_ = 1375147296.68;
                 
                 /* Original: r.expr(datetime.fromtimestamp(t, UTCTimeZone())).to_epoch_time() */
                 var obtained = runOrCatch( r.expr(datetime.fromtimestamp(t, TimeSpan.Parse("00:00:00"))).toEpochTime() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             

        }
    }
}
