




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class Regression2697 : GeneratedTest {

            public static Table tbl = r.db(DbName).table("tbl");


        [Test]
        public void YamlTest(){

             
             //JavaDef, regression/2697.yaml, #Templates.YamlTest+DefTest.
             //Original: ten_l = r.expr([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
             
MakeArray ten_l = (MakeArray) (r.expr(r.array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)));             
             TestCounter++;
             
             {
                 //JavaQuery, regression/2697.yaml, #2
                 /* ExpectedOriginal: ({'inserted':1}) */
                 var expected_ = r.hashMap("inserted", 1);
                 
                 /* Original: tbl.insert({'id':1, 'a':r.expr(ten_l).concat_map(lambda l:list(range(1,11))).concat_map(lambda l:list(range(1,11))).concat_map(lambda l:list(range(1,11))).concat_map(lambda l:list(range(1,11)))}).pluck('first_error', 'inserted') */
                 var obtained = runOrCatch( tbl.insert(r.hashMap("id", 1).with("a", r.expr(ten_l).concatMap(l => list(range(1, 11))).concatMap(l => list(range(1, 11))).concatMap(l => list(range(1, 11))).concatMap(l => list(range(1, 11))))).pluck("first_error", "inserted") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/2697.yaml, #4
                 /* ExpectedOriginal: 100000 */
                 var expected_ = 100000;
                 
                 /* Original: tbl.get(1)['a'].count() */
                 var obtained = runOrCatch( tbl.get(1).g("a").count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/2697.yaml, #6
                 /* ExpectedOriginal: 100000 */
                 var expected_ = 100000;
                 
                 /* Original: tbl.get(1)['a'].count() */
                 var obtained = runOrCatch( tbl.get(1).g("a").count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/2697.yaml, #7
                 /* ExpectedOriginal: err("ReqlResourceLimitError", "Array over size limit `100000`.", []) */
                 var expected_ = err("ReqlResourceLimitError", "Array over size limit `100000`.", r.array());
                 
                 /* Original: r.expr(ten_l).concat_map(lambda l:list(range(1,11))).concat_map(lambda l:list(range(1,11))).concat_map(lambda l:list(range(1,11))).concat_map(lambda l:list(range(1,11))).splice_at(0, [1]).count() */
                 var obtained = runOrCatch( r.expr(ten_l).concatMap(l => list(range(1, 11))).concatMap(l => list(range(1, 11))).concatMap(l => list(range(1, 11))).concatMap(l => list(range(1, 11))).spliceAt(0, r.array(1)).count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/2697.yaml, #8
                 /* ExpectedOriginal: err("ReqlResourceLimitError", "Array over size limit `100000`.", []) */
                 var expected_ = err("ReqlResourceLimitError", "Array over size limit `100000`.", r.array());
                 
                 /* Original: r.expr(ten_l).concat_map(lambda l:list(range(1,11))).concat_map(lambda l:list(range(1,11))).concat_map(lambda l:list(range(1,11))).concat_map(lambda l:list(range(1,11))).insert_at(0, [1]).count() */
                 var obtained = runOrCatch( r.expr(ten_l).concatMap(l => list(range(1, 11))).concatMap(l => list(range(1, 11))).concatMap(l => list(range(1, 11))).concatMap(l => list(range(1, 11))).insertAt(0, r.array(1)).count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             

        }
    }
}
