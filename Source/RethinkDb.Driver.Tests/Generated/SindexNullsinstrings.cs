




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;
using static RethinkDb.Driver.Tests.TestingCommon;

namespace RethinkDb.Driver.Test.Generated {

    // sindex nulls in strings

    [TestFixture]
    public class SindexNullsinstrings : GeneratedTest {

        public SindexNullsinstrings (){
                tableVars.Add( "tbl" );
        }


            public static Table tbl = r.db(DbName).table("tbl");


        [Test]
        public void YamlTest(){

             TestCounter++;
             
             {
                 //JavaQuery, sindex/nullsinstrings.yaml, #4
                 /* ExpectedOriginal: ({"created":1}) */
                 var expected_ = r.hashMap("created", 1L);
                 
                 /* Original: tbl.index_create("key") */
                 var obtained = runOrCatch( tbl.indexCreate("key") ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/nullsinstrings.yaml, #6
                 /* ExpectedOriginal: ([{"ready":true}]) */
                 var expected_ = r.array(r.hashMap("ready", true));
                 
                 /* Original: tbl.index_wait().pluck("ready") */
                 var obtained = runOrCatch( tbl.indexWait().pluck("ready") ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/nullsinstrings.yaml, #10
                 /* ExpectedOriginal: ({"inserted":2}) */
                 var expected_ = r.hashMap("inserted", 2L);
                 
                 /* Original: tbl.insert([{"id":1,"key":["a","b"]},{"id":2,"key":["a\u0000Sb"]}]).pluck("inserted") */
                 var obtained = runOrCatch( tbl.insert(r.array(r.hashMap("id", 1L).with("key", r.array("a", "b")), r.hashMap("id", 2L).with("key", r.array("a\u0000Sb")))).pluck("inserted") ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/nullsinstrings.yaml, #13
                 /* ExpectedOriginal: ([{"id":2}]) */
                 var expected_ = r.array(r.hashMap("id", 2L));
                 
                 /* Original: tbl.get_all(["a\u0000Sb"], index="key").pluck("id") */
                 var obtained = runOrCatch( tbl.getAll(r.array("a\u0000Sb")).optArg("index", "key").pluck("id") ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, sindex/nullsinstrings.yaml, #18
                 /* ExpectedOriginal: ([{"id":1}]) */
                 var expected_ = r.array(r.hashMap("id", 1L));
                 
                 /* Original: tbl.get_all(["a","b"], index="key").pluck("id") */
                 var obtained = runOrCatch( tbl.getAll(r.array("a", "b")).optArg("index", "key").pluck("id") ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             

        }
    }
}
