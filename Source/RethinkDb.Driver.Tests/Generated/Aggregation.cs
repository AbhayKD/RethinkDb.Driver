




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class Aggregation : GeneratedTest {

        public Aggregation (){
                tableVars.Add( "tbl" );
                tableVars.Add( "tbl2" );
                tableVars.Add( "tbl3" );
                tableVars.Add( "tbl4" );
        }


            public static Table tbl = r.db(DbName).table("tbl");
            public static Table tbl2 = r.db(DbName).table("tbl2");
            public static Table tbl3 = r.db(DbName).table("tbl3");
            public static Table tbl4 = r.db(DbName).table("tbl4");


        [Test]
        public void YamlTest(){

             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #1
                 /* ExpectedOriginal: ({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':100}) */
                 var expected_ = r.hashMap("deleted", 0.0).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 100L);
                 
                 /* Original: tbl.insert([{'id':i, 'a':i%4} for i in xrange(100)]) */
                 var obtained = runOrCatch( tbl.insert(EnumerableLRange(0, 100L).Select(i => r.hashMap("id", i).with("a", r.mod(i, 4L))).ToList()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #2
                 /* ExpectedOriginal: ({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':100}) */
                 var expected_ = r.hashMap("deleted", 0.0).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 100L);
                 
                 /* Original: tbl2.insert([{'id':i, 'b':i%4} for i in xrange(100)]) */
                 var obtained = runOrCatch( tbl2.insert(EnumerableLRange(0, 100L).Select(i => r.hashMap("id", i).with("b", r.mod(i, 4L))).ToList()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #3
                 /* ExpectedOriginal: ({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':100}) */
                 var expected_ = r.hashMap("deleted", 0.0).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 100L);
                 
                 /* Original: tbl3.insert([{'id':i, 'a':i%4, 'b':{'c':i%5}} for i in xrange(100)]) */
                 var obtained = runOrCatch( tbl3.insert(EnumerableLRange(0, 100L).Select(i => r.hashMap("id", i).with("a", r.mod(i, 4L)).with("b", r.hashMap("c", r.mod(i, 5L)))).ToList()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             
             //JavaDef, aggregation.yaml, #Templates.YamlTest+DefTest.
             //Original: time1 = 1375115782.24
             
var time1 = (double) (1375115782.24);             
             
             //JavaDef, aggregation.yaml, #Templates.YamlTest+DefTest.
             //Original: time2 = 1375147296.68
             
var time2 = (double) (1375147296.68);             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #6
                 /* ExpectedOriginal: ({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':1}) */
                 var expected_ = r.hashMap("deleted", 0.0).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 1L);
                 
                 /* Original: tbl4.insert({'id':0, 'time':r.epoch_time(time1)}) */
                 var obtained = runOrCatch( tbl4.insert(r.hashMap("id", 0L).with("time", r.epochTime(time1))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #6
                 /* ExpectedOriginal: ({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':1}) */
                 var expected_ = r.hashMap("deleted", 0.0).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 1L);
                 
                 /* Original: tbl4.insert({'id':1, 'time':r.epoch_time(time2)}) */
                 var obtained = runOrCatch( tbl4.insert(r.hashMap("id", 1L).with("time", r.epochTime(time2))) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #7
                 /* ExpectedOriginal: 150 */
                 var expected_ = 150L;
                 
                 /* Original: tbl.sum('a') */
                 var obtained = runOrCatch( tbl.sum("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #8
                 /* ExpectedOriginal: 150 */
                 var expected_ = 150L;
                 
                 /* Original: tbl.map(lambda row:row['a']).sum() */
                 var obtained = runOrCatch( tbl.map(row => row.g("a")).sum() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #9
                 /* ExpectedOriginal: ({0:1200, 1:1225, 2:1250, 3:1275}) */
                 var expected_ = r.hashMap(0L, 1200L).with(1L, 1225L).with(2L, 1250L).with(3L, 1275L);
                 
                 /* Original: tbl.group('a').sum('id') */
                 var obtained = runOrCatch( tbl.group("a").sum("id") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #10
                 /* ExpectedOriginal: 1.5 */
                 var expected_ = 1.5;
                 
                 /* Original: tbl.avg('a') */
                 var obtained = runOrCatch( tbl.avg("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #11
                 /* ExpectedOriginal: 1.5 */
                 var expected_ = 1.5;
                 
                 /* Original: tbl.map(lambda row:row['a']).avg() */
                 var obtained = runOrCatch( tbl.map(row => row.g("a")).avg() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #12
                 /* ExpectedOriginal: ({0:48, 1:49, 2:50, 3:51}) */
                 var expected_ = r.hashMap(0L, 48L).with(1L, 49L).with(2L, 50L).with(3L, 51L);
                 
                 /* Original: tbl.group('a').avg('id') */
                 var obtained = runOrCatch( tbl.group("a").avg("id") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #13
                 /* ExpectedOriginal: 0 */
                 var expected_ = 0L;
                 
                 /* Original: tbl.min('a')['a'] */
                 var obtained = runOrCatch( tbl.min("a").g("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #14
                 /* ExpectedOriginal: ({'a':0, 'id':0}) */
                 var expected_ = r.hashMap("a", 0L).with("id", 0L);
                 
                 /* Original: tbl.order_by('id').min('a') */
                 var obtained = runOrCatch( tbl.orderBy("id").min("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #15
                 /* ExpectedOriginal: 0 */
                 var expected_ = 0L;
                 
                 /* Original: tbl.map(lambda row:row['a']).min() */
                 var obtained = runOrCatch( tbl.map(row => row.g("a")).min() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #16
                 /* ExpectedOriginal: ({0:{'a':0, 'id':0}, 1:{'a':1, 'id':1}, 2:{'a':2, 'id':2}, 3:{'a':3, 'id':3}}) */
                 var expected_ = r.hashMap(0L, r.hashMap("a", 0L).with("id", 0L)).with(1L, r.hashMap("a", 1L).with("id", 1L)).with(2L, r.hashMap("a", 2L).with("id", 2L)).with(3L, r.hashMap("a", 3L).with("id", 3L));
                 
                 /* Original: tbl.group('a').min('id') */
                 var obtained = runOrCatch( tbl.group("a").min("id") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #17
                 /* ExpectedOriginal: ({'a':3, 'id':3}) */
                 var expected_ = r.hashMap("a", 3L).with("id", 3L);
                 
                 /* Original: tbl.order_by('id').max('a') */
                 var obtained = runOrCatch( tbl.orderBy("id").max("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #18
                 /* ExpectedOriginal: 3 */
                 var expected_ = 3L;
                 
                 /* Original: tbl.map(lambda row:row['a']).max() */
                 var obtained = runOrCatch( tbl.map(row => row.g("a")).max() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #19
                 /* ExpectedOriginal: ({0:{'a':0, 'id':96}, 1:{'a':1, 'id':97}, 2:{'a':2, 'id':98}, 3:{'a':3, 'id':99}}) */
                 var expected_ = r.hashMap(0L, r.hashMap("a", 0L).with("id", 96L)).with(1L, r.hashMap("a", 1L).with("id", 97L)).with(2L, r.hashMap("a", 2L).with("id", 98L)).with(3L, r.hashMap("a", 3L).with("id", 99L));
                 
                 /* Original: tbl.group('a').max('id') */
                 var obtained = runOrCatch( tbl.group("a").max("id") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #20
                 /* ExpectedOriginal: ({"a":0, "id":0}) */
                 var expected_ = r.hashMap("a", 0L).with("id", 0L);
                 
                 /* Original: tbl.min() */
                 var obtained = runOrCatch( tbl.min() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #21
                 /* ExpectedOriginal: ({0:{"a":0, "id":0}, 1:{"a":1, "id":1}, 2:{"a":2, "id":2}, 3:{"a":3, "id":3}}) */
                 var expected_ = r.hashMap(0L, r.hashMap("a", 0L).with("id", 0L)).with(1L, r.hashMap("a", 1L).with("id", 1L)).with(2L, r.hashMap("a", 2L).with("id", 2L)).with(3L, r.hashMap("a", 3L).with("id", 3L));
                 
                 /* Original: tbl.group('a').min() */
                 var obtained = runOrCatch( tbl.group("a").min() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #22
                 /* ExpectedOriginal: ({"a":3, "id":99}) */
                 var expected_ = r.hashMap("a", 3L).with("id", 99L);
                 
                 /* Original: tbl.max() */
                 var obtained = runOrCatch( tbl.max() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #23
                 /* ExpectedOriginal: ({0:{'a':0, 'id':96}, 1:{'a':1, 'id':97}, 2:{'a':2, 'id':98}, 3:{'a':3, 'id':99}}) */
                 var expected_ = r.hashMap(0L, r.hashMap("a", 0L).with("id", 96L)).with(1L, r.hashMap("a", 1L).with("id", 97L)).with(2L, r.hashMap("a", 2L).with("id", 98L)).with(3L, r.hashMap("a", 3L).with("id", 99L));
                 
                 /* Original: tbl.group('a').max() */
                 var obtained = runOrCatch( tbl.group("a").max() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #24
                 /* ExpectedOriginal: 150 */
                 var expected_ = 150L;
                 
                 /* Original: tbl.sum(lambda row:row['a']) */
                 var obtained = runOrCatch( tbl.sum(row => row.g("a")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #25
                 /* ExpectedOriginal: 150 */
                 var expected_ = 150L;
                 
                 /* Original: tbl.map(lambda row:row['a']).sum() */
                 var obtained = runOrCatch( tbl.map(row => row.g("a")).sum() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #26
                 /* ExpectedOriginal: ({0:1200, 1:1225, 2:1250, 3:1275}) */
                 var expected_ = r.hashMap(0L, 1200L).with(1L, 1225L).with(2L, 1250L).with(3L, 1275L);
                 
                 /* Original: tbl.group(lambda row:row['a']).sum(lambda row:row['id']) */
                 var obtained = runOrCatch( tbl.group(row => row.g("a")).sum(row => row.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #27
                 /* ExpectedOriginal: 1.5 */
                 var expected_ = 1.5;
                 
                 /* Original: tbl.avg(lambda row:row['a']) */
                 var obtained = runOrCatch( tbl.avg(row => row.g("a")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #28
                 /* ExpectedOriginal: 1.5 */
                 var expected_ = 1.5;
                 
                 /* Original: tbl.map(lambda row:row['a']).avg() */
                 var obtained = runOrCatch( tbl.map(row => row.g("a")).avg() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #29
                 /* ExpectedOriginal: ({0:48, 1:49, 2:50, 3:51}) */
                 var expected_ = r.hashMap(0L, 48L).with(1L, 49L).with(2L, 50L).with(3L, 51L);
                 
                 /* Original: tbl.group(lambda row:row['a']).avg(lambda row:row['id']) */
                 var obtained = runOrCatch( tbl.group(row => row.g("a")).avg(row => row.g("id")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #30
                 /* ExpectedOriginal: ({'a':0, 'id':96}) */
                 var expected_ = r.hashMap("a", 0L).with("id", 96L);
                 
                 /* Original: tbl.order_by(r.desc('id')).min(lambda row:row['a']) */
                 var obtained = runOrCatch( tbl.orderBy(r.desc("id")).min(row => row.g("a")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #31
                 /* ExpectedOriginal: 0 */
                 var expected_ = 0L;
                 
                 /* Original: tbl.order_by(r.desc('id')).min(lambda row:row['a'])['a'] */
                 var obtained = runOrCatch( tbl.orderBy(r.desc("id")).min(row => row.g("a")).g("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #32
                 /* ExpectedOriginal: 0 */
                 var expected_ = 0L;
                 
                 /* Original: tbl.map(lambda row:row['a']).min() */
                 var obtained = runOrCatch( tbl.map(row => row.g("a")).min() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #33
                 /* ExpectedOriginal: ({0:0, 1:1, 2:2, 3:3}) */
                 var expected_ = r.hashMap(0L, 0L).with(1L, 1L).with(2L, 2L).with(3L, 3L);
                 
                 /* Original: tbl.group(lambda row:row['a']).min(lambda row:row['id'])['id'] */
                 var obtained = runOrCatch( tbl.group(row => row.g("a")).min(row => row.g("id")).g("id") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #34
                 /* ExpectedOriginal: 3 */
                 var expected_ = 3L;
                 
                 /* Original: tbl.max(lambda row:row['a'])['a'] */
                 var obtained = runOrCatch( tbl.max(row => row.g("a")).g("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #35
                 /* ExpectedOriginal: 3 */
                 var expected_ = 3L;
                 
                 /* Original: tbl.map(lambda row:row['a']).max() */
                 var obtained = runOrCatch( tbl.map(row => row.g("a")).max() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #36
                 /* ExpectedOriginal: ({0:96, 1:97, 2:98, 3:99}) */
                 var expected_ = r.hashMap(0L, 96L).with(1L, 97L).with(2L, 98L).with(3L, 99L);
                 
                 /* Original: tbl.group(lambda row:row['a']).max(lambda row:row['id'])['id'] */
                 var obtained = runOrCatch( tbl.group(row => row.g("a")).max(row => row.g("id")).g("id") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #37
                 /* ExpectedOriginal: ({0:1200, 1:1225, 2:1250, 3:1275}) */
                 var expected_ = r.hashMap(0L, 1200L).with(1L, 1225L).with(2L, 1250L).with(3L, 1275L);
                 
                 /* Original: tbl.group(lambda row:row['a']).map(lambda row:row['id']).reduce(lambda a,b:a+b) */
                 var obtained = runOrCatch( tbl.group(row => row.g("a")).map(row => row.g("id")).reduce((a, b) => r.add(a, b)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #38
                 /* ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[0, 1200], [1, 1225], [2, 1250], [3, 1275]]}) */
                 var expected_ = r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(0L, 1200L), r.array(1L, 1225L), r.array(2L, 1250L), r.array(3L, 1275L)));
                 
                 /* Original: tbl.group(lambda row:row['a']).map(lambda row:row['id']).reduce(lambda a,b:a+b) */
                 var obtained = runOrCatch( tbl.group(row => row.g("a")).map(row => row.g("id")).reduce((a, b) => r.add(a, b)) ,
                                            new OptArgs()
                     .with("group_format", "raw")
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #39
                 /* ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[1, [{'a':1}]]]}) */
                 var expected_ = r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(1L, r.array(r.hashMap("a", 1L)))));
                 
                 /* Original: r.expr([{'a':1}]).filter(true).limit(1).group('a') */
                 var obtained = runOrCatch( r.expr(r.array(r.hashMap("a", 1L))).filter(true).limit(1L).group("a") ,
                                            new OptArgs()
                     .with("group_format", "raw")
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #40
                 /* ExpectedOriginal: ("GROUPED_STREAM") */
                 var expected_ = "GROUPED_STREAM";
                 
                 /* Original: tbl.group('a').type_of() */
                 var obtained = runOrCatch( tbl.group("a").typeOf() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #41
                 /* ExpectedOriginal: ("GROUPED_DATA") */
                 var expected_ = "GROUPED_DATA";
                 
                 /* Original: tbl.group('a').count().type_of() */
                 var obtained = runOrCatch( tbl.group("a").count().typeOf() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #42
                 /* ExpectedOriginal: ("GROUPED_DATA") */
                 var expected_ = "GROUPED_DATA";
                 
                 /* Original: tbl.group('a').coerce_to('ARRAY').type_of() */
                 var obtained = runOrCatch( tbl.group("a").coerceTo("ARRAY").typeOf() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #43
                 /* ExpectedOriginal: ({0:[0,4,8],1:[1,5,9],2:[2,6],3:[3,7]}) */
                 var expected_ = r.hashMap(0L, r.array(0L, 4L, 8L)).with(1L, r.array(1L, 5L, 9L)).with(2L, r.array(2L, 6L)).with(3L, r.array(3L, 7L));
                 
                 /* Original: tbl.order_by(index='id').filter(lambda row:row['id'] < 10).group('a').map(lambda row:row['id']).coerce_to('ARRAY') */
                 var obtained = runOrCatch( tbl.orderBy().optArg("index", "id").filter(row => row.g("id").lt(10L)).group("a").map(row => row.g("id")).coerceTo("ARRAY") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #44
                 /* ExpectedOriginal: ({0:9,1:9,2:4,3:4}) */
                 var expected_ = r.hashMap(0L, 9L).with(1L, 9L).with(2L, 4L).with(3L, 4L);
                 
                 /* Original: tbl.filter(lambda row:row['id'] < 10).group('a').count().do(lambda x:x*x) */
                 var obtained = runOrCatch( tbl.filter(row => row.g("id").lt(10L)).group("a").count().do_(x => r.mul(x, x)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #45
                 /* ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[0, 2400], [1, 2450], [2, 2500], [3, 2550]]}) */
                 var expected_ = r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(0L, 2400L), r.array(1L, 2450L), r.array(2L, 2500L), r.array(3L, 2550L)));
                 
                 /* Original: tbl.union(tbl).group(lambda row:row['a']).map(lambda row:row['id']).reduce(lambda a,b:a + b) */
                 var obtained = runOrCatch( tbl.union(tbl).group(row => row.g("a")).map(row => row.g("id")).reduce((a, b) => r.add(a, b)) ,
                                            new OptArgs()
                     .with("group_format", "raw")
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #46
                 /* ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[0, 2400], [1, 2450], [2, 2500], [3, 2550]]}) */
                 var expected_ = r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(0L, 2400L), r.array(1L, 2450L), r.array(2L, 2500L), r.array(3L, 2550L)));
                 
                 /* Original: tbl.coerce_to("array").union(tbl).group(lambda row:row['a']).map(lambda row:row['id']).reduce(lambda a,b:a + b) */
                 var obtained = runOrCatch( tbl.coerceTo("array").union(tbl).group(row => row.g("a")).map(row => row.g("id")).reduce((a, b) => r.add(a, b)) ,
                                            new OptArgs()
                     .with("group_format", "raw")
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #47
                 /* ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[0, 2400], [1, 2450], [2, 2500], [3, 2550]]}) */
                 var expected_ = r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(0L, 2400L), r.array(1L, 2450L), r.array(2L, 2500L), r.array(3L, 2550L)));
                 
                 /* Original: tbl.union(tbl.coerce_to("array")).group(lambda row:row['a']).map(lambda row:row['id']).reduce(lambda a,b:a + b) */
                 var obtained = runOrCatch( tbl.union(tbl.coerceTo("array")).group(row => row.g("a")).map(row => row.g("id")).reduce((a, b) => r.add(a, b)) ,
                                            new OptArgs()
                     .with("group_format", "raw")
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #48
                 /* ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[0, 1200], [1, 1225], [2, 1250], [3, 1275]]}) */
                 var expected_ = r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(0L, 1200L), r.array(1L, 1225L), r.array(2L, 1250L), r.array(3L, 1275L)));
                 
                 /* Original: tbl.group(lambda row:row['a']).map(lambda row:row['id']).reduce(lambda a,b:a + b) */
                 var obtained = runOrCatch( tbl.group(row => row.g("a")).map(row => row.g("id")).reduce((a, b) => r.add(a, b)) ,
                                            new OptArgs()
                     .with("group_format", "raw")
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #50
                 /* ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[0, 25], [1, 25], [2, 25], [3, 25]]}) */
                 var expected_ = r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(0L, 25L), r.array(1L, 25L), r.array(2L, 25L), r.array(3L, 25L)));
                 
                 /* Original: tbl.group('a').count() */
                 var obtained = runOrCatch( tbl.group("a").count() ,
                                            new OptArgs()
                     .with("group_format", "raw")
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #51
                 /* ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[0, 1200], [1, 1225], [2, 1250], [3, 1275]]}) */
                 var expected_ = r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(0L, 1200L), r.array(1L, 1225L), r.array(2L, 1250L), r.array(3L, 1275L)));
                 
                 /* Original: tbl.group('a').sum('id') */
                 var obtained = runOrCatch( tbl.group("a").sum("id") ,
                                            new OptArgs()
                     .with("group_format", "raw")
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #52
                 /* ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[0, 48], [1, 49], [2, 50], [3, 51]]}) */
                 var expected_ = r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(0L, 48L), r.array(1L, 49L), r.array(2L, 50L), r.array(3L, 51L)));
                 
                 /* Original: tbl.group('a').avg('id') */
                 var obtained = runOrCatch( tbl.group("a").avg("id") ,
                                            new OptArgs()
                     .with("group_format", "raw")
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #53
                 /* ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[0, 20], [1, 20], [2, 20], [3, 20], [4, 20]]}) */
                 var expected_ = r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(0L, 20L), r.array(1L, 20L), r.array(2L, 20L), r.array(3L, 20L), r.array(4L, 20L)));
                 
                 /* Original: tbl3.group(lambda row:row['b']['c']).count() */
                 var obtained = runOrCatch( tbl3.group(row => row.g("b").g("c")).count() ,
                                            new OptArgs()
                     .with("group_format", "raw")
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #54
                 /* ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[[0, 0], 9], [[0, 1], 8], [[0, 2], 8], [[1, 0], 8], [[1, 1], 9], [[1, 2], 8], [[2, 0], 8], [[2, 1], 8], [[2, 2], 9], [[3, 0], 9], [[3, 1], 8], [[3, 2], 8]]}) */
                 var expected_ = r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(r.array(0L, 0L), 9L), r.array(r.array(0L, 1L), 8L), r.array(r.array(0L, 2L), 8L), r.array(r.array(1L, 0L), 8L), r.array(r.array(1L, 1L), 9L), r.array(r.array(1L, 2L), 8L), r.array(r.array(2L, 0L), 8L), r.array(r.array(2L, 1L), 8L), r.array(r.array(2L, 2L), 9L), r.array(r.array(3L, 0L), 9L), r.array(r.array(3L, 1L), 8L), r.array(r.array(3L, 2L), 8L)));
                 
                 /* Original: tbl.group('a', lambda row:row['id'].mod(3)).count() */
                 var obtained = runOrCatch( tbl.group("a", row => row.g("id").mod(3L)).count() ,
                                            new OptArgs()
                     .with("group_format", "raw")
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #58
                 /* ExpectedOriginal: 4 */
                 var expected_ = 4L;
                 
                 /* Original: tbl.map(lambda row:row['a']).distinct().count() */
                 var obtained = runOrCatch( tbl.map(row => row.g("a")).distinct().count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #59
                 /* ExpectedOriginal: ("STREAM") */
                 var expected_ = "STREAM";
                 
                 /* Original: tbl.distinct().type_of() */
                 var obtained = runOrCatch( tbl.distinct().typeOf() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #60
                 /* ExpectedOriginal: 100 */
                 var expected_ = 100L;
                 
                 /* Original: tbl.distinct().count() */
                 var obtained = runOrCatch( tbl.distinct().count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #61
                 /* ExpectedOriginal: ("STREAM") */
                 var expected_ = "STREAM";
                 
                 /* Original: tbl.distinct(index='id').type_of() */
                 var obtained = runOrCatch( tbl.distinct().optArg("index", "id").typeOf() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #62
                 /* ExpectedOriginal: 100 */
                 var expected_ = 100L;
                 
                 /* Original: tbl.distinct(index='id').count() */
                 var obtained = runOrCatch( tbl.distinct().optArg("index", "id").count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #63
                 /* ExpectedOriginal: ({'created':1}) */
                 var expected_ = r.hashMap("created", 1L);
                 
                 /* Original: tbl.index_create('a') */
                 var obtained = runOrCatch( tbl.indexCreate("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #66
                 /* ExpectedOriginal: ([{'index':'a','ready':true}]) */
                 var expected_ = r.array(r.hashMap("index", "a").with("ready", true));
                 
                 /* Original: tbl.index_wait('a').pluck('index', 'ready') */
                 var obtained = runOrCatch( tbl.indexWait("a").pluck("index", "ready") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #69
                 /* ExpectedOriginal: 25 */
                 var expected_ = 25L;
                 
                 /* Original: tbl.between(0, 1, index='a').distinct().count() */
                 var obtained = runOrCatch( tbl.between(0L, 1L).optArg("index", "a").distinct().count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #70
                 /* ExpectedOriginal: 25 */
                 var expected_ = 25L;
                 
                 /* Original: tbl.between(0, 1, index='a').distinct(index='id').count() */
                 var obtained = runOrCatch( tbl.between(0L, 1L).optArg("index", "a").distinct().optArg("index", "id").count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #82
                 /* ExpectedOriginal: ("STREAM") */
                 var expected_ = "STREAM";
                 
                 /* Original: tbl.distinct(index='a').type_of() */
                 var obtained = runOrCatch( tbl.distinct().optArg("index", "a").typeOf() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #83
                 /* ExpectedOriginal: 4 */
                 var expected_ = 4L;
                 
                 /* Original: tbl.distinct(index='a').count() */
                 var obtained = runOrCatch( tbl.distinct().optArg("index", "a").count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #84
                 /* ExpectedOriginal: err('ReqlQueryLogicError', 'Cannot group by nothing.', []) */
                 var expected_ = err("ReqlQueryLogicError", "Cannot group by nothing.", r.array());
                 
                 /* Original: tbl.group() */
                 var obtained = runOrCatch( tbl.group() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #85
                 /* ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [8, 1], [9, 1], [10, 1], [11, 1], [12, 1], [13, 1], [14, 1], [15, 1], [16, 1], [17, 1], [18, 1], [19, 1], [20, 1], [21, 1], [22, 1], [23, 1], [24, 1], [25, 1], [26, 1], [27, 1], [28, 1], [29, 1], [30, 1], [31, 1], [32, 1], [33, 1], [34, 1], [35, 1], [36, 1], [37, 1], [38, 1], [39, 1], [40, 1], [41, 1], [42, 1], [43, 1], [44, 1], [45, 1], [46, 1], [47, 1], [48, 1], [49, 1], [50, 1], [51, 1], [52, 1], [53, 1], [54, 1], [55, 1], [56, 1], [57, 1], [58, 1], [59, 1], [60, 1], [61, 1], [62, 1], [63, 1], [64, 1], [65, 1], [66, 1], [67, 1], [68, 1], [69, 1], [70, 1], [71, 1], [72, 1], [73, 1], [74, 1], [75, 1], [76, 1], [77, 1], [78, 1], [79, 1], [80, 1], [81, 1], [82, 1], [83, 1], [84, 1], [85, 1], [86, 1], [87, 1], [88, 1], [89, 1], [90, 1], [91, 1], [92, 1], [93, 1], [94, 1], [95, 1], [96, 1], [97, 1], [98, 1], [99, 1]]}) */
                 var expected_ = r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(0L, 1L), r.array(1L, 1L), r.array(2L, 1L), r.array(3L, 1L), r.array(4L, 1L), r.array(5L, 1L), r.array(6L, 1L), r.array(7L, 1L), r.array(8L, 1L), r.array(9L, 1L), r.array(10L, 1L), r.array(11L, 1L), r.array(12L, 1L), r.array(13L, 1L), r.array(14L, 1L), r.array(15L, 1L), r.array(16L, 1L), r.array(17L, 1L), r.array(18L, 1L), r.array(19L, 1L), r.array(20L, 1L), r.array(21L, 1L), r.array(22L, 1L), r.array(23L, 1L), r.array(24L, 1L), r.array(25L, 1L), r.array(26L, 1L), r.array(27L, 1L), r.array(28L, 1L), r.array(29L, 1L), r.array(30L, 1L), r.array(31L, 1L), r.array(32L, 1L), r.array(33L, 1L), r.array(34L, 1L), r.array(35L, 1L), r.array(36L, 1L), r.array(37L, 1L), r.array(38L, 1L), r.array(39L, 1L), r.array(40L, 1L), r.array(41L, 1L), r.array(42L, 1L), r.array(43L, 1L), r.array(44L, 1L), r.array(45L, 1L), r.array(46L, 1L), r.array(47L, 1L), r.array(48L, 1L), r.array(49L, 1L), r.array(50L, 1L), r.array(51L, 1L), r.array(52L, 1L), r.array(53L, 1L), r.array(54L, 1L), r.array(55L, 1L), r.array(56L, 1L), r.array(57L, 1L), r.array(58L, 1L), r.array(59L, 1L), r.array(60L, 1L), r.array(61L, 1L), r.array(62L, 1L), r.array(63L, 1L), r.array(64L, 1L), r.array(65L, 1L), r.array(66L, 1L), r.array(67L, 1L), r.array(68L, 1L), r.array(69L, 1L), r.array(70L, 1L), r.array(71L, 1L), r.array(72L, 1L), r.array(73L, 1L), r.array(74L, 1L), r.array(75L, 1L), r.array(76L, 1L), r.array(77L, 1L), r.array(78L, 1L), r.array(79L, 1L), r.array(80L, 1L), r.array(81L, 1L), r.array(82L, 1L), r.array(83L, 1L), r.array(84L, 1L), r.array(85L, 1L), r.array(86L, 1L), r.array(87L, 1L), r.array(88L, 1L), r.array(89L, 1L), r.array(90L, 1L), r.array(91L, 1L), r.array(92L, 1L), r.array(93L, 1L), r.array(94L, 1L), r.array(95L, 1L), r.array(96L, 1L), r.array(97L, 1L), r.array(98L, 1L), r.array(99L, 1L)));
                 
                 /* Original: tbl.group(index='id').count() */
                 var obtained = runOrCatch( tbl.group().optArg("index", "id").count() ,
                                            new OptArgs()
                     .with("group_format", "raw")
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #86
                 /* ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[0, 25], [1, 25], [2, 25], [3, 25]]}) */
                 var expected_ = r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(0L, 25L), r.array(1L, 25L), r.array(2L, 25L), r.array(3L, 25L)));
                 
                 /* Original: tbl.group(index='a').count() */
                 var obtained = runOrCatch( tbl.group().optArg("index", "a").count() ,
                                            new OptArgs()
                     .with("group_format", "raw")
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #87
                 /* ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[[0, 0], 1], [[0, 4], 1], [[0, 8], 1], [[0, 12], 1], [[0, 16], 1], [[0, 20], 1], [[0, 24], 1], [[0, 28], 1], [[0, 32], 1], [[0, 36], 1], [[0, 40], 1], [[0, 44], 1], [[0, 48], 1], [[0, 52], 1], [[0, 56], 1], [[0, 60], 1], [[0, 64], 1], [[0, 68], 1], [[0, 72], 1], [[0, 76], 1], [[0, 80], 1], [[0, 84], 1], [[0, 88], 1], [[0, 92], 1], [[0, 96], 1], [[1, 1], 1], [[1, 5], 1], [[1, 9], 1], [[1, 13], 1], [[1, 17], 1], [[1, 21], 1], [[1, 25], 1], [[1, 29], 1], [[1, 33], 1], [[1, 37], 1], [[1, 41], 1], [[1, 45], 1], [[1, 49], 1], [[1, 53], 1], [[1, 57], 1], [[1, 61], 1], [[1, 65], 1], [[1, 69], 1], [[1, 73], 1], [[1, 77], 1], [[1, 81], 1], [[1, 85], 1], [[1, 89], 1], [[1, 93], 1], [[1, 97], 1], [[2, 2], 1], [[2, 6], 1], [[2, 10], 1], [[2, 14], 1], [[2, 18], 1], [[2, 22], 1], [[2, 26], 1], [[2, 30], 1], [[2, 34], 1], [[2, 38], 1], [[2, 42], 1], [[2, 46], 1], [[2, 50], 1], [[2, 54], 1], [[2, 58], 1], [[2, 62], 1], [[2, 66], 1], [[2, 70], 1], [[2, 74], 1], [[2, 78], 1], [[2, 82], 1], [[2, 86], 1], [[2, 90], 1], [[2, 94], 1], [[2, 98], 1], [[3, 3], 1], [[3, 7], 1], [[3, 11], 1], [[3, 15], 1], [[3, 19], 1], [[3, 23], 1], [[3, 27], 1], [[3, 31], 1], [[3, 35], 1], [[3, 39], 1], [[3, 43], 1], [[3, 47], 1], [[3, 51], 1], [[3, 55], 1], [[3, 59], 1], [[3, 63], 1], [[3, 67], 1], [[3, 71], 1], [[3, 75], 1], [[3, 79], 1], [[3, 83], 1], [[3, 87], 1], [[3, 91], 1], [[3, 95], 1], [[3, 99], 1]]}) */
                 var expected_ = r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(r.array(0L, 0L), 1L), r.array(r.array(0L, 4L), 1L), r.array(r.array(0L, 8L), 1L), r.array(r.array(0L, 12L), 1L), r.array(r.array(0L, 16L), 1L), r.array(r.array(0L, 20L), 1L), r.array(r.array(0L, 24L), 1L), r.array(r.array(0L, 28L), 1L), r.array(r.array(0L, 32L), 1L), r.array(r.array(0L, 36L), 1L), r.array(r.array(0L, 40L), 1L), r.array(r.array(0L, 44L), 1L), r.array(r.array(0L, 48L), 1L), r.array(r.array(0L, 52L), 1L), r.array(r.array(0L, 56L), 1L), r.array(r.array(0L, 60L), 1L), r.array(r.array(0L, 64L), 1L), r.array(r.array(0L, 68L), 1L), r.array(r.array(0L, 72L), 1L), r.array(r.array(0L, 76L), 1L), r.array(r.array(0L, 80L), 1L), r.array(r.array(0L, 84L), 1L), r.array(r.array(0L, 88L), 1L), r.array(r.array(0L, 92L), 1L), r.array(r.array(0L, 96L), 1L), r.array(r.array(1L, 1L), 1L), r.array(r.array(1L, 5L), 1L), r.array(r.array(1L, 9L), 1L), r.array(r.array(1L, 13L), 1L), r.array(r.array(1L, 17L), 1L), r.array(r.array(1L, 21L), 1L), r.array(r.array(1L, 25L), 1L), r.array(r.array(1L, 29L), 1L), r.array(r.array(1L, 33L), 1L), r.array(r.array(1L, 37L), 1L), r.array(r.array(1L, 41L), 1L), r.array(r.array(1L, 45L), 1L), r.array(r.array(1L, 49L), 1L), r.array(r.array(1L, 53L), 1L), r.array(r.array(1L, 57L), 1L), r.array(r.array(1L, 61L), 1L), r.array(r.array(1L, 65L), 1L), r.array(r.array(1L, 69L), 1L), r.array(r.array(1L, 73L), 1L), r.array(r.array(1L, 77L), 1L), r.array(r.array(1L, 81L), 1L), r.array(r.array(1L, 85L), 1L), r.array(r.array(1L, 89L), 1L), r.array(r.array(1L, 93L), 1L), r.array(r.array(1L, 97L), 1L), r.array(r.array(2L, 2L), 1L), r.array(r.array(2L, 6L), 1L), r.array(r.array(2L, 10L), 1L), r.array(r.array(2L, 14L), 1L), r.array(r.array(2L, 18L), 1L), r.array(r.array(2L, 22L), 1L), r.array(r.array(2L, 26L), 1L), r.array(r.array(2L, 30L), 1L), r.array(r.array(2L, 34L), 1L), r.array(r.array(2L, 38L), 1L), r.array(r.array(2L, 42L), 1L), r.array(r.array(2L, 46L), 1L), r.array(r.array(2L, 50L), 1L), r.array(r.array(2L, 54L), 1L), r.array(r.array(2L, 58L), 1L), r.array(r.array(2L, 62L), 1L), r.array(r.array(2L, 66L), 1L), r.array(r.array(2L, 70L), 1L), r.array(r.array(2L, 74L), 1L), r.array(r.array(2L, 78L), 1L), r.array(r.array(2L, 82L), 1L), r.array(r.array(2L, 86L), 1L), r.array(r.array(2L, 90L), 1L), r.array(r.array(2L, 94L), 1L), r.array(r.array(2L, 98L), 1L), r.array(r.array(3L, 3L), 1L), r.array(r.array(3L, 7L), 1L), r.array(r.array(3L, 11L), 1L), r.array(r.array(3L, 15L), 1L), r.array(r.array(3L, 19L), 1L), r.array(r.array(3L, 23L), 1L), r.array(r.array(3L, 27L), 1L), r.array(r.array(3L, 31L), 1L), r.array(r.array(3L, 35L), 1L), r.array(r.array(3L, 39L), 1L), r.array(r.array(3L, 43L), 1L), r.array(r.array(3L, 47L), 1L), r.array(r.array(3L, 51L), 1L), r.array(r.array(3L, 55L), 1L), r.array(r.array(3L, 59L), 1L), r.array(r.array(3L, 63L), 1L), r.array(r.array(3L, 67L), 1L), r.array(r.array(3L, 71L), 1L), r.array(r.array(3L, 75L), 1L), r.array(r.array(3L, 79L), 1L), r.array(r.array(3L, 83L), 1L), r.array(r.array(3L, 87L), 1L), r.array(r.array(3L, 91L), 1L), r.array(r.array(3L, 95L), 1L), r.array(r.array(3L, 99L), 1L)));
                 
                 /* Original: tbl.group('a', index='id').count() */
                 var obtained = runOrCatch( tbl.group("a").optArg("index", "id").count() ,
                                            new OptArgs()
                     .with("group_format", "raw")
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #88
                 /* ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[[0, 0], 25], [[1, 1], 25], [[2, 2], 25], [[3, 3], 25]]}) */
                 var expected_ = r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(r.array(0L, 0L), 25L), r.array(r.array(1L, 1L), 25L), r.array(r.array(2L, 2L), 25L), r.array(r.array(3L, 3L), 25L)));
                 
                 /* Original: tbl.group('a', index='a').count() */
                 var obtained = runOrCatch( tbl.group("a").optArg("index", "a").count() ,
                                            new OptArgs()
                     .with("group_format", "raw")
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #89
                 /* ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[[0, "f", null, [0]], 25], [[0, "f", null, null], 25], [[0, "f", null, 0], 25], [[0, "f", null, {}], 25], [[1, "f", null, [0]], 25], [[1, "f", null, null], 25], [[1, "f", null, 0], 25], [[1, "f", null, {}], 25], [[2, "f", null, [0]], 25], [[2, "f", null, null], 25], [[2, "f", null, 0], 25], [[2, "f", null, {}], 25], [[3, "f", null, [0]], 25], [[3, "f", null, null], 25], [[3, "f", null, 0], 25], [[3, "f", null, {}], 25]]}) */
                 var expected_ = r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(r.array(0L, "f", null, r.array(0L)), 25L), r.array(r.array(0L, "f", null, null), 25L), r.array(r.array(0L, "f", null, 0L), 25L), r.array(r.array(0L, "f", null, r.hashMap()), 25L), r.array(r.array(1L, "f", null, r.array(0L)), 25L), r.array(r.array(1L, "f", null, null), 25L), r.array(r.array(1L, "f", null, 0L), 25L), r.array(r.array(1L, "f", null, r.hashMap()), 25L), r.array(r.array(2L, "f", null, r.array(0L)), 25L), r.array(r.array(2L, "f", null, null), 25L), r.array(r.array(2L, "f", null, 0L), 25L), r.array(r.array(2L, "f", null, r.hashMap()), 25L), r.array(r.array(3L, "f", null, r.array(0L)), 25L), r.array(r.array(3L, "f", null, null), 25L), r.array(r.array(3L, "f", null, 0L), 25L), r.array(r.array(3L, "f", null, r.hashMap()), 25L)));
                 
                 /* Original: tbl.group('a', lambda row:'f', lambda row:[], lambda row:[{}, [0], null, 0], multi=True).count() */
                 var obtained = runOrCatch( tbl.group("a", row => "f", row => r.array(), row => r.array(r.hashMap(), r.array(0L), null, 0L)).optArg("multi", true).count() ,
                                            new OptArgs()
                     .with("group_format", "raw")
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #90
                 /* ExpectedOriginal: ([{'group':0, 'reduction':25}, {'group':1, 'reduction':25}, {'group':2, 'reduction':25}, {'group':3, 'reduction':25}]) */
                 var expected_ = r.array(r.hashMap("group", 0L).with("reduction", 25L), r.hashMap("group", 1L).with("reduction", 25L), r.hashMap("group", 2L).with("reduction", 25L), r.hashMap("group", 3L).with("reduction", 25L));
                 
                 /* Original: tbl.group('a').count().ungroup() */
                 var obtained = runOrCatch( tbl.group("a").count().ungroup() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #91
                 /* ExpectedOriginal: ([0, 1, 2, 3]) */
                 var expected_ = r.array(0L, 1L, 2L, 3L);
                 
                 /* Original: tbl.group('a').ungroup()['group'] */
                 var obtained = runOrCatch( tbl.group("a").ungroup().g("group") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #93
                 /* ExpectedOriginal: ([{'group':[0,null],'reduction':25},{'group':[1,null],'reduction':25},{'group':[2,null],'reduction':25},{'group':[3,null],'reduction':25}]) */
                 var expected_ = r.array(r.hashMap("group", r.array(0L, null)).with("reduction", 25L), r.hashMap("group", r.array(1L, null)).with("reduction", 25L), r.hashMap("group", r.array(2L, null)).with("reduction", 25L), r.hashMap("group", r.array(3L, null)).with("reduction", 25L));
                 
                 /* Original: tbl.group('a', null).count().ungroup() */
                 var obtained = runOrCatch( tbl.group("a", (ReqlExpr) null).count().ungroup() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #94
                 /* ExpectedOriginal: ([{'group':[0,1],'reduction':25},{'group':[0,'two'],'reduction':25},{'group':[1,1],'reduction':25},{'group':[1,'two'],'reduction':25},{'group':[2,1],'reduction':25},{'group':[2,'two'],'reduction':25},{'group':[3,1],'reduction':25},{'group':[3,'two'],'reduction':25}]) */
                 var expected_ = r.array(r.hashMap("group", r.array(0L, 1L)).with("reduction", 25L), r.hashMap("group", r.array(0L, "two")).with("reduction", 25L), r.hashMap("group", r.array(1L, 1L)).with("reduction", 25L), r.hashMap("group", r.array(1L, "two")).with("reduction", 25L), r.hashMap("group", r.array(2L, 1L)).with("reduction", 25L), r.hashMap("group", r.array(2L, "two")).with("reduction", 25L), r.hashMap("group", r.array(3L, 1L)).with("reduction", 25L), r.hashMap("group", r.array(3L, "two")).with("reduction", 25L));
                 
                 /* Original: tbl.group('a', lambda row:[1,'two'], multi=True).count().ungroup() */
                 var obtained = runOrCatch( tbl.group("a", row => r.array(1L, "two")).optArg("multi", true).count().ungroup() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #95
                 /* ExpectedOriginal: 100 */
                 var expected_ = 100L;
                 
                 /* Original: tbl.count() */
                 var obtained = runOrCatch( tbl.count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #103
                 /* ExpectedOriginal: ({'a':0,'id':0}) */
                 var expected_ = r.hashMap("a", 0L).with("id", 0L);
                 
                 /* Original: tbl.min() */
                 var obtained = runOrCatch( tbl.min() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #104
                 /* ExpectedOriginal: ({'a':0,'id':0}) */
                 var expected_ = r.hashMap("a", 0L).with("id", 0L);
                 
                 /* Original: tbl.min(index='id') */
                 var obtained = runOrCatch( tbl.min().optArg("index", "id") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #105
                 /* ExpectedOriginal: ({'a':0,'id':0}) */
                 var expected_ = r.hashMap("a", 0L).with("id", 0L);
                 
                 /* Original: tbl.min(index='a') */
                 var obtained = runOrCatch( tbl.min().optArg("index", "a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #106
                 /* ExpectedOriginal: ({'a':3,'id':99}) */
                 var expected_ = r.hashMap("a", 3L).with("id", 99L);
                 
                 /* Original: tbl.max().without('b') */
                 var obtained = runOrCatch( tbl.max().without("b") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #107
                 /* ExpectedOriginal: ({'a':3,'id':99}) */
                 var expected_ = r.hashMap("a", 3L).with("id", 99L);
                 
                 /* Original: tbl.max(index='id').without('b') */
                 var obtained = runOrCatch( tbl.max().optArg("index", "id").without("b") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, aggregation.yaml, #108
                 /* ExpectedOriginal: ({'a':3,'id':99}) */
                 var expected_ = r.hashMap("a", 3L).with("id", 99L);
                 
                 /* Original: tbl.max(index='a').without('b') */
                 var obtained = runOrCatch( tbl.max().optArg("index", "a").without("b") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             

        }
    }
}
