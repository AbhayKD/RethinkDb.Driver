




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class MathLogicComparison : GeneratedTest {

        public MathLogicComparison (){
        }




        [Test]
        public void YamlTest(){

             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #1
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr(1) < 2 */
                 var obtained = runOrCatch( r.expr(1L).lt(2L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #1
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: 1 < r.expr(2) */
                 var obtained = runOrCatch( r.lt(1L, r.expr(2L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #1
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr(1).lt(2) */
                 var obtained = runOrCatch( r.expr(1L).lt(2L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #2
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr(3) < 2 */
                 var obtained = runOrCatch( r.expr(3L).lt(2L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #3
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr(2) < 2 */
                 var obtained = runOrCatch( r.expr(2L).lt(2L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #6
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr(1) > 2 */
                 var obtained = runOrCatch( r.expr(1L).gt(2L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #6
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: 1 > r.expr(2) */
                 var obtained = runOrCatch( r.gt(1L, r.expr(2L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #6
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr(1).gt(2) */
                 var obtained = runOrCatch( r.expr(1L).gt(2L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #7
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr(3) > 2 */
                 var obtained = runOrCatch( r.expr(3L).gt(2L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #8
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr(2) > 2 */
                 var obtained = runOrCatch( r.expr(2L).gt(2L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #11
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr(1) == 2 */
                 var obtained = runOrCatch( r.expr(1L).eq(2L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #11
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: 1 == r.expr(2) */
                 var obtained = runOrCatch( r.eq(1L, r.expr(2L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #11
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr(1).eq(2) */
                 var obtained = runOrCatch( r.expr(1L).eq(2L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #12
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr(3) == 2 */
                 var obtained = runOrCatch( r.expr(3L).eq(2L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #13
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr(2) == 2 */
                 var obtained = runOrCatch( r.expr(2L).eq(2L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #16
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr(1) != 2 */
                 var obtained = runOrCatch( r.expr(1L).ne(2L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #16
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: 1 != r.expr(2) */
                 var obtained = runOrCatch( r.ne(1L, r.expr(2L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #16
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr(1).ne(2) */
                 var obtained = runOrCatch( r.expr(1L).ne(2L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #17
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr(3) != 2 */
                 var obtained = runOrCatch( r.expr(3L).ne(2L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #18
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr(2) != 2 */
                 var obtained = runOrCatch( r.expr(2L).ne(2L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #21
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr(1) <= 2 */
                 var obtained = runOrCatch( r.expr(1L).le(2L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #21
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: 1 <= r.expr(2) */
                 var obtained = runOrCatch( r.le(1L, r.expr(2L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #21
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr(1).le(2) */
                 var obtained = runOrCatch( r.expr(1L).le(2L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #22
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr(3) <= 2 */
                 var obtained = runOrCatch( r.expr(3L).le(2L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #23
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr(2) <= 2 */
                 var obtained = runOrCatch( r.expr(2L).le(2L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #26
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr(1) >= 2 */
                 var obtained = runOrCatch( r.expr(1L).ge(2L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #26
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: 1 >= r.expr(2) */
                 var obtained = runOrCatch( r.ge(1L, r.expr(2L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #26
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr(1).ge(2) */
                 var obtained = runOrCatch( r.expr(1L).ge(2L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #27
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr(3) >= 2 */
                 var obtained = runOrCatch( r.expr(3L).ge(2L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #28
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr(2) >= 2 */
                 var obtained = runOrCatch( r.expr(2L).ge(2L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #31
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr(null) == null */
                 var obtained = runOrCatch( r.expr((ReqlExpr) null).eq(null) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #31
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: null == r.expr(null) */
                 var obtained = runOrCatch( r.eq(null, r.expr((ReqlExpr) null)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #32
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr(null) < null */
                 var obtained = runOrCatch( r.expr((ReqlExpr) null).lt(null) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #32
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: null < r.expr(null) */
                 var obtained = runOrCatch( r.lt(null, r.expr((ReqlExpr) null)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #32
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr(null).gt(null) */
                 var obtained = runOrCatch( r.expr((ReqlExpr) null).gt((ReqlExpr) null) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #33
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr(null) > null */
                 var obtained = runOrCatch( r.expr((ReqlExpr) null).gt(null) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #33
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: null > r.expr(null) */
                 var obtained = runOrCatch( r.gt(null, r.expr((ReqlExpr) null)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #33
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr(null).lt(null) */
                 var obtained = runOrCatch( r.expr((ReqlExpr) null).lt((ReqlExpr) null) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #34
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr('a') == 'a' */
                 var obtained = runOrCatch( r.expr("a").eq("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #35
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr('a') == 'aa' */
                 var obtained = runOrCatch( r.expr("a").eq("aa") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #36
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr('a') < 'aa' */
                 var obtained = runOrCatch( r.expr("a").lt("aa") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #37
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr('a') < 'bb' */
                 var obtained = runOrCatch( r.expr("a").lt("bb") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #38
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr('bb') > 'a' */
                 var obtained = runOrCatch( r.expr("bb").gt("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #39
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr('abcdef') < 'abcdeg' */
                 var obtained = runOrCatch( r.expr("abcdef").lt("abcdeg") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #40
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr('abcdefg') > 'abcdeg' */
                 var obtained = runOrCatch( r.expr("abcdefg").gt("abcdeg") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #41
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr('A quick brown fox') > 'A quick brawn fox' */
                 var obtained = runOrCatch( r.expr("A quick brown fox").gt("A quick brawn fox") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #42
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr([1]) < [2] */
                 var obtained = runOrCatch( r.expr(r.array(1L)).lt(r.array(2L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #43
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr([1]) > [2] */
                 var obtained = runOrCatch( r.expr(r.array(1L)).gt(r.array(2L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #44
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr([1, 0]) < [2] */
                 var obtained = runOrCatch( r.expr(r.array(1L, 0L)).lt(r.array(2L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #45
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr([1, 0]) < [1] */
                 var obtained = runOrCatch( r.expr(r.array(1L, 0L)).lt(r.array(1L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #46
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr([1, 0]) > [0] */
                 var obtained = runOrCatch( r.expr(r.array(1L, 0L)).gt(r.array(0L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #47
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr([1, 'a']) < [1, 'b'] */
                 var obtained = runOrCatch( r.expr(r.array(1L, "a")).lt(r.array(1L, "b")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #48
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr([0, 'z']) < [1, 'b'] */
                 var obtained = runOrCatch( r.expr(r.array(0L, "z")).lt(r.array(1L, "b")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #49
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr([1, 1, 1]) < [1, 0, 2] */
                 var obtained = runOrCatch( r.expr(r.array(1L, 1L, 1L)).lt(r.array(1L, 0L, 2L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #50
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr([1, 0, 2]) < [1, 1, 1] */
                 var obtained = runOrCatch( r.expr(r.array(1L, 0L, 2L)).lt(r.array(1L, 1L, 1L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #51
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr({'a':0}) == {'a':0} */
                 var obtained = runOrCatch( r.expr(r.hashMap("a", 0L)).eq(r.hashMap("a", 0L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #52
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr({'a':0, 'b':1}) == {'b':1, 'a':0} */
                 var obtained = runOrCatch( r.expr(r.hashMap("a", 0L).with("b", 1L)).eq(r.hashMap("b", 1L).with("a", 0L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #53
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr({'a':0, 'b':1, 'c':2}) == {'b':1, 'a':0} */
                 var obtained = runOrCatch( r.expr(r.hashMap("a", 0L).with("b", 1L).with("c", 2L)).eq(r.hashMap("b", 1L).with("a", 0L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #54
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr({'a':0, 'b':1}) == {'b':1, 'a':0, 'c':2} */
                 var obtained = runOrCatch( r.expr(r.hashMap("a", 0L).with("b", 1L)).eq(r.hashMap("b", 1L).with("a", 0L).with("c", 2L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #55
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr({'a':0, 'b':1, 'd':2}) == {'b':1, 'a':0, 'c':2} */
                 var obtained = runOrCatch( r.expr(r.hashMap("a", 0L).with("b", 1L).with("d", 2L)).eq(r.hashMap("b", 1L).with("a", 0L).with("c", 2L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #56
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr({'a':0}) < {'b':0} */
                 var obtained = runOrCatch( r.expr(r.hashMap("a", 0L)).lt(r.hashMap("b", 0L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #57
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr({'a':1}) < {'b':0} */
                 var obtained = runOrCatch( r.expr(r.hashMap("a", 1L)).lt(r.hashMap("b", 0L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #58
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr({'b':1}) < {'b':0} */
                 var obtained = runOrCatch( r.expr(r.hashMap("b", 1L)).lt(r.hashMap("b", 0L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #59
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr({'b':1}) < {'a':0} */
                 var obtained = runOrCatch( r.expr(r.hashMap("b", 1L)).lt(r.hashMap("a", 0L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #60
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr({'a':0, 'b':1, 'c':2}) < {'a':0, 'b':1, 'c':2} */
                 var obtained = runOrCatch( r.expr(r.hashMap("a", 0L).with("b", 1L).with("c", 2L)).lt(r.hashMap("a", 0L).with("b", 1L).with("c", 2L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #61
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr({'a':0, 'b':1, 'c':2, 'd':3}) < {'a':0, 'b':1, 'c':2} */
                 var obtained = runOrCatch( r.expr(r.hashMap("a", 0L).with("b", 1L).with("c", 2L).with("d", 3L)).lt(r.hashMap("a", 0L).with("b", 1L).with("c", 2L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #62
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr({'a':0, 'b':1, 'c':2}) < {'a':0, 'b':1, 'c':2, 'd':3} */
                 var obtained = runOrCatch( r.expr(r.hashMap("a", 0L).with("b", 1L).with("c", 2L)).lt(r.hashMap("a", 0L).with("b", 1L).with("c", 2L).with("d", 3L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #63
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr({'a':0, 'c':2}) < {'a':0, 'b':1, 'c':2} */
                 var obtained = runOrCatch( r.expr(r.hashMap("a", 0L).with("c", 2L)).lt(r.hashMap("a", 0L).with("b", 1L).with("c", 2L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #64
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr({'a':0, 'c':2}) > {'a':0, 'b':1, 'c':2} */
                 var obtained = runOrCatch( r.expr(r.hashMap("a", 0L).with("c", 2L)).gt(r.hashMap("a", 0L).with("b", 1L).with("c", 2L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             
             //JavaDef, math_logic/comparison.yaml, #Templates.YamlTest+DefTest.
             //Original: everything = r.expr([[],r.now(),r.binary(b"\x00"),false,null,-5,{},"a",r.maxval])
             
var everything = (MakeArray) (r.expr(r.array(r.array(), r.now(), r.binary(new byte[] { 0 }), false, null, -5L, r.hashMap(), "a", r.maxval())));             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #68
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.eq(r.minval, r.minval) */
                 var obtained = runOrCatch( r.eq(r.minval(), r.minval()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #69
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr([]) < True */
                 var obtained = runOrCatch( r.expr(r.array()).lt(true) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #70
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr([1,2]) < False */
                 var obtained = runOrCatch( r.expr(r.array(1L, 2L)).lt(false) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #71
                 /* ExpectedOriginal: None */
                 var expected_ = null as object;
                 
                 /* Original: r.expr(False) < [] */
                 var obtained = runOrCatch( r.expr(false).lt(r.array()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #72
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr([]) < r.binary(b"\xAE") */
                 var obtained = runOrCatch( r.expr(r.array()).lt(r.binary(new byte[] { 174 })) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #73
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr([1,2]) < r.binary(b"\xAE") */
                 var obtained = runOrCatch( r.expr(r.array(1L, 2L)).lt(r.binary(new byte[] { 174 })) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #74
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: True < r.expr(null) */
                 var obtained = runOrCatch( r.lt(true, r.expr((ReqlExpr) null)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #75
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr(null) > [] */
                 var obtained = runOrCatch( r.expr((ReqlExpr) null).gt(r.array()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #76
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr(null) < 12 */
                 var obtained = runOrCatch( r.expr((ReqlExpr) null).lt(12L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #77
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr(null) < -2 */
                 var obtained = runOrCatch( r.expr((ReqlExpr) null).lt(-2L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #78
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr(-12) < {} */
                 var obtained = runOrCatch( r.expr(-12L).lt(r.hashMap()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #79
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr(100) < {'a':-12} */
                 var obtained = runOrCatch( r.expr(100L).lt(r.hashMap("a", -12L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #80
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.expr(r.binary(b"\xAE")) < 12 */
                 var obtained = runOrCatch( r.expr(r.binary(new byte[] { 174 })).lt(12L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #81
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.binary(b"0xAE") < 'abc' */
                 var obtained = runOrCatch( r.binary(new byte[] { 48, 120, 65, 69 }).lt("abc") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #82
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.binary(b"0xAE") > r.now() */
                 var obtained = runOrCatch( r.binary(new byte[] { 48, 120, 65, 69 }).gt(r.now()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #83
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.now() > 12 */
                 var obtained = runOrCatch( r.now().gt(12L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #84
                 /* ExpectedOriginal: False */
                 var expected_ = false;
                 
                 /* Original: r.now() > 'abc' */
                 var obtained = runOrCatch( r.now().gt("abc") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #85
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr("abc") > {'a':-12} */
                 var obtained = runOrCatch( r.expr("abc").gt(r.hashMap("a", -12L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #86
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr("abc") > {'abc':'abc'} */
                 var obtained = runOrCatch( r.expr("abc").gt(r.hashMap("abc", "abc")) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #87
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr('zzz') > 128 */
                 var obtained = runOrCatch( r.expr("zzz").gt(128L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #88
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.expr('zzz') > {} */
                 var obtained = runOrCatch( r.expr("zzz").gt(r.hashMap()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #89
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: "'zzz' > r.expr(-152)" */
                 var obtained = runOrCatch( r.gt("zzz", r.expr(-152L)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #90
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: "'zzz' > r.expr(null)" */
                 var obtained = runOrCatch( r.gt("zzz", r.expr((ReqlExpr) null)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #91
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: "'zzz' > r.expr([])" */
                 var obtained = runOrCatch( r.gt("zzz", r.expr(r.array())) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             
             //JavaDef, math_logic/comparison.yaml, #Templates.YamlTest+DefTest.
             //Original: everything2 = r.expr([r.minval,[],r.now(),r.binary(b"\x00"),false,null,-5,{},"a"])
             
var everything2 = (MakeArray) (r.expr(r.array(r.minval(), r.array(), r.now(), r.binary(new byte[] { 0 }), false, null, -5L, r.hashMap(), "a")));             
             TestCounter++;
             
             {
                 //JavaQuery, math_logic/comparison.yaml, #95
                 /* ExpectedOriginal: True */
                 var expected_ = true;
                 
                 /* Original: r.eq(r.maxval, r.maxval) */
                 var obtained = runOrCatch( r.eq(r.maxval(), r.maxval()) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             

        }
    }
}
