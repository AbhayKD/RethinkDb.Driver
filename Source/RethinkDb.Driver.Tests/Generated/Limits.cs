




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class Limits : GeneratedTest {

            public static Table tbl = r.db(DbName).table("tbl");


        [Test]
        public void YamlTest(){

             
             {
                 //JavaQuery, limits.yaml, #1
                 //ExpectedOriginal: [1, 1, 1, 1, 1, 1, 1, 1]
                 var expected = Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1);
                 
                 //Original: r.expr([1,1,1,1]).union([1, 1, 1, 1])
                 var obtained = runOrCatch( r.expr(Arrays.asList(1, 1, 1, 1)).union(Arrays.asList(1, 1, 1, 1)) ,
                                            new OptArgs()
                     .with("array_limit", 8)
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, limits.yaml, #2
                 //ExpectedOriginal: err("ReqlResourceLimitError", "Array over size limit `4`.", [0])
                 var expected = err("ReqlResourceLimitError", "Array over size limit `4`.", Arrays.asList(0));
                 
                 //Original: r.expr([1,2,3,4]).union([5, 6, 7, 8])
                 var obtained = runOrCatch( r.expr(Arrays.asList(1, 2, 3, 4)).union(Arrays.asList(5, 6, 7, 8)) ,
                                            new OptArgs()
                     .with("array_limit", 4)
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, limits.yaml, #3
                 //ExpectedOriginal: err("ReqlResourceLimitError", "Array over size limit `4`.", [0])
                 var expected = err("ReqlResourceLimitError", "Array over size limit `4`.", Arrays.asList(0));
                 
                 //Original: r.expr([1,2,3,4,5,6,7,8])
                 var obtained = runOrCatch( r.expr(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8)) ,
                                            new OptArgs()
                     .with("array_limit", 4)
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, limits.yaml, #4
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Illegal array size limit `-1`.  (Must be >= 1.)", [])
                 var expected = err("ReqlQueryLogicError", "Illegal array size limit `-1`.  (Must be >= 1.)", Arrays.asList());
                 
                 //Original: r.expr([1,2,3,4,5,6,7,8])
                 var obtained = runOrCatch( r.expr(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8)) ,
                                            new OptArgs()
                     .with("array_limit", -1)
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, limits.yaml, #5
                 //ExpectedOriginal: err("ReqlQueryLogicError", "Illegal array size limit `0`.  (Must be >= 1.)", [])
                 var expected = err("ReqlQueryLogicError", "Illegal array size limit `0`.  (Must be >= 1.)", Arrays.asList());
                 
                 //Original: r.expr([1,2,3,4,5,6,7,8])
                 var obtained = runOrCatch( r.expr(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8)) ,
                                            new OptArgs()
                     .with("array_limit", 0)
                    );
                 assertEquals(expected, obtained);
             }
             
             
             //JavaDef, limits.yaml, #Templates.YamlTest+DefTest.
             //Original: ten_l = r.expr([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
             
MakeArray ten_l = (MakeArray) r.expr(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));             
             
             //JavaDef, limits.yaml, #Templates.YamlTest+DefTest.
             //Original: huge_l = r.expr(ten_l).concat_map(ten_f).concat_map(ten_f).concat_map(ten_f).concat_map(ten_f)
             
ConcatMap huge_l = (ConcatMap) r.expr(ten_l).concatMap(ten_f).concatMap(ten_f).concatMap(ten_f).concatMap(ten_f);             
             
             {
                 //JavaQuery, limits.yaml, #9
                 //ExpectedOriginal: 100001
                 var expected = 100001;
                 
                 //Original: huge_l.append(1).count()
                 var obtained = runOrCatch( huge_l.append(1).count() ,
                                            new OptArgs()
                     .with("array_limit", 100001)
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, limits.yaml, #10
                 //ExpectedOriginal: partial({'errors':1, 'first_error':"Array too large for disk writes (limit 100,000 elements)."})
                 var expected = partial(new MapObject().with("errors", 1).with("first_error", "Array too large for disk writes (limit 100,000 elements)."));
                 
                 //Original: tbl.insert({'id':0, 'array':huge_l.append(1)})
                 var obtained = runOrCatch( tbl.insert(new MapObject().with("id", 0).with("array", huge_l.append(1))) ,
                                            new OptArgs()
                     .with("array_limit", 100001)
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, limits.yaml, #11
                 //ExpectedOriginal: (null)
                 var expected = null as object;
                 
                 //Original: tbl.get(0)
                 var obtained = runOrCatch( tbl.get(0) ,
                                            new OptArgs()
                     .with("array_limit", 100001)
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, limits.yaml, #12
                 //ExpectedOriginal: ({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':1})
                 var expected = new MapObject().with("deleted", 0.0).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 1);
                 
                 //Original: tbl.insert({'id':1, 'array':ten_l})
                 var obtained = runOrCatch( tbl.insert(new MapObject().with("id", 1).with("array", ten_l)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, limits.yaml, #13
                 //ExpectedOriginal: ({'array':[1,2,3,4,5,6,7,8,9,10],'id':1})
                 var expected = new MapObject().with("array", Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)).with("id", 1);
                 
                 //Original: tbl.get(1)
                 var obtained = runOrCatch( tbl.get(1) ,
                                            new OptArgs()
                     .with("array_limit", 4)
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, limits.yaml, #14
                 //ExpectedOriginal: 1
                 var expected = 1;
                 
                 //Original: tbl.delete().get_field('deleted')
                 var obtained = runOrCatch( tbl.delete().getField("deleted") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             //JavaDef, limits.yaml, #Templates.YamlTest+DefTest.
             //Original: c = tbl.changes(squash=1000000, changefeed_queue_size=10)
             
Changes c = (Changes) tbl.changes().optArg("squash", 1000000).optArg("changefeed_queue_size", 10);             
             
             {
                 //JavaQuery, limits.yaml, #16
                 //ExpectedOriginal: 7
                 var expected = 7;
                 
                 //Original: tbl.insert([{'id':0}, {'id':1}, {'id':2}, {'id':3}, {'id':4}, {'id':5}, {'id':6}]).get_field('inserted')
                 var obtained = runOrCatch( tbl.insert(Arrays.asList(new MapObject().with("id", 0), new MapObject().with("id", 1), new MapObject().with("id", 2), new MapObject().with("id", 3), new MapObject().with("id", 4), new MapObject().with("id", 5), new MapObject().with("id", 6))).getField("inserted") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, limits.yaml, #17
                 //ExpectedOriginal: bag([{'old_val':null, 'new_val':{'id':0}}, {'old_val':null, 'new_val':{'id':1}}, {'old_val':null, 'new_val':{'id':2}}, {'old_val':null, 'new_val':{'id':3}}, {'old_val':null, 'new_val':{'id':4}}, {'old_val':null, 'new_val':{'id':5}}, {'old_val':null, 'new_val':{'id':6}}])
                 var expected = bag(Arrays.asList(new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 0)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 1)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 2)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 3)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 4)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 5)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 6))));
                 
                 //Original: fetch(c, 7)
                 var obtained = runOrCatch( fetch(c, 7) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, limits.yaml, #18
                 //ExpectedOriginal: 7
                 var expected = 7;
                 
                 //Original: tbl.insert([{'id':7}, {'id':8}, {'id':9}, {'id':10}, {'id':11}, {'id':12}, {'id':13}]).get_field('inserted')
                 var obtained = runOrCatch( tbl.insert(Arrays.asList(new MapObject().with("id", 7), new MapObject().with("id", 8), new MapObject().with("id", 9), new MapObject().with("id", 10), new MapObject().with("id", 11), new MapObject().with("id", 12), new MapObject().with("id", 13))).getField("inserted") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, limits.yaml, #19
                 //ExpectedOriginal: bag([{'old_val':null, 'new_val':{'id':7}}, {'old_val':null, 'new_val':{'id':8}}, {'old_val':null, 'new_val':{'id':9}}, {'old_val':null, 'new_val':{'id':10}}, {'old_val':null, 'new_val':{'id':11}}, {'old_val':null, 'new_val':{'id':12}}, {'old_val':null, 'new_val':{'id':13}}])
                 var expected = bag(Arrays.asList(new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 7)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 8)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 9)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 10)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 11)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 12)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 13))));
                 
                 //Original: fetch(c, 7)
                 var obtained = runOrCatch( fetch(c, 7) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, limits.yaml, #20
                 //ExpectedOriginal: 14
                 var expected = 14;
                 
                 //Original: tbl.delete().get_field('deleted')
                 var obtained = runOrCatch( tbl.delete().getField("deleted") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             //JavaDef, limits.yaml, #Templates.YamlTest+DefTest.
             //Original: c2 = tbl.changes(squash=1000000)
             
Changes c2 = (Changes) tbl.changes().optArg("squash", 1000000);             
             
             {
                 //JavaQuery, limits.yaml, #22
                 //ExpectedOriginal: 7
                 var expected = 7;
                 
                 //Original: tbl.insert([{'id':0}, {'id':1}, {'id':2}, {'id':3}, {'id':4}, {'id':5}, {'id':6}]).get_field('inserted')
                 var obtained = runOrCatch( tbl.insert(Arrays.asList(new MapObject().with("id", 0), new MapObject().with("id", 1), new MapObject().with("id", 2), new MapObject().with("id", 3), new MapObject().with("id", 4), new MapObject().with("id", 5), new MapObject().with("id", 6))).getField("inserted") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, limits.yaml, #23
                 //ExpectedOriginal: bag([{'old_val':null, 'new_val':{'id':0}}, {'old_val':null, 'new_val':{'id':1}}, {'old_val':null, 'new_val':{'id':2}}, {'old_val':null, 'new_val':{'id':3}}, {'old_val':null, 'new_val':{'id':4}}, {'old_val':null, 'new_val':{'id':5}}, {'old_val':null, 'new_val':{'id':6}}])
                 var expected = bag(Arrays.asList(new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 0)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 1)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 2)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 3)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 4)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 5)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 6))));
                 
                 //Original: fetch(c2, 7)
                 var obtained = runOrCatch( fetch(c2, 7) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, limits.yaml, #24
                 //ExpectedOriginal: 7
                 var expected = 7;
                 
                 //Original: tbl.insert([{'id':7}, {'id':8}, {'id':9}, {'id':10}, {'id':11}, {'id':12}, {'id':13}]).get_field('inserted')
                 var obtained = runOrCatch( tbl.insert(Arrays.asList(new MapObject().with("id", 7), new MapObject().with("id", 8), new MapObject().with("id", 9), new MapObject().with("id", 10), new MapObject().with("id", 11), new MapObject().with("id", 12), new MapObject().with("id", 13))).getField("inserted") ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             
             
             {
                 //JavaQuery, limits.yaml, #25
                 //ExpectedOriginal: bag([{'old_val':null, 'new_val':{'id':7}}, {'old_val':null, 'new_val':{'id':8}}, {'old_val':null, 'new_val':{'id':9}}, {'old_val':null, 'new_val':{'id':10}}, {'old_val':null, 'new_val':{'id':11}}, {'old_val':null, 'new_val':{'id':12}}, {'old_val':null, 'new_val':{'id':13}}])
                 var expected = bag(Arrays.asList(new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 7)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 8)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 9)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 10)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 11)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 12)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 13))));
                 
                 //Original: fetch(c2, 7)
                 var obtained = runOrCatch( fetch(c2, 7) ,
                                            new OptArgs()
                    );
                 assertEquals(expected, obtained);
             }
             

        }
    }
}
