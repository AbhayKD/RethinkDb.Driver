




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class Limits : GeneratedTest {

            public static Table tbl = r.db(DbName).table("tbl");


        [Test]
        public void YamlTest(){

             TestCounter++;
             
             {
                 //JavaQuery, limits.yaml, #1
                 /* ExpectedOriginal: [1, 1, 1, 1, 1, 1, 1, 1] */
                 var expected_ = r.array(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L);
                 
                 /* Original: r.expr([1,1,1,1]).union([1, 1, 1, 1]) */
                 var obtained = runOrCatch( r.expr(r.array(1L, 1L, 1L, 1L)).union(r.array(1L, 1L, 1L, 1L)) ,
                                            new OptArgs()
                     .with("array_limit", 8L)
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, limits.yaml, #2
                 /* ExpectedOriginal: err("ReqlResourceLimitError", "Array over size limit `4`.", [0]) */
                 var expected_ = err("ReqlResourceLimitError", "Array over size limit `4`.", r.array(0L));
                 
                 /* Original: r.expr([1,2,3,4]).union([5, 6, 7, 8]) */
                 var obtained = runOrCatch( r.expr(r.array(1L, 2L, 3L, 4L)).union(r.array(5L, 6L, 7L, 8L)) ,
                                            new OptArgs()
                     .with("array_limit", 4L)
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, limits.yaml, #3
                 /* ExpectedOriginal: err("ReqlResourceLimitError", "Array over size limit `4`.", [0]) */
                 var expected_ = err("ReqlResourceLimitError", "Array over size limit `4`.", r.array(0L));
                 
                 /* Original: r.expr([1,2,3,4,5,6,7,8]) */
                 var obtained = runOrCatch( r.expr(r.array(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L)) ,
                                            new OptArgs()
                     .with("array_limit", 4L)
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, limits.yaml, #4
                 /* ExpectedOriginal: err("ReqlQueryLogicError", "Illegal array size limit `-1`.  (Must be >= 1.)", []) */
                 var expected_ = err("ReqlQueryLogicError", "Illegal array size limit `-1`.  (Must be >= 1.)", r.array());
                 
                 /* Original: r.expr([1,2,3,4,5,6,7,8]) */
                 var obtained = runOrCatch( r.expr(r.array(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L)) ,
                                            new OptArgs()
                     .with("array_limit", -1L)
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, limits.yaml, #5
                 /* ExpectedOriginal: err("ReqlQueryLogicError", "Illegal array size limit `0`.  (Must be >= 1.)", []) */
                 var expected_ = err("ReqlQueryLogicError", "Illegal array size limit `0`.  (Must be >= 1.)", r.array());
                 
                 /* Original: r.expr([1,2,3,4,5,6,7,8]) */
                 var obtained = runOrCatch( r.expr(r.array(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L)) ,
                                            new OptArgs()
                     .with("array_limit", 0L)
                    );
                 assertEquals(expected_, obtained);
             }
             
             
             //JavaDef, limits.yaml, #Templates.YamlTest+DefTest.
             //Original: ten_l = r.expr([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
             
var ten_l = (MakeArray) (r.expr(r.array(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L)));             
             
             //JavaDef, limits.yaml, #Templates.YamlTest+DefTest.
             //Original: ten_f = lambda l:list(range(1,11))
             
ReqlFunction1 ten_f =  (l => list(range(1L, 11L)));             
             
             //JavaDef, limits.yaml, #Templates.YamlTest+DefTest.
             //Original: huge_l = r.expr(ten_l).concat_map(ten_f).concat_map(ten_f).concat_map(ten_f).concat_map(ten_f)
             
var huge_l = (ConcatMap) (r.expr(ten_l).concatMap(ten_f).concatMap(ten_f).concatMap(ten_f).concatMap(ten_f));             
             TestCounter++;
             
             {
                 //JavaQuery, limits.yaml, #9
                 /* ExpectedOriginal: 100001 */
                 var expected_ = 100001L;
                 
                 /* Original: huge_l.append(1).count() */
                 var obtained = runOrCatch( huge_l.append(1L).count() ,
                                            new OptArgs()
                     .with("array_limit", 100001L)
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, limits.yaml, #10
                 /* ExpectedOriginal: partial({'errors':1, 'first_error':"Array too large for disk writes (limit 100,000 elements)."}) */
                 var expected_ = partial(r.hashMap("errors", 1L).with("first_error", "Array too large for disk writes (limit 100,000 elements)."));
                 
                 /* Original: tbl.insert({'id':0, 'array':huge_l.append(1)}) */
                 var obtained = runOrCatch( tbl.insert(r.hashMap("id", 0L).with("array", huge_l.append(1L))) ,
                                            new OptArgs()
                     .with("array_limit", 100001L)
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, limits.yaml, #11
                 /* ExpectedOriginal: (null) */
                 var expected_ = null as object;
                 
                 /* Original: tbl.get(0) */
                 var obtained = runOrCatch( tbl.get(0L) ,
                                            new OptArgs()
                     .with("array_limit", 100001L)
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, limits.yaml, #12
                 /* ExpectedOriginal: ({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':1}) */
                 var expected_ = r.hashMap("deleted", 0.0).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 1L);
                 
                 /* Original: tbl.insert({'id':1, 'array':ten_l}) */
                 var obtained = runOrCatch( tbl.insert(r.hashMap("id", 1L).with("array", ten_l)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, limits.yaml, #13
                 /* ExpectedOriginal: ({'array':[1,2,3,4,5,6,7,8,9,10],'id':1}) */
                 var expected_ = r.hashMap("array", r.array(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L)).with("id", 1L);
                 
                 /* Original: tbl.get(1) */
                 var obtained = runOrCatch( tbl.get(1L) ,
                                            new OptArgs()
                     .with("array_limit", 4L)
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, limits.yaml, #14
                 /* ExpectedOriginal: 1 */
                 var expected_ = 1L;
                 
                 /* Original: tbl.delete().get_field('deleted') */
                 var obtained = runOrCatch( tbl.delete().g("deleted") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             
             //JavaDef, limits.yaml, #Templates.YamlTest+DefTest.
             //Original: c = tbl.changes(squash=1000000, changefeed_queue_size=10)
             
var c = (Changes) (tbl.changes().optArg("squash", 1000000L).optArg("changefeed_queue_size", 10L));             
             TestCounter++;
             
             {
                 //JavaQuery, limits.yaml, #16
                 /* ExpectedOriginal: 7 */
                 var expected_ = 7L;
                 
                 /* Original: tbl.insert([{'id':0}, {'id':1}, {'id':2}, {'id':3}, {'id':4}, {'id':5}, {'id':6}]).get_field('inserted') */
                 var obtained = runOrCatch( tbl.insert(r.array(r.hashMap("id", 0L), r.hashMap("id", 1L), r.hashMap("id", 2L), r.hashMap("id", 3L), r.hashMap("id", 4L), r.hashMap("id", 5L), r.hashMap("id", 6L))).g("inserted") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, limits.yaml, #17
                 /* ExpectedOriginal: bag([{'old_val':null, 'new_val':{'id':0}}, {'old_val':null, 'new_val':{'id':1}}, {'old_val':null, 'new_val':{'id':2}}, {'old_val':null, 'new_val':{'id':3}}, {'old_val':null, 'new_val':{'id':4}}, {'old_val':null, 'new_val':{'id':5}}, {'old_val':null, 'new_val':{'id':6}}]) */
                 var expected_ = bag(r.array(r.hashMap("old_val", null).with("new_val", r.hashMap("id", 0L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 1L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 2L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 3L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 4L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 5L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 6L))));
                 
                 /* Original: fetch(c, 7) */
                 var obtained = runOrCatch( fetch(c, 7L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, limits.yaml, #18
                 /* ExpectedOriginal: 7 */
                 var expected_ = 7L;
                 
                 /* Original: tbl.insert([{'id':7}, {'id':8}, {'id':9}, {'id':10}, {'id':11}, {'id':12}, {'id':13}]).get_field('inserted') */
                 var obtained = runOrCatch( tbl.insert(r.array(r.hashMap("id", 7L), r.hashMap("id", 8L), r.hashMap("id", 9L), r.hashMap("id", 10L), r.hashMap("id", 11L), r.hashMap("id", 12L), r.hashMap("id", 13L))).g("inserted") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, limits.yaml, #19
                 /* ExpectedOriginal: bag([{'old_val':null, 'new_val':{'id':7}}, {'old_val':null, 'new_val':{'id':8}}, {'old_val':null, 'new_val':{'id':9}}, {'old_val':null, 'new_val':{'id':10}}, {'old_val':null, 'new_val':{'id':11}}, {'old_val':null, 'new_val':{'id':12}}, {'old_val':null, 'new_val':{'id':13}}]) */
                 var expected_ = bag(r.array(r.hashMap("old_val", null).with("new_val", r.hashMap("id", 7L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 8L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 9L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 10L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 11L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 12L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 13L))));
                 
                 /* Original: fetch(c, 7) */
                 var obtained = runOrCatch( fetch(c, 7L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, limits.yaml, #20
                 /* ExpectedOriginal: 14 */
                 var expected_ = 14L;
                 
                 /* Original: tbl.delete().get_field('deleted') */
                 var obtained = runOrCatch( tbl.delete().g("deleted") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             
             //JavaDef, limits.yaml, #Templates.YamlTest+DefTest.
             //Original: c2 = tbl.changes(squash=1000000)
             
var c2 = (Changes) (tbl.changes().optArg("squash", 1000000L));             
             TestCounter++;
             
             {
                 //JavaQuery, limits.yaml, #22
                 /* ExpectedOriginal: 7 */
                 var expected_ = 7L;
                 
                 /* Original: tbl.insert([{'id':0}, {'id':1}, {'id':2}, {'id':3}, {'id':4}, {'id':5}, {'id':6}]).get_field('inserted') */
                 var obtained = runOrCatch( tbl.insert(r.array(r.hashMap("id", 0L), r.hashMap("id", 1L), r.hashMap("id", 2L), r.hashMap("id", 3L), r.hashMap("id", 4L), r.hashMap("id", 5L), r.hashMap("id", 6L))).g("inserted") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, limits.yaml, #23
                 /* ExpectedOriginal: bag([{'old_val':null, 'new_val':{'id':0}}, {'old_val':null, 'new_val':{'id':1}}, {'old_val':null, 'new_val':{'id':2}}, {'old_val':null, 'new_val':{'id':3}}, {'old_val':null, 'new_val':{'id':4}}, {'old_val':null, 'new_val':{'id':5}}, {'old_val':null, 'new_val':{'id':6}}]) */
                 var expected_ = bag(r.array(r.hashMap("old_val", null).with("new_val", r.hashMap("id", 0L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 1L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 2L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 3L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 4L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 5L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 6L))));
                 
                 /* Original: fetch(c2, 7) */
                 var obtained = runOrCatch( fetch(c2, 7L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, limits.yaml, #24
                 /* ExpectedOriginal: 7 */
                 var expected_ = 7L;
                 
                 /* Original: tbl.insert([{'id':7}, {'id':8}, {'id':9}, {'id':10}, {'id':11}, {'id':12}, {'id':13}]).get_field('inserted') */
                 var obtained = runOrCatch( tbl.insert(r.array(r.hashMap("id", 7L), r.hashMap("id", 8L), r.hashMap("id", 9L), r.hashMap("id", 10L), r.hashMap("id", 11L), r.hashMap("id", 12L), r.hashMap("id", 13L))).g("inserted") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, limits.yaml, #25
                 /* ExpectedOriginal: bag([{'old_val':null, 'new_val':{'id':7}}, {'old_val':null, 'new_val':{'id':8}}, {'old_val':null, 'new_val':{'id':9}}, {'old_val':null, 'new_val':{'id':10}}, {'old_val':null, 'new_val':{'id':11}}, {'old_val':null, 'new_val':{'id':12}}, {'old_val':null, 'new_val':{'id':13}}]) */
                 var expected_ = bag(r.array(r.hashMap("old_val", null).with("new_val", r.hashMap("id", 7L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 8L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 9L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 10L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 11L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 12L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 13L))));
                 
                 /* Original: fetch(c2, 7) */
                 var obtained = runOrCatch( fetch(c2, 7L) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             

        }
    }
}
