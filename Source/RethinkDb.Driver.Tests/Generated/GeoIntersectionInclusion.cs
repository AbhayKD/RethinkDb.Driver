




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;
using static RethinkDb.Driver.Tests.TestingCommon;

namespace RethinkDb.Driver.Test.Generated {

    // Test intersects and includes semantics

    [TestFixture]
    public class GeoIntersectionInclusion : GeneratedTest {

        public GeoIntersectionInclusion (){
        }




        [Test]
        public void YamlTest(){

             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #4
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).intersects(r.point(1.5,1.5)) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.point(1.5, 1.5)) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #6
                 /* ExpectedOriginal: false */
                 var expected_ = false;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).intersects(r.point(2.5,2.5)) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.point(2.5, 2.5)) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #8
                 /* ExpectedOriginal: false */
                 var expected_ = false;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).polygon_sub(r.polygon([1.1,1.1], [1.9,1.1], [1.9,1.9], [1.1,1.9])).intersects(r.point(1.5,1.5)) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).intersects(r.point(1.5, 1.5)) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #10
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).polygon_sub(r.polygon([1.1,1.1], [1.9,1.1], [1.9,1.9], [1.1,1.9])).intersects(r.point(1.05,1.05)) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).intersects(r.point(1.05, 1.05)) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #13
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).intersects(r.point(2,2)) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.point(2L, 2L)) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #15
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).intersects(r.point(2,1.5)) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.point(2L, 1.5)) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #17
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).intersects(r.line([1.5,1.5], [2,2])) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.line(r.array(1.5, 1.5), r.array(2L, 2L))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #19
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).intersects(r.line([1.5,1.5], [2,1.5])) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.line(r.array(1.5, 1.5), r.array(2L, 1.5))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #22
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).polygon_sub(r.polygon([1.1,1.1], [1.9,1.1], [1.9,1.9], [1.1,1.9])).intersects(r.point(1.1,1.1)) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).intersects(r.point(1.1, 1.1)) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #24
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).polygon_sub(r.polygon([1.1,1.1], [1.9,1.1], [1.9,1.9], [1.1,1.9])).intersects(r.point(1.5,1.1)) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).intersects(r.point(1.5, 1.1)) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #27
                 /* ExpectedOriginal: false */
                 var expected_ = false;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).intersects(r.line([2,2], [3,3])) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.line(r.array(2L, 2L), r.array(3L, 3L))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #29
                 /* ExpectedOriginal: false */
                 var expected_ = false;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).intersects(r.line([2,1.5], [3,3])) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.line(r.array(2L, 1.5), r.array(3L, 3L))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #31
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).intersects(r.line([1.5,1.5], [3,3])) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.line(r.array(1.5, 1.5), r.array(3L, 3L))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #33
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).intersects(r.polygon([1.2,1.2], [1.8,1.2], [1.8,1.8], [1.2,1.8])) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.polygon(r.array(1.2, 1.2), r.array(1.8, 1.2), r.array(1.8, 1.8), r.array(1.2, 1.8))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #35
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).intersects(r.polygon([1.5,1.5], [2.5,1.5], [2.5,2.5], [1.5,2.5])) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.polygon(r.array(1.5, 1.5), r.array(2.5, 1.5), r.array(2.5, 2.5), r.array(1.5, 2.5))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #37
                 /* ExpectedOriginal: false */
                 var expected_ = false;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).polygon_sub(r.polygon([1.1,1.1], [1.9,1.1], [1.9,1.9], [1.1,1.9])).intersects(r.polygon([1.2,1.2], [1.8,1.2], [1.8,1.8], [1.2,1.8])) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).intersects(r.polygon(r.array(1.2, 1.2), r.array(1.8, 1.2), r.array(1.8, 1.8), r.array(1.2, 1.8))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #39
                 /* ExpectedOriginal: false */
                 var expected_ = false;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).polygon_sub(r.polygon([1.1,1.1], [1.9,1.1], [1.9,1.9], [1.1,1.9])).intersects(r.polygon([1.1,1.1], [1.9,1.1], [1.9,1.9], [1.1,1.9])) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).intersects(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #42
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).intersects(r.polygon([2,1.1], [3,1.1], [3,1.9], [2,1.9])) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.polygon(r.array(2L, 1.1), r.array(3L, 1.1), r.array(3L, 1.9), r.array(2L, 1.9))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #44
                 /* ExpectedOriginal: false */
                 var expected_ = false;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).intersects(r.polygon([2,2], [3,2], [3,3], [2,3])) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.polygon(r.array(2L, 2L), r.array(3L, 2L), r.array(3L, 3L), r.array(2L, 3L))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #46
                 /* ExpectedOriginal: false */
                 var expected_ = false;
                 
                 /* Original: r.point(1,1).intersects(r.point(1.5,1.5)) */
                 var obtained = runOrCatch( r.point(1L, 1L).intersects(r.point(1.5, 1.5)) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #48
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.point(1,1).intersects(r.point(1,1)) */
                 var obtained = runOrCatch( r.point(1L, 1L).intersects(r.point(1L, 1L)) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #50
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.line([1,1], [2,1]).intersects(r.point(1,1)) */
                 var obtained = runOrCatch( r.line(r.array(1L, 1L), r.array(2L, 1L)).intersects(r.point(1L, 1L)) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #55
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.line([1,1], [1,2]).intersects(r.point(1,1.8)) */
                 var obtained = runOrCatch( r.line(r.array(1L, 1L), r.array(1L, 2L)).intersects(r.point(1L, 1.8)) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #57
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.line([1,0], [2,0]).intersects(r.point(1.8,0)) */
                 var obtained = runOrCatch( r.line(r.array(1L, 0L), r.array(2L, 0L)).intersects(r.point(1.8, 0L)) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #59
                 /* ExpectedOriginal: false */
                 var expected_ = false;
                 
                 /* Original: r.line([1,1], [2,1]).intersects(r.point(1.5,1.5)) */
                 var obtained = runOrCatch( r.line(r.array(1L, 1L), r.array(2L, 1L)).intersects(r.point(1.5, 1.5)) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #61
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.line([1,1], [2,1]).intersects(r.line([2,1], [3,1])) */
                 var obtained = runOrCatch( r.line(r.array(1L, 1L), r.array(2L, 1L)).intersects(r.line(r.array(2L, 1L), r.array(3L, 1L))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #64
                 /* ExpectedOriginal: 2 */
                 var expected_ = 2L;
                 
                 /* Original: r.expr([r.point(1, 0), r.point(3,0), r.point(2, 0)]).intersects(r.line([0,0], [2, 0])).count() */
                 var obtained = runOrCatch( r.expr(r.array(r.point(1L, 0L), r.point(3L, 0L), r.point(2L, 0L))).intersects(r.line(r.array(0L, 0L), r.array(2L, 0L))).count() ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #68
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.point(1.5,1.5)) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.point(1.5, 1.5)) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #70
                 /* ExpectedOriginal: false */
                 var expected_ = false;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.point(2.5,2.5)) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.point(2.5, 2.5)) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #72
                 /* ExpectedOriginal: false */
                 var expected_ = false;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).polygon_sub(r.polygon([1.1,1.1], [1.9,1.1], [1.9,1.9], [1.1,1.9])).includes(r.point(1.5,1.5)) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).includes(r.point(1.5, 1.5)) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #74
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).polygon_sub(r.polygon([1.1,1.1], [1.9,1.1], [1.9,1.9], [1.1,1.9])).includes(r.point(1.05,1.05)) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).includes(r.point(1.05, 1.05)) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #76
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.point(2,2)) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.point(2L, 2L)) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #78
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.point(2,1.5)) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.point(2L, 1.5)) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #80
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.line([1.5,1.5], [2,2])) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.line(r.array(1.5, 1.5), r.array(2L, 2L))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #82
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.line([1.5,1.5], [2,1.5])) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.line(r.array(1.5, 1.5), r.array(2L, 1.5))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #84
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).polygon_sub(r.polygon([1.1,1.1], [1.9,1.1], [1.9,1.9], [1.1,1.9])).includes(r.point(1.1,1.1)) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).includes(r.point(1.1, 1.1)) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #86
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).polygon_sub(r.polygon([1.1,1.1], [1.9,1.1], [1.9,1.9], [1.1,1.9])).includes(r.point(1.5,1.1)) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).includes(r.point(1.5, 1.1)) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #88
                 /* ExpectedOriginal: false */
                 var expected_ = false;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.line([2,2], [3,3])) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.line(r.array(2L, 2L), r.array(3L, 3L))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #90
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.line([2,1.5], [2,2])) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.line(r.array(2L, 1.5), r.array(2L, 2L))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #92
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.line([2,1], [2,2])) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.line(r.array(2L, 1L), r.array(2L, 2L))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #94
                 /* ExpectedOriginal: false */
                 var expected_ = false;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.line([1.5,1.5], [3,3])) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.line(r.array(1.5, 1.5), r.array(3L, 3L))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #96
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.polygon([1,1], [2,1], [2,2], [1,2])) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #98
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.polygon([1.2,1.2], [1.8,1.2], [1.8,1.8], [1.2,1.8])) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.polygon(r.array(1.2, 1.2), r.array(1.8, 1.2), r.array(1.8, 1.8), r.array(1.2, 1.8))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #100
                 /* ExpectedOriginal: true */
                 var expected_ = true;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.polygon([1.5,1.5], [2,1.5], [2,2], [1.5,2])) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.polygon(r.array(1.5, 1.5), r.array(2L, 1.5), r.array(2L, 2L), r.array(1.5, 2L))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #102
                 /* ExpectedOriginal: false */
                 var expected_ = false;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.polygon([1.5,1.5], [2.5,1.5], [2.5,2.5], [1.5,2.5])) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.polygon(r.array(1.5, 1.5), r.array(2.5, 1.5), r.array(2.5, 2.5), r.array(1.5, 2.5))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #104
                 /* ExpectedOriginal: false */
                 var expected_ = false;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).polygon_sub(r.polygon([1.1,1.1], [1.9,1.1], [1.9,1.9], [1.1,1.9])).includes(r.polygon([1.2,1.2], [1.8,1.2], [1.8,1.8], [1.2,1.8])) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).includes(r.polygon(r.array(1.2, 1.2), r.array(1.8, 1.2), r.array(1.8, 1.8), r.array(1.2, 1.8))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #106
                 /* ExpectedOriginal: false */
                 var expected_ = false;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).polygon_sub(r.polygon([1.1,1.1], [1.9,1.1], [1.9,1.9], [1.1,1.9])).includes(r.polygon([1.1,1.1], [2,1.1], [2,2], [1.1,2])) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).includes(r.polygon(r.array(1.1, 1.1), r.array(2L, 1.1), r.array(2L, 2L), r.array(1.1, 2L))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #108
                 /* ExpectedOriginal: false */
                 var expected_ = false;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.polygon([2,1.1], [3,1.1], [3,1.9], [2,1.9])) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.polygon(r.array(2L, 1.1), r.array(3L, 1.1), r.array(3L, 1.9), r.array(2L, 1.9))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #110
                 /* ExpectedOriginal: false */
                 var expected_ = false;
                 
                 /* Original: r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.polygon([2,2], [3,2], [3,3], [2,3])) */
                 var obtained = runOrCatch( r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.polygon(r.array(2L, 2L), r.array(3L, 2L), r.array(3L, 3L), r.array(2L, 3L))) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #113
                 /* ExpectedOriginal: 1 */
                 var expected_ = 1L;
                 
                 /* Original: r.expr([r.polygon([0,0], [1,1], [1,0]), r.polygon([0,1], [1,2], [1,1])]).includes(r.point(0,0)).count() */
                 var obtained = runOrCatch( r.expr(r.array(r.polygon(r.array(0L, 0L), r.array(1L, 1L), r.array(1L, 0L)), r.polygon(r.array(0L, 1L), r.array(1L, 2L), r.array(1L, 1L)))).includes(r.point(0L, 0L)).count() ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #116
                 /* ExpectedOriginal: err('ReqlQueryLogicError', 'Expected geometry of type `Polygon` but found `Point`.') */
                 var expected_ = err("ReqlQueryLogicError", "Expected geometry of type `Polygon` but found `Point`.");
                 
                 /* Original: r.point(0,0).includes(r.point(0,0)) */
                 var obtained = runOrCatch( r.point(0L, 0L).includes(r.point(0L, 0L)) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, geo/intersection_inclusion.yaml, #118
                 /* ExpectedOriginal: err('ReqlQueryLogicError', 'Expected geometry of type `Polygon` but found `LineString`.') */
                 var expected_ = err("ReqlQueryLogicError", "Expected geometry of type `Polygon` but found `LineString`.");
                 
                 /* Original: r.line([0,0], [0,1]).includes(r.point(0,0)) */
                 var obtained = runOrCatch( r.line(r.array(0L, 0L), r.array(0L, 1L)).includes(r.point(0L, 0L)) ,
                                            new {
                    }, conn);
                 
                     assertEquals(expected_, obtained);                 
             }
             

        }
    }
}
