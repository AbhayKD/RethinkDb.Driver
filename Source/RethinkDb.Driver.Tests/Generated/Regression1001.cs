




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class Regression1001 : GeneratedTest {

            public static Table tbl = r.db(DbName).table("tbl");


        [Test]
        public void YamlTest(){

             TestCounter++;
             
             {
                 //JavaQuery, regression/1001.yaml, #1
                 /* ExpectedOriginal: None */
                 var expected_ = null as object;
                 
                 /* Original: tbl.insert({'a':null}) */
                 var obtained = runOrCatch( tbl.insert(r.hashMap("a", null)) ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/1001.yaml, #2
                 /* ExpectedOriginal: None */
                 var expected_ = null as object;
                 
                 /* Original: tbl.index_create('a') */
                 var obtained = runOrCatch( tbl.indexCreate("a") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/1001.yaml, #3
                 /* ExpectedOriginal: None */
                 var expected_ = null as object;
                 
                 /* Original: tbl.index_create('b') */
                 var obtained = runOrCatch( tbl.indexCreate("b") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/1001.yaml, #4
                 /* ExpectedOriginal: None */
                 var expected_ = null as object;
                 
                 /* Original: tbl.index_wait().pluck('index', 'ready') */
                 var obtained = runOrCatch( tbl.indexWait().pluck("index", "ready") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/1001.yaml, #5
                 /* ExpectedOriginal: 1 */
                 var expected_ = 1L;
                 
                 /* Original: tbl.between(r.minval, r.maxval).count() */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.maxval()).count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/1001.yaml, #6
                 /* ExpectedOriginal: 0 */
                 var expected_ = 0L;
                 
                 /* Original: tbl.between(r.minval, r.maxval, index='a').count() */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.maxval()).optArg("index", "a").count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/1001.yaml, #7
                 /* ExpectedOriginal: 0 */
                 var expected_ = 0L;
                 
                 /* Original: tbl.between(r.minval, r.maxval, index='b').count() */
                 var obtained = runOrCatch( tbl.between(r.minval(), r.maxval()).optArg("index", "b").count() ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             

        }
    }
}
