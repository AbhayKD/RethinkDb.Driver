




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;
using NUnit.Framework;
using RethinkDb.Driver.Tests;

namespace RethinkDb.Driver.Test.Generated {
    [TestFixture]
    public class Regression2774 : GeneratedTest {

            public static Table tbl = r.db(DbName).table("tbl");


        [Test]
        public void YamlTest(){

             
             //JavaDef, regression/2774.yaml, #Templates.YamlTest+DefTest.
             //Original: binary_a = r.binary(b'')
             
Binary binary_a = (Binary) (r.binary(new byte[] {}));             
             
             //JavaDef, regression/2774.yaml, #Templates.YamlTest+DefTest.
             //Original: binary_trunc1 = r.binary(b'123456789012345678901234567890123456789012345678901234567890' + b'123456789012345678901234567890123456789012345678901234567890')
             
Binary binary_trunc1 = (Binary) (r.binary(new byte[] { 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48 }));             
             
             //JavaDef, regression/2774.yaml, #Templates.YamlTest+DefTest.
             //Original: binary_trunc2 = r.binary(b'123456789012345678901234567890123456789012345678901234567890' + b'123456789012345678901234567890123456789012345678901234567891')
             
Binary binary_trunc2 = (Binary) (r.binary(new byte[] { 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 49 }));             
             
             //JavaDef, regression/2774.yaml, #Templates.YamlTest+DefTest.
             //Original: binary_b = r.binary(b'5aurhbviunr')
             
Binary binary_b = (Binary) (r.binary(new byte[] { 53, 97, 117, 114, 104, 98, 118, 105, 117, 110, 114 }));             
             
             //JavaDef, regression/2774.yaml, #Templates.YamlTest+DefTest.
             //Original: str_trunc1 = '123456789012345678901234567890123456789012345678901234567890' + '123456789012345678901234567890123456789012345678901234567890'
             
String str_trunc1 = (String) ("123456789012345678901234567890123456789012345678901234567890" + "123456789012345678901234567890123456789012345678901234567890");             
             
             //JavaDef, regression/2774.yaml, #Templates.YamlTest+DefTest.
             //Original: str_trunc2 = '123456789012345678901234567890123456789012345678901234567890' + '123456789012345678901234567890123456789012345678901234567891'
             
String str_trunc2 = (String) ("123456789012345678901234567890123456789012345678901234567890" + "123456789012345678901234567890123456789012345678901234567891");             
             
             //JavaDef, regression/2774.yaml, #Templates.YamlTest+DefTest.
             //Original: trows = [{'id':0,'idx':[0]}, {'id':1,'idx':[1, 2, 3, 4, 5, 6, 7, 0]}, {'id':2,'idx':[1, 2, 3, 4, 5, 6, 7, 4]}, {'id':3,'idx':[1, 2, 3, 4, 5, 6, 7, 4, 5]}, {'id':4,'idx':[1, 2, 3, 4, 5, 6, 7, 8, 1]}, {'id':5,'idx':[1, 3, binary_trunc1]}, {'id':6,'idx':[1, 3, binary_trunc2]}, {'id':7,'idx':[1, 3, r.epoch_time(0), r.epoch_time(0), r.epoch_time(0)]}, {'id':8,'idx':[1, 3, r.epoch_time(0), r.epoch_time(0), r.epoch_time(0), r.epoch_time(0)]}, {'id':9,'idx':[1, 3, r.epoch_time(0), r.epoch_time(0), r.epoch_time(0), r.epoch_time(1)]}, {'id':10,'idx':[1, 3, str_trunc1, str_trunc1]}, {'id':11,'idx':[1, 3, str_trunc1, str_trunc2]}, {'id':12,'idx':[1, 4, 3, 4, 5, 6, 7, 8, 2]}, {'id':13,'idx':[binary_trunc1]}, {'id':14,'idx':[binary_trunc2]}, {'id':15,'idx':False}, {'id':16,'idx':True}, {'id':17,'idx':-500}, {'id':18,'idx':500}, {'id':19,'idx':binary_a}, {'id':20,'idx':binary_trunc1}, {'id':21,'idx':binary_trunc2}, {'id':22,'idx':binary_b}, {'id':23,'idx':r.epoch_time(0)}, {'id':24,'idx':''}, {'id':25,'idx':' str'}, {'id':26,'idx':str_trunc1}, {'id':27,'idx':str_trunc2}]
             
IList trows = (IList) (r.array(r.hashMap("id", 0).with("idx", r.array(0)), r.hashMap("id", 1).with("idx", r.array(1, 2, 3, 4, 5, 6, 7, 0)), r.hashMap("id", 2).with("idx", r.array(1, 2, 3, 4, 5, 6, 7, 4)), r.hashMap("id", 3).with("idx", r.array(1, 2, 3, 4, 5, 6, 7, 4, 5)), r.hashMap("id", 4).with("idx", r.array(1, 2, 3, 4, 5, 6, 7, 8, 1)), r.hashMap("id", 5).with("idx", r.array(1, 3, binary_trunc1)), r.hashMap("id", 6).with("idx", r.array(1, 3, binary_trunc2)), r.hashMap("id", 7).with("idx", r.array(1, 3, r.epochTime(0), r.epochTime(0), r.epochTime(0))), r.hashMap("id", 8).with("idx", r.array(1, 3, r.epochTime(0), r.epochTime(0), r.epochTime(0), r.epochTime(0))), r.hashMap("id", 9).with("idx", r.array(1, 3, r.epochTime(0), r.epochTime(0), r.epochTime(0), r.epochTime(1))), r.hashMap("id", 10).with("idx", r.array(1, 3, str_trunc1, str_trunc1)), r.hashMap("id", 11).with("idx", r.array(1, 3, str_trunc1, str_trunc2)), r.hashMap("id", 12).with("idx", r.array(1, 4, 3, 4, 5, 6, 7, 8, 2)), r.hashMap("id", 13).with("idx", r.array(binary_trunc1)), r.hashMap("id", 14).with("idx", r.array(binary_trunc2)), r.hashMap("id", 15).with("idx", false), r.hashMap("id", 16).with("idx", true), r.hashMap("id", 17).with("idx", -500), r.hashMap("id", 18).with("idx", 500), r.hashMap("id", 19).with("idx", binary_a), r.hashMap("id", 20).with("idx", binary_trunc1), r.hashMap("id", 21).with("idx", binary_trunc2), r.hashMap("id", 22).with("idx", binary_b), r.hashMap("id", 23).with("idx", r.epochTime(0)), r.hashMap("id", 24).with("idx", ""), r.hashMap("id", 25).with("idx", " str"), r.hashMap("id", 26).with("idx", str_trunc1), r.hashMap("id", 27).with("idx", str_trunc2)));             
             
             //JavaDef, regression/2774.yaml, #Templates.YamlTest+DefTest.
             //Original: expected = r.range(tbl.count()).coerce_to('array')
             
CoerceTo expected = (CoerceTo) (r.range(tbl.count()).coerceTo("array"));             
             TestCounter++;
             
             {
                 //JavaQuery, regression/2774.yaml, #9
                 /* ExpectedOriginal: 28 */
                 var expected_ = 28;
                 
                 /* Original: tbl.insert(trows)['inserted'] */
                 var obtained = runOrCatch( tbl.insert(trows).g("inserted") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/2774.yaml, #10
                 /* ExpectedOriginal: ({'created':1}) */
                 var expected_ = r.hashMap("created", 1);
                 
                 /* Original: tbl.index_create('idx') */
                 var obtained = runOrCatch( tbl.indexCreate("idx") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             
             TestCounter++;
             
             {
                 //JavaQuery, regression/2774.yaml, #11
                 /* ExpectedOriginal: [{'ready': True, 'index': 'idx'}] */
                 var expected_ = r.array(r.hashMap("ready", true).with("index", "idx"));
                 
                 /* Original: tbl.index_wait('idx').pluck('index', 'ready') */
                 var obtained = runOrCatch( tbl.indexWait("idx").pluck("index", "ready") ,
                                            new OptArgs()
                    );
                 assertEquals(expected_, obtained);
             }
             

        }
    }
}
