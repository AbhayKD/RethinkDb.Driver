#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Templates
{
    using System;
    
    #line 1 "..\..\Enum.cshtml"
    using System.Collections.Generic;
    
    #line default
    #line hidden
    
    #line 2 "..\..\Enum.cshtml"
    using System.Linq;
    
    #line default
    #line hidden
    using System.Text;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    public partial class Enum : RazorGenerator.Templating.RazorTemplateBase
    {
#line hidden

        #line 4 "..\..\Enum.cshtml"

    public string EnumName { get; set; }
    public Dictionary<string, object> Enums { get; set; }

        #line default
        #line hidden

        public override void Execute()
        {


WriteLiteral("\r\n");


WriteLiteral("\r\n\r\n//AUTOGENERATED, DO NOTMODIFY.\r\n//Do not edit this file directly.\r\n\r\nnamespac" +
"e RethinkDb.Driver.Proto {\r\n    public enum ");


            
            #line 13 "..\..\Enum.cshtml"
           Write(EnumName);

            
            #line default
            #line hidden
WriteLiteral(" {\r\n");


            
            #line 14 "..\..\Enum.cshtml"
     foreach( var kvp in this.Enums )
    {

            
            #line default
            #line hidden
WriteLiteral("        ");


            
            #line 16 "..\..\Enum.cshtml"
     Write(kvp.Key);

            
            #line default
            #line hidden
WriteLiteral(" = ");


            
            #line 16 "..\..\Enum.cshtml"
                Write(kvp.Value);

            
            #line default
            #line hidden
WriteLiteral(",\r\n");


            
            #line 17 "..\..\Enum.cshtml"
    }

            
            #line default
            #line hidden
WriteLiteral("    }\r\n\r\n");


            
            #line 20 "..\..\Enum.cshtml"
     if( EnumName == "ResponseNote" )
    {

            
            #line default
            #line hidden
WriteLiteral("        ");

WriteLiteral("public static class ");


            
            #line 22 "..\..\Enum.cshtml"
                          Write("ExtensionsFor" + EnumName);

            
            #line default
            #line hidden
WriteLiteral(" {\r\n");



WriteLiteral("            ");

WriteLiteral("public static bool IsFeed(this ResponseNote note){\r\n");



WriteLiteral("                ");

WriteLiteral(" switch( note ){\r\n");


            
            #line 25 "..\..\Enum.cshtml"
                foreach( var k in Enums.Keys.Where(k => k.EndsWith("FEED") ))
                {

            
            #line default
            #line hidden
WriteLiteral("                    ");

WriteLiteral(" case ResponseNote.");


            
            #line 27 "..\..\Enum.cshtml"
                                    Write(k);

            
            #line default
            #line hidden
WriteLiteral(":\r\n");



WriteLiteral("                        ");

WriteLiteral("return true;\r\n");


            
            #line 29 "..\..\Enum.cshtml"
                }

            
            #line default
            #line hidden
WriteLiteral("                    ");

WriteLiteral("default:\r\n");



WriteLiteral("                        ");

WriteLiteral("return false;\r\n");



WriteLiteral("                ");

WriteLiteral("}\r\n");



WriteLiteral("            ");

WriteLiteral("}\r\n");



WriteLiteral("        ");

WriteLiteral("}\r\n");


            
            #line 35 "..\..\Enum.cshtml"
    }

            
            #line default
            #line hidden

            
            #line 36 "..\..\Enum.cshtml"
     if( EnumName == "ResponseType" )
    {

            
            #line default
            #line hidden
WriteLiteral("        ");

WriteLiteral("public static class ");


            
            #line 38 "..\..\Enum.cshtml"
                          Write("ExtensionsFor" + EnumName);

            
            #line default
            #line hidden
WriteLiteral(" {\r\n");



WriteLiteral("            ");

WriteLiteral("public static bool IsError(this ResponseType t){\r\n");



WriteLiteral("                ");

WriteLiteral(" switch( t ){\r\n");


            
            #line 41 "..\..\Enum.cshtml"
                foreach( var k in Enums.Keys.Where(k => k.EndsWith("ERROR")) )
                {

            
            #line default
            #line hidden
WriteLiteral("                    ");

WriteLiteral(" case ResponseType.");


            
            #line 43 "..\..\Enum.cshtml"
                                    Write(k);

            
            #line default
            #line hidden
WriteLiteral(":\r\n");



WriteLiteral("                        ");

WriteLiteral("return true;\r\n");


            
            #line 45 "..\..\Enum.cshtml"
                }

            
            #line default
            #line hidden
WriteLiteral("                    ");

WriteLiteral("default:\r\n");



WriteLiteral("                        ");

WriteLiteral("return false;\r\n");



WriteLiteral("                ");

WriteLiteral("}\r\n");



WriteLiteral("            ");

WriteLiteral("}\r\n");



WriteLiteral("        ");

WriteLiteral("}\r\n");


            
            #line 51 "..\..\Enum.cshtml"
    }

            
            #line default
            #line hidden
WriteLiteral("\r\n}\r\n");


        }
    }
}
#pragma warning restore 1591
