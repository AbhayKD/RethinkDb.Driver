ModuleName: DatumObject
DefsAndTests:
- TestType: JavaQuery
  TestFile: datum/object.yaml
  TestNum: 1
  Original: r.expr({})
  Java: r.expr(new MapObject())
  ExpectedOriginal: ({})
  ExpectedType: Map
  ExpectedJava: new MapObject()
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/object.yaml
  TestNum: 2
  Original: r.expr({'a':1})
  Java: r.expr(new MapObject().with("a", 1))
  ExpectedOriginal: '{''a'':1}'
  ExpectedType: Map
  ExpectedJava: new MapObject().with("a", 1)
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/object.yaml
  TestNum: 3
  Original: r.expr({'a':1, 'b':'two', 'c':True})
  Java: r.expr(new MapObject().with("a", 1).with("b", "two").with("c", true))
  ExpectedOriginal: '{''a'':1, ''b'':''two'', ''c'':True}'
  ExpectedType: Map
  ExpectedJava: new MapObject().with("a", 1).with("b", "two").with("c", true)
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/object.yaml
  TestNum: 4
  Original: r.expr({'a':r.expr(1)})
  Java: r.expr(new MapObject().with("a", r.expr(1)))
  ExpectedOriginal: ({'a':1})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("a", 1)
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/object.yaml
  TestNum: 5
  Original: r.expr({'a':{'b':[{'c':2}, 'a', 4]}})
  Java: r.expr(new MapObject().with("a", new MapObject().with("b", Arrays.asList(new MapObject().with("c", 2), "a", 4))))
  ExpectedOriginal: ({'a':{'b':[{'c':2}, 'a', 4]}})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("a", new MapObject().with("b", Arrays.asList(new MapObject().with("c", 2), "a", 4)))
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/object.yaml
  TestNum: 6
  Original: r.expr({'a':1}).type_of()
  Java: r.expr(new MapObject().with("a", 1)).typeOf()
  ExpectedOriginal: 'OBJECT'
  ExpectedType: String
  ExpectedJava: '"OBJECT"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/object.yaml
  TestNum: 7
  Original: r.expr({'a':1}).coerce_to('string')
  Java: r.expr(new MapObject().with("a", 1)).coerceTo("string")
  ExpectedOriginal: ('{"a":1}')
  ExpectedType: String
  ExpectedJava: '"{\"a\":1}"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/object.yaml
  TestNum: 8
  Original: r.expr({'a':1}).coerce_to('object')
  Java: r.expr(new MapObject().with("a", 1)).coerceTo("object")
  ExpectedOriginal: ({'a':1})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("a", 1)
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/object.yaml
  TestNum: 9
  Original: r.expr({'a':1}).coerce_to('array')
  Java: r.expr(new MapObject().with("a", 1)).coerceTo("array")
  ExpectedOriginal: '[[''a'', 1]]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(Arrays.asList("a", 1))
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/object.yaml
  TestNum: 10
  Original: r.expr({12:'a'})
  Java: r.expr(new MapObject().with(12, "a"))
  ExpectedOriginal: err_regex("ReqlDriverError", "Object keys must be strings.*")
  ExpectedType: ErrRegex
  ExpectedJava: err_regex("ReqlDriverError", "Object keys must be strings.*")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/object.yaml
  TestNum: 11
  Original: r.expr({'a':{12:'b'}})
  Java: r.expr(new MapObject().with("a", new MapObject().with(12, "b")))
  ExpectedOriginal: err_regex("ReqlDriverError", "Object keys must be strings.*")
  ExpectedType: ErrRegex
  ExpectedJava: err_regex("ReqlDriverError", "Object keys must be strings.*")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/object.yaml
  TestNum: 14
  Original: r.expr({}, "foo")
  Java: r.expr(new MapObject(), "foo")
  ExpectedOriginal: err("ReqlDriverError", "Second argument to `r.expr` must be a number.")
  ExpectedType: Err
  ExpectedJava: err("ReqlDriverError", "Second argument to `r.expr` must be a number.")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/object.yaml
  TestNum: 16
  Original: r.object()
  Java: r.object()
  ExpectedOriginal: ({})
  ExpectedType: Map
  ExpectedJava: new MapObject()
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/object.yaml
  TestNum: 17
  Original: r.object('a', 1, 'b', 2)
  Java: r.object("a", 1, "b", 2)
  ExpectedOriginal: ({'a':1,'b':2})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("a", 1).with("b", 2)
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/object.yaml
  TestNum: 18
  Original: r.object('c'+'d', 3)
  Java: r.object(r.add("c", "d"), 3)
  ExpectedOriginal: ({'cd':3})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("cd", 3)
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/object.yaml
  TestNum: 19
  Original: r.object('o','d','d')
  Java: r.object("o", "d", "d")
  ExpectedOriginal: err("ReqlQueryLogicError", "OBJECT expects an even number of arguments (but found 3).", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "OBJECT expects an even number of arguments (but found 3).", Arrays.asList())
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/object.yaml
  TestNum: 20
  Original: r.object(1, 1)
  Java: r.object(1, 1)
  ExpectedOriginal: err("ReqlQueryLogicError","Expected type STRING but found NUMBER.",[])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Expected type STRING but found NUMBER.", Arrays.asList())
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/object.yaml
  TestNum: 21
  Original: r.object('e', 4, 'e', 5)
  Java: r.object("e", 4, "e", 5)
  ExpectedOriginal: err("ReqlQueryLogicError","Duplicate key `e` in object.  (got `4` and `5` as values)",[])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Duplicate key `e` in object.  (got `4` and `5` as values)", Arrays.asList())
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/object.yaml
  TestNum: 22
  Original: r.object('g', r.db('test'))
  Java: r.object("g", r.db("test"))
  ExpectedOriginal: err("ReqlQueryLogicError","Expected type DATUM but found DATABASE:",[])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Expected type DATUM but found DATABASE:", Arrays.asList())
  RunOpts: []
