ModuleName: TransformMap
DefsAndTests:
- TestType: JavaQuery
  TestFile: transform/map.yaml
  TestNum: 1
  Original: r.range().map(r.range(), lambda x, y:(x, y)).type_of()
  Java: r.range().map(r.range(), (x, y) -> r.array(x, y)).typeOf()
  ExpectedOriginal: 'STREAM'
  ExpectedType: String
  ExpectedJava: '"STREAM"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/map.yaml
  TestNum: 2
  Original: r.range().map(r.expr([]), lambda x, y:(x, y)).type_of()
  Java: r.range().map(r.expr(r.array()), (x, y) -> r.array(x, y)).typeOf()
  ExpectedOriginal: 'STREAM'
  ExpectedType: String
  ExpectedJava: '"STREAM"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/map.yaml
  TestNum: 3
  Original: r.expr([]).map(r.expr([]), lambda x, y:(x, y)).type_of()
  Java: r.expr(r.array()).map(r.expr(r.array()), (x, y) -> r.array(x, y)).typeOf()
  ExpectedOriginal: 'ARRAY'
  ExpectedType: String
  ExpectedJava: '"ARRAY"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/map.yaml
  TestNum: 4
  Original: r.range(3).map(lambda:0)
  Java: r.range(3L).map(() -> 0L)
  ExpectedOriginal: '[0, 0, 0]'
  ExpectedType: List
  ExpectedJava: r.array(0L, 0L, 0L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/map.yaml
  TestNum: 5
  Original: r.range(3).map(r.range(4), lambda:0)
  Java: r.range(3L).map(r.range(4L), () -> 0L)
  ExpectedOriginal: '[0, 0, 0]'
  ExpectedType: List
  ExpectedJava: r.array(0L, 0L, 0L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/map.yaml
  TestNum: 6
  Original: r.expr([1]).map(lambda x:(x,))
  Java: r.expr(r.array(1L)).map(x -> r.array(x))
  ExpectedOriginal: '[[1]]'
  ExpectedType: List
  ExpectedJava: r.array(r.array(1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/map.yaml
  TestNum: 7
  Original: r.expr([1]).map(r.expr([1]), lambda x, y:(x, y))
  Java: r.expr(r.array(1L)).map(r.expr(r.array(1L)), (x, y) -> r.array(x, y))
  ExpectedOriginal: '[[1, 1]]'
  ExpectedType: List
  ExpectedJava: r.array(r.array(1L, 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/map.yaml
  TestNum: 8
  Original: r.expr([1]).map(r.expr([1]), r.expr([1]), lambda x, y, z:(x, y, z))
  Java: r.expr(r.array(1L)).map(r.expr(r.array(1L)), r.expr(r.array(1L)), (x, y, z) -> r.array(x, y, z))
  ExpectedOriginal: '[[1, 1, 1]]'
  ExpectedType: List
  ExpectedJava: r.array(r.array(1L, 1L, 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/map.yaml
  TestNum: 11
  Original: r.range().map(r.expr([]), lambda x, y:(x, y))
  Java: r.range().map(r.expr(r.array()), (x, y) -> r.array(x, y))
  ExpectedOriginal: '[]'
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/map.yaml
  TestNum: 12
  Original: r.expr([1, 2]).map(r.expr([1, 2, 3, 4]), lambda x, y:(x, y))
  Java: r.expr(r.array(1L, 2L)).map(r.expr(r.array(1L, 2L, 3L, 4L)), (x, y) -> r.array(x, y))
  ExpectedOriginal: '[[1, 1], [2, 2]]'
  ExpectedType: List
  ExpectedJava: r.array(r.array(1L, 1L), r.array(2L, 2L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/map.yaml
  TestNum: 13
  Original: r.range(2).map(r.range(4), lambda x, y:(x, y))
  Java: r.range(2L).map(r.range(4L), (x, y) -> r.array(x, y))
  ExpectedOriginal: '[[0, 0], [1, 1]]'
  ExpectedType: List
  ExpectedJava: r.array(r.array(0L, 0L), r.array(1L, 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/map.yaml
  TestNum: 14
  Original: r.range().map(r.expr([1, 2, 3, 4]), lambda x, y:(x, y))
  Java: r.range().map(r.expr(r.array(1L, 2L, 3L, 4L)), (x, y) -> r.array(x, y))
  ExpectedOriginal: '[[0, 1], [1, 2], [2, 3], [3, 4]]'
  ExpectedType: List
  ExpectedJava: r.array(r.array(0L, 1L), r.array(1L, 2L), r.array(2L, 3L), r.array(3L, 4L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/map.yaml
  TestNum: 15
  Original: r.range(3).map(r.range(5), r.js("(function(x, y){return [x, y];})"))
  Java: r.range(3L).map(r.range(5L), r.js("(function(x, y){return [x, y];})"))
  ExpectedOriginal: '[[0, 0], [1, 1], [2, 2]]'
  ExpectedType: List
  ExpectedJava: r.array(r.array(0L, 0L), r.array(1L, 1L), r.array(2L, 2L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/map.yaml
  TestNum: 16
  Original: r.range().map(r.expr(1), lambda x, y:(x, y))
  Java: r.range().map(r.expr(1L), (x, y) -> r.array(x, y))
  ExpectedOriginal: err("ReqlQueryLogicError", "Cannot convert NUMBER to SEQUENCE", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot convert NUMBER to SEQUENCE", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/map.yaml
  TestNum: 17
  Original: r.range().map(r.range(), lambda x, y:(x, y)).count()
  Java: r.range().map(r.range(), (x, y) -> r.array(x, y)).count()
  ExpectedOriginal: err("ReqlQueryLogicError", "Cannot use an infinite stream with an aggregation function (`reduce`, `count`, etc.) or coerce it to an array.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot use an infinite stream with an aggregation function (`reduce`, `count`, etc.) or coerce it to an array.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/map.yaml
  TestNum: 18
  Original: r.map(r.range(3), lambda x:(x,))
  Java: r.map(r.range(3L), x -> r.array(x))
  ExpectedOriginal: '[[0], [1], [2]]'
  ExpectedType: List
  ExpectedJava: r.array(r.array(0L), r.array(1L), r.array(2L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/map.yaml
  TestNum: 20
  Original: r.map(r.range(3), r.range(5), lambda x, y:(x, y))
  Java: r.map(r.range(3L), r.range(5L), (x, y) -> r.array(x, y))
  ExpectedOriginal: '[[0, 0], [1, 1], [2, 2]]'
  ExpectedType: List
  ExpectedJava: r.array(r.array(0L, 0L), r.array(1L, 1L), r.array(2L, 2L))
  RunOpts: []
