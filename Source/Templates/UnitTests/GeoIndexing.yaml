ModuleName: GeoIndexing
TableVarNames:
- tbl
DefsAndTests:
- TestType: JavaDef
  TestFile: geo/indexing.yaml
  TestNum: 1
  Original: rows = [{'id':0, 'g':r.point(10,10), 'm':[r.point(0,0),r.point(1,0),r.point(2,0)]}, {'id':1, 'g':r.polygon([0,0], [0,1], [1,1], [1,0])}, {'id':2, 'g':r.line([0.000002,-1], [-0.000001,1])}]
  Java: List rows = (List) (r.array(r.hashMap("id", 0L).with("g", r.point(10L, 10L)).with("m", r.array(r.point(0L, 0L), r.point(1L, 0L), r.point(2L, 0L))), r.hashMap("id", 1L).with("g", r.polygon(r.array(0L, 0L), r.array(0L, 1L), r.array(1L, 1L), r.array(1L, 0L))), r.hashMap("id", 2L).with("g", r.line(r.array(2e-06, -1L), r.array(-1e-06, 1L)))));
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 2
  Original: tbl.insert(rows)
  Java: tbl.insert(rows)
  ExpectedOriginal: ({'deleted':0,'inserted':3,'skipped':0,'errors':0,'replaced':0,'unchanged':0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0L).with("inserted", 3L).with("skipped", 0L).with("errors", 0L).with("replaced", 0L).with("unchanged", 0L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 3
  Original: tbl.index_create('g', geo=true)
  Java: tbl.indexCreate("g").optArg("geo", true)
  ExpectedOriginal: ({'created':1})
  ExpectedType: Map
  ExpectedJava: r.hashMap("created", 1L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 4
  Original: tbl.index_create('m', geo=true, multi=true)
  Java: tbl.indexCreate("m").optArg("geo", true).optArg("multi", true)
  ExpectedOriginal: ({'created':1})
  ExpectedType: Map
  ExpectedJava: r.hashMap("created", 1L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 5
  Original: tbl.index_create('other')
  Java: tbl.indexCreate("other")
  ExpectedOriginal: ({'created':1})
  ExpectedType: Map
  ExpectedJava: r.hashMap("created", 1L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 6
  Original: 'tbl.index_create(''point_det'', lambda x: r.point(x, x) )'
  Java: tbl.indexCreate("point_det", x -> r.point(x, x))
  ExpectedOriginal: ({'created':1})
  ExpectedType: Map
  ExpectedJava: r.hashMap("created", 1L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 7
  Original: tbl.index_wait()
  Java: tbl.indexWait()
  ExpectedOriginal: None
  ExpectedType: Object
  ExpectedJava: null
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 8
  Original: tbl.get_intersecting(r.point(0,0), index='other').count()
  Java: tbl.getIntersecting(r.point(0L, 0L)).optArg("index", "other").count()
  ExpectedOriginal: err('ReqlQueryLogicError', 'Index `other` is not a geospatial index.  get_intersecting can only be used with a geospatial index.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Index `other` is not a geospatial index.  get_intersecting can only be used with a geospatial index.", r.array(0L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 9
  Original: tbl.get_intersecting(r.point(0,0), index='missing').count()
  Java: tbl.getIntersecting(r.point(0L, 0L)).optArg("index", "missing").count()
  ExpectedOriginal: err_regex('ReqlOpFailedError', 'Index `missing` was not found on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]', [0])
  ExpectedType: ErrRegex
  ExpectedJava: err_regex("ReqlOpFailedError", "Index `missing` was not found on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]", r.array(0L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 10
  Original: tbl.get_intersecting(r.point(0,0)).count()
  Java: tbl.getIntersecting(r.point(0L, 0L)).count()
  ExpectedOriginal: err('ReqlQueryLogicError', 'get_intersecting requires an index argument.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "get_intersecting requires an index argument.", r.array(0L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 11
  Original: tbl.get_all(0, index='g').count()
  Java: tbl.getAll(0L).optArg("index", "g").count()
  ExpectedOriginal: err('ReqlQueryLogicError', 'Index `g` is a geospatial index.  Only get_nearest and get_intersecting can use a geospatial index.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Index `g` is a geospatial index.  Only get_nearest and get_intersecting can use a geospatial index.", r.array(0L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 12
  Original: tbl.between(0, 1, index='g').count()
  Java: tbl.between(0L, 1L).optArg("index", "g").count()
  ExpectedOriginal: err('ReqlQueryLogicError', 'Index `g` is a geospatial index.  Only get_nearest and get_intersecting can use a geospatial index.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Index `g` is a geospatial index.  Only get_nearest and get_intersecting can use a geospatial index.", r.array(0L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 13
  Original: tbl.order_by(index='g').count()
  Java: tbl.orderBy().optArg("index", "g").count()
  ExpectedOriginal: err('ReqlQueryLogicError', 'Index `g` is a geospatial index.  Only get_nearest and get_intersecting can use a geospatial index.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Index `g` is a geospatial index.  Only get_nearest and get_intersecting can use a geospatial index.", r.array(0L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 17
  Original: tbl.get_intersecting(r.point(0,0), index='id').count()
  Java: tbl.getIntersecting(r.point(0L, 0L)).optArg("index", "id").count()
  ExpectedOriginal: err('ReqlQueryLogicError', 'get_intersecting cannot use the primary index.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "get_intersecting cannot use the primary index.", r.array(0L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 18
  Original: tbl.get_intersecting(r.point(0,0), index='g').count()
  Java: tbl.getIntersecting(r.point(0L, 0L)).optArg("index", "g").count()
  ExpectedOriginal: 1
  ExpectedType: Long
  ExpectedJava: 1L
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 19
  Original: tbl.get_intersecting(r.point(10,10), index='g').count()
  Java: tbl.getIntersecting(r.point(10L, 10L)).optArg("index", "g").count()
  ExpectedOriginal: 1
  ExpectedType: Long
  ExpectedJava: 1L
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 20
  Original: tbl.get_intersecting(r.point(0.5,0.5), index='g').count()
  Java: tbl.getIntersecting(r.point(0.5, 0.5)).optArg("index", "g").count()
  ExpectedOriginal: 1
  ExpectedType: Long
  ExpectedJava: 1L
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 21
  Original: tbl.get_intersecting(r.point(20,20), index='g').count()
  Java: tbl.getIntersecting(r.point(20L, 20L)).optArg("index", "g").count()
  ExpectedOriginal: 0
  ExpectedType: Long
  ExpectedJava: 0L
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 22
  Original: tbl.get_intersecting(r.polygon([0,0], [1,0], [1,1], [0,1]), index='g').count()
  Java: tbl.getIntersecting(r.polygon(r.array(0L, 0L), r.array(1L, 0L), r.array(1L, 1L), r.array(0L, 1L))).optArg("index", "g").count()
  ExpectedOriginal: 2
  ExpectedType: Long
  ExpectedJava: 2L
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 23
  Original: tbl.get_intersecting(r.line([0,0], [10,10]), index='g').count()
  Java: tbl.getIntersecting(r.line(r.array(0L, 0L), r.array(10L, 10L))).optArg("index", "g").count()
  ExpectedOriginal: 3
  ExpectedType: Long
  ExpectedJava: 3L
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 24
  Original: tbl.get_intersecting(r.point(0,0), index='g').type_of()
  Java: tbl.getIntersecting(r.point(0L, 0L)).optArg("index", "g").typeOf()
  ExpectedOriginal: ("SELECTION<STREAM>")
  ExpectedType: String
  ExpectedJava: '"SELECTION<STREAM>"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 25
  Original: tbl.get_intersecting(r.point(0,0), index='g').filter(true).type_of()
  Java: tbl.getIntersecting(r.point(0L, 0L)).optArg("index", "g").filter(true).typeOf()
  ExpectedOriginal: ("SELECTION<STREAM>")
  ExpectedType: String
  ExpectedJava: '"SELECTION<STREAM>"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 27
  Original: tbl.get_intersecting(r.point(0,0), index='m').count()
  Java: tbl.getIntersecting(r.point(0L, 0L)).optArg("index", "m").count()
  ExpectedOriginal: 1
  ExpectedType: Long
  ExpectedJava: 1L
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 28
  Original: tbl.get_intersecting(r.point(1,0), index='m').count()
  Java: tbl.getIntersecting(r.point(1L, 0L)).optArg("index", "m").count()
  ExpectedOriginal: 1
  ExpectedType: Long
  ExpectedJava: 1L
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 29
  Original: tbl.get_intersecting(r.point(2,0), index='m').count()
  Java: tbl.getIntersecting(r.point(2L, 0L)).optArg("index", "m").count()
  ExpectedOriginal: 1
  ExpectedType: Long
  ExpectedJava: 1L
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 30
  Original: tbl.get_intersecting(r.point(3,0), index='m').count()
  Java: tbl.getIntersecting(r.point(3L, 0L)).optArg("index", "m").count()
  ExpectedOriginal: 0
  ExpectedType: Long
  ExpectedJava: 0L
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 31
  Original: tbl.get_intersecting(r.polygon([0,0], [0,1], [1,1], [1,0]), index='m').count()
  Java: tbl.getIntersecting(r.polygon(r.array(0L, 0L), r.array(0L, 1L), r.array(1L, 1L), r.array(1L, 0L))).optArg("index", "m").count()
  ExpectedOriginal: 1
  ExpectedType: Long
  ExpectedJava: 1L
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 32
  Original: tbl.get_nearest(r.point(0,0), index='other')
  Java: tbl.getNearest(r.point(0L, 0L)).optArg("index", "other")
  ExpectedOriginal: err('ReqlQueryLogicError', 'Index `other` is not a geospatial index.  get_nearest can only be used with a geospatial index.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Index `other` is not a geospatial index.  get_nearest can only be used with a geospatial index.", r.array(0L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 33
  Original: tbl.get_nearest(r.point(0,0), index='missing')
  Java: tbl.getNearest(r.point(0L, 0L)).optArg("index", "missing")
  ExpectedOriginal: err_regex('ReqlOpFailedError', 'Index `missing` was not found on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]', [0])
  ExpectedType: ErrRegex
  ExpectedJava: err_regex("ReqlOpFailedError", "Index `missing` was not found on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]", r.array(0L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 34
  Original: tbl.get_nearest(r.point(0,0))
  Java: tbl.getNearest(r.point(0L, 0L))
  ExpectedOriginal: err('ReqlQueryLogicError', 'get_nearest requires an index argument.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "get_nearest requires an index argument.", r.array(0L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 38
  Original: tbl.get_nearest(r.point(0,0), index='id').count()
  Java: tbl.getNearest(r.point(0L, 0L)).optArg("index", "id").count()
  ExpectedOriginal: err('ReqlQueryLogicError', 'get_nearest cannot use the primary index.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "get_nearest cannot use the primary index.", r.array(0L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 39
  Original: tbl.get_nearest(r.point(0,0), index='g').pluck('dist', {'doc':'id'})
  Java: tbl.getNearest(r.point(0L, 0L)).optArg("index", "g").pluck("dist", r.hashMap("doc", "id"))
  ExpectedOriginal: ([{'dist':0,'doc':{'id':1}},{'dist':0.055659745396754216,'doc':{'id':2}}])
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("dist", 0L).with("doc", r.hashMap("id", 1L)), r.hashMap("dist", 0.055659745396754216).with("doc", r.hashMap("id", 2L)))
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 40
  Original: tbl.get_nearest(r.point(-0.000001,1), index='g').pluck('dist', {'doc':'id'})
  Java: tbl.getNearest(r.point(-1e-06, 1L)).optArg("index", "g").pluck("dist", r.hashMap("doc", "id"))
  ExpectedOriginal: ([{'dist':0,'doc':{'id':2}},{'dist':0.11130264976984369,'doc':{'id':1}}])
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("dist", 0L).with("doc", r.hashMap("id", 2L)), r.hashMap("dist", 0.11130264976984369).with("doc", r.hashMap("id", 1L)))
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 41
  Original: tbl.get_nearest(r.point(0,0), index='g', max_dist=1565110).pluck('dist', {'doc':'id'})
  Java: tbl.getNearest(r.point(0L, 0L)).optArg("index", "g").optArg("max_dist", 1565110L).pluck("dist", r.hashMap("doc", "id"))
  ExpectedOriginal: ([{'dist':0,'doc':{'id':1}},{'dist':0.055659745396754216,'doc':{'id':2}},{'dist':1565109.0992178896,'doc':{'id':0}}])
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("dist", 0L).with("doc", r.hashMap("id", 1L)), r.hashMap("dist", 0.055659745396754216).with("doc", r.hashMap("id", 2L)), r.hashMap("dist", 1565109.0992178896).with("doc", r.hashMap("id", 0L)))
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 42
  Original: tbl.get_nearest(r.point(0,0), index='g', max_dist=1565110, max_results=2).pluck('dist', {'doc':'id'})
  Java: tbl.getNearest(r.point(0L, 0L)).optArg("index", "g").optArg("max_dist", 1565110L).optArg("max_results", 2L).pluck("dist", r.hashMap("doc", "id"))
  ExpectedOriginal: ([{'dist':0,'doc':{'id':1}},{'dist':0.055659745396754216,'doc':{'id':2}}])
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("dist", 0L).with("doc", r.hashMap("id", 1L)), r.hashMap("dist", 0.055659745396754216).with("doc", r.hashMap("id", 2L)))
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 43
  Original: tbl.get_nearest(r.point(0,0), index='g', max_dist=10000000).pluck('dist', {'doc':'id'})
  Java: tbl.getNearest(r.point(0L, 0L)).optArg("index", "g").optArg("max_dist", 10000000L).pluck("dist", r.hashMap("doc", "id"))
  ExpectedOriginal: err('ReqlQueryLogicError', 'The distance has become too large for continuing the indexed nearest traversal.  Consider specifying a smaller `max_dist` parameter.  (Radius must be smaller than a quarter of the circumference along the minor axis of the reference ellipsoid.  Got 10968937.995244588703m, but must be smaller than 9985163.1855612862855m.)', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "The distance has become too large for continuing the indexed nearest traversal.  Consider specifying a smaller `max_dist` parameter.  (Radius must be smaller than a quarter of the circumference along the minor axis of the reference ellipsoid.  Got 10968937.995244588703m, but must be smaller than 9985163.1855612862855m.)", r.array(0L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 44
  Original: tbl.get_nearest(r.point(0,0), index='g', max_dist=1566, unit='km').pluck('dist', {'doc':'id'})
  Java: tbl.getNearest(r.point(0L, 0L)).optArg("index", "g").optArg("max_dist", 1566L).optArg("unit", "km").pluck("dist", r.hashMap("doc", "id"))
  ExpectedOriginal: ([{'dist':0,'doc':{'id':1}},{'dist':0.00005565974539675422,'doc':{'id':2}},{'dist':1565.1090992178897,'doc':{'id':0}}])
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("dist", 0L).with("doc", r.hashMap("id", 1L)), r.hashMap("dist", 5.565974539675422e-05).with("doc", r.hashMap("id", 2L)), r.hashMap("dist", 1565.1090992178897).with("doc", r.hashMap("id", 0L)))
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 45
  Original: tbl.get_nearest(r.point(0,0), index='g', max_dist=1, geo_system='unit_sphere').pluck('dist', {'doc':'id'})
  Java: tbl.getNearest(r.point(0L, 0L)).optArg("index", "g").optArg("max_dist", 1L).optArg("geo_system", "unit_sphere").pluck("dist", r.hashMap("doc", "id"))
  ExpectedOriginal: ([{'dist':0, 'doc':{'id':1}}, {'dist':8.726646259990191e-09, 'doc':{'id':2}}, {'dist':0.24619691677893205, 'doc':{'id':0}}])
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("dist", 0L).with("doc", r.hashMap("id", 1L)), r.hashMap("dist", 8.726646259990191e-09).with("doc", r.hashMap("id", 2L)), r.hashMap("dist", 0.24619691677893205).with("doc", r.hashMap("id", 0L)))
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/indexing.yaml
  TestNum: 46
  Original: tbl.get_nearest(r.point(0,0), index='g').type_of()
  Java: tbl.getNearest(r.point(0L, 0L)).optArg("index", "g").typeOf()
  ExpectedOriginal: ("ARRAY")
  ExpectedType: String
  ExpectedJava: '"ARRAY"'
  RunOpts: []
