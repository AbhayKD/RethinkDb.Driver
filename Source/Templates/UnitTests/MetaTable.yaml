ModuleName: MetaTable
DefsAndTests:
- TestType: JavaDef
  TestFile: meta/table.yaml
  TestNum: 1
  Original: db = r.db('test')
  Java: DB db = (DB) r.db("test");
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 2
  Original: db.table_list()
  Java: db.tableList()
  ExpectedOriginal: '[]'
  ExpectedType: List
  ExpectedJava: Arrays.asList()
  Obtained: db.tableList()
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 3
  Original: r.db('rethinkdb').info()
  Java: r.db("rethinkdb").info()
  ExpectedOriginal: ({'type':'DB','name':'rethinkdb','id':null})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("type", "DB").with("name", "rethinkdb").with("id", null)
  Obtained: r.db("rethinkdb").info()
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 4
  Original: r.db('rethinkdb').table('stats').info()
  Java: r.db("rethinkdb").table("stats").info()
  ExpectedOriginal: partial({'db':{'type':'DB','name':'rethinkdb','id':null}, 'type':'TABLE','id':null,'name':'stats', 'indexes':[],'primary_key':'id'})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("db", new MapObject().with("type", "DB").with("name", "rethinkdb").with("id", null)).with("type", "TABLE").with("id", null).with("name", "stats").with("indexes", Arrays.asList()).with("primary_key", "id"))
  Obtained: r.db("rethinkdb").table("stats").info()
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 5
  Original: db.table_create('a')
  Java: db.tableCreate("a")
  ExpectedOriginal: partial({'tables_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_created", 1))
  Obtained: db.tableCreate("a")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 6
  Original: db.table_list()
  Java: db.tableList()
  ExpectedOriginal: '[''a'']'
  ExpectedType: List
  ExpectedJava: Arrays.asList("a")
  Obtained: db.tableList()
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 7
  Original: db.table_create('b')
  Java: db.tableCreate("b")
  ExpectedOriginal: partial({'tables_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_created", 1))
  Obtained: db.tableCreate("b")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 8
  Original: db.table_list()
  Java: db.tableList()
  ExpectedOriginal: bag(['a', 'b'])
  ExpectedType: Bag
  ExpectedJava: bag(Arrays.asList("a", "b"))
  Obtained: db.tableList()
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 9
  Original: db.table_drop('a')
  Java: db.tableDrop("a")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_dropped", 1))
  Obtained: db.tableDrop("a")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 10
  Original: db.table_list()
  Java: db.tableList()
  ExpectedOriginal: '[''b'']'
  ExpectedType: List
  ExpectedJava: Arrays.asList("b")
  Obtained: db.tableList()
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 11
  Original: db.table_drop('b')
  Java: db.tableDrop("b")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_dropped", 1))
  Obtained: db.tableDrop("b")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 12
  Original: db.table_list()
  Java: db.tableList()
  ExpectedOriginal: '[]'
  ExpectedType: List
  ExpectedJava: Arrays.asList()
  Obtained: db.tableList()
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 13
  Original: db.table_create('ab', durability='soft')
  Java: db.tableCreate("ab").optArg("durability", "soft")
  ExpectedOriginal: partial({'tables_created':1,'config_changes':[partial({'new_val':partial({'durability':'soft'})})]})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_created", 1).with("config_changes", Arrays.asList(partial(new MapObject().with("new_val", partial(new MapObject().with("durability", "soft")))))))
  Obtained: db.tableCreate("ab").optArg("durability", "soft")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 14
  Original: db.table_drop('ab')
  Java: db.tableDrop("ab")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_dropped", 1))
  Obtained: db.tableDrop("ab")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 15
  Original: db.table_create('ab', durability='hard')
  Java: db.tableCreate("ab").optArg("durability", "hard")
  ExpectedOriginal: partial({'tables_created':1,'config_changes':[partial({'new_val':partial({'durability':'hard'})})]})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_created", 1).with("config_changes", Arrays.asList(partial(new MapObject().with("new_val", partial(new MapObject().with("durability", "hard")))))))
  Obtained: db.tableCreate("ab").optArg("durability", "hard")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 16
  Original: db.table_drop('ab')
  Java: db.tableDrop("ab")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_dropped", 1))
  Obtained: db.tableDrop("ab")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 17
  Original: db.table_create('ab', durability='fake')
  Java: db.tableCreate("ab").optArg("durability", "fake")
  ExpectedOriginal: err('ReqlQueryLogicError', 'Durability option `fake` unrecognized (options are "hard" and "soft").')
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Durability option `fake` unrecognized (options are "hard" and "soft").")
  Obtained: db.tableCreate("ab").optArg("durability", "fake")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 18
  Original: db.table_create('ab', primary_key='bar', shards=2, replicas=1)
  Java: db.tableCreate("ab").optArg("primary_key", "bar").optArg("shards", 2).optArg("replicas", 1)
  ExpectedOriginal: partial({'tables_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_created", 1))
  Obtained: db.tableCreate("ab").optArg("primary_key", "bar").optArg("shards", 2).optArg("replicas", 1)
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 19
  Original: db.table_drop('ab')
  Java: db.tableDrop("ab")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_dropped", 1))
  Obtained: db.tableDrop("ab")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 20
  Original: db.table_create('ab', primary_key='bar', primary_replica_tag='default')
  Java: db.tableCreate("ab").optArg("primary_key", "bar").optArg("primary_replica_tag", "default")
  ExpectedOriginal: partial({'tables_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_created", 1))
  Obtained: db.tableCreate("ab").optArg("primary_key", "bar").optArg("primary_replica_tag", "default")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 21
  Original: db.table_drop('ab')
  Java: db.tableDrop("ab")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_dropped", 1))
  Obtained: db.tableDrop("ab")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 22
  Original: db.table_create('ab', nonvoting_replica_tags=['default'])
  Java: db.tableCreate("ab").optArg("nonvoting_replica_tags", Arrays.asList("default"))
  ExpectedOriginal: partial({'tables_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_created", 1))
  Obtained: db.tableCreate("ab").optArg("nonvoting_replica_tags", Arrays.asList("default"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 23
  Original: db.table_drop('ab')
  Java: db.tableDrop("ab")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_dropped", 1))
  Obtained: db.tableDrop("ab")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 24
  Original: db.table_create('a')
  Java: db.tableCreate("a")
  ExpectedOriginal: partial({'tables_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_created", 1))
  Obtained: db.tableCreate("a")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 25
  Original: db.table('a').reconfigure(shards=1, replicas=1)
  Java: db.table("a").reconfigure().optArg("shards", 1).optArg("replicas", 1)
  ExpectedOriginal: partial({'reconfigured':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("reconfigured", 1))
  Obtained: db.table("a").reconfigure().optArg("shards", 1).optArg("replicas", 1)
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 26
  Original: db.table('a').reconfigure(shards=1, replicas={"default":1}, nonvoting_replica_tags=['default'], primary_replica_tag='default')
  Java: db.table("a").reconfigure().optArg("shards", 1).optArg("replicas", new MapObject().with("default", 1)).optArg("nonvoting_replica_tags", Arrays.asList("default")).optArg("primary_replica_tag", "default")
  ExpectedOriginal: partial({'reconfigured':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("reconfigured", 1))
  Obtained: db.table("a").reconfigure().optArg("shards", 1).optArg("replicas", new MapObject().with("default", 1)).optArg("nonvoting_replica_tags", Arrays.asList("default")).optArg("primary_replica_tag", "default")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 27
  Original: db.table('a').reconfigure(shards=1, replicas=1, dry_run=True)
  Java: db.table("a").reconfigure().optArg("shards", 1).optArg("replicas", 1).optArg("dry_run", true)
  ExpectedOriginal: partial({'reconfigured':0})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("reconfigured", 0))
  Obtained: db.table("a").reconfigure().optArg("shards", 1).optArg("replicas", 1).optArg("dry_run", true)
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 28
  Original: db.table('a').reconfigure(emergency_repair="unsafe_rollback")
  Java: db.table("a").reconfigure().optArg("emergency_repair", "unsafe_rollback")
  ExpectedOriginal: err('ReqlOpFailedError', 'This table doesn\'t need to be repaired.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlOpFailedError", "This table doesn't need to be repaired.", Arrays.asList())
  Obtained: db.table("a").reconfigure().optArg("emergency_repair", "unsafe_rollback")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 29
  Original: db.table('a').reconfigure(emergency_repair="unsafe_rollback", dry_run=True)
  Java: db.table("a").reconfigure().optArg("emergency_repair", "unsafe_rollback").optArg("dry_run", true)
  ExpectedOriginal: err('ReqlOpFailedError', 'This table doesn\'t need to be repaired.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlOpFailedError", "This table doesn't need to be repaired.", Arrays.asList())
  Obtained: db.table("a").reconfigure().optArg("emergency_repair", "unsafe_rollback").optArg("dry_run", true)
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 30
  Original: db.table('a').reconfigure(emergency_repair="unsafe_rollback_or_erase")
  Java: db.table("a").reconfigure().optArg("emergency_repair", "unsafe_rollback_or_erase")
  ExpectedOriginal: err('ReqlOpFailedError', 'This table doesn\'t need to be repaired.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlOpFailedError", "This table doesn't need to be repaired.", Arrays.asList())
  Obtained: db.table("a").reconfigure().optArg("emergency_repair", "unsafe_rollback_or_erase")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 31
  Original: db.table('a').reconfigure(emergency_repair=None, shards=1, replicas=1, dry_run=True)
  Java: db.table("a").reconfigure().optArg("emergency_repair", null).optArg("shards", 1).optArg("replicas", 1).optArg("dry_run", true)
  ExpectedOriginal: partial({'reconfigured':0})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("reconfigured", 0))
  Obtained: db.table("a").reconfigure().optArg("emergency_repair", null).optArg("shards", 1).optArg("replicas", 1).optArg("dry_run", true)
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 32
  Original: db.table_drop('a')
  Java: db.tableDrop("a")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_dropped", 1))
  Obtained: db.tableDrop("a")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 33
  Original: db.table_create('foo')
  Java: db.tableCreate("foo")
  ExpectedOriginal: partial({'tables_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_created", 1))
  Obtained: db.tableCreate("foo")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 34
  Original: db.table_create('foo')
  Java: db.tableCreate("foo")
  ExpectedOriginal: err('ReqlOpFailedError', 'Table `test.foo` already exists.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlOpFailedError", "Table `test.foo` already exists.", Arrays.asList(0))
  Obtained: db.tableCreate("foo")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 35
  Original: db.table_drop('foo')
  Java: db.tableDrop("foo")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_dropped", 1))
  Obtained: db.tableDrop("foo")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 36
  Original: db.table_drop('foo')
  Java: db.tableDrop("foo")
  ExpectedOriginal: err('ReqlOpFailedError', 'Table `test.foo` does not exist.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlOpFailedError", "Table `test.foo` does not exist.", Arrays.asList(0))
  Obtained: db.tableDrop("foo")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 37
  Original: db.table_create('nonsense', 'foo')
  Java: db.tableCreate("nonsense", "foo")
  ExpectedOriginal: err("ReqlCompileError", "Expected between 1 and 2 arguments but found 3.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlCompileError", "Expected between 1 and 2 arguments but found 3.", Arrays.asList())
  Obtained: db.tableCreate("nonsense", "foo")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 38
  Original: db.table_create('nonsense', foo='bar')
  Java: db.tableCreate("nonsense").optArg("foo", "bar")
  ExpectedOriginal: err('ReqlCompileError', "Unrecognized optional argument `foo`.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlCompileError", "Unrecognized optional argument `foo`.", Arrays.asList())
  Obtained: db.tableCreate("nonsense").optArg("foo", "bar")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 39
  Original: db.table_create('a')
  Java: db.tableCreate("a")
  ExpectedOriginal: partial({'tables_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_created", 1))
  Obtained: db.tableCreate("a")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 40
  Original: db.table('a').reconfigure(shards=0, replicas=1)
  Java: db.table("a").reconfigure().optArg("shards", 0).optArg("replicas", 1)
  ExpectedOriginal: err('ReqlQueryLogicError', 'Every table must have at least one shard.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Every table must have at least one shard.", Arrays.asList())
  Obtained: db.table("a").reconfigure().optArg("shards", 0).optArg("replicas", 1)
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 41
  Original: db.table('a').reconfigure(shards=1, replicas={"default":1}, primary_replica_tag="foo")
  Java: db.table("a").reconfigure().optArg("shards", 1).optArg("replicas", new MapObject().with("default", 1)).optArg("primary_replica_tag", "foo")
  ExpectedOriginal: >
    err('ReqlOpFailedError', 'Can\'t use server tag `foo` for primary replicas because you specified no replicas in server tag `foo`.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlOpFailedError", "Can't use server tag `foo` for primary replicas because you specified no replicas in server tag `foo`.", Arrays.asList())
  Obtained: db.table("a").reconfigure().optArg("shards", 1).optArg("replicas", new MapObject().with("default", 1)).optArg("primary_replica_tag", "foo")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 42
  Original: db.table('a').reconfigure(shards=1, replicas={"default":1}, primary_replica_tag="default", nonvoting_replica_tags=["foo"])
  Java: db.table("a").reconfigure().optArg("shards", 1).optArg("replicas", new MapObject().with("default", 1)).optArg("primary_replica_tag", "default").optArg("nonvoting_replica_tags", Arrays.asList("foo"))
  ExpectedOriginal: >
    err('ReqlOpFailedError', 'You specified that the replicas in server tag `foo` should be non-voting, but you didn\'t specify a number of replicas in server tag `foo`.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlOpFailedError", "You specified that the replicas in server tag `foo` should be non-voting, but you didn't specify a number of replicas in server tag `foo`.", Arrays.asList())
  Obtained: db.table("a").reconfigure().optArg("shards", 1).optArg("replicas", new MapObject().with("default", 1)).optArg("primary_replica_tag", "default").optArg("nonvoting_replica_tags", Arrays.asList("foo"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 43
  Original: db.table('a').reconfigure(shards=1, replicas={"foo":0}, primary_replica_tag="foo")
  Java: db.table("a").reconfigure().optArg("shards", 1).optArg("replicas", new MapObject().with("foo", 0)).optArg("primary_replica_tag", "foo")
  ExpectedOriginal: >
    err('ReqlOpFailedError', 'You must set `replicas` to at least one. `replicas` includes the primary replica; if there are zero replicas, there is nowhere to put the data.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlOpFailedError", "You must set `replicas` to at least one. `replicas` includes the primary replica; if there are zero replicas, there is nowhere to put the data.", Arrays.asList())
  Obtained: db.table("a").reconfigure().optArg("shards", 1).optArg("replicas", new MapObject().with("foo", 0)).optArg("primary_replica_tag", "foo")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 44
  Original: db.table('a').reconfigure(shards=1, replicas={"default":0})
  Java: db.table("a").reconfigure().optArg("shards", 1).optArg("replicas", new MapObject().with("default", 0))
  ExpectedOriginal: err('ReqlQueryLogicError', '`primary_replica_tag` must be specified when `replicas` is an OBJECT.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "`primary_replica_tag` must be specified when `replicas` is an OBJECT.", Arrays.asList())
  Obtained: db.table("a").reconfigure().optArg("shards", 1).optArg("replicas", new MapObject().with("default", 0))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 45
  Original: db.table('a').reconfigure(shards=1, replicas={"default":-3}, primary_replica_tag='default')
  Java: db.table("a").reconfigure().optArg("shards", 1).optArg("replicas", new MapObject().with("default", -3)).optArg("primary_replica_tag", "default")
  ExpectedOriginal: err('ReqlQueryLogicError', 'Can\'t have a negative number of replicas', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Can't have a negative number of replicas", Arrays.asList())
  Obtained: db.table("a").reconfigure().optArg("shards", 1).optArg("replicas", new MapObject().with("default", -3)).optArg("primary_replica_tag", "default")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 46
  Original: db.table('a').reconfigure(shards=1, replicas=3, primary_replica_tag='foo')
  Java: db.table("a").reconfigure().optArg("shards", 1).optArg("replicas", 3).optArg("primary_replica_tag", "foo")
  ExpectedOriginal: err('ReqlQueryLogicError', '`replicas` must be an OBJECT if `primary_replica_tag` is specified.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "`replicas` must be an OBJECT if `primary_replica_tag` is specified.", Arrays.asList())
  Obtained: db.table("a").reconfigure().optArg("shards", 1).optArg("replicas", 3).optArg("primary_replica_tag", "foo")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 47
  Original: db.table('a').reconfigure(shards=1, replicas=3, nonvoting_replica_tags=['foo'])
  Java: db.table("a").reconfigure().optArg("shards", 1).optArg("replicas", 3).optArg("nonvoting_replica_tags", Arrays.asList("foo"))
  ExpectedOriginal: >
    err('ReqlQueryLogicError', '`replicas` must be an OBJECT if `nonvoting_replica_tags` is specified.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "`replicas` must be an OBJECT if `nonvoting_replica_tags` is specified.", Arrays.asList())
  Obtained: db.table("a").reconfigure().optArg("shards", 1).optArg("replicas", 3).optArg("nonvoting_replica_tags", Arrays.asList("foo"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 48
  Original: db.reconfigure(emergency_repair="unsafe_rollback")
  Java: db.reconfigure().optArg("emergency_repair", "unsafe_rollback")
  ExpectedOriginal: >
    err('ReqlQueryLogicError', 'Can\'t emergency repair an entire database at once; instead you should run `reconfigure()` on each table individually.')
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Can't emergency repair an entire database at once; instead you should run `reconfigure()` on each table individually.")
  Obtained: db.reconfigure().optArg("emergency_repair", "unsafe_rollback")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 49
  Original: db.table('a').reconfigure(emergency_repair="foo")
  Java: db.table("a").reconfigure().optArg("emergency_repair", "foo")
  ExpectedOriginal: err('ReqlQueryLogicError', '`emergency_repair` should be "unsafe_rollback" or "unsafe_rollback_or_erase"', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "`emergency_repair` should be "unsafe_rollback" or "unsafe_rollback_or_erase"", Arrays.asList())
  Obtained: db.table("a").reconfigure().optArg("emergency_repair", "foo")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 50
  Original: db.table('a').reconfigure(emergency_repair="unsafe_rollback", shards=1, replicas=1)
  Java: db.table("a").reconfigure().optArg("emergency_repair", "unsafe_rollback").optArg("shards", 1).optArg("replicas", 1)
  ExpectedOriginal: err('ReqlQueryLogicError', 'In emergency repair mode, you can\'t specify shards, replicas, etc.')
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "In emergency repair mode, you can't specify shards, replicas, etc.")
  Obtained: db.table("a").reconfigure().optArg("emergency_repair", "unsafe_rollback").optArg("shards", 1).optArg("replicas", 1)
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 51
  Original: db.table('a').reconfigure(shards=2, replicas=1)
  Java: db.table("a").reconfigure().optArg("shards", 2).optArg("replicas", 1)
  ExpectedOriginal: partial({'reconfigured':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("reconfigured", 1))
  Obtained: db.table("a").reconfigure().optArg("shards", 2).optArg("replicas", 1)
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 52
  Original: db.table('a').wait()
  Java: db.table("a").wait_()
  ExpectedOriginal: None
  ExpectedType: Object
  ExpectedJava: null
  Obtained: db.table("a").wait_()
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 53
  Original: db.table('a').insert([{"id":1}, {"id":2}, {"id":3}, {"id":4}])
  Java: db.table("a").insert(Arrays.asList(new MapObject().with("id", 1), new MapObject().with("id", 2), new MapObject().with("id", 3), new MapObject().with("id", 4)))
  ExpectedOriginal: '{''inserted'': 4}'
  ExpectedType: Map
  ExpectedJava: new MapObject().with("inserted", 4)
  Obtained: db.table("a").insert(Arrays.asList(new MapObject().with("id", 1), new MapObject().with("id", 2), new MapObject().with("id", 3), new MapObject().with("id", 4)))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 54
  Original: db.table('a').reconfigure(shards=2, replicas=1)
  Java: db.table("a").reconfigure().optArg("shards", 2).optArg("replicas", 1)
  ExpectedOriginal: partial({'reconfigured':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("reconfigured", 1))
  Obtained: db.table("a").reconfigure().optArg("shards", 2).optArg("replicas", 1)
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 55
  Original: db.table('a').reconfigure(shards=1, replicas=2)
  Java: db.table("a").reconfigure().optArg("shards", 1).optArg("replicas", 2)
  ExpectedOriginal: >
    err('ReqlOpFailedError', 'Can\'t put 2 replicas on servers with the tag `default` because there are only 1 servers with the tag `default`. It\'s impossible to have more replicas of the data than there are servers.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlOpFailedError", "Can't put 2 replicas on servers with the tag `default` because there are only 1 servers with the tag `default`. It's impossible to have more replicas of the data than there are servers.", Arrays.asList())
  Obtained: db.table("a").reconfigure().optArg("shards", 1).optArg("replicas", 2)
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 56
  Original: db.table('a').wait()
  Java: db.table("a").wait_()
  ExpectedOriginal: partial({'ready':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("ready", 1))
  Obtained: db.table("a").wait_()
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 57
  Original: db.table('a').rebalance()
  Java: db.table("a").rebalance()
  ExpectedOriginal: partial({'rebalanced':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("rebalanced", 1))
  Obtained: db.table("a").rebalance()
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 58
  Original: db.wait()
  Java: db.wait_()
  ExpectedOriginal: partial({'ready':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("ready", 1))
  Obtained: db.wait_()
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 59
  Original: db.rebalance()
  Java: db.rebalance()
  ExpectedOriginal: partial({'rebalanced':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("rebalanced", 1))
  Obtained: db.rebalance()
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 60
  Original: r.wait()
  Java: r.wait_()
  ExpectedOriginal: partial({'ready':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("ready", 1))
  Obtained: r.wait_()
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 61
  Original: r.rebalance()
  Java: r.rebalance()
  ExpectedOriginal: partial({'rebalanced':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("rebalanced", 1))
  Obtained: r.rebalance()
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 62
  Original: db.table_drop('a')
  Java: db.tableDrop("a")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_dropped", 1))
  Obtained: db.tableDrop("a")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 63
  Original: db.table_create('a')
  Java: db.tableCreate("a")
  ExpectedOriginal: None
  ExpectedType: Object
  ExpectedJava: null
  Obtained: db.tableCreate("a")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 64
  Original: db.table_create('b')
  Java: db.tableCreate("b")
  ExpectedOriginal: None
  ExpectedType: Object
  ExpectedJava: null
  Obtained: db.tableCreate("b")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 65
  Original: db.table_create('c')
  Java: db.tableCreate("c")
  ExpectedOriginal: None
  ExpectedType: Object
  ExpectedJava: null
  Obtained: db.tableCreate("c")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 66
  Original: db.reconfigure(shards=0, replicas=1)
  Java: db.reconfigure().optArg("shards", 0).optArg("replicas", 1)
  ExpectedOriginal: err('ReqlQueryLogicError', 'Every table must have at least one shard.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Every table must have at least one shard.", Arrays.asList())
  Obtained: db.reconfigure().optArg("shards", 0).optArg("replicas", 1)
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 67
  Original: db.reconfigure(shards=1, replicas={"default":0})
  Java: db.reconfigure().optArg("shards", 1).optArg("replicas", new MapObject().with("default", 0))
  ExpectedOriginal: err('ReqlQueryLogicError', '`primary_replica_tag` must be specified when `replicas` is an OBJECT.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "`primary_replica_tag` must be specified when `replicas` is an OBJECT.", Arrays.asList())
  Obtained: db.reconfigure().optArg("shards", 1).optArg("replicas", new MapObject().with("default", 0))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 68
  Original: db.reconfigure(shards=1, replicas={"default":-3}, primary_replica_tag='default')
  Java: db.reconfigure().optArg("shards", 1).optArg("replicas", new MapObject().with("default", -3)).optArg("primary_replica_tag", "default")
  ExpectedOriginal: err('ReqlQueryLogicError', 'Can\'t have a negative number of replicas', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Can't have a negative number of replicas", Arrays.asList())
  Obtained: db.reconfigure().optArg("shards", 1).optArg("replicas", new MapObject().with("default", -3)).optArg("primary_replica_tag", "default")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 69
  Original: db.reconfigure(shards=1, replicas=3, primary_replica_tag='foo')
  Java: db.reconfigure().optArg("shards", 1).optArg("replicas", 3).optArg("primary_replica_tag", "foo")
  ExpectedOriginal: err('ReqlQueryLogicError', '`replicas` must be an OBJECT if `primary_replica_tag` is specified.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "`replicas` must be an OBJECT if `primary_replica_tag` is specified.", Arrays.asList())
  Obtained: db.reconfigure().optArg("shards", 1).optArg("replicas", 3).optArg("primary_replica_tag", "foo")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 70
  Original: db.reconfigure(shards=2, replicas=1)
  Java: db.reconfigure().optArg("shards", 2).optArg("replicas", 1)
  ExpectedOriginal: partial({'reconfigured':3})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("reconfigured", 3))
  Obtained: db.reconfigure().optArg("shards", 2).optArg("replicas", 1)
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 71
  Original: db.table_drop('a')
  Java: db.tableDrop("a")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_dropped", 1))
  Obtained: db.tableDrop("a")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 72
  Original: db.table_drop('b')
  Java: db.tableDrop("b")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_dropped", 1))
  Obtained: db.tableDrop("b")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 73
  Original: db.table_drop('c')
  Java: db.tableDrop("c")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_dropped", 1))
  Obtained: db.tableDrop("c")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 74
  Original: r.db_create("test2")
  Java: r.dbCreate("test2")
  ExpectedOriginal: partial({'dbs_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("dbs_created", 1))
  Obtained: r.dbCreate("test2")
  RunOpts: []
- TestType: JavaDef
  TestFile: meta/table.yaml
  TestNum: 75
  Original: db2 = r.db("test2")
  Java: DB db2 = (DB) r.db("test2");
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 76
  Original: db.table_create("testA")
  Java: db.tableCreate("testA")
  ExpectedOriginal: partial({'tables_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_created", 1))
  Obtained: db.tableCreate("testA")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 77
  Original: db.table_create("testB")
  Java: db.tableCreate("testB")
  ExpectedOriginal: partial({'tables_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_created", 1))
  Obtained: db.tableCreate("testB")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 78
  Original: db2.table_create("test2B")
  Java: db2.tableCreate("test2B")
  ExpectedOriginal: partial({'tables_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_created", 1))
  Obtained: db2.tableCreate("test2B")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 79
  Original: r.table('testA').config().pluck('db','name')
  Java: r.table("testA").config().pluck("db", "name")
  ExpectedOriginal: '{''db'': ''test'', ''name'': ''testA''}'
  ExpectedType: Map
  ExpectedJava: new MapObject().with("db", "test").with("name", "testA")
  Obtained: r.table("testA").config().pluck("db", "name")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 80
  Original: r.table('doesntexist').config()
  Java: r.table("doesntexist").config()
  ExpectedOriginal: err('ReqlOpFailedError', 'Table `test.doesntexist` does not exist.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlOpFailedError", "Table `test.doesntexist` does not exist.", Arrays.asList())
  Obtained: r.table("doesntexist").config()
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 81
  Original: r.table('test2B').config()
  Java: r.table("test2B").config()
  ExpectedOriginal: err('ReqlOpFailedError', 'Table `test.test2B` does not exist.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlOpFailedError", "Table `test.test2B` does not exist.", Arrays.asList())
  Obtained: r.table("test2B").config()
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 82
  Original: r.db('rethinkdb').table('table_config').filter({'name':'testA'}).nth(0).eq(r.table('testA').config())
  Java: r.db("rethinkdb").table("table_config").filter(new MapObject().with("name", "testA")).nth(0).eq(r.table("testA").config())
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  Obtained: r.db("rethinkdb").table("table_config").filter(new MapObject().with("name", "testA")).nth(0).eq(r.table("testA").config())
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 83
  Original: r.db('rethinkdb').table('table_status').filter({'name':'testA'}).nth(0).eq(r.table('testA').status())
  Java: r.db("rethinkdb").table("table_status").filter(new MapObject().with("name", "testA")).nth(0).eq(r.table("testA").status())
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  Obtained: r.db("rethinkdb").table("table_status").filter(new MapObject().with("name", "testA")).nth(0).eq(r.table("testA").status())
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 84
  Original: r.db('rethinkdb').table('table_config', identifier_format='uuid').nth(0)["db"]
  Java: r.db("rethinkdb").table("table_config").optArg("identifier_format", "uuid").nth(0).bracket("db")
  ExpectedOriginal: uuid()
  ExpectedType: Uuid
  ExpectedJava: uuid()
  Obtained: r.db("rethinkdb").table("table_config").optArg("identifier_format", "uuid").nth(0).bracket("db")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 85
  Original: r.table('testA', identifier_format='uuid').count()
  Java: r.table("testA").optArg("identifier_format", "uuid").count()
  ExpectedOriginal: 0
  ExpectedType: Integer
  ExpectedJava: 0
  Obtained: r.table("testA").optArg("identifier_format", "uuid").count()
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 86
  Original: r.wait(wait_for='all_replicas_ready', timeout=5)
  Java: r.wait_().optArg("wait_for", "all_replicas_ready").optArg("timeout", 5)
  ExpectedOriginal: partial({'ready':2})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("ready", 2))
  Obtained: r.wait_().optArg("wait_for", "all_replicas_ready").optArg("timeout", 5)
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 87
  Original: db.table_drop('testA')
  Java: db.tableDrop("testA")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_dropped", 1))
  Obtained: db.tableDrop("testA")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 88
  Original: db.table_drop('testB')
  Java: db.tableDrop("testB")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_dropped", 1))
  Obtained: db.tableDrop("testB")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  TestNum: 89
  Original: r.db_drop('test2')
  Java: r.dbDrop("test2")
  ExpectedOriginal: partial({'dbs_dropped':1,'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("dbs_dropped", 1).with("tables_dropped", 1))
  Obtained: r.dbDrop("test2")
  RunOpts: []
