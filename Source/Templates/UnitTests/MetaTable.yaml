ModuleName: MetaTable
DefsAndTests:
- TestType: JavaDef
  TestFile: meta/table.yaml
  LineNum: 4
  Original: db = r.db('test')
  VarName: db
  VarType: Db
  Value: (Db) (r.db("test"))
  Java: Db db = (Db) (r.db("test"));
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 6
  Original: db.table_list()
  Java: db.tableList()
  ExpectedOriginal: '[]'
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 9
  Original: r.db('rethinkdb').info()
  Java: r.db("rethinkdb").info()
  ExpectedOriginal: ({'type':'DB','name':'rethinkdb','id':null})
  ExpectedType: Map
  ExpectedJava: r.hashMap("type", "DB").with("name", "rethinkdb").with("id", null)
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 12
  Original: r.db('rethinkdb').table('stats').info()
  Java: r.db("rethinkdb").table("stats").info()
  ExpectedOriginal: >-
    partial({'db':{'type':'DB','name':'rethinkdb','id':null},

    'type':'TABLE','id':null,'name':'stats',

    'indexes':[],'primary_key':'id'})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("db", r.hashMap("type", "DB").with("name", "rethinkdb").with("id", null)).with("type", "TABLE").with("id", null).with("name", "stats").with("indexes", r.array()).with("primary_key", "id"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 18
  Original: db.table_create('a')
  Java: db.tableCreate("a")
  ExpectedOriginal: partial({'tables_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_created", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 21
  Original: db.table_list()
  Java: db.tableList()
  ExpectedOriginal: '[''a'']'
  ExpectedType: List
  ExpectedJava: r.array("a")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 24
  Original: db.table_create('b')
  Java: db.tableCreate("b")
  ExpectedOriginal: partial({'tables_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_created", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 27
  Original: db.table_list()
  Java: db.tableList()
  ExpectedOriginal: bag(['a', 'b'])
  ExpectedType: Bag
  ExpectedJava: bag(r.array("a", "b"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 31
  Original: db.table_drop('a')
  Java: db.tableDrop("a")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_dropped", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 34
  Original: db.table_list()
  Java: db.tableList()
  ExpectedOriginal: '[''b'']'
  ExpectedType: List
  ExpectedJava: r.array("b")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 37
  Original: db.table_drop('b')
  Java: db.tableDrop("b")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_dropped", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 40
  Original: db.table_list()
  Java: db.tableList()
  ExpectedOriginal: '[]'
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 44
  Original: db.table_create('ab', durability='soft')
  Java: db.tableCreate("ab").optArg("durability", "soft")
  ExpectedOriginal: partial({'tables_created':1,'config_changes':[partial({'new_val':partial({'durability':'soft'})})]})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_created", 1L).with("config_changes", r.array(partial(r.hashMap("new_val", partial(r.hashMap("durability", "soft")))))))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 49
  Original: db.table_drop('ab')
  Java: db.tableDrop("ab")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_dropped", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 52
  Original: db.table_create('ab', durability='hard')
  Java: db.tableCreate("ab").optArg("durability", "hard")
  ExpectedOriginal: partial({'tables_created':1,'config_changes':[partial({'new_val':partial({'durability':'hard'})})]})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_created", 1L).with("config_changes", r.array(partial(r.hashMap("new_val", partial(r.hashMap("durability", "hard")))))))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 57
  Original: db.table_drop('ab')
  Java: db.tableDrop("ab")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_dropped", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 60
  Original: db.table_create('ab', durability='fake')
  Java: db.tableCreate("ab").optArg("durability", "fake")
  ExpectedOriginal: err('ReqlQueryLogicError', 'Durability option `fake` unrecognized (options are "hard" and "soft").')
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Durability option `fake` unrecognized (options are \"hard\" and \"soft\").")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 65
  Original: db.table_create('ab', primary_key='bar', shards=2, replicas=1)
  Java: db.tableCreate("ab").optArg("primary_key", "bar").optArg("shards", 2L).optArg("replicas", 1L)
  ExpectedOriginal: partial({'tables_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_created", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 70
  Original: db.table_drop('ab')
  Java: db.tableDrop("ab")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_dropped", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 73
  Original: db.table_create('ab', primary_key='bar', primary_replica_tag='default')
  Java: db.tableCreate("ab").optArg("primary_key", "bar").optArg("primary_replica_tag", "default")
  ExpectedOriginal: partial({'tables_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_created", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 78
  Original: db.table_drop('ab')
  Java: db.tableDrop("ab")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_dropped", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 81
  Original: db.table_create('ab', nonvoting_replica_tags=['default'])
  Java: db.tableCreate("ab").optArg("nonvoting_replica_tags", r.array("default"))
  ExpectedOriginal: partial({'tables_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_created", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 86
  Original: db.table_drop('ab')
  Java: db.tableDrop("ab")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_dropped", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 90
  Original: db.table_create('a')
  Java: db.tableCreate("a")
  ExpectedOriginal: partial({'tables_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_created", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 93
  Original: db.table('a').reconfigure(shards=1, replicas=1)
  Java: db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", 1L)
  ExpectedOriginal: partial({'reconfigured':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("reconfigured", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 98
  Original: db.table('a').reconfigure(shards=1, replicas={"default":1}, nonvoting_replica_tags=['default'], primary_replica_tag='default')
  Java: db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", r.hashMap("default", 1L)).optArg("nonvoting_replica_tags", r.array("default")).optArg("primary_replica_tag", "default")
  ExpectedOriginal: partial({'reconfigured':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("reconfigured", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 103
  Original: db.table('a').reconfigure(shards=1, replicas=1, dry_run=True)
  Java: db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", 1L).optArg("dry_run", true)
  ExpectedOriginal: partial({'reconfigured':0})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("reconfigured", 0L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 108
  Original: db.table('a').reconfigure(emergency_repair="unsafe_rollback")
  Java: db.table("a").reconfigure().optArg("emergency_repair", "unsafe_rollback")
  ExpectedOriginal: err('ReqlOpFailedError', 'This table doesn\'t need to be repaired.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlOpFailedError", "This table doesn't need to be repaired.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 113
  Original: db.table('a').reconfigure(emergency_repair="unsafe_rollback", dry_run=True)
  Java: db.table("a").reconfigure().optArg("emergency_repair", "unsafe_rollback").optArg("dry_run", true)
  ExpectedOriginal: err('ReqlOpFailedError', 'This table doesn\'t need to be repaired.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlOpFailedError", "This table doesn't need to be repaired.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 118
  Original: db.table('a').reconfigure(emergency_repair="unsafe_rollback_or_erase")
  Java: db.table("a").reconfigure().optArg("emergency_repair", "unsafe_rollback_or_erase")
  ExpectedOriginal: err('ReqlOpFailedError', 'This table doesn\'t need to be repaired.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlOpFailedError", "This table doesn't need to be repaired.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 123
  Original: db.table('a').reconfigure(emergency_repair=None, shards=1, replicas=1, dry_run=True)
  Java: db.table("a").reconfigure().optArg("emergency_repair", null).optArg("shards", 1L).optArg("replicas", 1L).optArg("dry_run", true)
  ExpectedOriginal: partial({'reconfigured':0})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("reconfigured", 0L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 128
  Original: db.table_drop('a')
  Java: db.tableDrop("a")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_dropped", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 132
  Original: db.table_create('foo')
  Java: db.tableCreate("foo")
  ExpectedOriginal: partial({'tables_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_created", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 135
  Original: db.table_create('foo')
  Java: db.tableCreate("foo")
  ExpectedOriginal: err('ReqlOpFailedError', 'Table `test.foo` already exists.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlOpFailedError", "Table `test.foo` already exists.", r.array(0L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 138
  Original: db.table_drop('foo')
  Java: db.tableDrop("foo")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_dropped", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 141
  Original: db.table_drop('foo')
  Java: db.tableDrop("foo")
  ExpectedOriginal: err('ReqlOpFailedError', 'Table `test.foo` does not exist.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlOpFailedError", "Table `test.foo` does not exist.", r.array(0L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 151
  Original: db.table_create('nonsense', foo='bar')
  Java: db.tableCreate("nonsense").optArg("foo", "bar")
  ExpectedOriginal: err('ReqlCompileError', "Unrecognized optional argument `foo`.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlCompileError", "Unrecognized optional argument `foo`.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 158
  Original: db.table_create('a')
  Java: db.tableCreate("a")
  ExpectedOriginal: partial({'tables_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_created", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 161
  Original: db.table('a').reconfigure(shards=0, replicas=1)
  Java: db.table("a").reconfigure().optArg("shards", 0L).optArg("replicas", 1L)
  ExpectedOriginal: err('ReqlQueryLogicError', 'Every table must have at least one shard.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Every table must have at least one shard.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 166
  Original: db.table('a').reconfigure(shards=1, replicas={"default":1}, primary_replica_tag="foo")
  Java: db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", r.hashMap("default", 1L)).optArg("primary_replica_tag", "foo")
  ExpectedOriginal: err('ReqlOpFailedError', 'Can\'t use server tag `foo` for primary replicas because you specified no replicas in server tag `foo`.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlOpFailedError", "Can't use server tag `foo` for primary replicas because you specified no replicas in server tag `foo`.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 171
  Original: db.table('a').reconfigure(shards=1, replicas={"default":1}, primary_replica_tag="default", nonvoting_replica_tags=["foo"])
  Java: db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", r.hashMap("default", 1L)).optArg("primary_replica_tag", "default").optArg("nonvoting_replica_tags", r.array("foo"))
  ExpectedOriginal: err('ReqlOpFailedError', 'You specified that the replicas in server tag `foo` should be non-voting, but you didn\'t specify a number of replicas in server tag `foo`.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlOpFailedError", "You specified that the replicas in server tag `foo` should be non-voting, but you didn't specify a number of replicas in server tag `foo`.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 176
  Original: db.table('a').reconfigure(shards=1, replicas={"foo":0}, primary_replica_tag="foo")
  Java: db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", r.hashMap("foo", 0L)).optArg("primary_replica_tag", "foo")
  ExpectedOriginal: err('ReqlOpFailedError', 'You must set `replicas` to at least one. `replicas` includes the primary replica; if there are zero replicas, there is nowhere to put the data.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlOpFailedError", "You must set `replicas` to at least one. `replicas` includes the primary replica; if there are zero replicas, there is nowhere to put the data.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 181
  Original: db.table('a').reconfigure(shards=1, replicas={"default":0})
  Java: db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", r.hashMap("default", 0L))
  ExpectedOriginal: err('ReqlQueryLogicError', '`primary_replica_tag` must be specified when `replicas` is an OBJECT.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "`primary_replica_tag` must be specified when `replicas` is an OBJECT.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 186
  Original: db.table('a').reconfigure(shards=1, replicas={"default":-3}, primary_replica_tag='default')
  Java: db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", r.hashMap("default", -3L)).optArg("primary_replica_tag", "default")
  ExpectedOriginal: err('ReqlQueryLogicError', 'Can\'t have a negative number of replicas', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Can't have a negative number of replicas", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 191
  Original: db.table('a').reconfigure(shards=1, replicas=3, primary_replica_tag='foo')
  Java: db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", 3L).optArg("primary_replica_tag", "foo")
  ExpectedOriginal: err('ReqlQueryLogicError', '`replicas` must be an OBJECT if `primary_replica_tag` is specified.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "`replicas` must be an OBJECT if `primary_replica_tag` is specified.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 196
  Original: db.table('a').reconfigure(shards=1, replicas=3, nonvoting_replica_tags=['foo'])
  Java: db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", 3L).optArg("nonvoting_replica_tags", r.array("foo"))
  ExpectedOriginal: err('ReqlQueryLogicError', '`replicas` must be an OBJECT if `nonvoting_replica_tags` is specified.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "`replicas` must be an OBJECT if `nonvoting_replica_tags` is specified.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 201
  Original: db.reconfigure(emergency_repair="unsafe_rollback")
  Java: db.reconfigure().optArg("emergency_repair", "unsafe_rollback")
  ExpectedOriginal: err('ReqlQueryLogicError', 'Can\'t emergency repair an entire database at once; instead you should run `reconfigure()` on each table individually.')
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Can't emergency repair an entire database at once; instead you should run `reconfigure()` on each table individually.")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 206
  Original: db.table('a').reconfigure(emergency_repair="foo")
  Java: db.table("a").reconfigure().optArg("emergency_repair", "foo")
  ExpectedOriginal: err('ReqlQueryLogicError', '`emergency_repair` should be "unsafe_rollback" or "unsafe_rollback_or_erase"', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "`emergency_repair` should be \"unsafe_rollback\" or \"unsafe_rollback_or_erase\"", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 211
  Original: db.table('a').reconfigure(emergency_repair="unsafe_rollback", shards=1, replicas=1)
  Java: db.table("a").reconfigure().optArg("emergency_repair", "unsafe_rollback").optArg("shards", 1L).optArg("replicas", 1L)
  ExpectedOriginal: err('ReqlQueryLogicError', 'In emergency repair mode, you can\'t specify shards, replicas, etc.')
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "In emergency repair mode, you can't specify shards, replicas, etc.")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 217
  Original: db.table('a').reconfigure(shards=2, replicas=1)
  Java: db.table("a").reconfigure().optArg("shards", 2L).optArg("replicas", 1L)
  ExpectedOriginal: partial({'reconfigured':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("reconfigured", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 222
  Original: db.table('a').wait()
  Java: db.table("a").wait_()
  ExpectedOriginal: AnythingIsFine
  ExpectedType: Object
  ExpectedJava: AnythingIsFine
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 225
  Original: db.table('a').insert([{"id":1}, {"id":2}, {"id":3}, {"id":4}])
  Java: db.table("a").insert(r.array(r.hashMap("id", 1L), r.hashMap("id", 2L), r.hashMap("id", 3L), r.hashMap("id", 4L)))
  ExpectedOriginal: partial({"inserted":4})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("inserted", 4L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 230
  Original: db.table('a').reconfigure(shards=2, replicas=1)
  Java: db.table("a").reconfigure().optArg("shards", 2L).optArg("replicas", 1L)
  ExpectedOriginal: partial({'reconfigured':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("reconfigured", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 235
  Original: db.table('a').reconfigure(shards=1, replicas=2)
  Java: db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", 2L)
  ExpectedOriginal: err('ReqlOpFailedError', 'Can\'t put 2 replicas on servers with the tag `default` because there are only 1 servers with the tag `default`. It\'s impossible to have more replicas of the data than there are servers.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlOpFailedError", "Can't put 2 replicas on servers with the tag `default` because there are only 1 servers with the tag `default`. It's impossible to have more replicas of the data than there are servers.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 241
  Original: db.table('a').wait()
  Java: db.table("a").wait_()
  ExpectedOriginal: partial({'ready':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("ready", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 243
  Original: db.table('a').rebalance()
  Java: db.table("a").rebalance()
  ExpectedOriginal: partial({'rebalanced':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("rebalanced", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 246
  Original: db.wait()
  Java: db.wait_()
  ExpectedOriginal: partial({'ready':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("ready", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 248
  Original: db.rebalance()
  Java: db.rebalance()
  ExpectedOriginal: partial({'rebalanced':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("rebalanced", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 251
  Original: r.wait()
  Java: r.wait_()
  ExpectedOriginal: partial({'ready':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("ready", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 253
  Original: r.rebalance()
  Java: r.rebalance()
  ExpectedOriginal: partial({'rebalanced':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("rebalanced", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 256
  Original: db.table_drop('a')
  Java: db.tableDrop("a")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_dropped", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 260
  Original: db.table_create('a')
  Java: db.tableCreate("a")
  ExpectedOriginal: AnythingIsFine
  ExpectedType: Object
  ExpectedJava: AnythingIsFine
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 261
  Original: db.table_create('b')
  Java: db.tableCreate("b")
  ExpectedOriginal: AnythingIsFine
  ExpectedType: Object
  ExpectedJava: AnythingIsFine
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 262
  Original: db.table_create('c')
  Java: db.tableCreate("c")
  ExpectedOriginal: AnythingIsFine
  ExpectedType: Object
  ExpectedJava: AnythingIsFine
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 264
  Original: db.reconfigure(shards=0, replicas=1)
  Java: db.reconfigure().optArg("shards", 0L).optArg("replicas", 1L)
  ExpectedOriginal: err('ReqlQueryLogicError', 'Every table must have at least one shard.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Every table must have at least one shard.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 269
  Original: db.reconfigure(shards=1, replicas={"default":0})
  Java: db.reconfigure().optArg("shards", 1L).optArg("replicas", r.hashMap("default", 0L))
  ExpectedOriginal: err('ReqlQueryLogicError', '`primary_replica_tag` must be specified when `replicas` is an OBJECT.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "`primary_replica_tag` must be specified when `replicas` is an OBJECT.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 274
  Original: db.reconfigure(shards=1, replicas={"default":-3}, primary_replica_tag='default')
  Java: db.reconfigure().optArg("shards", 1L).optArg("replicas", r.hashMap("default", -3L)).optArg("primary_replica_tag", "default")
  ExpectedOriginal: err('ReqlQueryLogicError', 'Can\'t have a negative number of replicas', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Can't have a negative number of replicas", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 279
  Original: db.reconfigure(shards=1, replicas=3, primary_replica_tag='foo')
  Java: db.reconfigure().optArg("shards", 1L).optArg("replicas", 3L).optArg("primary_replica_tag", "foo")
  ExpectedOriginal: err('ReqlQueryLogicError', '`replicas` must be an OBJECT if `primary_replica_tag` is specified.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "`replicas` must be an OBJECT if `primary_replica_tag` is specified.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 284
  Original: db.reconfigure(shards=2, replicas=1)
  Java: db.reconfigure().optArg("shards", 2L).optArg("replicas", 1L)
  ExpectedOriginal: partial({'reconfigured':3})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("reconfigured", 3L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 289
  Original: db.table_drop('a')
  Java: db.tableDrop("a")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_dropped", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 291
  Original: db.table_drop('b')
  Java: db.tableDrop("b")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_dropped", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 293
  Original: db.table_drop('c')
  Java: db.tableDrop("c")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_dropped", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 297
  Original: r.db_create("test2")
  Java: r.dbCreate("test2")
  ExpectedOriginal: partial({'dbs_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("dbs_created", 1L))
  RunOpts: []
- TestType: JavaDef
  TestFile: meta/table.yaml
  LineNum: 300
  Original: db2 = r.db("test2")
  VarName: db2
  VarType: Db
  Value: (Db) (r.db("test2"))
  Java: Db db2 = (Db) (r.db("test2"));
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 302
  Original: db.table_create("testA")
  Java: db.tableCreate("testA")
  ExpectedOriginal: partial({'tables_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_created", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 304
  Original: db.table_create("testB")
  Java: db.tableCreate("testB")
  ExpectedOriginal: partial({'tables_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_created", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 306
  Original: db2.table_create("test2B")
  Java: db2.tableCreate("test2B")
  ExpectedOriginal: partial({'tables_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_created", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 309
  Original: r.table('testA').config().pluck('db','name')
  Java: r.table("testA").config().pluck("db", "name")
  ExpectedOriginal: '{''db'':''test'',''name'':''testA''}'
  ExpectedType: Map
  ExpectedJava: r.hashMap("db", "test").with("name", "testA")
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 312
  Original: r.table('doesntexist').config()
  Java: r.table("doesntexist").config()
  ExpectedOriginal: err('ReqlOpFailedError', 'Table `test.doesntexist` does not exist.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlOpFailedError", "Table `test.doesntexist` does not exist.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 315
  Original: r.table('test2B').config()
  Java: r.table("test2B").config()
  ExpectedOriginal: err('ReqlOpFailedError', 'Table `test.test2B` does not exist.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlOpFailedError", "Table `test.test2B` does not exist.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 318
  Original: r.db('rethinkdb').table('table_config').filter({'name':'testA'}).nth(0).eq(r.table('testA').config())
  Java: r.db("rethinkdb").table("table_config").filter(r.hashMap("name", "testA")).nth(0L).eq(r.table("testA").config())
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 321
  Original: r.db('rethinkdb').table('table_status').filter({'name':'testA'}).nth(0).eq(r.table('testA').status())
  Java: r.db("rethinkdb").table("table_status").filter(r.hashMap("name", "testA")).nth(0L).eq(r.table("testA").status())
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 324
  Original: r.db('rethinkdb').table('table_config', identifier_format='uuid').nth(0)["db"]
  Java: r.db("rethinkdb").table("table_config").optArg("identifier_format", "uuid").nth(0L).bracket("db")
  ExpectedOriginal: uuid()
  ExpectedType: UUIDMatch
  ExpectedJava: uuid()
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 329
  Original: r.table('testA', identifier_format='uuid').count()
  Java: r.table("testA").optArg("identifier_format", "uuid").count()
  ExpectedOriginal: 0
  ExpectedType: Long
  ExpectedJava: 0L
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 334
  Original: r.wait(wait_for='all_replicas_ready', timeout=5)
  Java: r.wait_().optArg("wait_for", "all_replicas_ready").optArg("timeout", 5L)
  ExpectedOriginal: partial({'ready':2})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("ready", 2L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 339
  Original: db.table_drop('testA')
  Java: db.tableDrop("testA")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_dropped", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 342
  Original: db.table_drop('testB')
  Java: db.tableDrop("testB")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_dropped", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: meta/table.yaml
  LineNum: 345
  Original: r.db_drop('test2')
  Java: r.dbDrop("test2")
  ExpectedOriginal: partial({'dbs_dropped':1,'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("dbs_dropped", 1L).with("tables_dropped", 1L))
  RunOpts: []
