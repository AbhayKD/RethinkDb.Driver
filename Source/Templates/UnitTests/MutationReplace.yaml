ModuleName: MutationReplace
TableVarNames:
- tbl
DefsAndTests:
- TestType: JavaQuery
  TestFile: mutation/replace.yaml
  TestNum: 1
  Original: tbl.insert([{'id':i} for i in xrange(100)])
  Java: tbl.insert(LongStream.range(0, 100L).boxed().map(i -> r.hashMap("id", i)).collect(Collectors.toList()))
  ExpectedOriginal: ({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':100})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 100L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/replace.yaml
  TestNum: 2
  Original: tbl.count()
  Java: tbl.count()
  ExpectedOriginal: 100
  ExpectedType: Long
  ExpectedJava: 100L
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/replace.yaml
  TestNum: 3
  Original: tbl.get(12).replace(lambda row:{'id':row['id']})
  Java: tbl.get(12L).replace(row -> r.hashMap("id", row.g("id")))
  ExpectedOriginal: ({'deleted':0.0,'replaced':0.0,'unchanged':1,'errors':0.0,'skipped':0.0,'inserted':0.0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 0.0).with("unchanged", 1L).with("errors", 0.0).with("skipped", 0.0).with("inserted", 0.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/replace.yaml
  TestNum: 4
  Original: tbl.get(12).replace(lambda row:{'id':row['id'], 'a':row['id']})
  Java: tbl.get(12L).replace(row -> r.hashMap("id", row.g("id")).with("a", row.g("id")))
  ExpectedOriginal: ({'deleted':0.0,'replaced':1,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':0.0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 1L).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 0.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/replace.yaml
  TestNum: 5
  Original: tbl.get(13).replace(lambda row:null)
  Java: tbl.get(13L).replace(row -> null)
  ExpectedOriginal: ({'deleted':1,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':0.0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 1L).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 0.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/replace.yaml
  TestNum: 6
  Original: tbl.between(10, 20, right_bound='closed').replace(lambda row:{'a':1})
  Java: tbl.between(10L, 20L).optArg("right_bound", "closed").replace(row -> r.hashMap("a", 1L))
  ExpectedOriginal: ({'first_error':'Inserted object must have primary key `id`:\n{\n\t\"a\":\t1\n}','deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':10,'skipped':0.0,'inserted':0.0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("first_error", "Inserted object must have primary key `id`:\n{\n\t\"a\":\t1\n}").with("deleted", 0.0).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 10L).with("skipped", 0.0).with("inserted", 0.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/replace.yaml
  TestNum: 7
  Original: tbl.filter(lambda row:(row['id'] >= 10) & (row['id'] < 20)).replace(lambda row:{'id':row['id'], 'a':row['id']})
  Java: tbl.filter(row -> row.g("id").ge(10L).and(row.g("id").lt(20L))).replace(row -> r.hashMap("id", row.g("id")).with("a", row.g("id")))
  ExpectedOriginal: ({'deleted':0.0,'replaced':8,'unchanged':1,'errors':0.0,'skipped':0.0,'inserted':0.0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 8L).with("unchanged", 1L).with("errors", 0.0).with("skipped", 0.0).with("inserted", 0.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/replace.yaml
  TestNum: 8
  Original: tbl.get(1).replace({'id':2,'a':1})
  Java: tbl.get(1L).replace(r.hashMap("id", 2L).with("a", 1L))
  ExpectedOriginal: ({'first_error':"Primary key `id` cannot be changed (`{\n\t\"id\":\t1\n}` -> `{\n\t\"a\":\t1,\n\t\"id\":\t2\n}`).",'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':1,'skipped':0.0,'inserted':0.0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("first_error", "Primary key `id` cannot be changed (`{\n\t\"id\":\t1\n}` -> `{\n\t\"a\":\t1,\n\t\"id\":\t2\n}`).").with("deleted", 0.0).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 1L).with("skipped", 0.0).with("inserted", 0.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/replace.yaml
  TestNum: 9
  Original: tbl.get(1).replace({'a':1})
  Java: tbl.get(1L).replace(r.hashMap("a", 1L))
  ExpectedOriginal: ({'first_error':"Inserted object must have primary key `id`:\n{\n\t\"a\":\t1\n}",'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':1,'skipped':0.0,'inserted':0.0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("first_error", "Inserted object must have primary key `id`:\n{\n\t\"a\":\t1\n}").with("deleted", 0.0).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 1L).with("skipped", 0.0).with("inserted", 0.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/replace.yaml
  TestNum: 16
  Original: tbl.get(1).replace({}, foo='bar')
  Java: tbl.get(1L).replace(r.hashMap()).optArg("foo", "bar")
  ExpectedOriginal: err('ReqlCompileError', 'Unrecognized optional argument `foo`.')
  ExpectedType: Err
  ExpectedJava: err("ReqlCompileError", "Unrecognized optional argument `foo`.")
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/replace.yaml
  TestNum: 17
  Original: tbl.replace(lambda row:null)
  Java: tbl.replace(row -> null)
  ExpectedOriginal: ({'deleted':99,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':0.0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 99L).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 0.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/replace.yaml
  TestNum: 18
  Original: tbl.get('sdfjk').replace({'id':'sdfjk'})['inserted']
  Java: tbl.get("sdfjk").replace(r.hashMap("id", "sdfjk")).g("inserted")
  ExpectedOriginal: 1
  ExpectedType: Long
  ExpectedJava: 1L
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/replace.yaml
  TestNum: 19
  Original: tbl.get('sdfjki').replace({'id':'sdfjk'})['errors']
  Java: tbl.get("sdfjki").replace(r.hashMap("id", "sdfjk")).g("errors")
  ExpectedOriginal: 1
  ExpectedType: Long
  ExpectedJava: 1L
  RunOpts: []
