ModuleName: Limits
TableVarNames:
- tbl
DefsAndTests:
- TestType: JavaQuery
  TestFile: limits.yaml
  TestNum: 1
  Original: '[1, 1, 1, 1, 1, 1, 1, 1]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1)
  Obtained: r.expr(Arrays.asList(1, 1, 1, 1)).union(Arrays.asList(1, 1, 1, 1))
  RunOpts:
  - Key: array_limit
    Val: 8
- TestType: JavaQuery
  TestFile: limits.yaml
  TestNum: 2
  Original: err("ReqlResourceLimitError", "Array over size limit `4`.", [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlResourceLimitError", "Array over size limit `4`.", Arrays.asList(0))
  Obtained: r.expr(Arrays.asList(1, 2, 3, 4)).union(Arrays.asList(5, 6, 7, 8))
  RunOpts:
  - Key: array_limit
    Val: 4
- TestType: JavaQuery
  TestFile: limits.yaml
  TestNum: 3
  Original: err("ReqlResourceLimitError", "Array over size limit `4`.", [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlResourceLimitError", "Array over size limit `4`.", Arrays.asList(0))
  Obtained: r.expr(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8))
  RunOpts:
  - Key: array_limit
    Val: 4
- TestType: JavaQuery
  TestFile: limits.yaml
  TestNum: 4
  Original: err("ReqlQueryLogicError", "Illegal array size limit `-1`.  (Must be >= 1.)", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Illegal array size limit `-1`.  (Must be >= 1.)", Arrays.asList())
  Obtained: r.expr(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8))
  RunOpts:
  - Key: array_limit
    Val: -1
- TestType: JavaQuery
  TestFile: limits.yaml
  TestNum: 5
  Original: err("ReqlQueryLogicError", "Illegal array size limit `0`.  (Must be >= 1.)", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Illegal array size limit `0`.  (Must be >= 1.)", Arrays.asList())
  Obtained: r.expr(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8))
  RunOpts:
  - Key: array_limit
    Val: 0
- TestType: JavaDef
  TestFile: limits.yaml
  TestNum: 6
  Original: ten_l = r.expr([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
  Java: MakeArray ten_l = (MakeArray) r.expr(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));
- TestType: JavaDef
  TestFile: limits.yaml
  TestNum: 8
  Original: huge_l = r.expr(ten_l).concat_map(ten_f).concat_map(ten_f).concat_map(ten_f).concat_map(ten_f)
  Java: ConcatMap huge_l = (ConcatMap) r.expr(ten_l).concatMap(ten_f).concatMap(ten_f).concatMap(ten_f).concatMap(ten_f);
- TestType: JavaQuery
  TestFile: limits.yaml
  TestNum: 9
  Original: 100001
  ExpectedType: Integer
  ExpectedJava: 100001
  Obtained: huge_l.append(1).count()
  RunOpts:
  - Key: array_limit
    Val: 100001
- TestType: JavaQuery
  TestFile: limits.yaml
  TestNum: 10
  Original: partial({'errors':1, 'first_error':"Array too large for disk writes (limit 100,000 elements)."})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("errors", 1).with("first_error", "Array too large for disk writes (limit 100,000 elements)."))
  Obtained: tbl.insert(new MapObject().with("id", 0).with("array", huge_l.append(1)))
  RunOpts:
  - Key: array_limit
    Val: 100001
- TestType: JavaQuery
  TestFile: limits.yaml
  TestNum: 11
  Original: (null)
  ExpectedType: Object
  ExpectedJava: null
  Obtained: tbl.get(0)
  RunOpts:
  - Key: array_limit
    Val: 100001
- TestType: JavaQuery
  TestFile: limits.yaml
  TestNum: 12
  Original: ({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':1})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("deleted", 0.0).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 1)
  Obtained: tbl.insert(new MapObject().with("id", 1).with("array", ten_l))
- TestType: JavaQuery
  TestFile: limits.yaml
  TestNum: 13
  Original: ({'array':[1,2,3,4,5,6,7,8,9,10],'id':1})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("array", Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)).with("id", 1)
  Obtained: tbl.get(1)
  RunOpts:
  - Key: array_limit
    Val: 4
- TestType: JavaQuery
  TestFile: limits.yaml
  TestNum: 14
  Original: 1
  ExpectedType: Integer
  ExpectedJava: 1
  Obtained: tbl.delete().getField("deleted")
- TestType: JavaDef
  TestFile: limits.yaml
  TestNum: 15
  Original: c = tbl.changes(squash=1000000, changefeed_queue_size=10)
  Java: Changes c = (Changes) tbl.changes().optArg("squash", 1000000).optArg("changefeed_queue_size", 10);
- TestType: JavaQuery
  TestFile: limits.yaml
  TestNum: 16
  Original: 7
  ExpectedType: Integer
  ExpectedJava: 7
  Obtained: tbl.insert(Arrays.asList(new MapObject().with("id", 0), new MapObject().with("id", 1), new MapObject().with("id", 2), new MapObject().with("id", 3), new MapObject().with("id", 4), new MapObject().with("id", 5), new MapObject().with("id", 6))).getField("inserted")
- TestType: JavaQuery
  TestFile: limits.yaml
  TestNum: 17
  Original: bag([{'old_val':null, 'new_val':{'id':0}}, {'old_val':null, 'new_val':{'id':1}}, {'old_val':null, 'new_val':{'id':2}}, {'old_val':null, 'new_val':{'id':3}}, {'old_val':null, 'new_val':{'id':4}}, {'old_val':null, 'new_val':{'id':5}}, {'old_val':null, 'new_val':{'id':6}}])
  ExpectedType: Bag
  ExpectedJava: bag(Arrays.asList(new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 0)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 1)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 2)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 3)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 4)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 5)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 6))))
  Obtained: fetch(c, 7)
- TestType: JavaQuery
  TestFile: limits.yaml
  TestNum: 18
  Original: 7
  ExpectedType: Integer
  ExpectedJava: 7
  Obtained: tbl.insert(Arrays.asList(new MapObject().with("id", 7), new MapObject().with("id", 8), new MapObject().with("id", 9), new MapObject().with("id", 10), new MapObject().with("id", 11), new MapObject().with("id", 12), new MapObject().with("id", 13))).getField("inserted")
- TestType: JavaQuery
  TestFile: limits.yaml
  TestNum: 19
  Original: bag([{'old_val':null, 'new_val':{'id':7}}, {'old_val':null, 'new_val':{'id':8}}, {'old_val':null, 'new_val':{'id':9}}, {'old_val':null, 'new_val':{'id':10}}, {'old_val':null, 'new_val':{'id':11}}, {'old_val':null, 'new_val':{'id':12}}, {'old_val':null, 'new_val':{'id':13}}])
  ExpectedType: Bag
  ExpectedJava: bag(Arrays.asList(new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 7)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 8)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 9)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 10)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 11)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 12)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 13))))
  Obtained: fetch(c, 7)
- TestType: JavaQuery
  TestFile: limits.yaml
  TestNum: 20
  Original: 14
  ExpectedType: Integer
  ExpectedJava: 14
  Obtained: tbl.delete().getField("deleted")
- TestType: JavaDef
  TestFile: limits.yaml
  TestNum: 21
  Original: c2 = tbl.changes(squash=1000000)
  Java: Changes c2 = (Changes) tbl.changes().optArg("squash", 1000000);
- TestType: JavaQuery
  TestFile: limits.yaml
  TestNum: 22
  Original: 7
  ExpectedType: Integer
  ExpectedJava: 7
  Obtained: tbl.insert(Arrays.asList(new MapObject().with("id", 0), new MapObject().with("id", 1), new MapObject().with("id", 2), new MapObject().with("id", 3), new MapObject().with("id", 4), new MapObject().with("id", 5), new MapObject().with("id", 6))).getField("inserted")
- TestType: JavaQuery
  TestFile: limits.yaml
  TestNum: 23
  Original: bag([{'old_val':null, 'new_val':{'id':0}}, {'old_val':null, 'new_val':{'id':1}}, {'old_val':null, 'new_val':{'id':2}}, {'old_val':null, 'new_val':{'id':3}}, {'old_val':null, 'new_val':{'id':4}}, {'old_val':null, 'new_val':{'id':5}}, {'old_val':null, 'new_val':{'id':6}}])
  ExpectedType: Bag
  ExpectedJava: bag(Arrays.asList(new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 0)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 1)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 2)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 3)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 4)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 5)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 6))))
  Obtained: fetch(c2, 7)
- TestType: JavaQuery
  TestFile: limits.yaml
  TestNum: 24
  Original: 7
  ExpectedType: Integer
  ExpectedJava: 7
  Obtained: tbl.insert(Arrays.asList(new MapObject().with("id", 7), new MapObject().with("id", 8), new MapObject().with("id", 9), new MapObject().with("id", 10), new MapObject().with("id", 11), new MapObject().with("id", 12), new MapObject().with("id", 13))).getField("inserted")
- TestType: JavaQuery
  TestFile: limits.yaml
  TestNum: 25
  Original: bag([{'old_val':null, 'new_val':{'id':7}}, {'old_val':null, 'new_val':{'id':8}}, {'old_val':null, 'new_val':{'id':9}}, {'old_val':null, 'new_val':{'id':10}}, {'old_val':null, 'new_val':{'id':11}}, {'old_val':null, 'new_val':{'id':12}}, {'old_val':null, 'new_val':{'id':13}}])
  ExpectedType: Bag
  ExpectedJava: bag(Arrays.asList(new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 7)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 8)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 9)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 10)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 11)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 12)), new MapObject().with("old_val", null).with("new_val", new MapObject().with("id", 13))))
  Obtained: fetch(c2, 7)
