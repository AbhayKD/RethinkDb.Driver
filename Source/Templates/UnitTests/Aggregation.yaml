ModuleName: Aggregation
TableVarNames:
- tbl
- tbl2
- tbl3
- tbl4
DefsAndTests:
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 1
  Original: tbl.insert([{'id':i, 'a':i%4} for i in xrange(100)])
  Java: tbl.insert(IntStream.range(0, 100).boxed().map(i -> r.hashMap("id", i).with("a", r.mod(i, 4))).collect(Collectors.toList()))
  ExpectedOriginal: ({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':100})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 100)
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 2
  Original: tbl2.insert([{'id':i, 'b':i%4} for i in xrange(100)])
  Java: tbl2.insert(IntStream.range(0, 100).boxed().map(i -> r.hashMap("id", i).with("b", r.mod(i, 4))).collect(Collectors.toList()))
  ExpectedOriginal: ({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':100})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 100)
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 3
  Original: tbl3.insert([{'id':i, 'a':i%4, 'b':{'c':i%5}} for i in xrange(100)])
  Java: tbl3.insert(IntStream.range(0, 100).boxed().map(i -> r.hashMap("id", i).with("a", r.mod(i, 4)).with("b", r.hashMap("c", r.mod(i, 5)))).collect(Collectors.toList()))
  ExpectedOriginal: ({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':100})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 100)
  RunOpts: []
- TestType: JavaDef
  TestFile: aggregation.yaml
  TestNum: 4
  Original: time1 = 1375115782.24
  Java: Double time1 = (Double) (1375115782.24);
  RunOpts: []
- TestType: JavaDef
  TestFile: aggregation.yaml
  TestNum: 5
  Original: time2 = 1375147296.68
  Java: Double time2 = (Double) (1375147296.68);
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 6
  Original: tbl4.insert({'id':0, 'time':r.epoch_time(time1)})
  Java: tbl4.insert(r.hashMap("id", 0).with("time", r.epochTime(time1)))
  ExpectedOriginal: ({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':1})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 1)
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 6
  Original: tbl4.insert({'id':1, 'time':r.epoch_time(time2)})
  Java: tbl4.insert(r.hashMap("id", 1).with("time", r.epochTime(time2)))
  ExpectedOriginal: ({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':1})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 1)
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 7
  Original: tbl.sum('a')
  Java: tbl.sum("a")
  ExpectedOriginal: 150
  ExpectedType: Long
  ExpectedJava: 150
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 8
  Original: tbl.map(lambda row:row['a']).sum()
  Java: tbl.map(row -> row.g("a")).sum()
  ExpectedOriginal: 150
  ExpectedType: Long
  ExpectedJava: 150
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 9
  Original: tbl.group('a').sum('id')
  Java: tbl.group("a").sum("id")
  ExpectedOriginal: ({0:1200, 1:1225, 2:1250, 3:1275})
  ExpectedType: Map
  ExpectedJava: r.hashMap(0, 1200).with(1, 1225).with(2, 1250).with(3, 1275)
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 10
  Original: tbl.avg('a')
  Java: tbl.avg("a")
  ExpectedOriginal: 1.5
  ExpectedType: Double
  ExpectedJava: 1.5
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 11
  Original: tbl.map(lambda row:row['a']).avg()
  Java: tbl.map(row -> row.g("a")).avg()
  ExpectedOriginal: 1.5
  ExpectedType: Double
  ExpectedJava: 1.5
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 12
  Original: tbl.group('a').avg('id')
  Java: tbl.group("a").avg("id")
  ExpectedOriginal: ({0:48, 1:49, 2:50, 3:51})
  ExpectedType: Map
  ExpectedJava: r.hashMap(0, 48).with(1, 49).with(2, 50).with(3, 51)
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 13
  Original: tbl.min('a')['a']
  Java: tbl.min("a").g("a")
  ExpectedOriginal: 0
  ExpectedType: Long
  ExpectedJava: 0
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 14
  Original: tbl.order_by('id').min('a')
  Java: tbl.orderBy("id").min("a")
  ExpectedOriginal: ({'a':0, 'id':0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("a", 0).with("id", 0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 15
  Original: tbl.map(lambda row:row['a']).min()
  Java: tbl.map(row -> row.g("a")).min()
  ExpectedOriginal: 0
  ExpectedType: Long
  ExpectedJava: 0
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 16
  Original: tbl.group('a').min('id')
  Java: tbl.group("a").min("id")
  ExpectedOriginal: ({0:{'a':0, 'id':0}, 1:{'a':1, 'id':1}, 2:{'a':2, 'id':2}, 3:{'a':3, 'id':3}})
  ExpectedType: Map
  ExpectedJava: r.hashMap(0, r.hashMap("a", 0).with("id", 0)).with(1, r.hashMap("a", 1).with("id", 1)).with(2, r.hashMap("a", 2).with("id", 2)).with(3, r.hashMap("a", 3).with("id", 3))
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 17
  Original: tbl.order_by('id').max('a')
  Java: tbl.orderBy("id").max("a")
  ExpectedOriginal: ({'a':3, 'id':3})
  ExpectedType: Map
  ExpectedJava: r.hashMap("a", 3).with("id", 3)
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 18
  Original: tbl.map(lambda row:row['a']).max()
  Java: tbl.map(row -> row.g("a")).max()
  ExpectedOriginal: 3
  ExpectedType: Long
  ExpectedJava: 3
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 19
  Original: tbl.group('a').max('id')
  Java: tbl.group("a").max("id")
  ExpectedOriginal: ({0:{'a':0, 'id':96}, 1:{'a':1, 'id':97}, 2:{'a':2, 'id':98}, 3:{'a':3, 'id':99}})
  ExpectedType: Map
  ExpectedJava: r.hashMap(0, r.hashMap("a", 0).with("id", 96)).with(1, r.hashMap("a", 1).with("id", 97)).with(2, r.hashMap("a", 2).with("id", 98)).with(3, r.hashMap("a", 3).with("id", 99))
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 20
  Original: tbl.min()
  Java: tbl.min()
  ExpectedOriginal: ({"a":0, "id":0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("a", 0).with("id", 0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 21
  Original: tbl.group('a').min()
  Java: tbl.group("a").min()
  ExpectedOriginal: ({0:{"a":0, "id":0}, 1:{"a":1, "id":1}, 2:{"a":2, "id":2}, 3:{"a":3, "id":3}})
  ExpectedType: Map
  ExpectedJava: r.hashMap(0, r.hashMap("a", 0).with("id", 0)).with(1, r.hashMap("a", 1).with("id", 1)).with(2, r.hashMap("a", 2).with("id", 2)).with(3, r.hashMap("a", 3).with("id", 3))
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 22
  Original: tbl.max()
  Java: tbl.max()
  ExpectedOriginal: ({"a":3, "id":99})
  ExpectedType: Map
  ExpectedJava: r.hashMap("a", 3).with("id", 99)
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 23
  Original: tbl.group('a').max()
  Java: tbl.group("a").max()
  ExpectedOriginal: ({0:{'a':0, 'id':96}, 1:{'a':1, 'id':97}, 2:{'a':2, 'id':98}, 3:{'a':3, 'id':99}})
  ExpectedType: Map
  ExpectedJava: r.hashMap(0, r.hashMap("a", 0).with("id", 96)).with(1, r.hashMap("a", 1).with("id", 97)).with(2, r.hashMap("a", 2).with("id", 98)).with(3, r.hashMap("a", 3).with("id", 99))
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 24
  Original: tbl.sum(lambda row:row['a'])
  Java: tbl.sum(row -> row.g("a"))
  ExpectedOriginal: 150
  ExpectedType: Long
  ExpectedJava: 150
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 25
  Original: tbl.map(lambda row:row['a']).sum()
  Java: tbl.map(row -> row.g("a")).sum()
  ExpectedOriginal: 150
  ExpectedType: Long
  ExpectedJava: 150
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 26
  Original: tbl.group(lambda row:row['a']).sum(lambda row:row['id'])
  Java: tbl.group(row -> row.g("a")).sum(row -> row.g("id"))
  ExpectedOriginal: ({0:1200, 1:1225, 2:1250, 3:1275})
  ExpectedType: Map
  ExpectedJava: r.hashMap(0, 1200).with(1, 1225).with(2, 1250).with(3, 1275)
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 27
  Original: tbl.avg(lambda row:row['a'])
  Java: tbl.avg(row -> row.g("a"))
  ExpectedOriginal: 1.5
  ExpectedType: Double
  ExpectedJava: 1.5
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 28
  Original: tbl.map(lambda row:row['a']).avg()
  Java: tbl.map(row -> row.g("a")).avg()
  ExpectedOriginal: 1.5
  ExpectedType: Double
  ExpectedJava: 1.5
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 29
  Original: tbl.group(lambda row:row['a']).avg(lambda row:row['id'])
  Java: tbl.group(row -> row.g("a")).avg(row -> row.g("id"))
  ExpectedOriginal: ({0:48, 1:49, 2:50, 3:51})
  ExpectedType: Map
  ExpectedJava: r.hashMap(0, 48).with(1, 49).with(2, 50).with(3, 51)
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 30
  Original: tbl.order_by(r.desc('id')).min(lambda row:row['a'])
  Java: tbl.orderBy(r.desc("id")).min(row -> row.g("a"))
  ExpectedOriginal: ({'a':0, 'id':96})
  ExpectedType: Map
  ExpectedJava: r.hashMap("a", 0).with("id", 96)
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 31
  Original: tbl.order_by(r.desc('id')).min(lambda row:row['a'])['a']
  Java: tbl.orderBy(r.desc("id")).min(row -> row.g("a")).g("a")
  ExpectedOriginal: 0
  ExpectedType: Long
  ExpectedJava: 0
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 32
  Original: tbl.map(lambda row:row['a']).min()
  Java: tbl.map(row -> row.g("a")).min()
  ExpectedOriginal: 0
  ExpectedType: Long
  ExpectedJava: 0
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 33
  Original: tbl.group(lambda row:row['a']).min(lambda row:row['id'])['id']
  Java: tbl.group(row -> row.g("a")).min(row -> row.g("id")).g("id")
  ExpectedOriginal: ({0:0, 1:1, 2:2, 3:3})
  ExpectedType: Map
  ExpectedJava: r.hashMap(0, 0).with(1, 1).with(2, 2).with(3, 3)
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 34
  Original: tbl.max(lambda row:row['a'])['a']
  Java: tbl.max(row -> row.g("a")).g("a")
  ExpectedOriginal: 3
  ExpectedType: Long
  ExpectedJava: 3
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 35
  Original: tbl.map(lambda row:row['a']).max()
  Java: tbl.map(row -> row.g("a")).max()
  ExpectedOriginal: 3
  ExpectedType: Long
  ExpectedJava: 3
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 36
  Original: tbl.group(lambda row:row['a']).max(lambda row:row['id'])['id']
  Java: tbl.group(row -> row.g("a")).max(row -> row.g("id")).g("id")
  ExpectedOriginal: ({0:96, 1:97, 2:98, 3:99})
  ExpectedType: Map
  ExpectedJava: r.hashMap(0, 96).with(1, 97).with(2, 98).with(3, 99)
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 37
  Original: tbl.group(lambda row:row['a']).map(lambda row:row['id']).reduce(lambda a,b:a+b)
  Java: tbl.group(row -> row.g("a")).map(row -> row.g("id")).reduce((a, b) -> r.add(a, b))
  ExpectedOriginal: ({0:1200, 1:1225, 2:1250, 3:1275})
  ExpectedType: Map
  ExpectedJava: r.hashMap(0, 1200).with(1, 1225).with(2, 1250).with(3, 1275)
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 38
  Original: tbl.group(lambda row:row['a']).map(lambda row:row['id']).reduce(lambda a,b:a+b)
  Java: tbl.group(row -> row.g("a")).map(row -> row.g("id")).reduce((a, b) -> r.add(a, b))
  ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[0, 1200], [1, 1225], [2, 1250], [3, 1275]]})
  ExpectedType: Map
  ExpectedJava: r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(0, 1200), r.array(1, 1225), r.array(2, 1250), r.array(3, 1275)))
  RunOpts:
  - Key: group_format
    Val: raw
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 39
  Original: r.expr([{'a':1}]).filter(true).limit(1).group('a')
  Java: r.expr(r.array(r.hashMap("a", 1))).filter(true).limit(1).group("a")
  ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[1, [{'a':1}]]]})
  ExpectedType: Map
  ExpectedJava: r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(1, r.array(r.hashMap("a", 1)))))
  RunOpts:
  - Key: group_format
    Val: raw
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 40
  Original: tbl.group('a').type_of()
  Java: tbl.group("a").typeOf()
  ExpectedOriginal: ("GROUPED_STREAM")
  ExpectedType: String
  ExpectedJava: '"GROUPED_STREAM"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 41
  Original: tbl.group('a').count().type_of()
  Java: tbl.group("a").count().typeOf()
  ExpectedOriginal: ("GROUPED_DATA")
  ExpectedType: String
  ExpectedJava: '"GROUPED_DATA"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 42
  Original: tbl.group('a').coerce_to('ARRAY').type_of()
  Java: tbl.group("a").coerceTo("ARRAY").typeOf()
  ExpectedOriginal: ("GROUPED_DATA")
  ExpectedType: String
  ExpectedJava: '"GROUPED_DATA"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 43
  Original: tbl.order_by(index='id').filter(lambda row:row['id'] < 10).group('a').map(lambda row:row['id']).coerce_to('ARRAY')
  Java: tbl.orderBy().optArg("index", "id").filter(row -> row.g("id").lt(10)).group("a").map(row -> row.g("id")).coerceTo("ARRAY")
  ExpectedOriginal: ({0:[0,4,8],1:[1,5,9],2:[2,6],3:[3,7]})
  ExpectedType: Map
  ExpectedJava: r.hashMap(0, r.array(0, 4, 8)).with(1, r.array(1, 5, 9)).with(2, r.array(2, 6)).with(3, r.array(3, 7))
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 44
  Original: tbl.filter(lambda row:row['id'] < 10).group('a').count().do(lambda x:x*x)
  Java: tbl.filter(row -> row.g("id").lt(10)).group("a").count().do_(x -> r.mul(x, x))
  ExpectedOriginal: ({0:9,1:9,2:4,3:4})
  ExpectedType: Map
  ExpectedJava: r.hashMap(0, 9).with(1, 9).with(2, 4).with(3, 4)
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 45
  Original: tbl.union(tbl).group(lambda row:row['a']).map(lambda row:row['id']).reduce(lambda a,b:a + b)
  Java: tbl.union(tbl).group(row -> row.g("a")).map(row -> row.g("id")).reduce((a, b) -> r.add(a, b))
  ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[0, 2400], [1, 2450], [2, 2500], [3, 2550]]})
  ExpectedType: Map
  ExpectedJava: r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(0, 2400), r.array(1, 2450), r.array(2, 2500), r.array(3, 2550)))
  RunOpts:
  - Key: group_format
    Val: raw
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 46
  Original: tbl.coerce_to("array").union(tbl).group(lambda row:row['a']).map(lambda row:row['id']).reduce(lambda a,b:a + b)
  Java: tbl.coerceTo("array").union(tbl).group(row -> row.g("a")).map(row -> row.g("id")).reduce((a, b) -> r.add(a, b))
  ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[0, 2400], [1, 2450], [2, 2500], [3, 2550]]})
  ExpectedType: Map
  ExpectedJava: r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(0, 2400), r.array(1, 2450), r.array(2, 2500), r.array(3, 2550)))
  RunOpts:
  - Key: group_format
    Val: raw
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 47
  Original: tbl.union(tbl.coerce_to("array")).group(lambda row:row['a']).map(lambda row:row['id']).reduce(lambda a,b:a + b)
  Java: tbl.union(tbl.coerceTo("array")).group(row -> row.g("a")).map(row -> row.g("id")).reduce((a, b) -> r.add(a, b))
  ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[0, 2400], [1, 2450], [2, 2500], [3, 2550]]})
  ExpectedType: Map
  ExpectedJava: r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(0, 2400), r.array(1, 2450), r.array(2, 2500), r.array(3, 2550)))
  RunOpts:
  - Key: group_format
    Val: raw
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 48
  Original: tbl.group(lambda row:row['a']).map(lambda row:row['id']).reduce(lambda a,b:a + b)
  Java: tbl.group(row -> row.g("a")).map(row -> row.g("id")).reduce((a, b) -> r.add(a, b))
  ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[0, 1200], [1, 1225], [2, 1250], [3, 1275]]})
  ExpectedType: Map
  ExpectedJava: r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(0, 1200), r.array(1, 1225), r.array(2, 1250), r.array(3, 1275)))
  RunOpts:
  - Key: group_format
    Val: raw
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 50
  Original: tbl.group('a').count()
  Java: tbl.group("a").count()
  ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[0, 25], [1, 25], [2, 25], [3, 25]]})
  ExpectedType: Map
  ExpectedJava: r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(0, 25), r.array(1, 25), r.array(2, 25), r.array(3, 25)))
  RunOpts:
  - Key: group_format
    Val: raw
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 51
  Original: tbl.group('a').sum('id')
  Java: tbl.group("a").sum("id")
  ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[0, 1200], [1, 1225], [2, 1250], [3, 1275]]})
  ExpectedType: Map
  ExpectedJava: r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(0, 1200), r.array(1, 1225), r.array(2, 1250), r.array(3, 1275)))
  RunOpts:
  - Key: group_format
    Val: raw
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 52
  Original: tbl.group('a').avg('id')
  Java: tbl.group("a").avg("id")
  ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[0, 48], [1, 49], [2, 50], [3, 51]]})
  ExpectedType: Map
  ExpectedJava: r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(0, 48), r.array(1, 49), r.array(2, 50), r.array(3, 51)))
  RunOpts:
  - Key: group_format
    Val: raw
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 53
  Original: tbl3.group(lambda row:row['b']['c']).count()
  Java: tbl3.group(row -> row.g("b").g("c")).count()
  ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[0, 20], [1, 20], [2, 20], [3, 20], [4, 20]]})
  ExpectedType: Map
  ExpectedJava: r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(0, 20), r.array(1, 20), r.array(2, 20), r.array(3, 20), r.array(4, 20)))
  RunOpts:
  - Key: group_format
    Val: raw
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 54
  Original: tbl.group('a', lambda row:row['id'].mod(3)).count()
  Java: tbl.group("a", row -> row.g("id").mod(3)).count()
  ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[[0, 0], 9], [[0, 1], 8], [[0, 2], 8], [[1, 0], 8], [[1, 1], 9], [[1, 2], 8], [[2, 0], 8], [[2, 1], 8], [[2, 2], 9], [[3, 0], 9], [[3, 1], 8], [[3, 2], 8]]})
  ExpectedType: Map
  ExpectedJava: r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(r.array(0, 0), 9), r.array(r.array(0, 1), 8), r.array(r.array(0, 2), 8), r.array(r.array(1, 0), 8), r.array(r.array(1, 1), 9), r.array(r.array(1, 2), 8), r.array(r.array(2, 0), 8), r.array(r.array(2, 1), 8), r.array(r.array(2, 2), 9), r.array(r.array(3, 0), 9), r.array(r.array(3, 1), 8), r.array(r.array(3, 2), 8)))
  RunOpts:
  - Key: group_format
    Val: raw
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 58
  Original: tbl.map(lambda row:row['a']).distinct().count()
  Java: tbl.map(row -> row.g("a")).distinct().count()
  ExpectedOriginal: 4
  ExpectedType: Long
  ExpectedJava: 4
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 59
  Original: tbl.distinct().type_of()
  Java: tbl.distinct().typeOf()
  ExpectedOriginal: ("STREAM")
  ExpectedType: String
  ExpectedJava: '"STREAM"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 60
  Original: tbl.distinct().count()
  Java: tbl.distinct().count()
  ExpectedOriginal: 100
  ExpectedType: Long
  ExpectedJava: 100
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 61
  Original: tbl.distinct(index='id').type_of()
  Java: tbl.distinct().optArg("index", "id").typeOf()
  ExpectedOriginal: ("STREAM")
  ExpectedType: String
  ExpectedJava: '"STREAM"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 62
  Original: tbl.distinct(index='id').count()
  Java: tbl.distinct().optArg("index", "id").count()
  ExpectedOriginal: 100
  ExpectedType: Long
  ExpectedJava: 100
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 63
  Original: tbl.index_create('a')
  Java: tbl.indexCreate("a")
  ExpectedOriginal: ({'created':1})
  ExpectedType: Map
  ExpectedJava: r.hashMap("created", 1)
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 66
  Original: tbl.index_wait('a').pluck('index', 'ready')
  Java: tbl.indexWait("a").pluck("index", "ready")
  ExpectedOriginal: ([{'index':'a','ready':true}])
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("index", "a").with("ready", true))
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 69
  Original: tbl.between(0, 1, index='a').distinct().count()
  Java: tbl.between(0, 1).optArg("index", "a").distinct().count()
  ExpectedOriginal: 25
  ExpectedType: Long
  ExpectedJava: 25
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 70
  Original: tbl.between(0, 1, index='a').distinct(index='id').count()
  Java: tbl.between(0, 1).optArg("index", "a").distinct().optArg("index", "id").count()
  ExpectedOriginal: 25
  ExpectedType: Long
  ExpectedJava: 25
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 82
  Original: tbl.distinct(index='a').type_of()
  Java: tbl.distinct().optArg("index", "a").typeOf()
  ExpectedOriginal: ("STREAM")
  ExpectedType: String
  ExpectedJava: '"STREAM"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 83
  Original: tbl.distinct(index='a').count()
  Java: tbl.distinct().optArg("index", "a").count()
  ExpectedOriginal: 4
  ExpectedType: Long
  ExpectedJava: 4
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 84
  Original: tbl.group()
  Java: tbl.group()
  ExpectedOriginal: err('ReqlQueryLogicError', 'Cannot group by nothing.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot group by nothing.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 85
  Original: tbl.group(index='id').count()
  Java: tbl.group().optArg("index", "id").count()
  ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [8, 1], [9, 1], [10, 1], [11, 1], [12, 1], [13, 1], [14, 1], [15, 1], [16, 1], [17, 1], [18, 1], [19, 1], [20, 1], [21, 1], [22, 1], [23, 1], [24, 1], [25, 1], [26, 1], [27, 1], [28, 1], [29, 1], [30, 1], [31, 1], [32, 1], [33, 1], [34, 1], [35, 1], [36, 1], [37, 1], [38, 1], [39, 1], [40, 1], [41, 1], [42, 1], [43, 1], [44, 1], [45, 1], [46, 1], [47, 1], [48, 1], [49, 1], [50, 1], [51, 1], [52, 1], [53, 1], [54, 1], [55, 1], [56, 1], [57, 1], [58, 1], [59, 1], [60, 1], [61, 1], [62, 1], [63, 1], [64, 1], [65, 1], [66, 1], [67, 1], [68, 1], [69, 1], [70, 1], [71, 1], [72, 1], [73, 1], [74, 1], [75, 1], [76, 1], [77, 1], [78, 1], [79, 1], [80, 1], [81, 1], [82, 1], [83, 1], [84, 1], [85, 1], [86, 1], [87, 1], [88, 1], [89, 1], [90, 1], [91, 1], [92, 1], [93, 1], [94, 1], [95, 1], [96, 1], [97, 1], [98, 1], [99, 1]]})
  ExpectedType: Map
  ExpectedJava: r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(0, 1), r.array(1, 1), r.array(2, 1), r.array(3, 1), r.array(4, 1), r.array(5, 1), r.array(6, 1), r.array(7, 1), r.array(8, 1), r.array(9, 1), r.array(10, 1), r.array(11, 1), r.array(12, 1), r.array(13, 1), r.array(14, 1), r.array(15, 1), r.array(16, 1), r.array(17, 1), r.array(18, 1), r.array(19, 1), r.array(20, 1), r.array(21, 1), r.array(22, 1), r.array(23, 1), r.array(24, 1), r.array(25, 1), r.array(26, 1), r.array(27, 1), r.array(28, 1), r.array(29, 1), r.array(30, 1), r.array(31, 1), r.array(32, 1), r.array(33, 1), r.array(34, 1), r.array(35, 1), r.array(36, 1), r.array(37, 1), r.array(38, 1), r.array(39, 1), r.array(40, 1), r.array(41, 1), r.array(42, 1), r.array(43, 1), r.array(44, 1), r.array(45, 1), r.array(46, 1), r.array(47, 1), r.array(48, 1), r.array(49, 1), r.array(50, 1), r.array(51, 1), r.array(52, 1), r.array(53, 1), r.array(54, 1), r.array(55, 1), r.array(56, 1), r.array(57, 1), r.array(58, 1), r.array(59, 1), r.array(60, 1), r.array(61, 1), r.array(62, 1), r.array(63, 1), r.array(64, 1), r.array(65, 1), r.array(66, 1), r.array(67, 1), r.array(68, 1), r.array(69, 1), r.array(70, 1), r.array(71, 1), r.array(72, 1), r.array(73, 1), r.array(74, 1), r.array(75, 1), r.array(76, 1), r.array(77, 1), r.array(78, 1), r.array(79, 1), r.array(80, 1), r.array(81, 1), r.array(82, 1), r.array(83, 1), r.array(84, 1), r.array(85, 1), r.array(86, 1), r.array(87, 1), r.array(88, 1), r.array(89, 1), r.array(90, 1), r.array(91, 1), r.array(92, 1), r.array(93, 1), r.array(94, 1), r.array(95, 1), r.array(96, 1), r.array(97, 1), r.array(98, 1), r.array(99, 1)))
  RunOpts:
  - Key: group_format
    Val: raw
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 86
  Original: tbl.group(index='a').count()
  Java: tbl.group().optArg("index", "a").count()
  ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[0, 25], [1, 25], [2, 25], [3, 25]]})
  ExpectedType: Map
  ExpectedJava: r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(0, 25), r.array(1, 25), r.array(2, 25), r.array(3, 25)))
  RunOpts:
  - Key: group_format
    Val: raw
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 87
  Original: tbl.group('a', index='id').count()
  Java: tbl.group("a").optArg("index", "id").count()
  ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[[0, 0], 1], [[0, 4], 1], [[0, 8], 1], [[0, 12], 1], [[0, 16], 1], [[0, 20], 1], [[0, 24], 1], [[0, 28], 1], [[0, 32], 1], [[0, 36], 1], [[0, 40], 1], [[0, 44], 1], [[0, 48], 1], [[0, 52], 1], [[0, 56], 1], [[0, 60], 1], [[0, 64], 1], [[0, 68], 1], [[0, 72], 1], [[0, 76], 1], [[0, 80], 1], [[0, 84], 1], [[0, 88], 1], [[0, 92], 1], [[0, 96], 1], [[1, 1], 1], [[1, 5], 1], [[1, 9], 1], [[1, 13], 1], [[1, 17], 1], [[1, 21], 1], [[1, 25], 1], [[1, 29], 1], [[1, 33], 1], [[1, 37], 1], [[1, 41], 1], [[1, 45], 1], [[1, 49], 1], [[1, 53], 1], [[1, 57], 1], [[1, 61], 1], [[1, 65], 1], [[1, 69], 1], [[1, 73], 1], [[1, 77], 1], [[1, 81], 1], [[1, 85], 1], [[1, 89], 1], [[1, 93], 1], [[1, 97], 1], [[2, 2], 1], [[2, 6], 1], [[2, 10], 1], [[2, 14], 1], [[2, 18], 1], [[2, 22], 1], [[2, 26], 1], [[2, 30], 1], [[2, 34], 1], [[2, 38], 1], [[2, 42], 1], [[2, 46], 1], [[2, 50], 1], [[2, 54], 1], [[2, 58], 1], [[2, 62], 1], [[2, 66], 1], [[2, 70], 1], [[2, 74], 1], [[2, 78], 1], [[2, 82], 1], [[2, 86], 1], [[2, 90], 1], [[2, 94], 1], [[2, 98], 1], [[3, 3], 1], [[3, 7], 1], [[3, 11], 1], [[3, 15], 1], [[3, 19], 1], [[3, 23], 1], [[3, 27], 1], [[3, 31], 1], [[3, 35], 1], [[3, 39], 1], [[3, 43], 1], [[3, 47], 1], [[3, 51], 1], [[3, 55], 1], [[3, 59], 1], [[3, 63], 1], [[3, 67], 1], [[3, 71], 1], [[3, 75], 1], [[3, 79], 1], [[3, 83], 1], [[3, 87], 1], [[3, 91], 1], [[3, 95], 1], [[3, 99], 1]]})
  ExpectedType: Map
  ExpectedJava: r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(r.array(0, 0), 1), r.array(r.array(0, 4), 1), r.array(r.array(0, 8), 1), r.array(r.array(0, 12), 1), r.array(r.array(0, 16), 1), r.array(r.array(0, 20), 1), r.array(r.array(0, 24), 1), r.array(r.array(0, 28), 1), r.array(r.array(0, 32), 1), r.array(r.array(0, 36), 1), r.array(r.array(0, 40), 1), r.array(r.array(0, 44), 1), r.array(r.array(0, 48), 1), r.array(r.array(0, 52), 1), r.array(r.array(0, 56), 1), r.array(r.array(0, 60), 1), r.array(r.array(0, 64), 1), r.array(r.array(0, 68), 1), r.array(r.array(0, 72), 1), r.array(r.array(0, 76), 1), r.array(r.array(0, 80), 1), r.array(r.array(0, 84), 1), r.array(r.array(0, 88), 1), r.array(r.array(0, 92), 1), r.array(r.array(0, 96), 1), r.array(r.array(1, 1), 1), r.array(r.array(1, 5), 1), r.array(r.array(1, 9), 1), r.array(r.array(1, 13), 1), r.array(r.array(1, 17), 1), r.array(r.array(1, 21), 1), r.array(r.array(1, 25), 1), r.array(r.array(1, 29), 1), r.array(r.array(1, 33), 1), r.array(r.array(1, 37), 1), r.array(r.array(1, 41), 1), r.array(r.array(1, 45), 1), r.array(r.array(1, 49), 1), r.array(r.array(1, 53), 1), r.array(r.array(1, 57), 1), r.array(r.array(1, 61), 1), r.array(r.array(1, 65), 1), r.array(r.array(1, 69), 1), r.array(r.array(1, 73), 1), r.array(r.array(1, 77), 1), r.array(r.array(1, 81), 1), r.array(r.array(1, 85), 1), r.array(r.array(1, 89), 1), r.array(r.array(1, 93), 1), r.array(r.array(1, 97), 1), r.array(r.array(2, 2), 1), r.array(r.array(2, 6), 1), r.array(r.array(2, 10), 1), r.array(r.array(2, 14), 1), r.array(r.array(2, 18), 1), r.array(r.array(2, 22), 1), r.array(r.array(2, 26), 1), r.array(r.array(2, 30), 1), r.array(r.array(2, 34), 1), r.array(r.array(2, 38), 1), r.array(r.array(2, 42), 1), r.array(r.array(2, 46), 1), r.array(r.array(2, 50), 1), r.array(r.array(2, 54), 1), r.array(r.array(2, 58), 1), r.array(r.array(2, 62), 1), r.array(r.array(2, 66), 1), r.array(r.array(2, 70), 1), r.array(r.array(2, 74), 1), r.array(r.array(2, 78), 1), r.array(r.array(2, 82), 1), r.array(r.array(2, 86), 1), r.array(r.array(2, 90), 1), r.array(r.array(2, 94), 1), r.array(r.array(2, 98), 1), r.array(r.array(3, 3), 1), r.array(r.array(3, 7), 1), r.array(r.array(3, 11), 1), r.array(r.array(3, 15), 1), r.array(r.array(3, 19), 1), r.array(r.array(3, 23), 1), r.array(r.array(3, 27), 1), r.array(r.array(3, 31), 1), r.array(r.array(3, 35), 1), r.array(r.array(3, 39), 1), r.array(r.array(3, 43), 1), r.array(r.array(3, 47), 1), r.array(r.array(3, 51), 1), r.array(r.array(3, 55), 1), r.array(r.array(3, 59), 1), r.array(r.array(3, 63), 1), r.array(r.array(3, 67), 1), r.array(r.array(3, 71), 1), r.array(r.array(3, 75), 1), r.array(r.array(3, 79), 1), r.array(r.array(3, 83), 1), r.array(r.array(3, 87), 1), r.array(r.array(3, 91), 1), r.array(r.array(3, 95), 1), r.array(r.array(3, 99), 1)))
  RunOpts:
  - Key: group_format
    Val: raw
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 88
  Original: tbl.group('a', index='a').count()
  Java: tbl.group("a").optArg("index", "a").count()
  ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[[0, 0], 25], [[1, 1], 25], [[2, 2], 25], [[3, 3], 25]]})
  ExpectedType: Map
  ExpectedJava: r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(r.array(0, 0), 25), r.array(r.array(1, 1), 25), r.array(r.array(2, 2), 25), r.array(r.array(3, 3), 25)))
  RunOpts:
  - Key: group_format
    Val: raw
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 89
  Original: tbl.group('a', lambda row:'f', lambda row:[], lambda row:[{}, [0], null, 0], multi=True).count()
  Java: tbl.group("a", row -> "f", row -> r.array(), row -> r.array(r.hashMap(), r.array(0), null, 0)).optArg("multi", true).count()
  ExpectedOriginal: ({'$reql_type$':'GROUPED_DATA', 'data':[[[0, "f", null, [0]], 25], [[0, "f", null, null], 25], [[0, "f", null, 0], 25], [[0, "f", null, {}], 25], [[1, "f", null, [0]], 25], [[1, "f", null, null], 25], [[1, "f", null, 0], 25], [[1, "f", null, {}], 25], [[2, "f", null, [0]], 25], [[2, "f", null, null], 25], [[2, "f", null, 0], 25], [[2, "f", null, {}], 25], [[3, "f", null, [0]], 25], [[3, "f", null, null], 25], [[3, "f", null, 0], 25], [[3, "f", null, {}], 25]]})
  ExpectedType: Map
  ExpectedJava: r.hashMap("$reql_type$", "GROUPED_DATA").with("data", r.array(r.array(r.array(0, "f", null, r.array(0)), 25), r.array(r.array(0, "f", null, null), 25), r.array(r.array(0, "f", null, 0), 25), r.array(r.array(0, "f", null, r.hashMap()), 25), r.array(r.array(1, "f", null, r.array(0)), 25), r.array(r.array(1, "f", null, null), 25), r.array(r.array(1, "f", null, 0), 25), r.array(r.array(1, "f", null, r.hashMap()), 25), r.array(r.array(2, "f", null, r.array(0)), 25), r.array(r.array(2, "f", null, null), 25), r.array(r.array(2, "f", null, 0), 25), r.array(r.array(2, "f", null, r.hashMap()), 25), r.array(r.array(3, "f", null, r.array(0)), 25), r.array(r.array(3, "f", null, null), 25), r.array(r.array(3, "f", null, 0), 25), r.array(r.array(3, "f", null, r.hashMap()), 25)))
  RunOpts:
  - Key: group_format
    Val: raw
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 90
  Original: tbl.group('a').count().ungroup()
  Java: tbl.group("a").count().ungroup()
  ExpectedOriginal: ([{'group':0, 'reduction':25}, {'group':1, 'reduction':25}, {'group':2, 'reduction':25}, {'group':3, 'reduction':25}])
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("group", 0).with("reduction", 25), r.hashMap("group", 1).with("reduction", 25), r.hashMap("group", 2).with("reduction", 25), r.hashMap("group", 3).with("reduction", 25))
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 91
  Original: tbl.group('a').ungroup()['group']
  Java: tbl.group("a").ungroup().g("group")
  ExpectedOriginal: ([0, 1, 2, 3])
  ExpectedType: List
  ExpectedJava: r.array(0, 1, 2, 3)
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 93
  Original: tbl.group('a', null).count().ungroup()
  Java: tbl.group("a", (ReqlExpr) null).count().ungroup()
  ExpectedOriginal: ([{'group':[0,null],'reduction':25},{'group':[1,null],'reduction':25},{'group':[2,null],'reduction':25},{'group':[3,null],'reduction':25}])
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("group", r.array(0, null)).with("reduction", 25), r.hashMap("group", r.array(1, null)).with("reduction", 25), r.hashMap("group", r.array(2, null)).with("reduction", 25), r.hashMap("group", r.array(3, null)).with("reduction", 25))
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 94
  Original: tbl.group('a', lambda row:[1,'two'], multi=True).count().ungroup()
  Java: tbl.group("a", row -> r.array(1, "two")).optArg("multi", true).count().ungroup()
  ExpectedOriginal: ([{'group':[0,1],'reduction':25},{'group':[0,'two'],'reduction':25},{'group':[1,1],'reduction':25},{'group':[1,'two'],'reduction':25},{'group':[2,1],'reduction':25},{'group':[2,'two'],'reduction':25},{'group':[3,1],'reduction':25},{'group':[3,'two'],'reduction':25}])
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("group", r.array(0, 1)).with("reduction", 25), r.hashMap("group", r.array(0, "two")).with("reduction", 25), r.hashMap("group", r.array(1, 1)).with("reduction", 25), r.hashMap("group", r.array(1, "two")).with("reduction", 25), r.hashMap("group", r.array(2, 1)).with("reduction", 25), r.hashMap("group", r.array(2, "two")).with("reduction", 25), r.hashMap("group", r.array(3, 1)).with("reduction", 25), r.hashMap("group", r.array(3, "two")).with("reduction", 25))
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 95
  Original: tbl.count()
  Java: tbl.count()
  ExpectedOriginal: 100
  ExpectedType: Long
  ExpectedJava: 100
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 103
  Original: tbl.min()
  Java: tbl.min()
  ExpectedOriginal: ({'a':0,'id':0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("a", 0).with("id", 0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 104
  Original: tbl.min(index='id')
  Java: tbl.min().optArg("index", "id")
  ExpectedOriginal: ({'a':0,'id':0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("a", 0).with("id", 0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 105
  Original: tbl.min(index='a')
  Java: tbl.min().optArg("index", "a")
  ExpectedOriginal: ({'a':0,'id':0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("a", 0).with("id", 0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 106
  Original: tbl.max().without('b')
  Java: tbl.max().without("b")
  ExpectedOriginal: ({'a':3,'id':99})
  ExpectedType: Map
  ExpectedJava: r.hashMap("a", 3).with("id", 99)
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 107
  Original: tbl.max(index='id').without('b')
  Java: tbl.max().optArg("index", "id").without("b")
  ExpectedOriginal: ({'a':3,'id':99})
  ExpectedType: Map
  ExpectedJava: r.hashMap("a", 3).with("id", 99)
  RunOpts: []
- TestType: JavaQuery
  TestFile: aggregation.yaml
  TestNum: 108
  Original: tbl.max(index='a').without('b')
  Java: tbl.max().optArg("index", "a").without("b")
  ExpectedOriginal: ({'a':3,'id':99})
  ExpectedType: Map
  ExpectedJava: r.hashMap("a", 3).with("id", 99)
  RunOpts: []
