ModuleName: Default
DefsAndTests:
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 3
  Original: r.expr(1).default(2)
  Java: r.expr(1L).default_(2L)
  ExpectedOriginal: 1
  ExpectedType: Long
  ExpectedJava: 1L
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 5
  Original: r.expr(null).default(2)
  Java: r.expr((ReqlExpr) null).default_(2L)
  ExpectedOriginal: 2
  ExpectedType: Long
  ExpectedJava: 2L
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 7
  Original: r.expr({})['b'].default(2)
  Java: r.expr(r.hashMap()).bracket("b").default_(2L)
  ExpectedOriginal: 2
  ExpectedType: Long
  ExpectedJava: 2L
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 10
  Original: r.expr(r.expr('a')['b']).default(2)
  Java: r.expr(r.expr("a").bracket("b")).default_(2L)
  ExpectedOriginal: err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\"a\"`.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\"a\"`.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 14
  Original: r.expr([]).reduce(lambda a,b:a+b).default(2)
  Java: r.expr(r.array()).reduce((a, b) -> r.add(a, b)).default_(2L)
  ExpectedOriginal: 2
  ExpectedType: Long
  ExpectedJava: 2L
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 18
  Original: r.expr([]).union([]).reduce(lambda a,b:a+b).default(2)
  Java: r.expr(r.array()).union(r.array()).reduce((a, b) -> r.add(a, b)).default_(2L)
  ExpectedOriginal: 2
  ExpectedType: Long
  ExpectedJava: 2L
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 22
  Original: r.expr('a').reduce(lambda a,b:a+b).default(2)
  Java: r.expr("a").reduce((a, b) -> r.add(a, b)).default_(2L)
  ExpectedOriginal: err("ReqlQueryLogicError", "Cannot convert STRING to SEQUENCE", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot convert STRING to SEQUENCE", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 25
  Original: (r.expr(null) + 5).default(2)
  Java: r.expr((ReqlExpr) null).add(5L).default_(2L)
  ExpectedOriginal: 2
  ExpectedType: Long
  ExpectedJava: 2L
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 28
  Original: (5 + r.expr(null)).default(2)
  Java: r.add(5L, r.expr((ReqlExpr) null)).default_(2L)
  ExpectedOriginal: 2
  ExpectedType: Long
  ExpectedJava: 2L
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 31
  Original: (5 - r.expr(null)).default(2)
  Java: r.sub(5L, r.expr((ReqlExpr) null)).default_(2L)
  ExpectedOriginal: 2
  ExpectedType: Long
  ExpectedJava: 2L
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 34
  Original: (r.expr(null) - 5).default(2)
  Java: r.expr((ReqlExpr) null).sub(5L).default_(2L)
  ExpectedOriginal: 2
  ExpectedType: Long
  ExpectedJava: 2L
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 37
  Original: (r.expr('a') + 5).default(2)
  Java: r.expr("a").add(5L).default_(2L)
  ExpectedOriginal: err("ReqlQueryLogicError", "Expected type STRING but found NUMBER.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Expected type STRING but found NUMBER.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 40
  Original: (5 + r.expr('a')).default(2)
  Java: r.add(5L, r.expr("a")).default_(2L)
  ExpectedOriginal: err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 43
  Original: (r.expr('a') - 5).default(2)
  Java: r.expr("a").sub(5L).default_(2L)
  ExpectedOriginal: err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 46
  Original: (5 - r.expr('a')).default(2)
  Java: r.sub(5L, r.expr("a")).default_(2L)
  ExpectedOriginal: err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 50
  Original: r.expr(1).default(r.error())
  Java: r.expr(1L).default_(r.error())
  ExpectedOriginal: 1
  ExpectedType: Long
  ExpectedJava: 1L
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 52
  Original: r.expr(null).default(r.error())
  Java: r.expr((ReqlExpr) null).default_(r.error())
  ExpectedOriginal: (null)
  ExpectedType: Object
  ExpectedJava: null
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 54
  Original: r.expr({})['b'].default(r.error())
  Java: r.expr(r.hashMap()).bracket("b").default_(r.error())
  ExpectedOriginal: err("ReqlNonExistenceError", "No attribute `b` in object:", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlNonExistenceError", "No attribute `b` in object:", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 58
  Original: r.expr([]).reduce(lambda a,b:a+b).default(r.error)
  Java: r.expr(r.array()).reduce((a, b) -> r.add(a, b)).default_(r.error())
  ExpectedOriginal: err("ReqlNonExistenceError", "Cannot reduce over an empty stream.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlNonExistenceError", "Cannot reduce over an empty stream.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 62
  Original: r.expr([]).union([]).reduce(lambda a,b:a+b).default(r.error)
  Java: r.expr(r.array()).union(r.array()).reduce((a, b) -> r.add(a, b)).default_(r.error())
  ExpectedOriginal: err("ReqlNonExistenceError", "Cannot reduce over an empty stream.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlNonExistenceError", "Cannot reduce over an empty stream.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 65
  Original: (r.expr(null) + 5).default(r.error)
  Java: r.expr((ReqlExpr) null).add(5L).default_(r.error())
  ExpectedOriginal: err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 68
  Original: (5 + r.expr(null)).default(r.error)
  Java: r.add(5L, r.expr((ReqlExpr) null)).default_(r.error())
  ExpectedOriginal: err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 71
  Original: (5 - r.expr(null)).default(r.error)
  Java: r.sub(5L, r.expr((ReqlExpr) null)).default_(r.error())
  ExpectedOriginal: err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 74
  Original: (r.expr(null) - 5).default(r.error)
  Java: r.expr((ReqlExpr) null).sub(5L).default_(r.error())
  ExpectedOriginal: err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 79
  Original: r.expr(1).default(lambda e:e)
  Java: r.expr(1L).default_(e -> e)
  ExpectedOriginal: 1
  ExpectedType: Long
  ExpectedJava: 1L
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 83
  Original: r.expr(null).default(lambda e:e)
  Java: r.expr((ReqlExpr) null).default_(e -> e)
  ExpectedOriginal: (null)
  ExpectedType: Object
  ExpectedJava: null
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 87
  Original: r.expr({})['b'].default(lambda e:e)
  Java: r.expr(r.hashMap()).bracket("b").default_(e -> e)
  ExpectedOriginal: '"No attribute `b` in object:\n{}"'
  ExpectedType: String
  ExpectedJava: '"No attribute `b` in object:\n{}"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 91
  Original: r.expr([]).reduce(lambda a,b:a+b).default(lambda e:e)
  Java: r.expr(r.array()).reduce((a, b) -> r.add(a, b)).default_(e -> e)
  ExpectedOriginal: ("Cannot reduce over an empty stream.")
  ExpectedType: String
  ExpectedJava: '"Cannot reduce over an empty stream."'
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 95
  Original: r.expr([]).union([]).reduce(lambda a,b:a+b).default(lambda e:e)
  Java: r.expr(r.array()).union(r.array()).reduce((a, b) -> r.add(a, b)).default_(e -> e)
  ExpectedOriginal: ("Cannot reduce over an empty stream.")
  ExpectedType: String
  ExpectedJava: '"Cannot reduce over an empty stream."'
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 99
  Original: (r.expr(null) + 5).default(lambda e:e)
  Java: r.expr((ReqlExpr) null).add(5L).default_(e -> e)
  ExpectedOriginal: ("Expected type NUMBER but found NULL.")
  ExpectedType: String
  ExpectedJava: '"Expected type NUMBER but found NULL."'
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 103
  Original: (5 + r.expr(null)).default(lambda e:e)
  Java: r.add(5L, r.expr((ReqlExpr) null)).default_(e -> e)
  ExpectedOriginal: ("Expected type NUMBER but found NULL.")
  ExpectedType: String
  ExpectedJava: '"Expected type NUMBER but found NULL."'
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 107
  Original: (5 - r.expr(null)).default(lambda e:e)
  Java: r.sub(5L, r.expr((ReqlExpr) null)).default_(e -> e)
  ExpectedOriginal: ("Expected type NUMBER but found NULL.")
  ExpectedType: String
  ExpectedJava: '"Expected type NUMBER but found NULL."'
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 111
  Original: (r.expr(null) - 5).default(lambda e:e)
  Java: r.expr((ReqlExpr) null).sub(5L).default_(e -> e)
  ExpectedOriginal: ("Expected type NUMBER but found NULL.")
  ExpectedType: String
  ExpectedJava: '"Expected type NUMBER but found NULL."'
  RunOpts: []
- TestType: JavaDef
  TestFile: default.yaml
  LineNum: 115
  Original: arr = r.expr([{'a':1},{'a':null},{}]).order_by('a')
  VarName: arr
  VarType: OrderBy
  Value: (OrderBy) (r.expr(r.array(r.hashMap("a", 1L), r.hashMap("a", null), r.hashMap())).orderBy("a"))
  Java: OrderBy arr = (OrderBy) (r.expr(r.array(r.hashMap("a", 1L), r.hashMap("a", null), r.hashMap())).orderBy("a"));
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 118
  Original: arr.filter(lambda x:x['a'].eq(1))
  Java: arr.filter(x -> x.bracket("a").eq(1L))
  ExpectedOriginal: '[{''a'':1}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 122
  Original: arr.filter(lambda x:x['a'].eq(1), default=False)
  Java: arr.filter(x -> x.bracket("a").eq(1L)).optArg("default", false)
  ExpectedOriginal: '[{''a'':1}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 126
  Original: arr.filter(lambda x:x['a'].eq(1), default=True)
  Java: arr.filter(x -> x.bracket("a").eq(1L)).optArg("default", true)
  ExpectedOriginal: '[{}, {''a'':1}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap(), r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 131
  Original: arr.filter(lambda x:x['a'].eq(1), default=r.js('true'))
  Java: arr.filter(x -> x.bracket("a").eq(1L)).optArg("default", r.js("true"))
  ExpectedOriginal: '[{}, {''a'':1}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap(), r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 135
  Original: arr.filter(lambda x:x['a'].eq(1), default=r.js('false'))
  Java: arr.filter(x -> x.bracket("a").eq(1L)).optArg("default", r.js("false"))
  ExpectedOriginal: '[{''a'':1}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 139
  Original: arr.filter(lambda x:x['a'].eq(1), default=r.error())
  Java: arr.filter(x -> x.bracket("a").eq(1L)).optArg("default", r.error())
  ExpectedOriginal: err("ReqlNonExistenceError", "No attribute `a` in object:", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlNonExistenceError", "No attribute `a` in object:", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 144
  Original: r.expr(False).do(lambda d:arr.filter(lambda x:x['a'].eq(1), default=d))
  Java: r.expr(false).do_(d -> arr.filter(x -> x.bracket("a").eq(1L)).optArg("default", d))
  ExpectedOriginal: '[{''a'':1}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 148
  Original: r.expr(True).do(lambda d:arr.filter(lambda x:x['a'].eq(1), default=d)).order_by('a')
  Java: r.expr(true).do_(d -> arr.filter(x -> x.bracket("a").eq(1L)).optArg("default", d)).orderBy("a")
  ExpectedOriginal: '[{}, {''a'':1}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap(), r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 154
  Original: arr.filter(lambda x:x['a'].default(0).eq(1))
  Java: arr.filter(x -> x.bracket("a").default_(0L).eq(1L))
  ExpectedOriginal: '[{''a'':1}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 158
  Original: arr.filter(lambda x:x['a'].default(1).eq(1)).order_by('a')
  Java: arr.filter(x -> x.bracket("a").default_(1L).eq(1L)).orderBy("a")
  ExpectedOriginal: ([{}, {'a':null}, {'a':1}])
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap(), r.hashMap("a", null), r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 162
  Original: arr.filter(lambda x:x['a'].default(r.error()).eq(1))
  Java: arr.filter(x -> x.bracket("a").default_(r.error()).eq(1L))
  ExpectedOriginal: '[{''a'':1}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 168
  Original: r.expr(0).do(lambda i:arr.filter(lambda x:x['a'].default(i).eq(1)))
  Java: r.expr(0L).do_(i -> arr.filter(x -> x.bracket("a").default_(i).eq(1L)))
  ExpectedOriginal: '[{''a'':1}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 172
  Original: r.expr(1).do(lambda i:arr.filter(lambda x:x['a'].default(i).eq(1))).order_by('a')
  Java: r.expr(1L).do_(i -> arr.filter(x -> x.bracket("a").default_(i).eq(1L))).orderBy("a")
  ExpectedOriginal: ([{},{'a':null},{'a':1}])
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap(), r.hashMap("a", null), r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 177
  Original: arr.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)))
  Java: arr.filter(x -> r.or(x.bracket("a").eq(1L), x.bracket("a").bracket("b").eq(2L)))
  ExpectedOriginal: '[{''a'':1}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 181
  Original: arr.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)), default=False)
  Java: arr.filter(x -> r.or(x.bracket("a").eq(1L), x.bracket("a").bracket("b").eq(2L))).optArg("default", false)
  ExpectedOriginal: '[{''a'':1}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 185
  Original: arr.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)), default=True).order_by('a')
  Java: arr.filter(x -> r.or(x.bracket("a").eq(1L), x.bracket("a").bracket("b").eq(2L))).optArg("default", true).orderBy("a")
  ExpectedOriginal: ([{}, {'a':null}, {'a':1}])
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap(), r.hashMap("a", null), r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 189
  Original: arr.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)), default=r.error())
  Java: arr.filter(x -> r.or(x.bracket("a").eq(1L), x.bracket("a").bracket("b").eq(2L))).optArg("default", r.error())
  ExpectedOriginal: err("ReqlNonExistenceError", "No attribute `a` in object:", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlNonExistenceError", "No attribute `a` in object:", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 193
  Original: r.table_create('default_test')
  Java: r.tableCreate("default_test")
  ExpectedOriginal: partial({'tables_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_created", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 196
  Original: r.table('default_test').insert(arr)
  Java: r.table("default_test").insert(arr)
  ExpectedOriginal: ({'deleted':0,'replaced':0,'generated_keys':arrlen(3,uuid()),'unchanged':0,'errors':0,'skipped':0,'inserted':3})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0L).with("replaced", 0L).with("generated_keys", arrlen(3L, uuid())).with("unchanged", 0L).with("errors", 0L).with("skipped", 0L).with("inserted", 3L)
  RunOpts: []
- TestType: JavaDef
  TestFile: default.yaml
  LineNum: 199
  Original: tbl = r.table('default_test').order_by('a').pluck('a')
  VarName: tbl
  VarType: Pluck
  Value: (Pluck) (r.table("default_test").orderBy("a").pluck("a"))
  Java: Pluck tbl = (Pluck) (r.table("default_test").orderBy("a").pluck("a"));
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 202
  Original: tbl.filter(lambda x:x['a'].eq(1))
  Java: tbl.filter(x -> x.bracket("a").eq(1L))
  ExpectedOriginal: '[{''a'':1}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 206
  Original: tbl.filter(lambda x:x['a'].eq(1), default=False)
  Java: tbl.filter(x -> x.bracket("a").eq(1L)).optArg("default", false)
  ExpectedOriginal: '[{''a'':1}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 210
  Original: tbl.filter(lambda x:x['a'].eq(1), default=True)
  Java: tbl.filter(x -> x.bracket("a").eq(1L)).optArg("default", true)
  ExpectedOriginal: '[{}, {''a'':1}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap(), r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 215
  Original: tbl.filter(lambda x:x['a'].eq(1), default=r.error())
  Java: tbl.filter(x -> x.bracket("a").eq(1L)).optArg("default", r.error())
  ExpectedOriginal: err("ReqlNonExistenceError", "No attribute `a` in object:", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlNonExistenceError", "No attribute `a` in object:", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 220
  Original: r.expr(False).do(lambda d:tbl.filter(lambda x:x['a'].eq(1), default=d))
  Java: r.expr(false).do_(d -> tbl.filter(x -> x.bracket("a").eq(1L)).optArg("default", d))
  ExpectedOriginal: '[{''a'':1}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 224
  Original: r.expr(True).do(lambda d:tbl.filter(lambda x:x['a'].eq(1), default=d)).order_by('a')
  Java: r.expr(true).do_(d -> tbl.filter(x -> x.bracket("a").eq(1L)).optArg("default", d)).orderBy("a")
  ExpectedOriginal: '[{}, {''a'':1}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap(), r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 230
  Original: tbl.filter(lambda x:x['a'].default(0).eq(1))
  Java: tbl.filter(x -> x.bracket("a").default_(0L).eq(1L))
  ExpectedOriginal: '[{''a'':1}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 234
  Original: tbl.filter(lambda x:x['a'].default(1).eq(1)).order_by('a')
  Java: tbl.filter(x -> x.bracket("a").default_(1L).eq(1L)).orderBy("a")
  ExpectedOriginal: ([{}, {'a':null}, {'a':1}])
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap(), r.hashMap("a", null), r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 238
  Original: tbl.filter(lambda x:x['a'].default(r.error()).eq(1))
  Java: tbl.filter(x -> x.bracket("a").default_(r.error()).eq(1L))
  ExpectedOriginal: '[{''a'':1}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 244
  Original: r.expr(0).do(lambda i:tbl.filter(lambda x:x['a'].default(i).eq(1)))
  Java: r.expr(0L).do_(i -> tbl.filter(x -> x.bracket("a").default_(i).eq(1L)))
  ExpectedOriginal: '[{''a'':1}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 248
  Original: r.expr(1).do(lambda i:tbl.filter(lambda x:x['a'].default(i).eq(1))).order_by('a')
  Java: r.expr(1L).do_(i -> tbl.filter(x -> x.bracket("a").default_(i).eq(1L))).orderBy("a")
  ExpectedOriginal: ([{},{'a':null},{'a':1}])
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap(), r.hashMap("a", null), r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 253
  Original: tbl.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)))
  Java: tbl.filter(x -> r.or(x.bracket("a").eq(1L), x.bracket("a").bracket("b").eq(2L)))
  ExpectedOriginal: '[{''a'':1}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 257
  Original: tbl.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)), default=False)
  Java: tbl.filter(x -> r.or(x.bracket("a").eq(1L), x.bracket("a").bracket("b").eq(2L))).optArg("default", false)
  ExpectedOriginal: '[{''a'':1}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 261
  Original: tbl.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)), default=True).order_by('a')
  Java: tbl.filter(x -> r.or(x.bracket("a").eq(1L), x.bracket("a").bracket("b").eq(2L))).optArg("default", true).orderBy("a")
  ExpectedOriginal: ([{}, {'a':null}, {'a':1}])
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap(), r.hashMap("a", null), r.hashMap("a", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 265
  Original: tbl.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)), default=r.error())
  Java: tbl.filter(x -> r.or(x.bracket("a").eq(1L), x.bracket("a").bracket("b").eq(2L))).optArg("default", r.error())
  ExpectedOriginal: err("ReqlNonExistenceError", "No attribute `a` in object:", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlNonExistenceError", "No attribute `a` in object:", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: default.yaml
  LineNum: 269
  Original: r.table_drop('default_test')
  Java: r.tableDrop("default_test")
  ExpectedOriginal: partial({'tables_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_dropped", 1L))
  RunOpts: []
