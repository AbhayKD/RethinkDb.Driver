ModuleName: GeoPrimitives
DefsAndTests:
- TestType: JavaQuery
  TestFile: geo/primitives.yaml
  TestNum: 1
  Original: r.circle([0,0], 1, num_vertices=3)
  Java: r.circle(Arrays.asList(0, 0), 1).optArg("num_vertices", 3)
  ExpectedOriginal: ({'$reql_type$':'GEOMETRY', 'coordinates':[[[0, -9.04369477050382e-06], [-7.779638566553426e-06, 4.5218473852518965e-06], [7.779638566553426e-06, 4.5218473852518965e-06], [0, -9.04369477050382e-06]]], 'type':'Polygon'})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("$reql_type$", "GEOMETRY").with("coordinates", Arrays.asList(Arrays.asList(Arrays.asList(0, -9.04369477050382e-06), Arrays.asList(-7.779638566553426e-06, 4.5218473852518965e-06), Arrays.asList(7.779638566553426e-06, 4.5218473852518965e-06), Arrays.asList(0, -9.04369477050382e-06)))).with("type", "Polygon")
  Obtained: r.circle(Arrays.asList(0, 0), 1).optArg("num_vertices", 3)
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/primitives.yaml
  TestNum: 2
  Original: r.circle(r.point(0,0), 1, num_vertices=3)
  Java: r.circle(r.point(0, 0), 1).optArg("num_vertices", 3)
  ExpectedOriginal: ({'$reql_type$':'GEOMETRY', 'coordinates':[[[0, -9.04369477050382e-06], [-7.779638566553426e-06, 4.5218473852518965e-06], [7.779638566553426e-06, 4.5218473852518965e-06], [0, -9.04369477050382e-06]]], 'type':'Polygon'})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("$reql_type$", "GEOMETRY").with("coordinates", Arrays.asList(Arrays.asList(Arrays.asList(0, -9.04369477050382e-06), Arrays.asList(-7.779638566553426e-06, 4.5218473852518965e-06), Arrays.asList(7.779638566553426e-06, 4.5218473852518965e-06), Arrays.asList(0, -9.04369477050382e-06)))).with("type", "Polygon")
  Obtained: r.circle(r.point(0, 0), 1).optArg("num_vertices", 3)
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/primitives.yaml
  TestNum: 3
  Original: r.circle([0,0], 1, num_vertices=3, fill=false)
  Java: r.circle(Arrays.asList(0, 0), 1).optArg("num_vertices", 3).optArg("fill", false)
  ExpectedOriginal: ({'$reql_type$':'GEOMETRY', 'coordinates':[[0, -9.04369477050382e-06], [-7.779638566553426e-06, 4.5218473852518965e-06], [7.779638566553426e-06, 4.5218473852518965e-06], [0, -9.04369477050382e-06]], 'type':'LineString'})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("$reql_type$", "GEOMETRY").with("coordinates", Arrays.asList(Arrays.asList(0, -9.04369477050382e-06), Arrays.asList(-7.779638566553426e-06, 4.5218473852518965e-06), Arrays.asList(7.779638566553426e-06, 4.5218473852518965e-06), Arrays.asList(0, -9.04369477050382e-06))).with("type", "LineString")
  Obtained: r.circle(Arrays.asList(0, 0), 1).optArg("num_vertices", 3).optArg("fill", false)
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/primitives.yaml
  TestNum: 4
  Original: r.circle([0,0], 14000000, num_vertices=3)
  Java: r.circle(Arrays.asList(0, 0), 14000000).optArg("num_vertices", 3)
  ExpectedOriginal: err('ReqlQueryLogicError', 'Radius must be smaller than a quarter of the circumference along the minor axis of the reference ellipsoid.  Got 14000000m, but must be smaller than 9985163.1855612862855m.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Radius must be smaller than a quarter of the circumference along the minor axis of the reference ellipsoid.  Got 14000000m, but must be smaller than 9985163.1855612862855m.", Arrays.asList(0))
  Obtained: r.circle(Arrays.asList(0, 0), 14000000).optArg("num_vertices", 3)
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/primitives.yaml
  TestNum: 5
  Original: r.circle([0,0], 1, num_vertices=3, geo_system='WGS84')
  Java: r.circle(Arrays.asList(0, 0), 1).optArg("num_vertices", 3).optArg("geo_system", "WGS84")
  ExpectedOriginal: ({'$reql_type$':'GEOMETRY', 'coordinates':[[[0, -9.04369477050382e-06], [-7.779638566553426e-06, 4.5218473852518965e-06], [7.779638566553426e-06, 4.5218473852518965e-06], [0, -9.04369477050382e-06]]], 'type':'Polygon'})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("$reql_type$", "GEOMETRY").with("coordinates", Arrays.asList(Arrays.asList(Arrays.asList(0, -9.04369477050382e-06), Arrays.asList(-7.779638566553426e-06, 4.5218473852518965e-06), Arrays.asList(7.779638566553426e-06, 4.5218473852518965e-06), Arrays.asList(0, -9.04369477050382e-06)))).with("type", "Polygon")
  Obtained: r.circle(Arrays.asList(0, 0), 1).optArg("num_vertices", 3).optArg("geo_system", "WGS84")
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/primitives.yaml
  TestNum: 6
  Original: r.circle([0,0], 2, num_vertices=3, geo_system='unit_sphere')
  Java: r.circle(Arrays.asList(0, 0), 2).optArg("num_vertices", 3).optArg("geo_system", "unit_sphere")
  ExpectedOriginal: err('ReqlQueryLogicError', 'Radius must be smaller than a quarter of the circumference along the minor axis of the reference ellipsoid.  Got 2m, but must be smaller than 1.570796326794896558m.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Radius must be smaller than a quarter of the circumference along the minor axis of the reference ellipsoid.  Got 2m, but must be smaller than 1.570796326794896558m.", Arrays.asList(0))
  Obtained: r.circle(Arrays.asList(0, 0), 2).optArg("num_vertices", 3).optArg("geo_system", "unit_sphere")
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/primitives.yaml
  TestNum: 7
  Original: r.circle([0,0], 0.1, num_vertices=3, geo_system='unit_sphere')
  Java: r.circle(Arrays.asList(0, 0), 0.1).optArg("num_vertices", 3).optArg("geo_system", "unit_sphere")
  ExpectedOriginal: ({'$reql_type$':'GEOMETRY', 'coordinates':[[[0, -5.729577951308232], [-4.966092947444857, 2.861205754495701], [4.966092947444857, 2.861205754495701], [0, -5.729577951308232]]], 'type':'Polygon'})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("$reql_type$", "GEOMETRY").with("coordinates", Arrays.asList(Arrays.asList(Arrays.asList(0, -5.729577951308232), Arrays.asList(-4.966092947444857, 2.861205754495701), Arrays.asList(4.966092947444857, 2.861205754495701), Arrays.asList(0, -5.729577951308232)))).with("type", "Polygon")
  Obtained: r.circle(Arrays.asList(0, 0), 0.1).optArg("num_vertices", 3).optArg("geo_system", "unit_sphere")
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/primitives.yaml
  TestNum: 8
  Original: r.circle([0,0], 1.0/1000.0, num_vertices=3, unit='km')
  Java: r.circle(Arrays.asList(0, 0), r.div(1.0, 1000.0)).optArg("num_vertices", 3).optArg("unit", "km")
  ExpectedOriginal: ({'$reql_type$':'GEOMETRY', 'coordinates':[[[0, -9.04369477050382e-06], [-7.779638566553426e-06, 4.5218473852518965e-06], [7.779638566553426e-06, 4.5218473852518965e-06], [0, -9.04369477050382e-06]]], 'type':'Polygon'})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("$reql_type$", "GEOMETRY").with("coordinates", Arrays.asList(Arrays.asList(Arrays.asList(0, -9.04369477050382e-06), Arrays.asList(-7.779638566553426e-06, 4.5218473852518965e-06), Arrays.asList(7.779638566553426e-06, 4.5218473852518965e-06), Arrays.asList(0, -9.04369477050382e-06)))).with("type", "Polygon")
  Obtained: r.circle(Arrays.asList(0, 0), r.div(1.0, 1000.0)).optArg("num_vertices", 3).optArg("unit", "km")
  RunOpts: []
- TestType: JavaQuery
  TestFile: geo/primitives.yaml
  TestNum: 9
  Original: r.circle([0,0], 1.0/1609.344, num_vertices=3, unit='mi')
  Java: r.circle(Arrays.asList(0, 0), r.div(1.0, 1609.344)).optArg("num_vertices", 3).optArg("unit", "mi")
  ExpectedOriginal: ({'$reql_type$':'GEOMETRY', 'coordinates':[[[0, -9.04369477050382e-06], [-7.779638566553426e-06, 4.5218473852518965e-06], [7.779638566553426e-06, 4.5218473852518965e-06], [0, -9.04369477050382e-06]]], 'type':'Polygon'})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("$reql_type$", "GEOMETRY").with("coordinates", Arrays.asList(Arrays.asList(Arrays.asList(0, -9.04369477050382e-06), Arrays.asList(-7.779638566553426e-06, 4.5218473852518965e-06), Arrays.asList(7.779638566553426e-06, 4.5218473852518965e-06), Arrays.asList(0, -9.04369477050382e-06)))).with("type", "Polygon")
  Obtained: r.circle(Arrays.asList(0, 0), r.div(1.0, 1609.344)).optArg("num_vertices", 3).optArg("unit", "mi")
  RunOpts: []
