ModuleName: DatumArray
Description: Tests conversion to and from the RQL array type
DefsAndTests:
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 6
  Original: r.expr([])
  Java: r.expr(r.array())
  ExpectedOriginal: '[]'
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 9
  Original: r.expr([1])
  Java: r.expr(r.array(1L))
  ExpectedOriginal: '[1]'
  ExpectedType: List
  ExpectedJava: r.array(1L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 14
  Original: r.expr([1,2,3,4,5])
  Java: r.expr(r.array(1L, 2L, 3L, 4L, 5L))
  ExpectedOriginal: '[1,2,3,4,5]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L, 3L, 4L, 5L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 19
  Original: r.expr([]).type_of()
  Java: r.expr(r.array()).typeOf()
  ExpectedOriginal: 'ARRAY'
  ExpectedType: String
  ExpectedJava: '"ARRAY"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 24
  Original: r.expr([1, 2]).coerce_to('string')
  Java: r.expr(r.array(1L, 2L)).coerceTo("string")
  ExpectedOriginal: '[1,2]'
  ExpectedType: String
  ExpectedJava: '"[1,2]"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 25
  Original: r.expr([1, 2]).coerce_to('STRING')
  Java: r.expr(r.array(1L, 2L)).coerceTo("STRING")
  ExpectedOriginal: '[1,2]'
  ExpectedType: String
  ExpectedJava: '"[1,2]"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 28
  Original: r.expr([1, 2]).coerce_to('array')
  Java: r.expr(r.array(1L, 2L)).coerceTo("array")
  ExpectedOriginal: '[1, 2]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 31
  Original: r.expr([1, 2]).coerce_to('number')
  Java: r.expr(r.array(1L, 2L)).coerceTo("number")
  ExpectedOriginal: err('ReqlQueryLogicError', 'Cannot coerce ARRAY to NUMBER.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot coerce ARRAY to NUMBER.", r.array(0L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 34
  Original: r.expr([['a', 1], ['b', 2]]).coerce_to('object')
  Java: r.expr(r.array(r.array("a", 1L), r.array("b", 2L))).coerceTo("object")
  ExpectedOriginal: '{''a'':1,''b'':2}'
  ExpectedType: Map
  ExpectedJava: r.hashMap("a", 1L).with("b", 2L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 37
  Original: r.expr([[]]).coerce_to('object')
  Java: r.expr(r.array(r.array())).coerceTo("object")
  ExpectedOriginal: err('ReqlQueryLogicError', 'Expected array of size 2, but got size 0.')
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Expected array of size 2, but got size 0.")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 40
  Original: r.expr([['1',2,3]]).coerce_to('object')
  Java: r.expr(r.array(r.array("1", 2L, 3L))).coerceTo("object")
  ExpectedOriginal: err('ReqlQueryLogicError', 'Expected array of size 2, but got size 3.')
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Expected array of size 2, but got size 3.")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 44
  Original: r.expr([r.expr(1)])
  Java: r.expr(r.array(r.expr(1L)))
  ExpectedOriginal: '[1]'
  ExpectedType: List
  ExpectedJava: r.array(1L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 47
  Original: r.expr([1,3,4]).insert_at(1, 2)
  Java: r.expr(r.array(1L, 3L, 4L)).insertAt(1L, 2L)
  ExpectedOriginal: '[1,2,3,4]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L, 3L, 4L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 49
  Original: r.expr([2,3]).insert_at(0, 1)
  Java: r.expr(r.array(2L, 3L)).insertAt(0L, 1L)
  ExpectedOriginal: '[1,2,3]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L, 3L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 51
  Original: r.expr([1,2,3]).insert_at(-1, 4)
  Java: r.expr(r.array(1L, 2L, 3L)).insertAt(-1L, 4L)
  ExpectedOriginal: '[1,2,3,4]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L, 3L, 4L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 53
  Original: r.expr([1,2,3]).insert_at(3, 4)
  Java: r.expr(r.array(1L, 2L, 3L)).insertAt(3L, 4L)
  ExpectedOriginal: '[1,2,3,4]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L, 3L, 4L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 55
  Original: 'r.expr(3).do(lambda x: r.expr([1,2,3]).insert_at(x, 4))'
  Java: r.expr(3L).do_(x -> r.expr(r.array(1L, 2L, 3L)).insertAt(x, 4L))
  ExpectedOriginal: AnythingIsFine
  ExpectedType: Object
  ExpectedJava: AnythingIsFine
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 59
  Original: r.expr([1,2,3]).insert_at(4, 5)
  Java: r.expr(r.array(1L, 2L, 3L)).insertAt(4L, 5L)
  ExpectedOriginal: 'err(''ReqlNonExistenceError'', ''Index `4` out of bounds for array of size: `3`.'', [0])'
  ExpectedType: Err
  ExpectedJava: 'err("ReqlNonExistenceError", "Index `4` out of bounds for array of size: `3`.", r.array(0L))'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 61
  Original: r.expr([1,2,3]).insert_at(-5, -1)
  Java: r.expr(r.array(1L, 2L, 3L)).insertAt(-5L, -1L)
  ExpectedOriginal: 'err(''ReqlNonExistenceError'', ''Index out of bounds: -5'', [0])'
  ExpectedType: Err
  ExpectedJava: 'err("ReqlNonExistenceError", "Index out of bounds: -5", r.array(0L))'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 63
  Original: r.expr([1,2,3]).insert_at(1.5, 1)
  Java: r.expr(r.array(1L, 2L, 3L)).insertAt(1.5, 1L)
  ExpectedOriginal: 'err(''ReqlQueryLogicError'', ''Number not an integer: 1.5'', [0])'
  ExpectedType: Err
  ExpectedJava: 'err("ReqlQueryLogicError", "Number not an integer: 1.5", r.array(0L))'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 65
  Original: r.expr([1,2,3]).insert_at(null, 1)
  Java: r.expr(r.array(1L, 2L, 3L)).insertAt((ReqlExpr) null, 1L)
  ExpectedOriginal: err('ReqlNonExistenceError', 'Expected type NUMBER but found NULL.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", r.array(0L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 68
  Original: r.expr([1,4]).splice_at(1, [2,3])
  Java: r.expr(r.array(1L, 4L)).spliceAt(1L, r.array(2L, 3L))
  ExpectedOriginal: '[1,2,3,4]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L, 3L, 4L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 70
  Original: r.expr([3,4]).splice_at(0, [1,2])
  Java: r.expr(r.array(3L, 4L)).spliceAt(0L, r.array(1L, 2L))
  ExpectedOriginal: '[1,2,3,4]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L, 3L, 4L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 72
  Original: r.expr([1,2]).splice_at(2, [3,4])
  Java: r.expr(r.array(1L, 2L)).spliceAt(2L, r.array(3L, 4L))
  ExpectedOriginal: '[1,2,3,4]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L, 3L, 4L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 74
  Original: r.expr([1,2]).splice_at(-1, [3,4])
  Java: r.expr(r.array(1L, 2L)).spliceAt(-1L, r.array(3L, 4L))
  ExpectedOriginal: '[1,2,3,4]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L, 3L, 4L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 76
  Original: 'r.expr(2).do(lambda x: r.expr([1,2]).splice_at(x, [3,4]))'
  Java: r.expr(2L).do_(x -> r.expr(r.array(1L, 2L)).spliceAt(x, r.array(3L, 4L)))
  ExpectedOriginal: AnythingIsFine
  ExpectedType: Object
  ExpectedJava: AnythingIsFine
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 80
  Original: r.expr([1,2]).splice_at(3, [3,4])
  Java: r.expr(r.array(1L, 2L)).spliceAt(3L, r.array(3L, 4L))
  ExpectedOriginal: 'err(''ReqlNonExistenceError'', ''Index `3` out of bounds for array of size: `2`.'', [0])'
  ExpectedType: Err
  ExpectedJava: 'err("ReqlNonExistenceError", "Index `3` out of bounds for array of size: `2`.", r.array(0L))'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 82
  Original: r.expr([1,2]).splice_at(-4, [3,4])
  Java: r.expr(r.array(1L, 2L)).spliceAt(-4L, r.array(3L, 4L))
  ExpectedOriginal: 'err(''ReqlNonExistenceError'', ''Index out of bounds: -4'', [0])'
  ExpectedType: Err
  ExpectedJava: 'err("ReqlNonExistenceError", "Index out of bounds: -4", r.array(0L))'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 84
  Original: r.expr([1,2,3]).splice_at(1.5, [1])
  Java: r.expr(r.array(1L, 2L, 3L)).spliceAt(1.5, r.array(1L))
  ExpectedOriginal: 'err(''ReqlQueryLogicError'', ''Number not an integer: 1.5'', [0])'
  ExpectedType: Err
  ExpectedJava: 'err("ReqlQueryLogicError", "Number not an integer: 1.5", r.array(0L))'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 86
  Original: r.expr([1,2,3]).splice_at(null, [1])
  Java: r.expr(r.array(1L, 2L, 3L)).spliceAt((ReqlExpr) null, r.array(1L))
  ExpectedOriginal: err('ReqlNonExistenceError', 'Expected type NUMBER but found NULL.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", r.array(0L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 88
  Original: r.expr([1,4]).splice_at(1, 2)
  Java: r.expr(r.array(1L, 4L)).spliceAt(1L, 2L)
  ExpectedOriginal: err('ReqlQueryLogicError', 'Expected type ARRAY but found NUMBER.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Expected type ARRAY but found NUMBER.", r.array(0L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 91
  Original: r.expr([1,2,3,4]).delete_at(0)
  Java: r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(0L)
  ExpectedOriginal: '[2,3,4]'
  ExpectedType: List
  ExpectedJava: r.array(2L, 3L, 4L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 93
  Original: 'r.expr(0).do(lambda x: r.expr([1,2,3,4]).delete_at(x))'
  Java: r.expr(0L).do_(x -> r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(x))
  ExpectedOriginal: AnythingIsFine
  ExpectedType: Object
  ExpectedJava: AnythingIsFine
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 97
  Original: r.expr([1,2,3,4]).delete_at(-1)
  Java: r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(-1L)
  ExpectedOriginal: '[1,2,3]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L, 3L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 99
  Original: r.expr([1,2,3,4]).delete_at(1,3)
  Java: r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(1L, 3L)
  ExpectedOriginal: '[1,4]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 4L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 101
  Original: r.expr([1,2,3,4]).delete_at(4,4)
  Java: r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(4L, 4L)
  ExpectedOriginal: '[1,2,3,4]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L, 3L, 4L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 103
  Original: r.expr([]).delete_at(0,0)
  Java: r.expr(r.array()).deleteAt(0L, 0L)
  ExpectedOriginal: '[]'
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 105
  Original: r.expr([1,2,3,4]).delete_at(1,-1)
  Java: r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(1L, -1L)
  ExpectedOriginal: '[1,4]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 4L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 107
  Original: r.expr([1,2,3,4]).delete_at(4)
  Java: r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(4L)
  ExpectedOriginal: 'err(''ReqlNonExistenceError'', ''Index `4` out of bounds for array of size: `4`.'', [0])'
  ExpectedType: Err
  ExpectedJava: 'err("ReqlNonExistenceError", "Index `4` out of bounds for array of size: `4`.", r.array(0L))'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 109
  Original: r.expr([1,2,3,4]).delete_at(-5)
  Java: r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(-5L)
  ExpectedOriginal: 'err(''ReqlNonExistenceError'', ''Index out of bounds: -5'', [0])'
  ExpectedType: Err
  ExpectedJava: 'err("ReqlNonExistenceError", "Index out of bounds: -5", r.array(0L))'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 111
  Original: r.expr([1,2,3]).delete_at(1.5)
  Java: r.expr(r.array(1L, 2L, 3L)).deleteAt(1.5)
  ExpectedOriginal: 'err(''ReqlQueryLogicError'', ''Number not an integer: 1.5'', [0])'
  ExpectedType: Err
  ExpectedJava: 'err("ReqlQueryLogicError", "Number not an integer: 1.5", r.array(0L))'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 113
  Original: r.expr([1,2,3]).delete_at(null)
  Java: r.expr(r.array(1L, 2L, 3L)).deleteAt((ReqlExpr) null)
  ExpectedOriginal: err('ReqlNonExistenceError', 'Expected type NUMBER but found NULL.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", r.array(0L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 116
  Original: r.expr([0,2,3]).change_at(0, 1)
  Java: r.expr(r.array(0L, 2L, 3L)).changeAt(0L, 1L)
  ExpectedOriginal: '[1,2,3]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L, 3L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 118
  Original: 'r.expr(1).do(lambda x: r.expr([0,2,3]).change_at(0,x))'
  Java: r.expr(1L).do_(x -> r.expr(r.array(0L, 2L, 3L)).changeAt(0L, x))
  ExpectedOriginal: AnythingIsFine
  ExpectedType: Object
  ExpectedJava: AnythingIsFine
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 122
  Original: r.expr([1,0,3]).change_at(1, 2)
  Java: r.expr(r.array(1L, 0L, 3L)).changeAt(1L, 2L)
  ExpectedOriginal: '[1,2,3]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L, 3L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 124
  Original: r.expr([1,2,0]).change_at(2, 3)
  Java: r.expr(r.array(1L, 2L, 0L)).changeAt(2L, 3L)
  ExpectedOriginal: '[1,2,3]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L, 3L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 126
  Original: r.expr([1,2,3]).change_at(3, 4)
  Java: r.expr(r.array(1L, 2L, 3L)).changeAt(3L, 4L)
  ExpectedOriginal: 'err(''ReqlNonExistenceError'', ''Index `3` out of bounds for array of size: `3`.'', [0])'
  ExpectedType: Err
  ExpectedJava: 'err("ReqlNonExistenceError", "Index `3` out of bounds for array of size: `3`.", r.array(0L))'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 128
  Original: r.expr([1,2,3,4]).change_at(-5, 1)
  Java: r.expr(r.array(1L, 2L, 3L, 4L)).changeAt(-5L, 1L)
  ExpectedOriginal: 'err(''ReqlNonExistenceError'', ''Index out of bounds: -5'', [0])'
  ExpectedType: Err
  ExpectedJava: 'err("ReqlNonExistenceError", "Index out of bounds: -5", r.array(0L))'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 130
  Original: r.expr([1,2,3]).change_at(1.5, 1)
  Java: r.expr(r.array(1L, 2L, 3L)).changeAt(1.5, 1L)
  ExpectedOriginal: 'err(''ReqlQueryLogicError'', ''Number not an integer: 1.5'', [0])'
  ExpectedType: Err
  ExpectedJava: 'err("ReqlQueryLogicError", "Number not an integer: 1.5", r.array(0L))'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/array.yaml
  LineNum: 132
  Original: r.expr([1,2,3]).change_at(null, 1)
  Java: r.expr(r.array(1L, 2L, 3L)).changeAt((ReqlExpr) null, 1L)
  ExpectedOriginal: err('ReqlNonExistenceError', 'Expected type NUMBER but found NULL.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", r.array(0L))
  RunOpts: []
