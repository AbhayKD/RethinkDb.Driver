ModuleName: GeoOperations
DefsAndTests:
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 1
  Original: ("89011.26253835332")
  ExpectedType: String
  ExpectedJava: '"89011.26253835332"'
  Obtained: r.distance(r.point(-122, 37), r.point(-123, 37)).coerceTo("STRING")
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 2
  Original: ("110968.30443995494")
  ExpectedType: String
  ExpectedJava: '"110968.30443995494"'
  Obtained: r.distance(r.point(-122, 37), r.point(-122, 36)).coerceTo("STRING")
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 3
  Original: True
  ExpectedType: Boolean
  ExpectedJava: true
  Obtained: r.distance(r.point(-122, 37), r.point(-122, 36)).eq(r.distance(r.point(-122, 36), r.point(-122, 37)))
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 4
  Original: ("89011.26253835332")
  ExpectedType: String
  ExpectedJava: '"89011.26253835332"'
  Obtained: r.point(-122, 37).distance(r.point(-123, 37)).coerceTo("STRING")
- TestType: JavaDef
  TestFile: geo/operations.yaml
  TestNum: 5
  Original: someDist = r.distance(r.point(-122, 37), r.point(-123, 37))
  Java: Distance someDist = (Distance) r.distance(r.point(-122, 37), r.point(-123, 37));
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 5
  Original: True
  ExpectedType: Boolean
  ExpectedJava: true
  Obtained: someDist.eq(r.distance(r.point(-122, 37), r.point(-123, 37)).optArg("unit", "m"))
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 6
  Original: True
  ExpectedType: Boolean
  ExpectedJava: true
  Obtained: someDist.mul(r.div(1.0, 1000.0)).eq(r.distance(r.point(-122, 37), r.point(-123, 37)).optArg("unit", "km"))
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 7
  Original: True
  ExpectedType: Boolean
  ExpectedJava: true
  Obtained: someDist.mul(r.div(1.0, 1609.344)).eq(r.distance(r.point(-122, 37), r.point(-123, 37)).optArg("unit", "mi"))
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 8
  Original: True
  ExpectedType: Boolean
  ExpectedJava: true
  Obtained: someDist.mul(r.div(1.0, 0.3048)).eq(r.distance(r.point(-122, 37), r.point(-123, 37)).optArg("unit", "ft"))
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 9
  Original: True
  ExpectedType: Boolean
  ExpectedJava: true
  Obtained: someDist.mul(r.div(1.0, 1852.0)).eq(r.distance(r.point(-122, 37), r.point(-123, 37)).optArg("unit", "nm"))
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 10
  Original: True
  ExpectedType: Boolean
  ExpectedJava: true
  Obtained: someDist.eq(r.distance(r.point(-122, 37), r.point(-123, 37)).optArg("geo_system", "WGS84"))
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 11
  Original: True
  ExpectedType: Boolean
  ExpectedJava: true
  Obtained: someDist.div(10).eq(r.distance(r.point(-122, 37), r.point(-123, 37)).optArg("geo_system", new MapObject().with("a", 637813.7).with("f", r.div(1.0, 298.257223563))))
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 12
  Original: ("0.01393875509649327")
  ExpectedType: String
  ExpectedJava: '"0.01393875509649327"'
  Obtained: r.distance(r.point(-122, 37), r.point(-123, 37)).optArg("geo_system", "unit_sphere").coerceTo("STRING")
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 13
  Original: ("0")
  ExpectedType: String
  ExpectedJava: '"0"'
  Obtained: r.distance(r.point(0, 0), r.point(0, 0)).coerceTo("STRING")
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 14
  Original: ("40007862.917250897")
  ExpectedType: String
  ExpectedJava: '"40007862.917250897"'
  Obtained: r.distance(r.point(0, 0), r.point(180, 0)).mul(2).coerceTo("STRING")
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 15
  Original: ("40007862.917250897")
  ExpectedType: String
  ExpectedJava: '"40007862.917250897"'
  Obtained: r.distance(r.point(0, -90), r.point(0, 90)).mul(2).coerceTo("STRING")
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 16
  Original: ("0")
  ExpectedType: String
  ExpectedJava: '"0"'
  Obtained: r.distance(r.point(0, 0), r.line(Arrays.asList(0, 0), Arrays.asList(0, 1))).coerceTo("STRING")
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 17
  Original: ("0")
  ExpectedType: String
  ExpectedJava: '"0"'
  Obtained: r.distance(r.line(Arrays.asList(0, 0), Arrays.asList(0, 1)), r.point(0, 0)).coerceTo("STRING")
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 18
  Original: True
  ExpectedType: Boolean
  ExpectedJava: true
  Obtained: r.distance(r.point(0, 0), r.line(Arrays.asList(0.1, 0), Arrays.asList(1, 0))).eq(r.distance(r.point(0, 0), r.point(0.1, 0)))
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 19
  Original: ("492471.4990055255")
  ExpectedType: String
  ExpectedJava: '"492471.4990055255"'
  Obtained: r.distance(r.point(0, 0), r.line(Arrays.asList(5, -1), Arrays.asList(4, 2))).coerceTo("STRING")
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 20
  Original: ("492471.4990055255")
  ExpectedType: String
  ExpectedJava: '"492471.4990055255"'
  Obtained: r.distance(r.point(0, 0), r.polygon(Arrays.asList(5, -1), Arrays.asList(4, 2), Arrays.asList(10, 10))).coerceTo("STRING")
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 21
  Original: ("0")
  ExpectedType: String
  ExpectedJava: '"0"'
  Obtained: r.distance(r.point(0, 0), r.polygon(Arrays.asList(0, -1), Arrays.asList(0, 1), Arrays.asList(10, 10))).coerceTo("STRING")
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 22
  Original: ("0")
  ExpectedType: String
  ExpectedJava: '"0"'
  Obtained: r.distance(r.point(0.5, 0.5), r.polygon(Arrays.asList(0, -1), Arrays.asList(0, 1), Arrays.asList(10, 10))).coerceTo("STRING")
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 23
  Original: False
  ExpectedType: Boolean
  ExpectedJava: false
  Obtained: r.circle(Arrays.asList(0, 0), 1).optArg("fill", false).eq(r.circle(Arrays.asList(0, 0), 1).optArg("fill", true))
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 24
  Original: True
  ExpectedType: Boolean
  ExpectedJava: true
  Obtained: r.circle(Arrays.asList(0, 0), 1).optArg("fill", false).fill().eq(r.circle(Arrays.asList(0, 0), 1).optArg("fill", true))
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 25
  Original: ({'$reql_type$':'GEOMETRY', 'coordinates':[[[0,0],[1,0],[1,1],[0,1],[0,0]],[[0.1,0.1],[0.9,0.1],[0.9,0.9],[0.1,0.9],[0.1,0.1]]], 'type':'Polygon'})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("$reql_type$", "GEOMETRY").with("coordinates", Arrays.asList(Arrays.asList(Arrays.asList(0, 0), Arrays.asList(1, 0), Arrays.asList(1, 1), Arrays.asList(0, 1), Arrays.asList(0, 0)), Arrays.asList(Arrays.asList(0.1, 0.1), Arrays.asList(0.9, 0.1), Arrays.asList(0.9, 0.9), Arrays.asList(0.1, 0.9), Arrays.asList(0.1, 0.1)))).with("type", "Polygon")
  Obtained: r.polygon(Arrays.asList(0, 0), Arrays.asList(1, 0), Arrays.asList(1, 1), Arrays.asList(0, 1)).polygonSub(r.polygon(Arrays.asList(0.1, 0.1), Arrays.asList(0.9, 0.1), Arrays.asList(0.9, 0.9), Arrays.asList(0.1, 0.9)))
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 26
  Original: err('ReqlQueryLogicError', 'The second argument to `polygon_sub` is not contained in the first one.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "The second argument to `polygon_sub` is not contained in the first one.", Arrays.asList(0))
  Obtained: r.polygon(Arrays.asList(0, 0), Arrays.asList(1, 0), Arrays.asList(1, 1), Arrays.asList(0, 1)).polygonSub(r.polygon(Arrays.asList(0.1, 0.9), Arrays.asList(0.9, 0.0), Arrays.asList(0.9, 0.9), Arrays.asList(0.1, 0.9)))
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 27
  Original: err('ReqlQueryLogicError', 'The second argument to `polygon_sub` is not contained in the first one.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "The second argument to `polygon_sub` is not contained in the first one.", Arrays.asList(0))
  Obtained: r.polygon(Arrays.asList(0, 0), Arrays.asList(1, 0), Arrays.asList(1, 1), Arrays.asList(0, 1)).polygonSub(r.polygon(Arrays.asList(0, 0), Arrays.asList(2, 0), Arrays.asList(2, 2), Arrays.asList(0, 2)))
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 28
  Original: err('ReqlQueryLogicError', 'The second argument to `polygon_sub` is not contained in the first one.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "The second argument to `polygon_sub` is not contained in the first one.", Arrays.asList(0))
  Obtained: r.polygon(Arrays.asList(0, 0), Arrays.asList(1, 0), Arrays.asList(1, 1), Arrays.asList(0, 1)).polygonSub(r.polygon(Arrays.asList(0, -2), Arrays.asList(1, -2), Arrays.asList(-1, 1), Arrays.asList(0, -1)))
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 29
  Original: err('ReqlQueryLogicError', 'The second argument to `polygon_sub` is not contained in the first one.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "The second argument to `polygon_sub` is not contained in the first one.", Arrays.asList(0))
  Obtained: r.polygon(Arrays.asList(0, 0), Arrays.asList(1, 0), Arrays.asList(1, 1), Arrays.asList(0, 1)).polygonSub(r.polygon(Arrays.asList(0, -1), Arrays.asList(1, -1), Arrays.asList(1, 0), Arrays.asList(0, 0)))
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 30
  Original: err('ReqlQueryLogicError', 'The second argument to `polygon_sub` is not contained in the first one.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "The second argument to `polygon_sub` is not contained in the first one.", Arrays.asList(0))
  Obtained: r.polygon(Arrays.asList(0, 0), Arrays.asList(1, 0), Arrays.asList(1, 1), Arrays.asList(0, 1)).polygonSub(r.polygon(Arrays.asList(0.1, -1), Arrays.asList(0.9, -1), Arrays.asList(0.9, 0.5), Arrays.asList(0.1, 0.5)))
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 31
  Original: ({'$reql_type$':'GEOMETRY', 'coordinates':[[[0,0],[1,0],[1,1],[0,1],[0,0]],[[0,0],[0.1,0.9],[0.9,0.9],[0.9,0.1],[0,0]]], 'type':'Polygon'})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("$reql_type$", "GEOMETRY").with("coordinates", Arrays.asList(Arrays.asList(Arrays.asList(0, 0), Arrays.asList(1, 0), Arrays.asList(1, 1), Arrays.asList(0, 1), Arrays.asList(0, 0)), Arrays.asList(Arrays.asList(0, 0), Arrays.asList(0.1, 0.9), Arrays.asList(0.9, 0.9), Arrays.asList(0.9, 0.1), Arrays.asList(0, 0)))).with("type", "Polygon")
  Obtained: r.polygon(Arrays.asList(0, 0), Arrays.asList(1, 0), Arrays.asList(1, 1), Arrays.asList(0, 1)).polygonSub(r.polygon(Arrays.asList(0, 0), Arrays.asList(0.1, 0.9), Arrays.asList(0.9, 0.9), Arrays.asList(0.9, 0.1)))
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 32
  Original: err('ReqlQueryLogicError', 'Expected a Polygon with only an outer shell.  This one has holes.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Expected a Polygon with only an outer shell.  This one has holes.", Arrays.asList(0))
  Obtained: r.polygon(Arrays.asList(0, 0), Arrays.asList(1, 0), Arrays.asList(1, 1), Arrays.asList(0, 1)).polygonSub(r.polygon(Arrays.asList(0, 0), Arrays.asList(0.1, 0.9), Arrays.asList(0.9, 0.9), Arrays.asList(0.9, 0.1)).polygonSub(r.polygon(Arrays.asList(0.2, 0.2), Arrays.asList(0.5, 0.8), Arrays.asList(0.8, 0.2))))
- TestType: JavaQuery
  TestFile: geo/operations.yaml
  TestNum: 33
  Original: err('ReqlQueryLogicError', 'Expected a Polygon but found a LineString.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Expected a Polygon but found a LineString.", Arrays.asList())
  Obtained: r.polygon(Arrays.asList(0, 0), Arrays.asList(1, 0), Arrays.asList(1, 1), Arrays.asList(0, 1)).polygonSub(r.line(Arrays.asList(0, 0), Arrays.asList(0.9, 0.1), Arrays.asList(0.9, 0.9), Arrays.asList(0.1, 0.9)))
