ModuleName: Match
TableVarNames:
- tbl
DefsAndTests:
- TestType: JavaQuery
  TestFile: match.yaml
  TestNum: 1
  Original: r.expr("abcdefg").match("a(b.e)|b(c.e)")
  Java: r.expr("abcdefg").match("a(b.e)|b(c.e)")
  ExpectedOriginal: ({'str':'bcde','groups':[null,{'start':2,'str':'cde','end':5}],'start':1,'end':5})
  ExpectedType: Map
  ExpectedJava: r.hashMap("str", "bcde").with("groups", r.array(null, r.hashMap("start", 2L).with("str", "cde").with("end", 5L))).with("start", 1L).with("end", 5L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: match.yaml
  TestNum: 2
  Original: r.expr("abcdefg").match("a(b.e)|B(c.e)")
  Java: r.expr("abcdefg").match("a(b.e)|B(c.e)")
  ExpectedOriginal: (null)
  ExpectedType: Object
  ExpectedJava: null
  RunOpts: []
- TestType: JavaQuery
  TestFile: match.yaml
  TestNum: 3
  Original: r.expr("abcdefg").match("(?i)a(b.e)|B(c.e)")
  Java: r.expr("abcdefg").match("(?i)a(b.e)|B(c.e)")
  ExpectedOriginal: ({'str':'bcde','groups':[null,{'start':2,'str':'cde','end':5}],'start':1,'end':5})
  ExpectedType: Map
  ExpectedJava: r.hashMap("str", "bcde").with("groups", r.array(null, r.hashMap("start", 2L).with("str", "cde").with("end", 5L))).with("start", 1L).with("end", 5L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: match.yaml
  TestNum: 4
  Original: r.expr(["aba", "aca", "ada", "aea"]).filter(lambda row:row.match("a(.)a")['groups'][0]['str'].match("[cd]"))
  Java: r.expr(r.array("aba", "aca", "ada", "aea")).filter(row -> row.match("a(.)a").g("groups").nth(0L).g("str").match("[cd]"))
  ExpectedOriginal: (["aca", "ada"])
  ExpectedType: List
  ExpectedJava: r.array("aca", "ada")
  RunOpts: []
- TestType: JavaQuery
  TestFile: match.yaml
  TestNum: 5
  Original: tbl.insert([{'id':0,'a':'abc'},{'id':1,'a':'ab'},{'id':2,'a':'bc'}])
  Java: tbl.insert(r.array(r.hashMap("id", 0L).with("a", "abc"), r.hashMap("id", 1L).with("a", "ab"), r.hashMap("id", 2L).with("a", "bc")))
  ExpectedOriginal: ({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':3})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 3L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: match.yaml
  TestNum: 6
  Original: tbl.filter(lambda row:row['a'].match('b')).order_by('id')
  Java: tbl.filter(row -> row.g("a").match("b")).orderBy("id")
  ExpectedOriginal: ([{'id':0,'a':'abc'},{'id':1,'a':'ab'},{'id':2,'a':'bc'}])
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("id", 0L).with("a", "abc"), r.hashMap("id", 1L).with("a", "ab"), r.hashMap("id", 2L).with("a", "bc"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: match.yaml
  TestNum: 7
  Original: tbl.filter(lambda row:row['a'].match('ab')).order_by('id')
  Java: tbl.filter(row -> row.g("a").match("ab")).orderBy("id")
  ExpectedOriginal: ([{'id':0,'a':'abc'},{'id':1,'a':'ab'}])
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("id", 0L).with("a", "abc"), r.hashMap("id", 1L).with("a", "ab"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: match.yaml
  TestNum: 8
  Original: tbl.filter(lambda row:row['a'].match('ab$')).order_by('id')
  Java: tbl.filter(row -> row.g("a").match("ab$")).orderBy("id")
  ExpectedOriginal: ([{'id':1,'a':'ab'}])
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("id", 1L).with("a", "ab"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: match.yaml
  TestNum: 9
  Original: tbl.filter(lambda row:row['a'].match('^b$')).order_by('id')
  Java: tbl.filter(row -> row.g("a").match("^b$")).orderBy("id")
  ExpectedOriginal: ([])
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: match.yaml
  TestNum: 10
  Original: r.expr("").match("ab\\9")
  Java: r.expr("").match("ab\\9")
  ExpectedOriginal: >
    err("ReqlQueryLogicError", "Error in regexp `ab\\9` (portion `\\9`): invalid escape sequence: \\9", [])
  ExpectedType: Err
  ExpectedJava: 'err("ReqlQueryLogicError", "Error in regexp `ab\\9` (portion `\\9`): invalid escape sequence: \\9", r.array())'
  RunOpts: []
