ModuleName: Match
TableVarNames:
- tbl
DefsAndTests:
- TestType: JavaQuery
  TestFile: match.yaml
  TestNum: 1
  Original: ({'str':'bcde','groups':[null,{'start':2,'str':'cde','end':5}],'start':1,'end':5})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("str", "bcde").with("groups", Arrays.asList(null, new MapObject().with("start", 2).with("str", "cde").with("end", 5))).with("start", 1).with("end", 5)
  Obtained: r.expr("abcdefg").match("a(b.e)|b(c.e)")
- TestType: JavaQuery
  TestFile: match.yaml
  TestNum: 2
  Original: (null)
  ExpectedType: Object
  ExpectedJava: null
  Obtained: r.expr("abcdefg").match("a(b.e)|B(c.e)")
- TestType: JavaQuery
  TestFile: match.yaml
  TestNum: 3
  Original: ({'str':'bcde','groups':[null,{'start':2,'str':'cde','end':5}],'start':1,'end':5})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("str", "bcde").with("groups", Arrays.asList(null, new MapObject().with("start", 2).with("str", "cde").with("end", 5))).with("start", 1).with("end", 5)
  Obtained: r.expr("abcdefg").match("(?i)a(b.e)|B(c.e)")
- TestType: JavaQuery
  TestFile: match.yaml
  TestNum: 4
  Original: (["aca", "ada"])
  ExpectedType: List
  ExpectedJava: Arrays.asList("aca", "ada")
  Obtained: r.expr(Arrays.asList("aba", "aca", "ada", "aea")).filter(row -> row.match("a(.)a").bracket("groups").bracket(0).bracket("str").match("[cd]"))
- TestType: JavaQuery
  TestFile: match.yaml
  TestNum: 5
  Original: ({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':3})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("deleted", 0.0).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 3)
  Obtained: tbl.insert(Arrays.asList(new MapObject().with("id", 0).with("a", "abc"), new MapObject().with("id", 1).with("a", "ab"), new MapObject().with("id", 2).with("a", "bc")))
- TestType: JavaQuery
  TestFile: match.yaml
  TestNum: 6
  Original: ([{'id':0,'a':'abc'},{'id':1,'a':'ab'},{'id':2,'a':'bc'}])
  ExpectedType: List
  ExpectedJava: Arrays.asList(new MapObject().with("id", 0).with("a", "abc"), new MapObject().with("id", 1).with("a", "ab"), new MapObject().with("id", 2).with("a", "bc"))
  Obtained: tbl.filter(row -> row.bracket("a").match("b")).orderBy("id")
- TestType: JavaQuery
  TestFile: match.yaml
  TestNum: 7
  Original: ([{'id':0,'a':'abc'},{'id':1,'a':'ab'}])
  ExpectedType: List
  ExpectedJava: Arrays.asList(new MapObject().with("id", 0).with("a", "abc"), new MapObject().with("id", 1).with("a", "ab"))
  Obtained: tbl.filter(row -> row.bracket("a").match("ab")).orderBy("id")
- TestType: JavaQuery
  TestFile: match.yaml
  TestNum: 8
  Original: ([{'id':1,'a':'ab'}])
  ExpectedType: List
  ExpectedJava: Arrays.asList(new MapObject().with("id", 1).with("a", "ab"))
  Obtained: tbl.filter(row -> row.bracket("a").match("ab$")).orderBy("id")
- TestType: JavaQuery
  TestFile: match.yaml
  TestNum: 9
  Original: ([])
  ExpectedType: List
  ExpectedJava: Arrays.asList()
  Obtained: tbl.filter(row -> row.bracket("a").match("^b$")).orderBy("id")
- TestType: JavaQuery
  TestFile: match.yaml
  TestNum: 10
  Original: >
    err("ReqlQueryLogicError", "Error in regexp `ab\\9` (portion `\\9`): invalid escape sequence: \\9", [])
  ExpectedType: Err
  ExpectedJava: 'err("ReqlQueryLogicError", "Error in regexp `ab\\9` (portion `\\9`): invalid escape sequence: \\9", Arrays.asList())'
  Obtained: r.expr("").match("ab\\9")
