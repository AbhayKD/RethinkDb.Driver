ModuleName: MutationAtomicGetSet
Description: Tests replacement of selections
TableVarNames:
- tbl
DefsAndTests:
- TestType: JavaQuery
  TestFile: mutation/atomic_get_set.yaml
  LineNum: 7
  Original: tbl.insert({'id':0}, return_vals=True).pluck('changes', 'first_error')
  Java: tbl.insert(r.hashMap("id", 0L)).optArg("return_vals", true).pluck("changes", "first_error")
  ExpectedOriginal: err("ReqlQueryLogicError", "Error:"+" encountered obsolete optarg `return_vals`.  Use `return_changes` instead.", [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Error:" + " encountered obsolete optarg `return_vals`.  Use `return_changes` instead.", r.array(0L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/atomic_get_set.yaml
  LineNum: 12
  Original: tbl.insert({'id':0}, return_changes=True).pluck('changes', 'first_error')
  Java: tbl.insert(r.hashMap("id", 0L)).optArg("return_changes", true).pluck("changes", "first_error")
  ExpectedOriginal: ({'changes':[{'old_val':null,'new_val':{'id':0}}]})
  ExpectedType: Map
  ExpectedJava: r.hashMap("changes", r.array(r.hashMap("old_val", null).with("new_val", r.hashMap("id", 0L))))
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/atomic_get_set.yaml
  LineNum: 16
  Original: tbl.insert({'id':0}, return_changes=True).pluck('changes', 'first_error')
  Java: tbl.insert(r.hashMap("id", 0L)).optArg("return_changes", true).pluck("changes", "first_error")
  ExpectedOriginal: ({'changes':[], 'first_error':"Duplicate primary key `id`:\n{\n\t\"id\":\t0\n}\n{\n\t\"id\":\t0\n}"})
  ExpectedType: Map
  ExpectedJava: r.hashMap("changes", r.array()).with("first_error", "Duplicate primary key `id`:\n{\n\t\"id\":\t0\n}\n{\n\t\"id\":\t0\n}")
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/atomic_get_set.yaml
  LineNum: 20
  Original: tbl.insert({'id':0}, return_changes='always').pluck('changes', 'first_error')
  Java: tbl.insert(r.hashMap("id", 0L)).optArg("return_changes", "always").pluck("changes", "first_error")
  ExpectedOriginal: ({'first_error':"Duplicate primary key `id`:\n{\n\t\"id\":\t0\n}\n{\n\t\"id\":\t0\n}",'changes':[{'old_val':{'id':0},'new_val':{'id':0}}]})
  ExpectedType: Map
  ExpectedJava: r.hashMap("first_error", "Duplicate primary key `id`:\n{\n\t\"id\":\t0\n}\n{\n\t\"id\":\t0\n}").with("changes", r.array(r.hashMap("old_val", r.hashMap("id", 0L)).with("new_val", r.hashMap("id", 0L))))
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/atomic_get_set.yaml
  LineNum: 24
  Original: tbl.insert([{'id':1}], return_changes=True)
  Java: tbl.insert(r.array(r.hashMap("id", 1L))).optArg("return_changes", true)
  ExpectedOriginal: ({'changes':[{'new_val':{'id':1},'old_val':null}], 'errors':0, 'deleted':0, 'unchanged':0, 'skipped':0, 'replaced':0, 'inserted':1})
  ExpectedType: Map
  ExpectedJava: r.hashMap("changes", r.array(r.hashMap("new_val", r.hashMap("id", 1L)).with("old_val", null))).with("errors", 0L).with("deleted", 0L).with("unchanged", 0L).with("skipped", 0L).with("replaced", 0L).with("inserted", 1L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/atomic_get_set.yaml
  LineNum: 28
  Original: tbl.insert([{'id':0}], return_changes=True).pluck('changes', 'first_error')
  Java: tbl.insert(r.array(r.hashMap("id", 0L))).optArg("return_changes", true).pluck("changes", "first_error")
  ExpectedOriginal: ({'changes':[],'first_error':"Duplicate primary key `id`:\n{\n\t\"id\":\t0\n}\n{\n\t\"id\":\t0\n}"})
  ExpectedType: Map
  ExpectedJava: r.hashMap("changes", r.array()).with("first_error", "Duplicate primary key `id`:\n{\n\t\"id\":\t0\n}\n{\n\t\"id\":\t0\n}")
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/atomic_get_set.yaml
  LineNum: 33
  Original: tbl.get(0).update({'x':1}, return_changes=True).pluck('changes', 'first_error')
  Java: tbl.get(0L).update(r.hashMap("x", 1L)).optArg("return_changes", true).pluck("changes", "first_error")
  ExpectedOriginal: ({'changes':[{'old_val':{'id':0},'new_val':{'id':0,'x':1}}]})
  ExpectedType: Map
  ExpectedJava: r.hashMap("changes", r.array(r.hashMap("old_val", r.hashMap("id", 0L)).with("new_val", r.hashMap("id", 0L).with("x", 1L))))
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/atomic_get_set.yaml
  LineNum: 37
  Original: tbl.get(0).update({'x':r.error("a")}, return_changes=True).pluck('changes', 'first_error')
  Java: tbl.get(0L).update(r.hashMap("x", r.error("a"))).optArg("return_changes", true).pluck("changes", "first_error")
  ExpectedOriginal: ({'changes':[],'first_error':'a'})
  ExpectedType: Map
  ExpectedJava: r.hashMap("changes", r.array()).with("first_error", "a")
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/atomic_get_set.yaml
  LineNum: 41
  Original: tbl.update({'x':3}, return_changes=True).pluck('changes', 'first_error').do(lambda d:d.merge({'changes':d['changes'].order_by(lambda a:a['old_val']['id'])}))
  Java: tbl.update(r.hashMap("x", 3L)).optArg("return_changes", true).pluck("changes", "first_error").do_(d -> d.merge(r.hashMap("changes", d.bracket("changes").orderBy(a -> a.bracket("old_val").bracket("id")))))
  ExpectedOriginal: ({'changes':[{'old_val':{'id':0, 'x':1},'new_val':{'id':0, 'x':3}}, {'old_val':{'id':1},'new_val':{'id':1, 'x':3}}]})
  ExpectedType: Map
  ExpectedJava: r.hashMap("changes", r.array(r.hashMap("old_val", r.hashMap("id", 0L).with("x", 1L)).with("new_val", r.hashMap("id", 0L).with("x", 3L)), r.hashMap("old_val", r.hashMap("id", 1L)).with("new_val", r.hashMap("id", 1L).with("x", 3L))))
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/atomic_get_set.yaml
  LineNum: 46
  Original: tbl.get(0).replace({'id':0,'x':2}, return_changes=True).pluck('changes', 'first_error')
  Java: tbl.get(0L).replace(r.hashMap("id", 0L).with("x", 2L)).optArg("return_changes", true).pluck("changes", "first_error")
  ExpectedOriginal: ({'changes':[{'old_val':{'id':0,'x':3},'new_val':{'id':0,'x':2}}]})
  ExpectedType: Map
  ExpectedJava: r.hashMap("changes", r.array(r.hashMap("old_val", r.hashMap("id", 0L).with("x", 3L)).with("new_val", r.hashMap("id", 0L).with("x", 2L))))
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/atomic_get_set.yaml
  LineNum: 50
  Original: tbl.get(0).replace(lambda y:{'x':r.error('a')}, return_changes=True).pluck('changes', 'first_error')
  Java: tbl.get(0L).replace(y -> r.hashMap("x", r.error("a"))).optArg("return_changes", true).pluck("changes", "first_error")
  ExpectedOriginal: ({'changes':[],'first_error':'a'})
  ExpectedType: Map
  ExpectedJava: r.hashMap("changes", r.array()).with("first_error", "a")
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/atomic_get_set.yaml
  LineNum: 54
  Original: tbl.get(0).replace(lambda y:{'x':r.error('a')}, return_changes='always').pluck('changes', 'first_error')
  Java: tbl.get(0L).replace(y -> r.hashMap("x", r.error("a"))).optArg("return_changes", "always").pluck("changes", "first_error")
  ExpectedOriginal: ({'first_error':'a','changes':[{'old_val':{'id':0,'x':2},'new_val':{'id':0,'x':2}}]})
  ExpectedType: Map
  ExpectedJava: r.hashMap("first_error", "a").with("changes", r.array(r.hashMap("old_val", r.hashMap("id", 0L).with("x", 2L)).with("new_val", r.hashMap("id", 0L).with("x", 2L))))
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/atomic_get_set.yaml
  LineNum: 58
  Original: tbl.replace(lambda y:y.without('x'), return_changes=True).pluck('changes', 'first_error').do(lambda d:d.merge({'changes':d['changes'].order_by(lambda a:a['old_val']['id'])}))
  Java: tbl.replace(y -> y.without("x")).optArg("return_changes", true).pluck("changes", "first_error").do_(d -> d.merge(r.hashMap("changes", d.bracket("changes").orderBy(a -> a.bracket("old_val").bracket("id")))))
  ExpectedOriginal: ({'changes':[{'new_val':{'id':0},'old_val':{'id':0, 'x':2}}, {'new_val':{'id':1},'old_val':{'id':1,'x':3}}]})
  ExpectedType: Map
  ExpectedJava: r.hashMap("changes", r.array(r.hashMap("new_val", r.hashMap("id", 0L)).with("old_val", r.hashMap("id", 0L).with("x", 2L)), r.hashMap("new_val", r.hashMap("id", 1L)).with("old_val", r.hashMap("id", 1L).with("x", 3L))))
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/atomic_get_set.yaml
  LineNum: 62
  Original: tbl.replace({'x':1}, return_changes='always').pluck('changes', 'first_error').do(lambda d:d.merge({'changes':d['changes'].order_by(lambda a:a['old_val']['id'])}))
  Java: tbl.replace(r.hashMap("x", 1L)).optArg("return_changes", "always").pluck("changes", "first_error").do_(d -> d.merge(r.hashMap("changes", d.bracket("changes").orderBy(a -> a.bracket("old_val").bracket("id")))))
  ExpectedOriginal: ({'first_error':"Inserted object must have primary key `id`:\n{\n\t\"x\":\t1\n}", 'changes':[{'new_val':{'id':0},'old_val':{'id':0}}, {'new_val':{'id':1},'old_val':{'id':1}}]})
  ExpectedType: Map
  ExpectedJava: r.hashMap("first_error", "Inserted object must have primary key `id`:\n{\n\t\"x\":\t1\n}").with("changes", r.array(r.hashMap("new_val", r.hashMap("id", 0L)).with("old_val", r.hashMap("id", 0L)), r.hashMap("new_val", r.hashMap("id", 1L)).with("old_val", r.hashMap("id", 1L))))
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/atomic_get_set.yaml
  LineNum: 86
  Original: tbl.get(0).delete(return_changes=True).pluck('changes', 'first_error')
  Java: tbl.get(0L).delete().optArg("return_changes", true).pluck("changes", "first_error")
  ExpectedOriginal: ({'changes':[{'old_val':{'id':0},'new_val':null}]})
  ExpectedType: Map
  ExpectedJava: r.hashMap("changes", r.array(r.hashMap("old_val", r.hashMap("id", 0L)).with("new_val", null)))
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/atomic_get_set.yaml
  LineNum: 90
  Original: tbl.delete(return_changes=True)
  Java: tbl.delete().optArg("return_changes", true)
  ExpectedOriginal: ({'deleted':1,'errors':0,'inserted':0,'replaced':0,'skipped':0,'unchanged':0,'changes':[{'new_val':null, 'old_val':{'id':1}}]})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 1L).with("errors", 0L).with("inserted", 0L).with("replaced", 0L).with("skipped", 0L).with("unchanged", 0L).with("changes", r.array(r.hashMap("new_val", null).with("old_val", r.hashMap("id", 1L))))
  RunOpts: []
