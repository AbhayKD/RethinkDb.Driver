ModuleName: TransformArray
DefsAndTests:
- TestType: JavaDef
  TestFile: transform/array.yaml
  TestNum: 1
  Original: arr = r.expr([1, 2, 3])
  Java: MakeArray arr = (MakeArray) r.expr(Arrays.asList(1, 2, 3));
  RunOpts: []
- TestType: JavaDef
  TestFile: transform/array.yaml
  TestNum: 2
  Original: dupe_arr = r.expr([1, 1, 2, 3])
  Java: MakeArray dupe_arr = (MakeArray) r.expr(Arrays.asList(1, 1, 2, 3));
  RunOpts: []
- TestType: JavaDef
  TestFile: transform/array.yaml
  TestNum: 3
  Original: objArr = r.expr([{'a':1, 'b':'a'}, {'a':2, 'b':'b'}, {'a':3, 'b':'c'}])
  Java: MakeArray objArr = (MakeArray) r.expr(Arrays.asList(new MapObject().with("a", 1).with("b", "a"), new MapObject().with("a", 2).with("b", "b"), new MapObject().with("a", 3).with("b", "c")));
  RunOpts: []
- TestType: JavaDef
  TestFile: transform/array.yaml
  TestNum: 4
  Original: nestedObjArr = r.expr([{'a':1, 'b':{'c':1}}, {'a':2, 'b':{'c':2}}, {'a':3, 'b':{'c':3}}])
  Java: MakeArray nestedObjArr = (MakeArray) r.expr(Arrays.asList(new MapObject().with("a", 1).with("b", new MapObject().with("c", 1)), new MapObject().with("a", 2).with("b", new MapObject().with("c", 2)), new MapObject().with("a", 3).with("b", new MapObject().with("c", 3))));
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 5
  Original: arr.append(4)
  Java: arr.append(4)
  ExpectedOriginal: '[1, 2, 3, 4]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(1, 2, 3, 4)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 6
  Original: arr.append('a')
  Java: arr.append("a")
  ExpectedOriginal: '[1, 2, 3, ''a'']'
  ExpectedType: List
  ExpectedJava: Arrays.asList(1, 2, 3, "a")
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 7
  Original: arr.prepend(0)
  Java: arr.prepend(0)
  ExpectedOriginal: '[0, 1, 2, 3]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(0, 1, 2, 3)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 8
  Original: arr.prepend('a')
  Java: arr.prepend("a")
  ExpectedOriginal: '[''a'', 1, 2, 3]'
  ExpectedType: List
  ExpectedJava: Arrays.asList("a", 1, 2, 3)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 9
  Original: arr.difference([1,2,2])
  Java: arr.difference(Arrays.asList(1, 2, 2))
  ExpectedOriginal: '[3]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(3)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 10
  Original: arr.difference([])
  Java: arr.difference(Arrays.asList())
  ExpectedOriginal: '[1, 2, 3]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(1, 2, 3)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 11
  Original: arr.difference(["foo", "bar"])
  Java: arr.difference(Arrays.asList("foo", "bar"))
  ExpectedOriginal: '[1, 2, 3]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(1, 2, 3)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 12
  Original: dupe_arr.set_insert(1)
  Java: dupe_arr.setInsert(1)
  ExpectedOriginal: '[1, 2, 3]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(1, 2, 3)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 13
  Original: dupe_arr.set_insert(4)
  Java: dupe_arr.setInsert(4)
  ExpectedOriginal: '[1, 2, 3, 4]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(1, 2, 3, 4)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 14
  Original: dupe_arr.set_union([3,4,5,5])
  Java: dupe_arr.setUnion(Arrays.asList(3, 4, 5, 5))
  ExpectedOriginal: '[1, 2, 3, 4, 5]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(1, 2, 3, 4, 5)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 15
  Original: dupe_arr.set_union([5,6])
  Java: dupe_arr.setUnion(Arrays.asList(5, 6))
  ExpectedOriginal: '[1, 2, 3, 5, 6]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(1, 2, 3, 5, 6)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 16
  Original: dupe_arr.set_intersection([1,1,1,2,2])
  Java: dupe_arr.setIntersection(Arrays.asList(1, 1, 1, 2, 2))
  ExpectedOriginal: '[1, 2]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(1, 2)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 17
  Original: dupe_arr.set_intersection(["foo"])
  Java: dupe_arr.setIntersection(Arrays.asList("foo"))
  ExpectedOriginal: '[]'
  ExpectedType: List
  ExpectedJava: Arrays.asList()
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 18
  Original: dupe_arr.set_difference([1,1,1,10])
  Java: dupe_arr.setDifference(Arrays.asList(1, 1, 1, 10))
  ExpectedOriginal: '[2, 3]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(2, 3)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 19
  Original: dupe_arr.set_difference([2])
  Java: dupe_arr.setDifference(Arrays.asList(2))
  ExpectedOriginal: '[1, 3]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(1, 3)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 20
  Original: arr[1:3]
  Java: arr.slice(1, 3)
  ExpectedOriginal: '[2, 3]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(2, 3)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 20
  Original: arr.slice(1, 3)
  Java: arr.slice(1, 3)
  ExpectedOriginal: '[2, 3]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(2, 3)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 20
  Original: arr.slice(1, 2, right_bound='closed')
  Java: arr.slice(1, 2).optArg("right_bound", "closed")
  ExpectedOriginal: '[2, 3]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(2, 3)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 21
  Original: arr[:2]
  Java: arr.slice(0, 2)
  ExpectedOriginal: '[1, 2]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(1, 2)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 21
  Original: arr.slice(0,2)
  Java: arr.slice(0, 2)
  ExpectedOriginal: '[1, 2]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(1, 2)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 22
  Original: arr[1:]
  Java: arr.slice(1, -1)
  ExpectedOriginal: '[2, 3]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(2, 3)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 22
  Original: arr.slice(1)
  Java: arr.slice(1)
  ExpectedOriginal: '[2, 3]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(2, 3)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 23
  Original: arr.slice(-2, -1)
  Java: arr.slice(-2, -1)
  ExpectedOriginal: '[2]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(2)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 24
  Original: arr.skip(1)
  Java: arr.skip(1)
  ExpectedOriginal: '[2, 3]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(2, 3)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 25
  Original: arr.skip(2)
  Java: arr.skip(2)
  ExpectedOriginal: '[3]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(3)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 26
  Original: arr.skip(12)
  Java: arr.skip(12)
  ExpectedOriginal: '[]'
  ExpectedType: List
  ExpectedJava: Arrays.asList()
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 27
  Original: arr.limit(2)
  Java: arr.limit(2)
  ExpectedOriginal: '[1, 2]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(1, 2)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 28
  Original: arr.limit(0)
  Java: arr.limit(0)
  ExpectedOriginal: '[]'
  ExpectedType: List
  ExpectedJava: Arrays.asList()
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 29
  Original: arr.limit(12)
  Java: arr.limit(12)
  ExpectedOriginal: '[1, 2, 3]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(1, 2, 3)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 30
  Original: objArr.pluck('a', 'b')
  Java: objArr.pluck("a", "b")
  ExpectedOriginal: '[{''b'': ''a'', ''a'': 1}, {''b'': ''b'', ''a'': 2}, {''b'': ''c'', ''a'': 3}]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(new MapObject().with("b", "a").with("a", 1), new MapObject().with("b", "b").with("a", 2), new MapObject().with("b", "c").with("a", 3))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 31
  Original: objArr.pluck('a')
  Java: objArr.pluck("a")
  ExpectedOriginal: '[{''a'': 1}, {''a'': 2}, {''a'': 3}]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(new MapObject().with("a", 1), new MapObject().with("a", 2), new MapObject().with("a", 3))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 32
  Original: objArr.pluck()
  Java: objArr.pluck()
  ExpectedOriginal: '[{}, {}, {}]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(new MapObject(), new MapObject(), new MapObject())
  RunOpts: []
- TestType: JavaDef
  TestFile: transform/array.yaml
  TestNum: 33
  Original: wftst = objArr.union(objArr.pluck('a')).union(objArr.pluck('b')).union([{'a':null}])
  Java: Union wftst = (Union) objArr.union(objArr.pluck("a")).union(objArr.pluck("b")).union(Arrays.asList(new MapObject().with("a", null)));
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 34
  Original: wftst.with_fields('a')
  Java: wftst.withFields("a")
  ExpectedOriginal: ([{'a':1},{'a':2},{'a':3},{'a':1},{'a':2},{'a':3}])
  ExpectedType: List
  ExpectedJava: Arrays.asList(new MapObject().with("a", 1), new MapObject().with("a", 2), new MapObject().with("a", 3), new MapObject().with("a", 1), new MapObject().with("a", 2), new MapObject().with("a", 3))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 35
  Original: wftst.with_fields('b')
  Java: wftst.withFields("b")
  ExpectedOriginal: ([{'b':'a'},{'b':'b'},{'b':'c'},{'b':'a'},{'b':'b'},{'b':'c'}])
  ExpectedType: List
  ExpectedJava: Arrays.asList(new MapObject().with("b", "a"), new MapObject().with("b", "b"), new MapObject().with("b", "c"), new MapObject().with("b", "a"), new MapObject().with("b", "b"), new MapObject().with("b", "c"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 36
  Original: wftst.with_fields('a', 'b')
  Java: wftst.withFields("a", "b")
  ExpectedOriginal: ([{'a':1,'b':'a'},{'a':2,'b':'b'},{'a':3,'b':'c'}])
  ExpectedType: List
  ExpectedJava: Arrays.asList(new MapObject().with("a", 1).with("b", "a"), new MapObject().with("a", 2).with("b", "b"), new MapObject().with("a", 3).with("b", "c"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 37
  Original: wftst.with_fields()
  Java: wftst.withFields()
  ExpectedOriginal: '[{}, {}, {}, {}, {}, {}, {}, {}, {}, {}]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(new MapObject(), new MapObject(), new MapObject(), new MapObject(), new MapObject(), new MapObject(), new MapObject(), new MapObject(), new MapObject(), new MapObject())
  RunOpts: []
- TestType: JavaDef
  TestFile: transform/array.yaml
  TestNum: 38
  Original: wftst2 = nestedObjArr.union(objArr.pluck({'b':'missing'})).union(nestedObjArr.pluck({'b':'c'}))
  Java: Union wftst2 = (Union) nestedObjArr.union(objArr.pluck(new MapObject().with("b", "missing"))).union(nestedObjArr.pluck(new MapObject().with("b", "c")));
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 39
  Original: wftst2.with_fields({'b':'c'})
  Java: wftst2.withFields(new MapObject().with("b", "c"))
  ExpectedOriginal: ([{'b':{'c':1}}, {'b':{'c':2}}, {'b':{'c':3}}, {'b':{'c':1}}, {'b':{'c':2}}, {'b':{'c':3}}])
  ExpectedType: List
  ExpectedJava: Arrays.asList(new MapObject().with("b", new MapObject().with("c", 1)), new MapObject().with("b", new MapObject().with("c", 2)), new MapObject().with("b", new MapObject().with("c", 3)), new MapObject().with("b", new MapObject().with("c", 1)), new MapObject().with("b", new MapObject().with("c", 2)), new MapObject().with("b", new MapObject().with("c", 3)))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 40
  Original: wftst.with_fields(1)
  Java: wftst.withFields(1)
  ExpectedOriginal: err("ReqlQueryLogicError", "Invalid path argument `1`.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Invalid path argument `1`.", Arrays.asList())
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 41
  Original: r.expr(1).with_fields()
  Java: r.expr(1).withFields()
  ExpectedOriginal: err("ReqlQueryLogicError", "Cannot perform has_fields on a non-object non-sequence `1`.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot perform has_fields on a non-object non-sequence `1`.", Arrays.asList())
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 42
  Original: objArr.without('a', 'b')
  Java: objArr.without("a", "b")
  ExpectedOriginal: '[{}, {}, {}]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(new MapObject(), new MapObject(), new MapObject())
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 43
  Original: objArr.without('a')
  Java: objArr.without("a")
  ExpectedOriginal: '[{''b'': ''a''}, {''b'': ''b''}, {''b'': ''c''}]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(new MapObject().with("b", "a"), new MapObject().with("b", "b"), new MapObject().with("b", "c"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 44
  Original: objArr.without()
  Java: objArr.without()
  ExpectedOriginal: '[{''b'': ''a'', ''a'': 1}, {''b'': ''b'', ''a'': 2}, {''b'': ''c'', ''a'': 3}]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(new MapObject().with("b", "a").with("a", 1), new MapObject().with("b", "b").with("a", 2), new MapObject().with("b", "c").with("a", 3))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 45
  Original: 'arr.map(lambda v: v + 1)'
  Java: arr.map(v -> r.add(v, 1))
  ExpectedOriginal: '[2, 3, 4]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(2, 3, 4)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 46
  Original: 'arr.reduce(lambda a, b: a + b)'
  Java: arr.reduce((a, b) -> r.add(a, b))
  ExpectedOriginal: 6
  ExpectedType: Integer
  ExpectedJava: 6
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 47
  Original: arr.reduce(lambda a, b:a + b)
  Java: arr.reduce((a, b) -> r.add(a, b))
  ExpectedOriginal: 6
  ExpectedType: Integer
  ExpectedJava: 6
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 48
  Original: 'arr.union(arr).reduce(lambda a, b: a + b)'
  Java: arr.union(arr).reduce((a, b) -> r.add(a, b))
  ExpectedOriginal: 12
  ExpectedType: Integer
  ExpectedJava: 12
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 49
  Original: arr.union(arr).reduce(lambda a, b:a + b)
  Java: arr.union(arr).reduce((a, b) -> r.add(a, b))
  ExpectedOriginal: 12
  ExpectedType: Integer
  ExpectedJava: 12
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 50
  Original: 'objArr.filter(lambda row: row[''b''] == ''b'')'
  Java: objArr.filter(row -> r.eq(row.bracket("b"), "b"))
  ExpectedOriginal: '[{''b'': ''b'', ''a'': 2}]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(new MapObject().with("b", "b").with("a", 2))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 51
  Original: 'arr.concat_map(lambda v: [1,2])'
  Java: arr.concatMap(v -> Arrays.asList(1, 2))
  ExpectedOriginal: '[1, 2, 1, 2, 1, 2]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(1, 2, 1, 2, 1, 2)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 52
  Original: 'arr.concat_map(lambda v: [{''v'':v}, {''v2'':v + 1}])'
  Java: arr.concatMap(v -> Arrays.asList(new MapObject().with("v", v), new MapObject().with("v2", r.add(v, 1))))
  ExpectedOriginal: '[{''v'': 1}, {''v2'': 2}, {''v'': 2}, {''v2'': 3}, {''v'': 3}, {''v2'': 4}]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(new MapObject().with("v", 1), new MapObject().with("v2", 2), new MapObject().with("v", 2), new MapObject().with("v2", 3), new MapObject().with("v", 3), new MapObject().with("v2", 4))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 53
  Original: objArr.order_by('b')
  Java: objArr.orderBy("b")
  ExpectedOriginal: '[{''b'': ''a'', ''a'': 1}, {''b'': ''b'', ''a'': 2}, {''b'': ''c'', ''a'': 3}]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(new MapObject().with("b", "a").with("a", 1), new MapObject().with("b", "b").with("a", 2), new MapObject().with("b", "c").with("a", 3))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 54
  Original: objArr.order_by(r.desc('b'))
  Java: objArr.orderBy(r.desc("b"))
  ExpectedOriginal: '[{''b'': ''c'', ''a'': 3}, {''b'': ''b'', ''a'': 2}, {''b'': ''a'', ''a'': 1}]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(new MapObject().with("b", "c").with("a", 3), new MapObject().with("b", "b").with("a", 2), new MapObject().with("b", "a").with("a", 1))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 55
  Original: r.expr([{'-a':1},{'-a':2}]).order_by('-a')
  Java: r.expr(Arrays.asList(new MapObject().with("-a", 1), new MapObject().with("-a", 2))).orderBy("-a")
  ExpectedOriginal: '[{''-a'': 1}, {''-a'': 2}]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(new MapObject().with("-a", 1), new MapObject().with("-a", 2))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 56
  Original: r.expr([1,1,2,2,2,3,4]).distinct()
  Java: r.expr(Arrays.asList(1, 1, 2, 2, 2, 3, 4)).distinct()
  ExpectedOriginal: '[1, 2, 3, 4]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(1, 2, 3, 4)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 57
  Original: objArr.count()
  Java: objArr.count()
  ExpectedOriginal: 3
  ExpectedType: Integer
  ExpectedJava: 3
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 58
  Original: arr.union(objArr)
  Java: arr.union(objArr)
  ExpectedOriginal: '[1, 2, 3, {''b'': ''a'', ''a'': 1}, {''b'': ''b'', ''a'': 2}, {''b'': ''c'', ''a'': 3}]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(1, 2, 3, new MapObject().with("b", "a").with("a", 1), new MapObject().with("b", "b").with("a", 2), new MapObject().with("b", "c").with("a", 3))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 59
  Original: arr[1]
  Java: arr.bracket(1)
  ExpectedOriginal: 2
  ExpectedType: Integer
  ExpectedJava: 2
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 59
  Original: arr.nth(1)
  Java: arr.nth(1)
  ExpectedOriginal: 2
  ExpectedType: Integer
  ExpectedJava: 2
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 60
  Original: arr[0]
  Java: arr.bracket(0)
  ExpectedOriginal: 1
  ExpectedType: Integer
  ExpectedJava: 1
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 61
  Original: r.expr([]).is_empty()
  Java: r.expr(Arrays.asList()).isEmpty()
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 62
  Original: arr.is_empty()
  Java: arr.isEmpty()
  ExpectedOriginal: False
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 63
  Original: arr.contains(2)
  Java: arr.contains(2)
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 64
  Original: arr.contains(2, 3)
  Java: arr.contains(2, 3)
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 65
  Original: arr.contains(4)
  Java: arr.contains(4)
  ExpectedOriginal: False
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 66
  Original: arr.contains(2, 4)
  Java: arr.contains(2, 4)
  ExpectedOriginal: False
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 67
  Original: arr.contains(2, 2)
  Java: arr.contains(2, 2)
  ExpectedOriginal: False
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 68
  Original: arr.union(arr).contains(2, 2)
  Java: arr.union(arr).contains(2, 2)
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 69
  Original: arr.contains(lambda x:x == 2)
  Java: arr.contains(x -> r.eq(x, 2))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 70
  Original: arr.contains(lambda x:x == 2, lambda x:x==3)
  Java: arr.contains(x -> r.eq(x, 2), x -> r.eq(x, 3))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 71
  Original: arr.contains(lambda x:x == 4)
  Java: arr.contains(x -> r.eq(x, 4))
  ExpectedOriginal: False
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 72
  Original: arr.contains(lambda x:x == 2, lambda x:x==4)
  Java: arr.contains(x -> r.eq(x, 2), x -> r.eq(x, 4))
  ExpectedOriginal: False
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 73
  Original: arr.contains(lambda x:x == 2, lambda x:x==2)
  Java: arr.contains(x -> r.eq(x, 2), x -> r.eq(x, 2))
  ExpectedOriginal: False
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 74
  Original: arr.union(arr).contains(lambda x:x == 2, lambda x:x==2)
  Java: arr.union(arr).contains(x -> r.eq(x, 2), x -> r.eq(x, 2))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 75
  Original: r.expr([{'a':1},{'b':2},{'a':3,'c':4}])['a']
  Java: r.expr(Arrays.asList(new MapObject().with("a", 1), new MapObject().with("b", 2), new MapObject().with("a", 3).with("c", 4))).bracket("a")
  ExpectedOriginal: '[1, 3]'
  ExpectedType: List
  ExpectedJava: Arrays.asList(1, 3)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  TestNum: 76
  Original: r.expr([{'a':1},'a',{'b':2},{'a':3,'c':4}])['a']
  Java: r.expr(Arrays.asList(new MapObject().with("a", 1), "a", new MapObject().with("b", 2), new MapObject().with("a", 3).with("c", 4))).bracket("a")
  ExpectedOriginal: err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\"a\"`.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\"a\"`.", Arrays.asList())
  RunOpts: []
