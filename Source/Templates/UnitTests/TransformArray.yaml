ModuleName: TransformArray
DefsAndTests:
- TestType: JavaDef
  TestFile: transform/array.yaml
  LineNum: 5
  Original: arr = r.expr([1, 2, 3])
  VarName: arr
  VarType: MakeArray
  Value: (MakeArray) (r.expr(r.array(1L, 2L, 3L)))
  Java: MakeArray arr = (MakeArray) (r.expr(r.array(1L, 2L, 3L)));
  RunOpts: []
- TestType: JavaDef
  TestFile: transform/array.yaml
  LineNum: 6
  Original: dupe_arr = r.expr([1, 1, 2, 3])
  VarName: dupe_arr
  VarType: MakeArray
  Value: (MakeArray) (r.expr(r.array(1L, 1L, 2L, 3L)))
  Java: MakeArray dupe_arr = (MakeArray) (r.expr(r.array(1L, 1L, 2L, 3L)));
  RunOpts: []
- TestType: JavaDef
  TestFile: transform/array.yaml
  LineNum: 7
  Original: objArr = r.expr([{'a':1, 'b':'a'}, {'a':2, 'b':'b'}, {'a':3, 'b':'c'}])
  VarName: objArr
  VarType: MakeArray
  Value: (MakeArray) (r.expr(r.array(r.hashMap("a", 1L).with("b", "a"), r.hashMap("a", 2L).with("b", "b"), r.hashMap("a", 3L).with("b", "c"))))
  Java: MakeArray objArr = (MakeArray) (r.expr(r.array(r.hashMap("a", 1L).with("b", "a"), r.hashMap("a", 2L).with("b", "b"), r.hashMap("a", 3L).with("b", "c"))));
  RunOpts: []
- TestType: JavaDef
  TestFile: transform/array.yaml
  LineNum: 8
  Original: nestedObjArr = r.expr([{'a':1, 'b':{'c':1}}, {'a':2, 'b':{'c':2}}, {'a':3, 'b':{'c':3}}])
  VarName: nestedObjArr
  VarType: MakeArray
  Value: (MakeArray) (r.expr(r.array(r.hashMap("a", 1L).with("b", r.hashMap("c", 1L)), r.hashMap("a", 2L).with("b", r.hashMap("c", 2L)), r.hashMap("a", 3L).with("b", r.hashMap("c", 3L)))))
  Java: MakeArray nestedObjArr = (MakeArray) (r.expr(r.array(r.hashMap("a", 1L).with("b", r.hashMap("c", 1L)), r.hashMap("a", 2L).with("b", r.hashMap("c", 2L)), r.hashMap("a", 3L).with("b", r.hashMap("c", 3L)))));
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 12
  Original: arr.append(4)
  Java: arr.append(4L)
  ExpectedOriginal: '[1,2,3,4]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L, 3L, 4L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 14
  Original: arr.append('a')
  Java: arr.append("a")
  ExpectedOriginal: '[1,2,3,''a'']'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L, 3L, "a")
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 19
  Original: arr.prepend(0)
  Java: arr.prepend(0L)
  ExpectedOriginal: '[0,1,2,3]'
  ExpectedType: List
  ExpectedJava: r.array(0L, 1L, 2L, 3L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 21
  Original: arr.prepend('a')
  Java: arr.prepend("a")
  ExpectedOriginal: '[''a'',1,2,3]'
  ExpectedType: List
  ExpectedJava: r.array("a", 1L, 2L, 3L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 26
  Original: arr.difference([1,2,2])
  Java: arr.difference(r.array(1L, 2L, 2L))
  ExpectedOriginal: '[3]'
  ExpectedType: List
  ExpectedJava: r.array(3L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 28
  Original: arr.difference([])
  Java: arr.difference(r.array())
  ExpectedOriginal: '[1,2,3]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L, 3L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 30
  Original: arr.difference(["foo", "bar"])
  Java: arr.difference(r.array("foo", "bar"))
  ExpectedOriginal: '[1,2,3]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L, 3L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 34
  Original: dupe_arr.set_insert(1)
  Java: dupe_arr.setInsert(1L)
  ExpectedOriginal: '[1,2,3]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L, 3L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 36
  Original: dupe_arr.set_insert(4)
  Java: dupe_arr.setInsert(4L)
  ExpectedOriginal: '[1,2,3,4]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L, 3L, 4L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 39
  Original: dupe_arr.set_union([3,4,5,5])
  Java: dupe_arr.setUnion(r.array(3L, 4L, 5L, 5L))
  ExpectedOriginal: '[1,2,3,4,5]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L, 3L, 4L, 5L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 41
  Original: dupe_arr.set_union([5,6])
  Java: dupe_arr.setUnion(r.array(5L, 6L))
  ExpectedOriginal: '[1,2,3,5,6]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L, 3L, 5L, 6L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 44
  Original: dupe_arr.set_intersection([1,1,1,2,2])
  Java: dupe_arr.setIntersection(r.array(1L, 1L, 1L, 2L, 2L))
  ExpectedOriginal: '[1,2]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 46
  Original: dupe_arr.set_intersection(["foo"])
  Java: dupe_arr.setIntersection(r.array("foo"))
  ExpectedOriginal: '[]'
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 49
  Original: dupe_arr.set_difference([1,1,1,10])
  Java: dupe_arr.setDifference(r.array(1L, 1L, 1L, 10L))
  ExpectedOriginal: '[2,3]'
  ExpectedType: List
  ExpectedJava: r.array(2L, 3L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 51
  Original: dupe_arr.set_difference([2])
  Java: dupe_arr.setDifference(r.array(2L))
  ExpectedOriginal: '[1,3]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 3L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 58
  Original: arr[1:3]
  Java: arr.slice(1, 3)
  ExpectedOriginal: '[2, 3]'
  ExpectedType: List
  ExpectedJava: r.array(2L, 3L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 59
  Original: arr.slice(1, 3)
  Java: arr.slice(1L, 3L)
  ExpectedOriginal: '[2, 3]'
  ExpectedType: List
  ExpectedJava: r.array(2L, 3L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 60
  Original: arr.slice(1, 2, right_bound='closed')
  Java: arr.slice(1L, 2L).optArg("right_bound", "closed")
  ExpectedOriginal: '[2, 3]'
  ExpectedType: List
  ExpectedJava: r.array(2L, 3L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 72
  Original: arr[:2]
  Java: arr.slice(0, 2)
  ExpectedOriginal: '[1,2]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 73
  Original: arr.slice(0,2)
  Java: arr.slice(0L, 2L)
  ExpectedOriginal: '[1,2]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 81
  Original: arr[1:]
  Java: arr.slice(1, -1).optArg("right_bound", "closed")
  ExpectedOriginal: '[2,3]'
  ExpectedType: List
  ExpectedJava: r.array(2L, 3L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 82
  Original: arr.slice(1)
  Java: arr.slice(1L)
  ExpectedOriginal: '[2,3]'
  ExpectedType: List
  ExpectedJava: r.array(2L, 3L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 89
  Original: arr.slice(-2, -1)
  Java: arr.slice(-2L, -1L)
  ExpectedOriginal: '[2]'
  ExpectedType: List
  ExpectedJava: r.array(2L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 95
  Original: arr.skip(1)
  Java: arr.skip(1L)
  ExpectedOriginal: '[2,3]'
  ExpectedType: List
  ExpectedJava: r.array(2L, 3L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 97
  Original: arr.skip(2)
  Java: arr.skip(2L)
  ExpectedOriginal: '[3]'
  ExpectedType: List
  ExpectedJava: r.array(3L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 99
  Original: arr.skip(12)
  Java: arr.skip(12L)
  ExpectedOriginal: '[]'
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 104
  Original: arr.limit(2)
  Java: arr.limit(2L)
  ExpectedOriginal: '[1,2]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 106
  Original: arr.limit(0)
  Java: arr.limit(0L)
  ExpectedOriginal: '[]'
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 108
  Original: arr.limit(12)
  Java: arr.limit(12L)
  ExpectedOriginal: '[1,2,3]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L, 3L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 113
  Original: objArr.pluck('a', 'b')
  Java: objArr.pluck("a", "b")
  ExpectedOriginal: '[{''a'':1, ''b'':''a''}, {''a'':2, ''b'':''b''}, {''a'':3, ''b'':''c''}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", 1L).with("b", "a"), r.hashMap("a", 2L).with("b", "b"), r.hashMap("a", 3L).with("b", "c"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 115
  Original: objArr.pluck('a')
  Java: objArr.pluck("a")
  ExpectedOriginal: '[{''a'':1}, {''a'':2}, {''a'':3}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", 1L), r.hashMap("a", 2L), r.hashMap("a", 3L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 117
  Original: objArr.pluck()
  Java: objArr.pluck()
  ExpectedOriginal: '[{}, {}, {}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap(), r.hashMap(), r.hashMap())
  RunOpts: []
- TestType: JavaDef
  TestFile: transform/array.yaml
  LineNum: 121
  Original: wftst = objArr.union(objArr.pluck('a')).union(objArr.pluck('b')).union([{'a':null}])
  VarName: wftst
  VarType: Union
  Value: (Union) (objArr.union(objArr.pluck("a")).union(objArr.pluck("b")).union(r.array(r.hashMap("a", null))))
  Java: Union wftst = (Union) (objArr.union(objArr.pluck("a")).union(objArr.pluck("b")).union(r.array(r.hashMap("a", null))));
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 122
  Original: wftst.with_fields('a')
  Java: wftst.withFields("a")
  ExpectedOriginal: ([{'a':1},{'a':2},{'a':3},{'a':1},{'a':2},{'a':3}])
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", 1L), r.hashMap("a", 2L), r.hashMap("a", 3L), r.hashMap("a", 1L), r.hashMap("a", 2L), r.hashMap("a", 3L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 124
  Original: wftst.with_fields('b')
  Java: wftst.withFields("b")
  ExpectedOriginal: ([{'b':'a'},{'b':'b'},{'b':'c'},{'b':'a'},{'b':'b'},{'b':'c'}])
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("b", "a"), r.hashMap("b", "b"), r.hashMap("b", "c"), r.hashMap("b", "a"), r.hashMap("b", "b"), r.hashMap("b", "c"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 126
  Original: wftst.with_fields('a', 'b')
  Java: wftst.withFields("a", "b")
  ExpectedOriginal: ([{'a':1,'b':'a'},{'a':2,'b':'b'},{'a':3,'b':'c'}])
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", 1L).with("b", "a"), r.hashMap("a", 2L).with("b", "b"), r.hashMap("a", 3L).with("b", "c"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 128
  Original: wftst.with_fields()
  Java: wftst.withFields()
  ExpectedOriginal: '[{}, {}, {}, {}, {}, {}, {}, {}, {}, {}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap(), r.hashMap(), r.hashMap(), r.hashMap(), r.hashMap(), r.hashMap(), r.hashMap(), r.hashMap(), r.hashMap(), r.hashMap())
  RunOpts: []
- TestType: JavaDef
  TestFile: transform/array.yaml
  LineNum: 131
  Original: wftst2 = nestedObjArr.union(objArr.pluck({'b':'missing'})).union(nestedObjArr.pluck({'b':'c'}))
  VarName: wftst2
  VarType: Union
  Value: (Union) (nestedObjArr.union(objArr.pluck(r.hashMap("b", "missing"))).union(nestedObjArr.pluck(r.hashMap("b", "c"))))
  Java: Union wftst2 = (Union) (nestedObjArr.union(objArr.pluck(r.hashMap("b", "missing"))).union(nestedObjArr.pluck(r.hashMap("b", "c"))));
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 132
  Original: wftst2.with_fields({'b':'c'})
  Java: wftst2.withFields(r.hashMap("b", "c"))
  ExpectedOriginal: ([{'b':{'c':1}}, {'b':{'c':2}}, {'b':{'c':3}}, {'b':{'c':1}}, {'b':{'c':2}}, {'b':{'c':3}}])
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("b", r.hashMap("c", 1L)), r.hashMap("b", r.hashMap("c", 2L)), r.hashMap("b", r.hashMap("c", 3L)), r.hashMap("b", r.hashMap("c", 1L)), r.hashMap("b", r.hashMap("c", 2L)), r.hashMap("b", r.hashMap("c", 3L)))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 135
  Original: wftst.with_fields(1)
  Java: wftst.withFields(1L)
  ExpectedOriginal: err("ReqlQueryLogicError", "Invalid path argument `1`.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Invalid path argument `1`.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 137
  Original: r.expr(1).with_fields()
  Java: r.expr(1L).withFields()
  ExpectedOriginal: err("ReqlQueryLogicError", "Cannot perform has_fields on a non-object non-sequence `1`.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot perform has_fields on a non-object non-sequence `1`.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 142
  Original: objArr.without('a', 'b')
  Java: objArr.without("a", "b")
  ExpectedOriginal: '[{}, {}, {}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap(), r.hashMap(), r.hashMap())
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 144
  Original: objArr.without('a')
  Java: objArr.without("a")
  ExpectedOriginal: '[{''b'':''a''}, {''b'':''b''}, {''b'':''c''}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("b", "a"), r.hashMap("b", "b"), r.hashMap("b", "c"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 146
  Original: objArr.without()
  Java: objArr.without()
  ExpectedOriginal: '[{''a'':1, ''b'':''a''}, {''a'':2, ''b'':''b''}, {''a'':3, ''b'':''c''}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", 1L).with("b", "a"), r.hashMap("a", 2L).with("b", "b"), r.hashMap("a", 3L).with("b", "c"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 151
  Original: 'arr.map(lambda v: v + 1)'
  Java: arr.map(v -> r.add(v, 1L))
  ExpectedOriginal: '[2,3,4]'
  ExpectedType: List
  ExpectedJava: r.array(2L, 3L, 4L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 161
  Original: 'arr.reduce(lambda a, b: a + b)'
  Java: arr.reduce((a, b) -> r.add(a, b))
  ExpectedOriginal: 6
  ExpectedType: Long
  ExpectedJava: 6L
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 166
  Original: arr.reduce(lambda a, b:a + b)
  Java: arr.reduce((a, b) -> r.add(a, b))
  ExpectedOriginal: 6
  ExpectedType: Long
  ExpectedJava: 6L
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 171
  Original: 'arr.union(arr).reduce(lambda a, b: a + b)'
  Java: arr.union(arr).reduce((a, b) -> r.add(a, b))
  ExpectedOriginal: 12
  ExpectedType: Long
  ExpectedJava: 12L
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 176
  Original: arr.union(arr).reduce(lambda a, b:a + b)
  Java: arr.union(arr).reduce((a, b) -> r.add(a, b))
  ExpectedOriginal: 12
  ExpectedType: Long
  ExpectedJava: 12L
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 183
  Original: 'objArr.filter(lambda row: row[''b''] == ''b'')'
  Java: objArr.filter(row -> row.bracket("b").eq("b"))
  ExpectedOriginal: '[{''a'':2, ''b'':''b''}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", 2L).with("b", "b"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 190
  Original: 'arr.concat_map(lambda v: [1,2])'
  Java: arr.concatMap(v -> r.array(1L, 2L))
  ExpectedOriginal: '[1,2,1,2,1,2]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L, 1L, 2L, 1L, 2L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 194
  Original: 'arr.concat_map(lambda v: [{''v'':v}, {''v2'':v + 1}])'
  Java: arr.concatMap(v -> r.array(r.hashMap("v", v), r.hashMap("v2", r.add(v, 1L))))
  ExpectedOriginal: '[{''v'':1}, {''v2'':2}, {''v'':2}, {''v2'':3}, {''v'':3}, {''v2'':4}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("v", 1L), r.hashMap("v2", 2L), r.hashMap("v", 2L), r.hashMap("v2", 3L), r.hashMap("v", 3L), r.hashMap("v2", 4L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 201
  Original: objArr.order_by('b')
  Java: objArr.orderBy("b")
  ExpectedOriginal: '[{''a'':1, ''b'':''a''}, {''a'':2, ''b'':''b''}, {''a'':3, ''b'':''c''}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", 1L).with("b", "a"), r.hashMap("a", 2L).with("b", "b"), r.hashMap("a", 3L).with("b", "c"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 205
  Original: objArr.order_by(r.desc('b'))
  Java: objArr.orderBy(r.desc("b"))
  ExpectedOriginal: '[{''a'':3, ''b'':''c''}, {''a'':2, ''b'':''b''}, {''a'':1, ''b'':''a''}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", 3L).with("b", "c"), r.hashMap("a", 2L).with("b", "b"), r.hashMap("a", 1L).with("b", "a"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 208
  Original: r.expr([{'-a':1},{'-a':2}]).order_by('-a')
  Java: r.expr(r.array(r.hashMap("-a", 1L), r.hashMap("-a", 2L))).orderBy("-a")
  ExpectedOriginal: '[{''-a'':1},{''-a'':2}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("-a", 1L), r.hashMap("-a", 2L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 216
  Original: r.expr([1,1,2,2,2,3,4]).distinct()
  Java: r.expr(r.array(1L, 1L, 2L, 2L, 2L, 3L, 4L)).distinct()
  ExpectedOriginal: '[1,2,3,4]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L, 3L, 4L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 223
  Original: objArr.count()
  Java: objArr.count()
  ExpectedOriginal: 3
  ExpectedType: Long
  ExpectedJava: 3L
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 228
  Original: arr.union(objArr)
  Java: arr.union(objArr)
  ExpectedOriginal: '[1, 2, 3, {''a'':1, ''b'':''a''}, {''a'':2, ''b'':''b''}, {''a'':3, ''b'':''c''}]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L, 3L, r.hashMap("a", 1L).with("b", "a"), r.hashMap("a", 2L).with("b", "b"), r.hashMap("a", 3L).with("b", "c"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 234
  Original: arr[1]
  Java: arr.bracket(1L)
  ExpectedOriginal: 2
  ExpectedType: Long
  ExpectedJava: 2L
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 235
  Original: arr.nth(1)
  Java: arr.nth(1L)
  ExpectedOriginal: 2
  ExpectedType: Long
  ExpectedJava: 2L
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 238
  Original: arr[0]
  Java: arr.bracket(0L)
  ExpectedOriginal: 1
  ExpectedType: Long
  ExpectedJava: 1L
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 245
  Original: r.expr([]).is_empty()
  Java: r.expr(r.array()).isEmpty()
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 247
  Original: arr.is_empty()
  Java: arr.isEmpty()
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 251
  Original: arr.contains(2)
  Java: arr.contains(2L)
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 253
  Original: arr.contains(2, 3)
  Java: arr.contains(2L, 3L)
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 255
  Original: arr.contains(4)
  Java: arr.contains(4L)
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 257
  Original: arr.contains(2, 4)
  Java: arr.contains(2L, 4L)
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 259
  Original: arr.contains(2, 2)
  Java: arr.contains(2L, 2L)
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 261
  Original: arr.union(arr).contains(2, 2)
  Java: arr.union(arr).contains(2L, 2L)
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 265
  Original: arr.contains(lambda x:x == 2)
  Java: arr.contains(x -> r.eq(x, 2L))
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 269
  Original: arr.contains(lambda x:x == 2, lambda x:x==3)
  Java: arr.contains(x -> r.eq(x, 2L), x -> r.eq(x, 3L))
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 273
  Original: arr.contains(lambda x:x == 4)
  Java: arr.contains(x -> r.eq(x, 4L))
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 277
  Original: arr.contains(lambda x:x == 2, lambda x:x==4)
  Java: arr.contains(x -> r.eq(x, 2L), x -> r.eq(x, 4L))
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 281
  Original: arr.contains(lambda x:x == 2, lambda x:x==2)
  Java: arr.contains(x -> r.eq(x, 2L), x -> r.eq(x, 2L))
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 285
  Original: arr.union(arr).contains(lambda x:x == 2, lambda x:x==2)
  Java: arr.union(arr).contains(x -> r.eq(x, 2L), x -> r.eq(x, 2L))
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 290
  Original: r.expr([{'a':1},{'b':2},{'a':3,'c':4}])['a']
  Java: r.expr(r.array(r.hashMap("a", 1L), r.hashMap("b", 2L), r.hashMap("a", 3L).with("c", 4L))).bracket("a")
  ExpectedOriginal: '[1, 3]'
  ExpectedType: List
  ExpectedJava: r.array(1L, 3L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/array.yaml
  LineNum: 293
  Original: r.expr([{'a':1},'a',{'b':2},{'a':3,'c':4}])['a']
  Java: r.expr(r.array(r.hashMap("a", 1L), "a", r.hashMap("b", 2L), r.hashMap("a", 3L).with("c", 4L))).bracket("a")
  ExpectedOriginal: err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\"a\"`.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\"a\"`.", r.array())
  RunOpts: []
