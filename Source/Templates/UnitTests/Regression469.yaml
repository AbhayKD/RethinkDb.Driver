ModuleName: Regression469
DefsAndTests:
- TestType: JavaQuery
  TestFile: regression/469.yaml
  TestNum: 1
  Original: partial({'dbs_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("dbs_created", 1))
  Obtained: r.dbCreate("d469")
- TestType: JavaQuery
  TestFile: regression/469.yaml
  TestNum: 2
  Original: partial({'tables_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("tables_created", 1))
  Obtained: r.db("d469").tableCreate("t469")
- TestType: JavaQuery
  TestFile: regression/469.yaml
  TestNum: 3
  Original: ({'created':1})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("created", 1)
  Obtained: r.db("d469").table("t469").indexCreate("x")
- TestType: JavaQuery
  TestFile: regression/469.yaml
  TestNum: 4
  Original: ([{'ready':True, 'index':'x'}])
  ExpectedType: List
  ExpectedJava: Arrays.asList(new MapObject().with("ready", true).with("index", "x"))
  Obtained: r.db("d469").table("t469").indexWait("x").pluck("index", "ready")
- TestType: JavaQuery
  TestFile: regression/469.yaml
  TestNum: 5
  Original: '{''type'': ''MINVAL''}'
  ExpectedType: Map
  ExpectedJava: new MapObject().with("type", "MINVAL")
  Obtained: r.minval().info()
- TestType: JavaQuery
  TestFile: regression/469.yaml
  TestNum: 6
  Original: '{''type'': ''MAXVAL''}'
  ExpectedType: Map
  ExpectedJava: new MapObject().with("type", "MAXVAL")
  Obtained: r.maxval().info()
- TestType: JavaQuery
  TestFile: regression/469.yaml
  TestNum: 7
  Original: ({'type':'NULL'})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("type", "NULL")
  Obtained: r.expr(null).info()
- TestType: JavaQuery
  TestFile: regression/469.yaml
  TestNum: 8
  Original: ({'type':'BOOL','value':'true'})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("type", "BOOL").with("value", "true")
  Obtained: r.expr(true).info()
- TestType: JavaQuery
  TestFile: regression/469.yaml
  TestNum: 9
  Original: ({'type':'NUMBER','value':'1'})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("type", "NUMBER").with("value", "1")
  Obtained: r.expr(1).info()
- TestType: JavaQuery
  TestFile: regression/469.yaml
  TestNum: 10
  Original: ({'type':'STRING','value':('"1"')})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("type", "STRING").with("value", ""1"")
  Obtained: r.expr("1").info()
- TestType: JavaQuery
  TestFile: regression/469.yaml
  TestNum: 11
  Original: ({'type':'ARRAY','value':"[\n\t1\n]"})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("type", "ARRAY").with("value", "[\n\t1\n]")
  Obtained: r.expr(Arrays.asList(1)).info()
- TestType: JavaQuery
  TestFile: regression/469.yaml
  TestNum: 12
  Original: ({'type':'OBJECT','value':"{\n\t\"a\":\t1\n}"})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("type", "OBJECT").with("value", "{\n\t"a":\t1\n}")
  Obtained: r.expr(new MapObject().with("a", 1)).info()
- TestType: JavaQuery
  TestFile: regression/469.yaml
  TestNum: 13
  Original: partial({'type':'DB','name':'d469'})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("type", "DB").with("name", "d469"))
  Obtained: r.db("d469").info()
- TestType: JavaQuery
  TestFile: regression/469.yaml
  TestNum: 14
  Original: ({'type':'TABLE','name':'t469','id':uuid(), 'db':{'type':'DB','name':'d469','id':uuid()}, 'primary_key':'id', 'indexes':['x'], 'doc_count_estimates':[0]})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("type", "TABLE").with("name", "t469").with("id", uuid()).with("db", new MapObject().with("type", "DB").with("name", "d469").with("id", uuid())).with("primary_key", "id").with("indexes", Arrays.asList("x")).with("doc_count_estimates", Arrays.asList(0))
  Obtained: r.db("d469").table("t469").info()
- TestType: JavaQuery
  TestFile: regression/469.yaml
  TestNum: 15
  Original: ({'type':'SELECTION<STREAM>', 'table':{'type':'TABLE','name':'t469','id':uuid(), 'db':{'type':'DB','name':'d469','id':uuid()}, 'primary_key':'id', 'indexes':['x'], 'doc_count_estimates':[0]}})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("type", "SELECTION<STREAM>").with("table", new MapObject().with("type", "TABLE").with("name", "t469").with("id", uuid()).with("db", new MapObject().with("type", "DB").with("name", "d469").with("id", uuid())).with("primary_key", "id").with("indexes", Arrays.asList("x")).with("doc_count_estimates", Arrays.asList(0)))
  Obtained: r.db("d469").table("t469").filter(x -> true).info()
- TestType: JavaQuery
  TestFile: regression/469.yaml
  TestNum: 16
  Original: ({'type':'STREAM'})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("type", "STREAM")
  Obtained: r.db("d469").table("t469").map(x -> 1).info()
- TestType: JavaQuery
  TestFile: regression/469.yaml
  TestNum: 17
  Original: ({'index':'id', 'left_bound':0, 'left_bound_type':'closed', 'right_bound':1, 'right_bound_type':'open', 'sorting':'UNORDERED', 'table':{'db':{'id':uuid(), 'name':'d469', 'type':'DB'}, 'doc_count_estimates':[0], 'id':uuid(), 'indexes':['x'], 'name':'t469', 'primary_key':'id', 'type':'TABLE'}, 'type':'TABLE_SLICE'})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("index", "id").with("left_bound", 0).with("left_bound_type", "closed").with("right_bound", 1).with("right_bound_type", "open").with("sorting", "UNORDERED").with("table", new MapObject().with("db", new MapObject().with("id", uuid()).with("name", "d469").with("type", "DB")).with("doc_count_estimates", Arrays.asList(0)).with("id", uuid()).with("indexes", Arrays.asList("x")).with("name", "t469").with("primary_key", "id").with("type", "TABLE")).with("type", "TABLE_SLICE")
  Obtained: r.db("d469").table("t469").between(0, 1).info()
- TestType: JavaQuery
  TestFile: regression/469.yaml
  TestNum: 18
  Original: ({'index':'a', 'left_bound':0, 'left_bound_type':'closed', 'right_bound':1, 'right_bound_type':'open', 'sorting':'UNORDERED', 'table':{'db':{'id':uuid(), 'name':'d469', 'type':'DB'}, 'doc_count_estimates':[0], 'id':uuid(), 'indexes':['x'], 'name':'t469', 'primary_key':'id', 'type':'TABLE'}, 'type':'TABLE_SLICE'})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("index", "a").with("left_bound", 0).with("left_bound_type", "closed").with("right_bound", 1).with("right_bound_type", "open").with("sorting", "UNORDERED").with("table", new MapObject().with("db", new MapObject().with("id", uuid()).with("name", "d469").with("type", "DB")).with("doc_count_estimates", Arrays.asList(0)).with("id", uuid()).with("indexes", Arrays.asList("x")).with("name", "t469").with("primary_key", "id").with("type", "TABLE")).with("type", "TABLE_SLICE")
  Obtained: r.db("d469").table("t469").between(0, 1).optArg("index", "a").info()
- TestType: JavaQuery
  TestFile: regression/469.yaml
  TestNum: 19
  Original: ({'index':'a', 'left_bound':0, 'left_bound_type':'closed', 'right_bound':1, 'right_bound_type':'open', 'sorting':'ASCENDING', 'table':{'db':{'id':uuid(), 'name':'d469', 'type':'DB'}, 'doc_count_estimates':[0], 'id':uuid(), 'indexes':['x'], 'name':'t469', 'primary_key':'id', 'type':'TABLE'}, 'type':'TABLE_SLICE'})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("index", "a").with("left_bound", 0).with("left_bound_type", "closed").with("right_bound", 1).with("right_bound_type", "open").with("sorting", "ASCENDING").with("table", new MapObject().with("db", new MapObject().with("id", uuid()).with("name", "d469").with("type", "DB")).with("doc_count_estimates", Arrays.asList(0)).with("id", uuid()).with("indexes", Arrays.asList("x")).with("name", "t469").with("primary_key", "id").with("type", "TABLE")).with("type", "TABLE_SLICE")
  Obtained: r.db("d469").table("t469").orderBy().optArg("index", "a").between(0, 1).optArg("index", "a").info()
- TestType: JavaQuery
  TestFile: regression/469.yaml
  TestNum: 20
  Original: ({'index':'id', 'left_bound_type':'unbounded', 'right_bound_type':'unbounded', 'sorting':'UNORDERED', 'table':{'db':{'id':uuid(), 'name':'d469', 'type':'DB'}, 'doc_count_estimates':[0], 'id':uuid(), 'indexes':['x'], 'name':'t469', 'primary_key':'id', 'type':'TABLE'}, 'type':'TABLE_SLICE'})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("index", "id").with("left_bound_type", "unbounded").with("right_bound_type", "unbounded").with("sorting", "UNORDERED").with("table", new MapObject().with("db", new MapObject().with("id", uuid()).with("name", "d469").with("type", "DB")).with("doc_count_estimates", Arrays.asList(0)).with("id", uuid()).with("indexes", Arrays.asList("x")).with("name", "t469").with("primary_key", "id").with("type", "TABLE")).with("type", "TABLE_SLICE")
  Obtained: r.db("d469").table("t469").between(r.minval(), r.maxval()).info()
- TestType: JavaQuery
  TestFile: regression/469.yaml
  TestNum: 21
  Original: ({'index':'id', 'left_bound_type':'unachievable', 'right_bound_type':'unachievable', 'sorting':'UNORDERED', 'table':{'db':{'id':uuid(), 'name':'d469', 'type':'DB'}, 'doc_count_estimates':[0], 'id':uuid(), 'indexes':['x'], 'name':'t469', 'primary_key':'id', 'type':'TABLE'}, 'type':'TABLE_SLICE'})
  ExpectedType: Map
  ExpectedJava: new MapObject().with("index", "id").with("left_bound_type", "unachievable").with("right_bound_type", "unachievable").with("sorting", "UNORDERED").with("table", new MapObject().with("db", new MapObject().with("id", uuid()).with("name", "d469").with("type", "DB")).with("doc_count_estimates", Arrays.asList(0)).with("id", uuid()).with("indexes", Arrays.asList("x")).with("name", "t469").with("primary_key", "id").with("type", "TABLE")).with("type", "TABLE_SLICE")
  Obtained: r.db("d469").table("t469").between(r.maxval(), r.minval()).info()
- TestType: JavaQuery
  TestFile: regression/469.yaml
  TestNum: 22
  Original: partial({'dbs_dropped':1})
  ExpectedType: Partial
  ExpectedJava: partial(new MapObject().with("dbs_dropped", 1))
  Obtained: r.dbDrop("d469")
