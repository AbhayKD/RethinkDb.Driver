ModuleName: DatumBinary
Description: Tests of converstion to and from the RQL binary type
DefsAndTests:
- TestType: JavaDef
  TestFile: datum/binary.yaml
  LineNum: 8
  Original: s = b''
  VarName: s
  VarType: byte[]
  Value: (byte[]) (new byte[]{})
  Java: byte[] s = (byte[]) (new byte[]{});
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 10
  Original: r.binary(s)
  Java: r.binary(s)
  ExpectedOriginal: s
  ExpectedType: byte[]
  ExpectedJava: s
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 12
  Original: r.binary(s).count()
  Java: r.binary(s).count()
  ExpectedOriginal: 0
  ExpectedType: Long
  ExpectedJava: 0L
  RunOpts: []
- TestType: JavaDef
  TestFile: datum/binary.yaml
  LineNum: 17
  Original: s = b'\x00'
  VarName: s
  VarType: byte[]
  Value: (byte[]) (new byte[]{0})
  Java: byte[] s = (byte[]) (new byte[]{0});
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 19
  Original: r.binary(s)
  Java: r.binary(s)
  ExpectedOriginal: s
  ExpectedType: byte[]
  ExpectedJava: s
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 21
  Original: r.binary(s).count()
  Java: r.binary(s).count()
  ExpectedOriginal: 1
  ExpectedType: Long
  ExpectedJava: 1L
  RunOpts: []
- TestType: JavaDef
  TestFile: datum/binary.yaml
  LineNum: 26
  Original: s = b'\x00\x42'
  VarName: s
  VarType: byte[]
  Value: (byte[]) (new byte[]{0, 66})
  Java: byte[] s = (byte[]) (new byte[]{0, 66});
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 28
  Original: r.binary(s)
  Java: r.binary(s)
  ExpectedOriginal: s
  ExpectedType: byte[]
  ExpectedJava: s
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 30
  Original: r.binary(s).count()
  Java: r.binary(s).count()
  ExpectedOriginal: 2
  ExpectedType: Long
  ExpectedJava: 2L
  RunOpts: []
- TestType: JavaDef
  TestFile: datum/binary.yaml
  LineNum: 35
  Original: s = b'\x00\xfe\x7a'
  VarName: s
  VarType: byte[]
  Value: (byte[]) (new byte[]{0, -2, 122})
  Java: byte[] s = (byte[]) (new byte[]{0, -2, 122});
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 37
  Original: r.binary(s)
  Java: r.binary(s)
  ExpectedOriginal: s
  ExpectedType: byte[]
  ExpectedJava: s
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 39
  Original: r.binary(s).count()
  Java: r.binary(s).count()
  ExpectedOriginal: 3
  ExpectedType: Long
  ExpectedJava: 3L
  RunOpts: []
- TestType: JavaDef
  TestFile: datum/binary.yaml
  LineNum: 44
  Original: s = b'\xed\xfe\x00\xba'
  VarName: s
  VarType: byte[]
  Value: (byte[]) (new byte[]{-19, -2, 0, -70})
  Java: byte[] s = (byte[]) (new byte[]{-19, -2, 0, -70});
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 46
  Original: r.binary(s)
  Java: r.binary(s)
  ExpectedOriginal: s
  ExpectedType: byte[]
  ExpectedJava: s
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 48
  Original: r.binary(s).count()
  Java: r.binary(s).count()
  ExpectedOriginal: 4
  ExpectedType: Long
  ExpectedJava: 4L
  RunOpts: []
- TestType: JavaDef
  TestFile: datum/binary.yaml
  LineNum: 53
  Original: s = b'\x50\xf9\x00\x77\xf9'
  VarName: s
  VarType: byte[]
  Value: (byte[]) (new byte[]{80, -7, 0, 119, -7})
  Java: byte[] s = (byte[]) (new byte[]{80, -7, 0, 119, -7});
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 55
  Original: r.binary(s)
  Java: r.binary(s)
  ExpectedOriginal: s
  ExpectedType: byte[]
  ExpectedJava: s
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 57
  Original: r.binary(s).count()
  Java: r.binary(s).count()
  ExpectedOriginal: 5
  ExpectedType: Long
  ExpectedJava: 5L
  RunOpts: []
- TestType: JavaDef
  TestFile: datum/binary.yaml
  LineNum: 62
  Original: s = b'\x2f\xe3\xb5\x57\x00\x92'
  VarName: s
  VarType: byte[]
  Value: (byte[]) (new byte[]{47, -29, -75, 87, 0, -110})
  Java: byte[] s = (byte[]) (new byte[]{47, -29, -75, 87, 0, -110});
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 64
  Original: r.binary(s)
  Java: r.binary(s)
  ExpectedOriginal: s
  ExpectedType: byte[]
  ExpectedJava: s
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 66
  Original: r.binary(s).count()
  Java: r.binary(s).count()
  ExpectedOriginal: 6
  ExpectedType: Long
  ExpectedJava: 6L
  RunOpts: []
- TestType: JavaDef
  TestFile: datum/binary.yaml
  LineNum: 71
  Original: s = b'\xa9\x43\x54\xe9\x00\xf8\xfb'
  VarName: s
  VarType: byte[]
  Value: (byte[]) (new byte[]{-87, 67, 84, -23, 0, -8, -5})
  Java: byte[] s = (byte[]) (new byte[]{-87, 67, 84, -23, 0, -8, -5});
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 73
  Original: r.binary(s)
  Java: r.binary(s)
  ExpectedOriginal: s
  ExpectedType: byte[]
  ExpectedJava: s
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 75
  Original: r.binary(s).count()
  Java: r.binary(s).count()
  ExpectedOriginal: 7
  ExpectedType: Long
  ExpectedJava: 7L
  RunOpts: []
- TestType: JavaDef
  TestFile: datum/binary.yaml
  LineNum: 80
  Original: s = b'\x57\xbb\xe5\x82\x8b\xd3\x00\xf9'
  VarName: s
  VarType: byte[]
  Value: (byte[]) (new byte[]{87, -69, -27, -126, -117, -45, 0, -7})
  Java: byte[] s = (byte[]) (new byte[]{87, -69, -27, -126, -117, -45, 0, -7});
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 82
  Original: r.binary(s)
  Java: r.binary(s)
  ExpectedOriginal: s
  ExpectedType: byte[]
  ExpectedJava: s
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 84
  Original: r.binary(s).count()
  Java: r.binary(s).count()
  ExpectedOriginal: 8
  ExpectedType: Long
  ExpectedJava: 8L
  RunOpts: []
- TestType: JavaDef
  TestFile: datum/binary.yaml
  LineNum: 89
  Original: s = b'\x44\x1b\x3e\x00\x13\x19\x29\x2a\xbf'
  VarName: s
  VarType: byte[]
  Value: (byte[]) (new byte[]{68, 27, 62, 0, 19, 25, 41, 42, -65})
  Java: byte[] s = (byte[]) (new byte[]{68, 27, 62, 0, 19, 25, 41, 42, -65});
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 91
  Original: r.binary(s)
  Java: r.binary(s)
  ExpectedOriginal: s
  ExpectedType: byte[]
  ExpectedJava: s
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 93
  Original: r.binary(s).count()
  Java: r.binary(s).count()
  ExpectedOriginal: 9
  ExpectedType: Long
  ExpectedJava: 9L
  RunOpts: []
- TestType: JavaDef
  TestFile: datum/binary.yaml
  LineNum: 98
  Original: s = b'\x8a\x1d\x09\x00\x5d\x60\x6b\x2e\x70\xd9'
  VarName: s
  VarType: byte[]
  Value: (byte[]) (new byte[]{-118, 29, 9, 0, 93, 96, 107, 46, 112, -39})
  Java: byte[] s = (byte[]) (new byte[]{-118, 29, 9, 0, 93, 96, 107, 46, 112, -39});
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 100
  Original: r.binary(s)
  Java: r.binary(s)
  ExpectedOriginal: s
  ExpectedType: byte[]
  ExpectedJava: s
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 102
  Original: r.binary(s).count()
  Java: r.binary(s).count()
  ExpectedOriginal: 10
  ExpectedType: Long
  ExpectedJava: 10L
  RunOpts: []
- TestType: JavaDef
  TestFile: datum/binary.yaml
  LineNum: 107
  Original: s = b'\x00\xaf\x47\x4b\x38\x99\x14\x8d\x8f\x10\x51'
  VarName: s
  VarType: byte[]
  Value: (byte[]) (new byte[]{0, -81, 71, 75, 56, -103, 20, -115, -113, 16, 81})
  Java: byte[] s = (byte[]) (new byte[]{0, -81, 71, 75, 56, -103, 20, -115, -113, 16, 81});
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 109
  Original: r.binary(s)
  Java: r.binary(s)
  ExpectedOriginal: s
  ExpectedType: byte[]
  ExpectedJava: s
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 111
  Original: r.binary(s).count()
  Java: r.binary(s).count()
  ExpectedOriginal: 11
  ExpectedType: Long
  ExpectedJava: 11L
  RunOpts: []
- TestType: JavaDef
  TestFile: datum/binary.yaml
  LineNum: 116
  Original: s = b'\x45\x39\x00\xf7\xc2\x37\xfd\xe0\x38\x82\x40\xa9'
  VarName: s
  VarType: byte[]
  Value: (byte[]) (new byte[]{69, 57, 0, -9, -62, 55, -3, -32, 56, -126, 64, -87})
  Java: byte[] s = (byte[]) (new byte[]{69, 57, 0, -9, -62, 55, -3, -32, 56, -126, 64, -87});
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 118
  Original: r.binary(s)
  Java: r.binary(s)
  ExpectedOriginal: s
  ExpectedType: byte[]
  ExpectedJava: s
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 120
  Original: r.binary(s).count()
  Java: r.binary(s).count()
  ExpectedOriginal: 12
  ExpectedType: Long
  ExpectedJava: 12L
  RunOpts: []
- TestType: JavaDef
  TestFile: datum/binary.yaml
  LineNum: 128
  Original: a = b'\x00'
  VarName: a
  VarType: byte[]
  Value: (byte[]) (new byte[]{0})
  Java: byte[] a = (byte[]) (new byte[]{0});
  RunOpts: []
- TestType: JavaDef
  TestFile: datum/binary.yaml
  LineNum: 132
  Original: b = b'\x00\x01'
  VarName: b
  VarType: byte[]
  Value: (byte[]) (new byte[]{0, 1})
  Java: byte[] b = (byte[]) (new byte[]{0, 1});
  RunOpts: []
- TestType: JavaDef
  TestFile: datum/binary.yaml
  LineNum: 136
  Original: c = b'\x01'
  VarName: c
  VarType: byte[]
  Value: (byte[]) (new byte[]{1})
  Java: byte[] c = (byte[]) (new byte[]{1});
  RunOpts: []
- TestType: JavaDef
  TestFile: datum/binary.yaml
  LineNum: 140
  Original: d = b'\x70\x22'
  VarName: d
  VarType: byte[]
  Value: (byte[]) (new byte[]{112, 34})
  Java: byte[] d = (byte[]) (new byte[]{112, 34});
  RunOpts: []
- TestType: JavaDef
  TestFile: datum/binary.yaml
  LineNum: 144
  Original: e = b'\x80'
  VarName: e
  VarType: byte[]
  Value: (byte[]) (new byte[]{-128})
  Java: byte[] e = (byte[]) (new byte[]{-128});
  RunOpts: []
- TestType: JavaDef
  TestFile: datum/binary.yaml
  LineNum: 148
  Original: f = b'\xFE'
  VarName: f
  VarType: byte[]
  Value: (byte[]) (new byte[]{-2})
  Java: byte[] f = (byte[]) (new byte[]{-2});
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 151
  Original: r.binary(a).eq(r.binary(a))
  Java: r.binary(a).eq(r.binary(a))
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 153
  Original: r.binary(a).le(r.binary(a))
  Java: r.binary(a).le(r.binary(a))
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 155
  Original: r.binary(a).ge(r.binary(a))
  Java: r.binary(a).ge(r.binary(a))
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 157
  Original: r.binary(a).ne(r.binary(a))
  Java: r.binary(a).ne(r.binary(a))
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 159
  Original: r.binary(a).lt(r.binary(a))
  Java: r.binary(a).lt(r.binary(a))
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 161
  Original: r.binary(a).gt(r.binary(a))
  Java: r.binary(a).gt(r.binary(a))
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 165
  Original: r.binary(a).ne(r.binary(b))
  Java: r.binary(a).ne(r.binary(b))
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 167
  Original: r.binary(a).lt(r.binary(b))
  Java: r.binary(a).lt(r.binary(b))
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 169
  Original: r.binary(a).le(r.binary(b))
  Java: r.binary(a).le(r.binary(b))
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 171
  Original: r.binary(a).ge(r.binary(b))
  Java: r.binary(a).ge(r.binary(b))
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 173
  Original: r.binary(a).gt(r.binary(b))
  Java: r.binary(a).gt(r.binary(b))
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 175
  Original: r.binary(a).eq(r.binary(b))
  Java: r.binary(a).eq(r.binary(b))
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 179
  Original: r.binary(b).ne(r.binary(c))
  Java: r.binary(b).ne(r.binary(c))
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 181
  Original: r.binary(b).lt(r.binary(c))
  Java: r.binary(b).lt(r.binary(c))
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 183
  Original: r.binary(b).le(r.binary(c))
  Java: r.binary(b).le(r.binary(c))
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 185
  Original: r.binary(b).ge(r.binary(c))
  Java: r.binary(b).ge(r.binary(c))
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 187
  Original: r.binary(b).gt(r.binary(c))
  Java: r.binary(b).gt(r.binary(c))
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 189
  Original: r.binary(b).eq(r.binary(c))
  Java: r.binary(b).eq(r.binary(c))
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 193
  Original: r.binary(c).ne(r.binary(d))
  Java: r.binary(c).ne(r.binary(d))
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 195
  Original: r.binary(c).lt(r.binary(d))
  Java: r.binary(c).lt(r.binary(d))
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 197
  Original: r.binary(c).le(r.binary(d))
  Java: r.binary(c).le(r.binary(d))
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 199
  Original: r.binary(c).ge(r.binary(d))
  Java: r.binary(c).ge(r.binary(d))
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 201
  Original: r.binary(c).gt(r.binary(d))
  Java: r.binary(c).gt(r.binary(d))
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 203
  Original: r.binary(c).eq(r.binary(d))
  Java: r.binary(c).eq(r.binary(d))
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 207
  Original: r.binary(d).ne(r.binary(e))
  Java: r.binary(d).ne(r.binary(e))
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 209
  Original: r.binary(d).lt(r.binary(e))
  Java: r.binary(d).lt(r.binary(e))
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 211
  Original: r.binary(d).le(r.binary(e))
  Java: r.binary(d).le(r.binary(e))
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 213
  Original: r.binary(d).ge(r.binary(e))
  Java: r.binary(d).ge(r.binary(e))
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 215
  Original: r.binary(d).gt(r.binary(e))
  Java: r.binary(d).gt(r.binary(e))
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 217
  Original: r.binary(d).eq(r.binary(e))
  Java: r.binary(d).eq(r.binary(e))
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 221
  Original: r.binary(e).ne(r.binary(f))
  Java: r.binary(e).ne(r.binary(f))
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 223
  Original: r.binary(e).lt(r.binary(f))
  Java: r.binary(e).lt(r.binary(f))
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 225
  Original: r.binary(e).le(r.binary(f))
  Java: r.binary(e).le(r.binary(f))
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 227
  Original: r.binary(e).ge(r.binary(f))
  Java: r.binary(e).ge(r.binary(f))
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 229
  Original: r.binary(e).gt(r.binary(f))
  Java: r.binary(e).gt(r.binary(f))
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 231
  Original: r.binary(e).eq(r.binary(f))
  Java: r.binary(e).eq(r.binary(f))
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 235
  Original: r.binary(f).eq(r.binary(f))
  Java: r.binary(f).eq(r.binary(f))
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 237
  Original: r.binary(f).le(r.binary(f))
  Java: r.binary(f).le(r.binary(f))
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 239
  Original: r.binary(f).ge(r.binary(f))
  Java: r.binary(f).ge(r.binary(f))
  ExpectedOriginal: true
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 241
  Original: r.binary(f).ne(r.binary(f))
  Java: r.binary(f).ne(r.binary(f))
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 243
  Original: r.binary(f).lt(r.binary(f))
  Java: r.binary(f).lt(r.binary(f))
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 245
  Original: r.binary(f).gt(r.binary(f))
  Java: r.binary(f).gt(r.binary(f))
  ExpectedOriginal: false
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 250
  Original: "r.binary(u'イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム'.encode('utf-8'))"
  Java: "r.binary(\"イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム\".getBytes(StandardCharsets.UTF_8))"
  ExpectedOriginal: "u'イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム'.encode('utf-8')"
  ExpectedType: byte[]
  ExpectedJava: "\"イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム\".getBytes(StandardCharsets.UTF_8)"
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 256
  Original: "r.binary(u'ƀƁƂƃƄƅƆƇƈƉƊƋƌƍƎƏ'.encode('utf-16'))"
  Java: "r.binary(\"ƀƁƂƃƄƅƆƇƈƉƊƋƌƍƎƏ\".getBytes(StandardCharsets.UTF_16))"
  ExpectedOriginal: "u'ƀƁƂƃƄƅƆƇƈƉƊƋƌƍƎƏ'.encode('utf-16')"
  ExpectedType: byte[]
  ExpectedJava: "\"ƀƁƂƃƄƅƆƇƈƉƊƋƌƍƎƏ\".getBytes(StandardCharsets.UTF_16)"
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 262
  Original: r.binary(u'lorem ipsum'.encode('ascii'))
  Java: r.binary("lorem ipsum".getBytes(StandardCharsets.US_ASCII))
  ExpectedOriginal: u'lorem ipsum'.encode('ascii')
  ExpectedType: byte[]
  ExpectedJava: '"lorem ipsum".getBytes(StandardCharsets.US_ASCII)'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 269
  Original: r.binary(b'foo').coerce_to('string')
  Java: r.binary(new byte[]{102, 111, 111}).coerceTo("string")
  ExpectedOriginal: 'foo'
  ExpectedType: String
  ExpectedJava: '"foo"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 272
  Original: "r.binary(u'イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム'.encode('utf-8')).coerce_to('string')"
  Java: "r.binary(\"イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム\".getBytes(StandardCharsets.UTF_8)).coerceTo(\"string\")"
  ExpectedOriginal: "u'イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム'"
  ExpectedType: String
  ExpectedJava: "\"イロハニホヘト チリヌルヲ ワカヨタレソ ツネナラム\""
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 278
  Original: r.binary(u'lorem ipsum'.encode('ascii')).coerce_to('string')
  Java: r.binary("lorem ipsum".getBytes(StandardCharsets.US_ASCII)).coerceTo("string")
  ExpectedOriginal: u'lorem ipsum'
  ExpectedType: String
  ExpectedJava: '"lorem ipsum"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 284
  Original: r.expr('foo').coerce_to('binary')
  Java: r.expr("foo").coerceTo("binary")
  ExpectedOriginal: b'foo'
  ExpectedType: byte[]
  ExpectedJava: new byte[]{102, 111, 111}
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 287
  Original: r.binary(b'foo').coerce_to('binary')
  Java: r.binary(new byte[]{102, 111, 111}).coerceTo("binary")
  ExpectedOriginal: b'foo'
  ExpectedType: byte[]
  ExpectedJava: new byte[]{102, 111, 111}
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 291
  Original: r.binary(b'abcdefg').slice(-3,-1)
  Java: r.binary(new byte[]{97, 98, 99, 100, 101, 102, 103}).slice(-3L, -1L)
  ExpectedOriginal: b'ef'
  ExpectedType: byte[]
  ExpectedJava: new byte[]{101, 102}
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 293
  Original: r.binary(b'abcdefg').slice(0, 2)
  Java: r.binary(new byte[]{97, 98, 99, 100, 101, 102, 103}).slice(0L, 2L)
  ExpectedOriginal: b'ab'
  ExpectedType: byte[]
  ExpectedJava: new byte[]{97, 98}
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 295
  Original: r.binary(b'abcdefg').slice(3, -1)
  Java: r.binary(new byte[]{97, 98, 99, 100, 101, 102, 103}).slice(3L, -1L)
  ExpectedOriginal: b'def'
  ExpectedType: byte[]
  ExpectedJava: new byte[]{100, 101, 102}
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 297
  Original: r.binary(b'abcdefg').slice(-5, 5)
  Java: r.binary(new byte[]{97, 98, 99, 100, 101, 102, 103}).slice(-5L, 5L)
  ExpectedOriginal: b'cde'
  ExpectedType: byte[]
  ExpectedJava: new byte[]{99, 100, 101}
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 299
  Original: r.binary(b'abcdefg').slice(-8, 2)
  Java: r.binary(new byte[]{97, 98, 99, 100, 101, 102, 103}).slice(-8L, 2L)
  ExpectedOriginal: b'ab'
  ExpectedType: byte[]
  ExpectedJava: new byte[]{97, 98}
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 301
  Original: r.binary(b'abcdefg').slice(5, 7)
  Java: r.binary(new byte[]{97, 98, 99, 100, 101, 102, 103}).slice(5L, 7L)
  ExpectedOriginal: b'fg'
  ExpectedType: byte[]
  ExpectedJava: new byte[]{102, 103}
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 305
  Original: r.binary(b'abcdefg').slice(-9, 2)
  Java: r.binary(new byte[]{97, 98, 99, 100, 101, 102, 103}).slice(-9L, 2L)
  ExpectedOriginal: b'ab'
  ExpectedType: byte[]
  ExpectedJava: new byte[]{97, 98}
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 309
  Original: r.binary(b'abcdefg').slice(5, 9)
  Java: r.binary(new byte[]{97, 98, 99, 100, 101, 102, 103}).slice(5L, 9L)
  ExpectedOriginal: b'fg'
  ExpectedType: byte[]
  ExpectedJava: new byte[]{102, 103}
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 313
  Original: r.binary(b)
  Java: r.binary(b)
  ExpectedOriginal: b
  ExpectedType: byte[]
  ExpectedJava: b
  RunOpts:
  - Key: binary_format
    Val: native
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 317
  Original: r.binary(b)
  Java: r.binary(b)
  ExpectedOriginal: '{''$reql_type$'':''BINARY'',''data'':''AAE=''}'
  ExpectedType: Map
  ExpectedJava: r.hashMap("$reql_type$", "BINARY").with("data", "AAE=")
  RunOpts:
  - Key: binary_format
    Val: raw
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 323
  Original: r.binary(r.expr("data"))
  Java: r.binary(r.expr("data"))
  ExpectedOriginal: b"data"
  ExpectedType: byte[]
  ExpectedJava: new byte[]{100, 97, 116, 97}
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 329
  Original: r.binary(r.expr({}))
  Java: r.binary(r.expr(r.hashMap()))
  ExpectedOriginal: err('ReqlQueryLogicError', 'Expected type STRING but found OBJECT.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Expected type STRING but found OBJECT.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 332
  Original: r.binary(r.expr([]))
  Java: r.binary(r.expr(r.array()))
  ExpectedOriginal: err('ReqlQueryLogicError', 'Expected type STRING but found ARRAY.', [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Expected type STRING but found ARRAY.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 338
  Original: r.expr({'$reql_type$':'BINARY'})
  Java: r.expr(r.hashMap("$reql_type$", "BINARY"))
  ExpectedOriginal: err('ReqlQueryLogicError','Invalid binary pseudotype:'+' lacking `data` key.',[])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Invalid binary pseudotype:" + " lacking `data` key.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 343
  Original: r.expr({'$reql_type$':'BINARY','data':'ABCDEFGH==AA'})
  Java: r.expr(r.hashMap("$reql_type$", "BINARY").with("data", "ABCDEFGH==AA"))
  ExpectedOriginal: err('ReqlQueryLogicError','Invalid base64 format, data found after padding character \'=\'.',[])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Invalid base64 format, data found after padding character '='.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 345
  Original: r.expr({'$reql_type$':'BINARY','data':'ABCDEF==$'})
  Java: r.expr(r.hashMap("$reql_type$", "BINARY").with("data", "ABCDEF==$"))
  ExpectedOriginal: err('ReqlQueryLogicError','Invalid base64 format, data found after padding character \'=\'.',[])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Invalid base64 format, data found after padding character '='.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 347
  Original: r.expr({'$reql_type$':'BINARY','data':'A^CDEFGH'})
  Java: r.expr(r.hashMap("$reql_type$", "BINARY").with("data", "A^CDEFGH"))
  ExpectedOriginal: err('ReqlQueryLogicError','Invalid base64 character found:'+' \'^\'.',[])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Invalid base64 character found:" + " '^'.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 349
  Original: r.expr({'$reql_type$':'BINARY','data':'ABCDE'})
  Java: r.expr(r.hashMap("$reql_type$", "BINARY").with("data", "ABCDE"))
  ExpectedOriginal: err('ReqlQueryLogicError','Invalid base64 length:'+' 1 character remaining, cannot decode a full byte.',[])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Invalid base64 length:" + " 1 character remaining, cannot decode a full byte.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 353
  Original: r.binary(a).coerce_to('array')
  Java: r.binary(a).coerceTo("array")
  ExpectedOriginal: err('ReqlQueryLogicError','Cannot coerce BINARY to ARRAY.',[])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot coerce BINARY to ARRAY.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 355
  Original: r.binary(a).coerce_to('object')
  Java: r.binary(a).coerceTo("object")
  ExpectedOriginal: err('ReqlQueryLogicError','Cannot coerce BINARY to OBJECT.',[])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot coerce BINARY to OBJECT.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 357
  Original: r.binary(a).coerce_to('bool')
  Java: r.binary(a).coerceTo("bool")
  ExpectedOriginal: err('ReqlQueryLogicError','Cannot coerce BINARY to BOOL.',[])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot coerce BINARY to BOOL.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 359
  Original: r.binary(a).coerce_to('number')
  Java: r.binary(a).coerceTo("number")
  ExpectedOriginal: err('ReqlQueryLogicError','Cannot coerce BINARY to NUMBER.',[])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot coerce BINARY to NUMBER.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/binary.yaml
  LineNum: 361
  Original: r.binary(a).coerce_to('nu'+'ll')
  Java: r.binary(a).coerceTo(r.add("nu", "ll"))
  ExpectedOriginal: err('ReqlQueryLogicError','Cannot coerce BINARY to NULL.',[])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot coerce BINARY to NULL.", r.array())
  RunOpts: []
