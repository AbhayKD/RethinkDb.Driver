ModuleName: Random
Description: Tests randomization functions
DefsAndTests:
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 5
  Original: r.expr([1,2,3]).sample(3).distinct().count()
  Java: r.expr(r.array(1L, 2L, 3L)).sample(3L).distinct().count()
  ExpectedOriginal: 3
  ExpectedType: Long
  ExpectedJava: 3L
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 7
  Original: r.expr([1,2,3]).sample(3).count()
  Java: r.expr(r.array(1L, 2L, 3L)).sample(3L).count()
  ExpectedOriginal: 3
  ExpectedType: Long
  ExpectedJava: 3L
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 9
  Original: r.expr([1,2,3,4,5,6]).sample(3).distinct().count()
  Java: r.expr(r.array(1L, 2L, 3L, 4L, 5L, 6L)).sample(3L).distinct().count()
  ExpectedOriginal: 3
  ExpectedType: Long
  ExpectedJava: 3L
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 11
  Original: r.expr([1,2,3]).sample(4).distinct().count()
  Java: r.expr(r.array(1L, 2L, 3L)).sample(4L).distinct().count()
  ExpectedOriginal: 3
  ExpectedType: Long
  ExpectedJava: 3L
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 15
  Original: r.expr([1,2,3]).sample(-1)
  Java: r.expr(r.array(1L, 2L, 3L)).sample(-1L)
  ExpectedOriginal: err('ReqlQueryLogicError', 'Number of items to sample must be non-negative, got `-1`.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Number of items to sample must be non-negative, got `-1`.", r.array(0L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 17
  Original: r.expr(1).sample(1)
  Java: r.expr(1L).sample(1L)
  ExpectedOriginal: err('ReqlQueryLogicError', 'Cannot convert NUMBER to SEQUENCE', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot convert NUMBER to SEQUENCE", r.array(0L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 19
  Original: r.expr({}).sample(1)
  Java: r.expr(r.hashMap()).sample(1L)
  ExpectedOriginal: err('ReqlQueryLogicError', 'Cannot convert OBJECT to SEQUENCE', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot convert OBJECT to SEQUENCE", r.array(0L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 25
  Original: r.random().do(lambda x:r.and_(x.ge(0), x.lt(1)))
  Java: r.random().do_(x -> r.and(x.ge(0L), x.lt(1L)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 26
  Original: r.random(1, float=True).do(lambda x:r.and_(x.ge(0), x.lt(1)))
  Java: r.random(1L).optArg("float", true).do_(x -> r.and(x.ge(0L), x.lt(1L)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 27
  Original: r.random(0, 1, float=True).do(lambda x:r.and_(x.ge(0), x.lt(1)))
  Java: r.random(0L, 1L).optArg("float", true).do_(x -> r.and(x.ge(0L), x.lt(1L)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 28
  Original: r.random(1, 0, float=True).do(lambda x:r.and_(x.le(1), x.gt(0)))
  Java: r.random(1L, 0L).optArg("float", true).do_(x -> r.and(x.le(1L), x.gt(0L)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 29
  Original: r.random(r.expr(0), 1, float=True).do(lambda x:r.and_(x.ge(0), x.lt(1)))
  Java: r.random(r.expr(0L), 1L).optArg("float", true).do_(x -> r.and(x.ge(0L), x.lt(1L)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 30
  Original: r.random(1, r.expr(0), float=True).do(lambda x:r.and_(x.le(1), x.gt(0)))
  Java: r.random(1L, r.expr(0L)).optArg("float", true).do_(x -> r.and(x.le(1L), x.gt(0L)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 31
  Original: r.random(r.expr(1), r.expr(0), float=True).do(lambda x:r.and_(x.le(1), x.gt(0)))
  Java: r.random(r.expr(1L), r.expr(0L)).optArg("float", true).do_(x -> r.and(x.le(1L), x.gt(0L)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 36
  Original: r.random(0.495, float=True).do(lambda x:r.and_(x.ge(0), x.lt(0.495)))
  Java: r.random(0.495).optArg("float", true).do_(x -> r.and(x.ge(0L), x.lt(0.495)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 37
  Original: r.random(-0.495, float=True).do(lambda x:r.and_(x.le(0), x.gt(-0.495)))
  Java: r.random(-0.495).optArg("float", true).do_(x -> r.and(x.le(0L), x.gt(-0.495)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 38
  Original: r.random(1823756.24, float=True).do(lambda x:r.and_(x.ge(0), x.lt(1823756.24)))
  Java: r.random(1823756.24).optArg("float", true).do_(x -> r.and(x.ge(0L), x.lt(1823756.24)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 39
  Original: r.random(-1823756.24, float=True).do(lambda x:r.and_(x.le(0), x.gt(-1823756.24)))
  Java: r.random(-1823756.24).optArg("float", true).do_(x -> r.and(x.le(0L), x.gt(-1823756.24)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 44
  Original: r.random(10.5, 20.153, float=True).do(lambda x:r.and_(x.ge(10.5), x.lt(20.153)))
  Java: r.random(10.5, 20.153).optArg("float", true).do_(x -> r.and(x.ge(10.5), x.lt(20.153)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 45
  Original: r.random(20.153, 10.5, float=True).do(lambda x:r.and_(x.le(20.153), x.gt(10.5)))
  Java: r.random(20.153, 10.5).optArg("float", true).do_(x -> r.and(x.le(20.153), x.gt(10.5)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 46
  Original: r.random(31415926.1, 31415926, float=True).do(lambda x:r.and_(x.le(31415926.1), x.gt(31415926)))
  Java: r.random(31415926.1, 31415926L).optArg("float", true).do_(x -> r.and(x.le(31415926.1), x.gt(31415926L)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 51
  Original: r.random(-10.5, 20.153, float=True).do(lambda x:r.and_(x.ge(-10.5), x.lt(20.153)))
  Java: r.random(-10.5, 20.153).optArg("float", true).do_(x -> r.and(x.ge(-10.5), x.lt(20.153)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 52
  Original: r.random(-20.153, -10.5, float=True).do(lambda x:r.and_(x.ge(-20.153), x.lt(-10.5)))
  Java: r.random(-20.153, -10.5).optArg("float", true).do_(x -> r.and(x.ge(-20.153), x.lt(-10.5)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 53
  Original: r.random(-31415926, -31415926.1, float=True).do(lambda x:r.and_(x.le(-31415926), x.gt(-31415926.1)))
  Java: r.random(-31415926L, -31415926.1).optArg("float", true).do_(x -> r.and(x.le(-31415926L), x.gt(-31415926.1)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 58
  Original: r.expr([r.random(), r.random()]).distinct().count()
  Java: r.expr(r.array(r.random(), r.random())).distinct().count()
  ExpectedOriginal: 2
  ExpectedType: Long
  ExpectedJava: 2L
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 59
  Original: r.expr([r.random(1, float=True), r.random(1, float=True)]).distinct().count()
  Java: r.expr(r.array(r.random(1L).optArg("float", true), r.random(1L).optArg("float", true))).distinct().count()
  ExpectedOriginal: 2
  ExpectedType: Long
  ExpectedJava: 2L
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 60
  Original: r.expr([r.random(0, 1, float=True), r.random(0, 1, float=True)]).distinct().count()
  Java: r.expr(r.array(r.random(0L, 1L).optArg("float", true), r.random(0L, 1L).optArg("float", true))).distinct().count()
  ExpectedOriginal: 2
  ExpectedType: Long
  ExpectedJava: 2L
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 65
  Original: r.random(0, float=True).eq(0)
  Java: r.random(0L).optArg("float", true).eq(0L)
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 66
  Original: r.random(5, 5, float=True).eq(5)
  Java: r.random(5L, 5L).optArg("float", true).eq(5L)
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 67
  Original: r.random(-499384756758, -499384756758, float=True).eq(-499384756758)
  Java: r.random(-499384756758L, -499384756758L).optArg("float", true).eq(-499384756758L)
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 68
  Original: r.random(-93.94757, -93.94757, float=True).eq(-93.94757)
  Java: r.random(-93.94757, -93.94757).optArg("float", true).eq(-93.94757)
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 69
  Original: r.random(294.69148, 294.69148, float=True).eq(294.69148)
  Java: r.random(294.69148, 294.69148).optArg("float", true).eq(294.69148)
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaDef
  TestFile: random.yaml
  LineNum: 74
  Original: float_max = sys.float_info.max
  VarName: float_max
  VarType: Double
  Value: (Double) (sys.floatInfo.max)
  Java: Double float_max = (Double) (sys.floatInfo.max);
  RunOpts: []
- TestType: JavaDef
  TestFile: random.yaml
  LineNum: 78
  Original: float_min = sys.float_info.min
  VarName: float_min
  VarType: Double
  Value: (Double) (sys.floatInfo.min)
  Java: Double float_min = (Double) (sys.floatInfo.min);
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 82
  Original: r.random(-float_max, float_max, float=True).do(lambda x:r.and_(x.ge(-float_max), x.lt(float_max)))
  Java: r.random(-float_max, float_max).optArg("float", true).do_(x -> r.and(x.ge(-float_max), x.lt(float_max)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 83
  Original: r.random(float_max, -float_max, float=True).do(lambda x:r.and_(x.le(float_max), x.gt(-float_max)))
  Java: r.random(float_max, -float_max).optArg("float", true).do_(x -> r.and(x.le(float_max), x.gt(-float_max)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 84
  Original: r.random(float_min, float_max, float=True).do(lambda x:r.and_(x.ge(float_min), x.lt(float_max)))
  Java: r.random(float_min, float_max).optArg("float", true).do_(x -> r.and(x.ge(float_min), x.lt(float_max)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 85
  Original: r.random(float_min, -float_max, float=True).do(lambda x:r.and_(x.le(float_min), x.gt(-float_max)))
  Java: r.random(float_min, -float_max).optArg("float", true).do_(x -> r.and(x.le(float_min), x.gt(-float_max)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 86
  Original: r.random(-float_min, float_max, float=True).do(lambda x:r.and_(x.ge(-float_min), x.lt(float_max)))
  Java: r.random(-float_min, float_max).optArg("float", true).do_(x -> r.and(x.ge(-float_min), x.lt(float_max)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 87
  Original: r.random(-float_min, -float_max, float=True).do(lambda x:r.and_(x.le(-float_min), x.gt(-float_max)))
  Java: r.random(-float_min, -float_max).optArg("float", true).do_(x -> r.and(x.le(-float_min), x.gt(-float_max)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaDef
  TestFile: random.yaml
  LineNum: 92
  Original: upper_limit = 2**53 - 1
  VarName: upper_limit
  VarType: Long
  Value: (Long) (2L << 53L - 1L)
  Java: Long upper_limit = (Long) (2L << 53L - 1L);
  RunOpts: []
- TestType: JavaDef
  TestFile: random.yaml
  LineNum: 96
  Original: lower_limit = 1 - (2**53)
  VarName: lower_limit
  VarType: Long
  Value: (Long) (1L - 2L << 53L)
  Java: Long lower_limit = (Long) (1L - 2L << 53L);
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 101
  Original: r.random(256).do(lambda x:r.and_(x.ge(0), x.lt(256)))
  Java: r.random(256L).do_(x -> r.and(x.ge(0L), x.lt(256L)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 102
  Original: r.random(0, 256).do(lambda x:r.and_(x.ge(0), x.lt(256)))
  Java: r.random(0L, 256L).do_(x -> r.and(x.ge(0L), x.lt(256L)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 103
  Original: r.random(r.expr(256)).do(lambda x:r.and_(x.ge(0), x.lt(256)))
  Java: r.random(r.expr(256L)).do_(x -> r.and(x.ge(0L), x.lt(256L)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 104
  Original: r.random(r.expr(0), 256).do(lambda x:r.and_(x.ge(0), x.lt(256)))
  Java: r.random(r.expr(0L), 256L).do_(x -> r.and(x.ge(0L), x.lt(256L)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 105
  Original: r.random(0, r.expr(256)).do(lambda x:r.and_(x.ge(0), x.lt(256)))
  Java: r.random(0L, r.expr(256L)).do_(x -> r.and(x.ge(0L), x.lt(256L)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 106
  Original: r.random(r.expr(0), r.expr(256)).do(lambda x:r.and_(x.ge(0), x.lt(256)))
  Java: r.random(r.expr(0L), r.expr(256L)).do_(x -> r.and(x.ge(0L), x.lt(256L)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 111
  Original: r.random(10, 20).do(lambda x:r.and_(x.ge(10), x.lt(20)))
  Java: r.random(10L, 20L).do_(x -> r.and(x.ge(10L), x.lt(20L)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 112
  Original: r.random(9347849, 120937493).do(lambda x:r.and_(x.ge(9347849), x.lt(120937493)))
  Java: r.random(9347849L, 120937493L).do_(x -> r.and(x.ge(9347849L), x.lt(120937493L)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 123
  Original: r.random(-10, 20).do(lambda x:r.and_(x.ge(-10), x.lt(20)))
  Java: r.random(-10L, 20L).do_(x -> r.and(x.ge(-10L), x.lt(20L)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 124
  Original: r.random(-20, -10).do(lambda x:r.and_(x.ge(-20), x.lt(-10)))
  Java: r.random(-20L, -10L).do_(x -> r.and(x.ge(-20L), x.lt(-10L)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 125
  Original: r.random(-120937493, -9347849).do(lambda x:r.and_(x.ge(-120937493), x.lt(-9347849)))
  Java: r.random(-120937493L, -9347849L).do_(x -> r.and(x.ge(-120937493L), x.lt(-9347849L)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 137
  Original: r.expr([r.random(upper_limit), r.random(upper_limit)]).distinct().count()
  Java: r.expr(r.array(r.random(upper_limit), r.random(upper_limit))).distinct().count()
  ExpectedOriginal: 2
  ExpectedType: Long
  ExpectedJava: 2L
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 139
  Original: r.expr([upper_limit,upper_limit]).map(lambda x:r.random(x)).distinct().count()
  Java: r.expr(r.array(upper_limit, upper_limit)).map(x -> r.random(x)).distinct().count()
  ExpectedOriginal: 2
  ExpectedType: Long
  ExpectedJava: 2L
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 147
  Original: r.random(-0.5)
  Java: r.random(-0.5)
  ExpectedOriginal: err("ReqlQueryLogicError", "Upper bound (-0.5) could not be safely converted to an integer.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Upper bound (-0.5) could not be safely converted to an integer.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 149
  Original: r.random(0.25)
  Java: r.random(0.25)
  ExpectedOriginal: err("ReqlQueryLogicError", "Upper bound (0.25) could not be safely converted to an integer.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Upper bound (0.25) could not be safely converted to an integer.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 151
  Original: r.random(-10, 0.75)
  Java: r.random(-10L, 0.75)
  ExpectedOriginal: err("ReqlQueryLogicError", "Upper bound (0.75) could not be safely converted to an integer.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Upper bound (0.75) could not be safely converted to an integer.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 153
  Original: r.random(-120549.25, 39458)
  Java: r.random(-120549.25, 39458L)
  ExpectedOriginal: err("ReqlQueryLogicError", "Lower bound (-120549.25) could not be safely converted to an integer.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Lower bound (-120549.25) could not be safely converted to an integer.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 155
  Original: r.random(-6.5, 8.125)
  Java: r.random(-6.5, 8.125)
  ExpectedOriginal: err("ReqlQueryLogicError", "Lower bound (-6.5) could not be safely converted to an integer.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Lower bound (-6.5) could not be safely converted to an integer.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 159
  Original: r.random(float=False)
  Java: r.random().optArg("float", false)
  ExpectedOriginal: err("ReqlQueryLogicError", "Generating a random integer requires one or two bounds.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Generating a random integer requires one or two bounds.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 165
  Original: r.random(0)
  Java: r.random(0L)
  ExpectedOriginal: err("ReqlQueryLogicError", "Lower bound (0) is not less than upper bound (0).", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Lower bound (0) is not less than upper bound (0).", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 167
  Original: r.random(0, 0)
  Java: r.random(0L, 0L)
  ExpectedOriginal: err("ReqlQueryLogicError", "Lower bound (0) is not less than upper bound (0).", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Lower bound (0) is not less than upper bound (0).", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 169
  Original: r.random(515, 515)
  Java: r.random(515L, 515L)
  ExpectedOriginal: err("ReqlQueryLogicError", "Lower bound (515) is not less than upper bound (515).", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Lower bound (515) is not less than upper bound (515).", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 171
  Original: r.random(-956, -956)
  Java: r.random(-956L, -956L)
  ExpectedOriginal: err("ReqlQueryLogicError", "Lower bound (-956) is not less than upper bound (-956).", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Lower bound (-956) is not less than upper bound (-956).", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 173
  Original: r.random(-10)
  Java: r.random(-10L)
  ExpectedOriginal: err("ReqlQueryLogicError", "Lower bound (0) is not less than upper bound (-10).", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Lower bound (0) is not less than upper bound (-10).", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 175
  Original: r.random(20, 2)
  Java: r.random(20L, 2L)
  ExpectedOriginal: err("ReqlQueryLogicError", "Lower bound (20) is not less than upper bound (2).", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Lower bound (20) is not less than upper bound (2).", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 177
  Original: r.random(2, -20)
  Java: r.random(2L, -20L)
  ExpectedOriginal: err("ReqlQueryLogicError", "Lower bound (2) is not less than upper bound (-20).", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Lower bound (2) is not less than upper bound (-20).", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: random.yaml
  LineNum: 179
  Original: r.random(1456, 0)
  Java: r.random(1456L, 0L)
  ExpectedOriginal: err("ReqlQueryLogicError", "Lower bound (1456) is not less than upper bound (0).", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Lower bound (1456) is not less than upper bound (0).", r.array())
  RunOpts: []
