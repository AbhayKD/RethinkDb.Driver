ModuleName: MutationUpdate
TableVarNames:
- tbl
- tbl2
DefsAndTests:
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 1
  Original: tbl.insert([{'id':i} for i in xrange(100)])
  Java: tbl.insert(IntStream.range(0, 100).boxed().map(i -> r.hashMap("id", i)).collect(Collectors.toList()))
  ExpectedOriginal: ({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':100})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 100)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 2
  Original: tbl.count()
  Java: tbl.count()
  ExpectedOriginal: 100
  ExpectedType: Long
  ExpectedJava: 100
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 3
  Original: tbl2.insert([{'id':i, 'foo':{'bar':i}} for i in xrange(100)])
  Java: tbl2.insert(IntStream.range(0, 100).boxed().map(i -> r.hashMap("id", i).with("foo", r.hashMap("bar", i))).collect(Collectors.toList()))
  ExpectedOriginal: ({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':100})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 100)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 4
  Original: tbl2.count()
  Java: tbl2.count()
  ExpectedOriginal: 100
  ExpectedType: Long
  ExpectedJava: 100
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 5
  Original: tbl.get(12).update(lambda row:row)
  Java: tbl.get(12).update(row -> row)
  ExpectedOriginal: ({'deleted':0.0,'replaced':0.0,'unchanged':1,'errors':0.0,'skipped':0.0,'inserted':0.0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 0.0).with("unchanged", 1).with("errors", 0.0).with("skipped", 0.0).with("inserted", 0.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 6
  Original: tbl.get(12).update(lambda row:{'a':row['id'] + 1}, durability='soft')
  Java: tbl.get(12).update(row -> r.hashMap("a", row.g("id").add(1))).optArg("durability", "soft")
  ExpectedOriginal: ({'deleted':0.0,'replaced':1,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':0.0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 1).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 0.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 7
  Original: tbl.get(12)
  Java: tbl.get(12)
  ExpectedOriginal: ({'id':12, 'a':13})
  ExpectedType: Map
  ExpectedJava: r.hashMap("id", 12).with("a", 13)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 8
  Original: tbl.get(12).update(lambda row:{'a':row['id'] + 2}, durability='hard')
  Java: tbl.get(12).update(row -> r.hashMap("a", row.g("id").add(2))).optArg("durability", "hard")
  ExpectedOriginal: ({'deleted':0.0,'replaced':1,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':0.0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 1).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 0.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 9
  Original: tbl.get(12)
  Java: tbl.get(12)
  ExpectedOriginal: ({'id':12, 'a':14})
  ExpectedType: Map
  ExpectedJava: r.hashMap("id", 12).with("a", 14)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 10
  Original: tbl.get(12).update(lambda row:{'a':row['id'] + 3}, durability='wrong')
  Java: tbl.get(12).update(row -> r.hashMap("a", row.g("id").add(3))).optArg("durability", "wrong")
  ExpectedOriginal: err('ReqlQueryLogicError', 'Durability option `wrong` unrecognized (options are "hard" and "soft").', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Durability option `wrong` unrecognized (options are \"hard\" and \"soft\").", r.array(0))
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 11
  Original: tbl.get(12)
  Java: tbl.get(12)
  ExpectedOriginal: ({'id':12, 'a':14})
  ExpectedType: Map
  ExpectedJava: r.hashMap("id", 12).with("a", 14)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 12
  Original: tbl.get(12).update(lambda row:{'a':row['id']})
  Java: tbl.get(12).update(row -> r.hashMap("a", row.g("id")))
  ExpectedOriginal: ({'deleted':0.0,'replaced':1,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':0.0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 1).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 0.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 13
  Original: tbl.get(12)
  Java: tbl.get(12)
  ExpectedOriginal: ({'id':12, 'a':12})
  ExpectedType: Map
  ExpectedJava: r.hashMap("id", 12).with("a", 12)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 14
  Original: tbl.get(12).update({'a':r.literal()})
  Java: tbl.get(12).update(r.hashMap("a", r.literal()))
  ExpectedOriginal: ({'deleted':0.0,'replaced':1,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':0.0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 1).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 0.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 15
  Original: tbl.between(10, 20).update(lambda row:{'a':row['id']})
  Java: tbl.between(10, 20).update(row -> r.hashMap("a", row.g("id")))
  ExpectedOriginal: ({'deleted':0.0,'replaced':10,'unchanged':0,'errors':0.0,'skipped':0.0,'inserted':0.0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 10).with("unchanged", 0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 0.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 16
  Original: tbl.filter(lambda row:(row['id'] >= 10) & (row['id'] < 20)).update(lambda row:{'a':row['id']})
  Java: tbl.filter(row -> row.g("id").ge(10).and(row.g("id").lt(20))).update(row -> r.hashMap("a", row.g("id")))
  ExpectedOriginal: ({'deleted':0.0,'replaced':0.0,'unchanged':10,'errors':0.0,'skipped':0.0,'inserted':0.0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 0.0).with("unchanged", 10).with("errors", 0.0).with("skipped", 0.0).with("inserted", 0.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 17
  Original: tbl.filter(lambda row:(row['id'] >= 10) & (row['id'] < 20)).update(lambda row:{'b':row['id']})
  Java: tbl.filter(row -> row.g("id").ge(10).and(row.g("id").lt(20))).update(row -> r.hashMap("b", row.g("id")))
  ExpectedOriginal: ({'deleted':0.0,'replaced':10,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':0.0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 10).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 0.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 18
  Original: tbl.between(10, 20).update({'a':r.literal()})
  Java: tbl.between(10, 20).update(r.hashMap("a", r.literal()))
  ExpectedOriginal: ({'deleted':0.0,'replaced':10,'unchanged':0,'errors':0.0,'skipped':0.0,'inserted':0.0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 10).with("unchanged", 0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 0.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 19
  Original: tbl.get(1).update({'id':2,'d':1})
  Java: tbl.get(1).update(r.hashMap("id", 2).with("d", 1))
  ExpectedOriginal: ({'first_error':'Primary key `id` cannot be changed (`{\n\t"id":\t1\n}` -> `{\n\t"d":\t1,\n\t"id":\t2\n}`).','deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':1,'skipped':0.0,'inserted':0.0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("first_error", "Primary key `id` cannot be changed (`{\n\t\"id\":\t1\n}` -> `{\n\t\"d\":\t1,\n\t\"id\":\t2\n}`).").with("deleted", 0.0).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 1).with("skipped", 0.0).with("inserted", 0.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 22
  Original: tbl.get(1).update({'d':r.js('5')})
  Java: tbl.get(1).update(r.hashMap("d", r.js("5")))
  ExpectedOriginal: err('ReqlQueryLogicError', 'Could not prove argument deterministic.  Maybe you want to use the non_atomic flag?', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Could not prove argument deterministic.  Maybe you want to use the non_atomic flag?", r.array(0))
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 23
  Original: tbl.get(1).update({'d':tbl.nth(0)})
  Java: tbl.get(1).update(r.hashMap("d", tbl.nth(0)))
  ExpectedOriginal: err('ReqlQueryLogicError', 'Could not prove argument deterministic.  Maybe you want to use the non_atomic flag?', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Could not prove argument deterministic.  Maybe you want to use the non_atomic flag?", r.array(0))
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 24
  Original: tbl.get(1).update({'d':r.js('5')}, non_atomic=True)
  Java: tbl.get(1).update(r.hashMap("d", r.js("5"))).optArg("non_atomic", true)
  ExpectedOriginal: ({'deleted':0.0,'replaced':1,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':0.0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 1).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 0.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 27
  Original: tbl.update(lambda row:{'a':row['id']})
  Java: tbl.update(row -> r.hashMap("a", row.g("id")))
  ExpectedOriginal: ({'deleted':0.0,'replaced':100,'unchanged':0,'errors':0.0,'skipped':0.0,'inserted':0.0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 100).with("unchanged", 0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 0.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 28
  Original: tbl.update({'a':r.literal()})
  Java: tbl.update(r.hashMap("a", r.literal()))
  ExpectedOriginal: ({'deleted':0.0,'replaced':100,'unchanged':0,'errors':0.0,'skipped':0.0,'inserted':0.0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 100).with("unchanged", 0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 0.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 29
  Original: tbl2.update({'foo':{'bar':2}})
  Java: tbl2.update(r.hashMap("foo", r.hashMap("bar", 2)))
  ExpectedOriginal: ({'deleted':0.0,'replaced':99,'unchanged':1,'errors':0.0,'skipped':0.0,'inserted':0.0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 99).with("unchanged", 1).with("errors", 0.0).with("skipped", 0.0).with("inserted", 0.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 30
  Original: tbl2.update({'foo':r.literal({'bar':2})})
  Java: tbl2.update(r.hashMap("foo", r.literal(r.hashMap("bar", 2))))
  ExpectedOriginal: ({'deleted':0.0,'replaced':0,'unchanged':100,'errors':0.0,'skipped':0.0,'inserted':0.0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 0).with("unchanged", 100).with("errors", 0.0).with("skipped", 0.0).with("inserted", 0.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 32
  Original: tbl2.order_by('id').nth(0)
  Java: tbl2.orderBy("id").nth(0)
  ExpectedOriginal: ({'id':0,'foo':{'bar':2}})
  ExpectedType: Map
  ExpectedJava: r.hashMap("id", 0).with("foo", r.hashMap("bar", 2))
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 33
  Original: tbl2.update({'foo':{'buzz':2}})
  Java: tbl2.update(r.hashMap("foo", r.hashMap("buzz", 2)))
  ExpectedOriginal: ({'deleted':0.0,'replaced':100,'unchanged':0,'errors':0.0,'skipped':0.0,'inserted':0.0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 100).with("unchanged", 0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 0.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 34
  Original: tbl2.order_by('id').nth(0)
  Java: tbl2.orderBy("id").nth(0)
  ExpectedOriginal: ({'id':0,'foo':{'bar':2,'buzz':2}})
  ExpectedType: Map
  ExpectedJava: r.hashMap("id", 0).with("foo", r.hashMap("bar", 2).with("buzz", 2))
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 35
  Original: tbl2.update({'foo':r.literal(1)})
  Java: tbl2.update(r.hashMap("foo", r.literal(1)))
  ExpectedOriginal: ({'deleted':0.0,'replaced':100,'unchanged':0,'errors':0.0,'skipped':0.0,'inserted':0.0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 100).with("unchanged", 0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 0.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: mutation/update.yaml
  TestNum: 36
  Original: tbl2.order_by('id').nth(0)
  Java: tbl2.orderBy("id").nth(0)
  ExpectedOriginal: ({'id':0,'foo':1})
  ExpectedType: Map
  ExpectedJava: r.hashMap("id", 0).with("foo", 1)
  RunOpts: []
