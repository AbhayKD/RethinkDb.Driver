{
  "desc": "Tests insertion into tables",
  "table_variable_name": "tbl",
  "tests": [
    {
      "cd": "r.db('test').table_create('test2')",
      "ot": "partial({'tables_created':1})"
    },
    {
      "def": "tbl2 = r.db('test').table('test2')"
    },
    {
      "cd": "tbl.insert({'id':0,'a':0})",
      "ot": "({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':1})"
    },
    {
      "cd": "tbl.count()",
      "ot": "1"
    },
    {
      "py": "tbl.insert({'id':1, 'a':1}, durability='hard')",
      "js": "tbl.insert({id:1, a:1}, {durability:'hard'})",
      "rb": "tbl.insert({ :id => 1, :a => 1 }, { :durability => 'hard' })",
      "ot": "({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':1})"
    },
    {
      "cd": "tbl.count()",
      "ot": "2"
    },
    {
      "py": "tbl.insert({'id':2, 'a':2}, durability='soft')",
      "js": "tbl.insert({id:2, a:2}, {durability:'soft'})",
      "rb": "tbl.insert({ :id => 2, :a => 2 }, { :durability => 'soft' })",
      "ot": "({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':1})"
    },
    {
      "cd": "tbl.count()",
      "ot": "3"
    },
    {
      "py": "tbl.insert({'id':3, 'a':3}, durability='wrong')",
      "js": "tbl.insert({id:3, a:3}, {durability:'wrong'})",
      "rb": "tbl.insert({ :id => 3, :a => 3 }, { :durability => 'wrong' })",
      "ot": "err('ReqlQueryLogicError', 'Durability option `wrong` unrecognized (options are \"hard\" and \"soft\").', [0])"
    },
    {
      "cd": "tbl.count()",
      "ot": "3"
    },
    {
      "cd": "tbl.get(2).delete()",
      "ot": "({'deleted':1,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':0.0})"
    },
    {
      "cd": "tbl.insert([{'id':2,'a':2}, {'id':3,'a':3}])",
      "ot": "({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':2})"
    },
    {
      "cd": "tbl2.insert(tbl)",
      "ot": "({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':4})"
    },
    {
      "cd": "tbl.insert({'id':2,'b':20})",
      "ot": "({'first_error':\"Duplicate primary key `id`:\\n{\\n\\t\\\"a\\\":\\t2,\\n\\t\\\"id\\\":\\t2\\n}\\n{\\n\\t\\\"b\\\":\\t20,\\n\\t\\\"id\\\":\\t2\\n}\",'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':1,'skipped':0.0,'inserted':0.0})"
    },
    {
      "py": "tbl.insert({'id':2,'b':20}, conflict='error')",
      "js": "tbl.insert({'id':2,'b':20}, {conflict:'error'})",
      "rb": "tbl.insert({:id => 2, :b => 20}, { :conflict => 'error' })",
      "ot": "({'first_error':\"Duplicate primary key `id`:\\n{\\n\\t\\\"a\\\":\\t2,\\n\\t\\\"id\\\":\\t2\\n}\\n{\\n\\t\\\"b\\\":\\t20,\\n\\t\\\"id\\\":\\t2\\n}\",'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':1,'skipped':0.0,'inserted':0.0})"
    },
    {
      "py": "tbl.insert({'id':15,'b':20}, conflict='error')",
      "js": "tbl.insert({'id':15,'b':20}, {conflict:'error'})",
      "rb": "tbl.insert({:id => 15, :b => 20}, { :conflict => 'error' })",
      "ot": "({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':1})"
    },
    {
      "cd": "tbl.get(15)",
      "ot": "({'id':15,'b':20})"
    },
    {
      "py": "tbl.insert({'id':2,'b':20}, conflict='replace')",
      "js": "tbl.insert({'id':2,'b':20}, {conflict:'replace'})",
      "rb": "tbl.insert({:id => 2, :b => 20}, { :conflict => 'replace' })",
      "ot": "({'deleted':0.0,'replaced':1,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':0.0})"
    },
    {
      "cd": "tbl.get(2)",
      "ot": "({'id':2,'b':20})"
    },
    {
      "py": "tbl.insert({'id':20,'b':20}, conflict='replace')",
      "js": "tbl.insert({'id':20,'b':20}, {conflict:'replace'})",
      "rb": "tbl.insert({:id => 20, :b => 20}, { :conflict => 'replace' })",
      "ot": "({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':1})"
    },
    {
      "cd": "tbl.get(20)",
      "ot": "({'id':20,'b':20})"
    },
    {
      "py": "tbl.insert({'id':2,'c':30}, conflict='update')",
      "js": "tbl.insert({'id':2,'c':30}, {conflict:'update'})",
      "rb": "tbl.insert({:id => 2, :c => 30}, { :conflict => 'update' })",
      "ot": "({'deleted':0.0,'replaced':1,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':0.0})"
    },
    {
      "cd": "tbl.get(2)",
      "ot": "({'id':2, 'b':20, 'c':30})"
    },
    {
      "py": "tbl.insert({'id':30,'b':20}, conflict='update')",
      "js": "tbl.insert({'id':30,'b':20}, {conflict:'update'})",
      "rb": "tbl.insert({:id => 30, :b => 20}, { :conflict => 'update' })",
      "ot": "({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':1})"
    },
    {
      "cd": "tbl.get(30)",
      "ot": "({'id':30,'b':20})"
    },
    {
      "py": "tbl.insert({'id':3, 'a':3}, conflict='wrong')",
      "js": "tbl.insert({id:3, a:3}, {conflict:'wrong'})",
      "rb": "tbl.insert({ :id => 3, :a => 3 }, { :conflict => 'wrong' })",
      "ot": "err('ReqlQueryLogicError', 'Conflict option `wrong` unrecognized (options are \"error\", \"replace\" and \"update\").', [0])"
    },
    {
      "py": "r.db('test').table_create('testpkey', primary_key='foo')",
      "js": "r.db('test').tableCreate('testpkey', {primaryKey:'foo'})",
      "rb": "r.db('test').table_create('testpkey', { :primary_key => 'foo' })",
      "ot": "partial({'tables_created':1})",
      "def": "tblpkey = r.db('test').table('testpkey')"
    },
    {
      "cd": "tblpkey.insert({})",
      "ot": "({'deleted':0.0,'replaced':0.0,'generated_keys':arrlen(1,uuid()),'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':1})"
    },
    {
      "cd": "tblpkey",
      "ot": "([{'foo':uuid()}])"
    },
    {
      "py": "tblpkey.insert({'b':20}, conflict='replace')",
      "js": "tblpkey.insert({'b':20}, {conflict:'replace'})",
      "rb": "tblpkey.insert({:b => 20}, { :conflict => 'replace' })",
      "ot": "({'deleted':0.0,'replaced':0.0,'generated_keys':arrlen(1,uuid()),'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':1})"
    },
    {
      "py": "tblpkey.insert({'b':20}, conflict='update')",
      "js": "tblpkey.insert({'b':20}, {conflict:'update'})",
      "rb": "tblpkey.insert({:b => 20}, { :conflict => 'update' })",
      "ot": "({'deleted':0.0,'replaced':0.0,'generated_keys':arrlen(1,uuid()),'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':1})"
    },
    {
      "cd": "r.db('test').table_drop('testpkey')",
      "ot": "partial({'tables_dropped':1})"
    },
    {
      "py": "tbl.for_each(lambda  row:          tbl2.insert(row.merge({'id':row['id']  +  100 }))   )",
      "js": "tbl.forEach(function(row) { return tbl2.insert(row.merge({'id':row('id').add(100)})); })",
      "rb": "tbl.for_each(proc {  |row|          tbl2.insert(row.merge({'id'=>row['id']  +  100 }))  })",
      "ot": "({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':7})"
    },
    {
      "cd": "tbl.insert({'value':r.minval})",
      "rb": "tbl.insert({:value => r.minval})",
      "ot": "partial({'errors':1,'first_error':'`r.minval` and `r.maxval` cannot be written to disk.'})"
    },
    {
      "cd": "tbl.insert({'value':r.maxval})",
      "rb": "tbl.insert({:value => r.maxval})",
      "ot": "partial({'errors':1,'first_error':'`r.minval` and `r.maxval` cannot be written to disk.'})"
    },
    {
      "cd": "r.minval",
      "ot": "err('ReqlQueryLogicError','Cannot convert `r.minval` to JSON.')"
    },
    {
      "cd": "r.maxval",
      "ot": "err('ReqlQueryLogicError','Cannot convert `r.maxval` to JSON.')"
    },
    {
      "cd": "r.db('test').table_drop('test2')",
      "ot": "partial({'tables_dropped':1})"
    }
  ]
}