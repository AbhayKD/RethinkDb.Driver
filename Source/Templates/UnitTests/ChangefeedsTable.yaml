ModuleName: ChangefeedsTable
TableVarNames:
- tbl
DefsAndTests:
- TestType: JavaDef
  TestFile: changefeeds/table.yaml
  LineNum: 9
  Original: all = tbl.changes()
  VarName: all
  VarType: Changes
  RunIfQuery: true
  Value: (Changes) (tbl.changes())
  Java: Changes all = (Changes) (tbl.changes());
  RunOpts: []
- TestType: JavaQuery
  TestFile: changefeeds/table.yaml
  LineNum: 15
  Original: tbl.insert([{'id':1}, {'id':2}])
  Java: tbl.insert(r.array(r.hashMap("id", 1L), r.hashMap("id", 2L)))
  ExpectedOriginal: partial({'errors':0, 'inserted':2})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("errors", 0L).with("inserted", 2L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: changefeeds/table.yaml
  LineNum: 17
  Original: fetch(all, 2)
  Java: fetch(all, 2L)
  ExpectedOriginal: bag([{'old_val':null, 'new_val':{'id':1}}, {'old_val':null, 'new_val':{'id':2}}])
  ExpectedType: Bag
  ExpectedJava: bag(r.array(r.hashMap("old_val", null).with("new_val", r.hashMap("id", 1L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 2L))))
  RunOpts: []
- TestType: JavaQuery
  TestFile: changefeeds/table.yaml
  LineNum: 22
  Original: tbl.get(1).update({'version':1})
  Java: tbl.get(1L).update(r.hashMap("version", 1L))
  ExpectedOriginal: partial({'errors':0, 'replaced':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("errors", 0L).with("replaced", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: changefeeds/table.yaml
  LineNum: 24
  Original: fetch(all, 1)
  Java: fetch(all, 1L)
  ExpectedOriginal: '[{''old_val'':{''id'':1}, ''new_val'':{''id'':1, ''version'':1}}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("old_val", r.hashMap("id", 1L)).with("new_val", r.hashMap("id", 1L).with("version", 1L)))
  RunOpts: []
- TestType: JavaQuery
  TestFile: changefeeds/table.yaml
  LineNum: 29
  Original: tbl.get(1).delete()
  Java: tbl.get(1L).delete()
  ExpectedOriginal: partial({'errors':0, 'deleted':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("errors", 0L).with("deleted", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: changefeeds/table.yaml
  LineNum: 31
  Original: fetch(all, 1)
  Java: fetch(all, 1L)
  ExpectedOriginal: '[{''old_val'':{''id'':1, ''version'':1}, ''new_val'':null}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("old_val", r.hashMap("id", 1L).with("version", 1L)).with("new_val", null))
  RunOpts: []
- TestType: JavaDef
  TestFile: changefeeds/table.yaml
  LineNum: 36
  Original: pluck = tbl.changes().pluck({'new_val':['version']})
  VarName: pluck
  VarType: Pluck
  RunIfQuery: true
  Value: (Pluck) (tbl.changes().pluck(r.hashMap("new_val", r.array("version"))))
  Java: Pluck pluck = (Pluck) (tbl.changes().pluck(r.hashMap("new_val", r.array("version"))));
  RunOpts: []
- TestType: JavaQuery
  TestFile: changefeeds/table.yaml
  LineNum: 37
  Original: tbl.insert([{'id':5, 'version':5}])
  Java: tbl.insert(r.array(r.hashMap("id", 5L).with("version", 5L)))
  ExpectedOriginal: partial({'errors':0, 'inserted':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("errors", 0L).with("inserted", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: changefeeds/table.yaml
  LineNum: 39
  Original: fetch(pluck, 1)
  Java: fetch(pluck, 1L)
  ExpectedOriginal: '[{''new_val'':{''version'':5}}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("new_val", r.hashMap("version", 5L)))
  RunOpts: []
- TestType: JavaQuery
  TestFile: changefeeds/table.yaml
  LineNum: 44
  Original: tbl.changes().order_by('id')
  Java: tbl.changes().orderBy("id")
  ExpectedOriginal: err('ReqlQueryLogicError', "Cannot call a terminal (`reduce`, `count`, etc.) on an infinite stream (such as a changefeed).")
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot call a terminal (`reduce`, `count`, etc.) on an infinite stream (such as a changefeed).")
  RunOpts: []
- TestType: JavaDef
  TestFile: changefeeds/table.yaml
  LineNum: 71
  Original: vtbl = r.db('rethinkdb').table('_debug_scratch')
  VarName: vtbl
  VarType: Table
  Value: (Table) (r.db("rethinkdb").table("_debug_scratch"))
  Java: Table vtbl = (Table) (r.db("rethinkdb").table("_debug_scratch"));
  RunOpts: []
- TestType: JavaDef
  TestFile: changefeeds/table.yaml
  LineNum: 72
  Original: allVirtual = vtbl.changes()
  VarName: allVirtual
  VarType: Changes
  RunIfQuery: true
  Value: (Changes) (vtbl.changes())
  Java: Changes allVirtual = (Changes) (vtbl.changes());
  RunOpts: []
- TestType: JavaQuery
  TestFile: changefeeds/table.yaml
  LineNum: 76
  Original: vtbl.insert([{'id':1}, {'id':2}])
  Java: vtbl.insert(r.array(r.hashMap("id", 1L), r.hashMap("id", 2L)))
  ExpectedOriginal: partial({'errors':0, 'inserted':2})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("errors", 0L).with("inserted", 2L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: changefeeds/table.yaml
  LineNum: 78
  Original: fetch(allVirtual, 2)
  Java: fetch(allVirtual, 2L)
  ExpectedOriginal: bag([{'old_val':null, 'new_val':{'id':1}}, {'old_val':null, 'new_val':{'id':2}}])
  ExpectedType: Bag
  ExpectedJava: bag(r.array(r.hashMap("old_val", null).with("new_val", r.hashMap("id", 1L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 2L))))
  RunOpts: []
- TestType: JavaQuery
  TestFile: changefeeds/table.yaml
  LineNum: 83
  Original: vtbl.get(1).update({'version':1})
  Java: vtbl.get(1L).update(r.hashMap("version", 1L))
  ExpectedOriginal: partial({'errors':0, 'replaced':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("errors", 0L).with("replaced", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: changefeeds/table.yaml
  LineNum: 85
  Original: fetch(allVirtual, 1)
  Java: fetch(allVirtual, 1L)
  ExpectedOriginal: '[{''old_val'':{''id'':1}, ''new_val'':{''id'':1, ''version'':1}}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("old_val", r.hashMap("id", 1L)).with("new_val", r.hashMap("id", 1L).with("version", 1L)))
  RunOpts: []
- TestType: JavaQuery
  TestFile: changefeeds/table.yaml
  LineNum: 90
  Original: vtbl.get(1).delete()
  Java: vtbl.get(1L).delete()
  ExpectedOriginal: partial({'errors':0, 'deleted':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("errors", 0L).with("deleted", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: changefeeds/table.yaml
  LineNum: 92
  Original: fetch(allVirtual, 1)
  Java: fetch(allVirtual, 1L)
  ExpectedOriginal: '[{''old_val'':{''id'':1, ''version'':1}, ''new_val'':null}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("old_val", r.hashMap("id", 1L).with("version", 1L)).with("new_val", null))
  RunOpts: []
- TestType: JavaDef
  TestFile: changefeeds/table.yaml
  LineNum: 97
  Original: vpluck = vtbl.changes().pluck({'new_val':['version']})
  VarName: vpluck
  VarType: Pluck
  RunIfQuery: true
  Value: (Pluck) (vtbl.changes().pluck(r.hashMap("new_val", r.array("version"))))
  Java: Pluck vpluck = (Pluck) (vtbl.changes().pluck(r.hashMap("new_val", r.array("version"))));
  RunOpts: []
- TestType: JavaQuery
  TestFile: changefeeds/table.yaml
  LineNum: 98
  Original: vtbl.insert([{'id':5, 'version':5}])
  Java: vtbl.insert(r.array(r.hashMap("id", 5L).with("version", 5L)))
  ExpectedOriginal: partial({'errors':0, 'inserted':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("errors", 0L).with("inserted", 1L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: changefeeds/table.yaml
  LineNum: 100
  Original: fetch(vpluck, 1)
  Java: fetch(vpluck, 1L)
  ExpectedOriginal: '[{''new_val'':{''version'':5}}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("new_val", r.hashMap("version", 5L)))
  RunOpts: []
