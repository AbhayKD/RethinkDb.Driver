ModuleName: DatumString
DefsAndTests:
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 8
  Original: r.expr('str')
  Java: r.expr("str")
  ExpectedOriginal: '"str"'
  ExpectedType: String
  ExpectedJava: '"str"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 13
  Original: r.expr("str")
  Java: r.expr("str")
  ExpectedOriginal: '"str"'
  ExpectedType: String
  ExpectedJava: '"str"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 21
  Original: r.expr(u'str')
  Java: r.expr("str")
  ExpectedOriginal: 'str'
  ExpectedType: String
  ExpectedJava: '"str"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 30
  Original: "r.expr(u'こんにちは')"
  Java: "r.expr(\"こんにちは\")"
  ExpectedOriginal: "'こんにちは'"
  ExpectedType: String
  ExpectedJava: "\"こんにちは\""
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 37
  Original: r.expr('foo').type_of()
  Java: r.expr("foo").typeOf()
  ExpectedOriginal: 'STRING'
  ExpectedType: String
  ExpectedJava: '"STRING"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 41
  Original: r.expr('foo').coerce_to('string')
  Java: r.expr("foo").coerceTo("string")
  ExpectedOriginal: 'foo'
  ExpectedType: String
  ExpectedJava: '"foo"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 43
  Original: r.expr('-1.2').coerce_to('NUMBER')
  Java: r.expr("-1.2").coerceTo("NUMBER")
  ExpectedOriginal: -1.2
  ExpectedType: Double
  ExpectedJava: -1.2
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 45
  Original: r.expr('--1.2').coerce_to('NUMBER')
  Java: r.expr("--1.2").coerceTo("NUMBER")
  ExpectedOriginal: err("ReqlQueryLogicError", "Could not coerce `--1.2` to NUMBER.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Could not coerce `--1.2` to NUMBER.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 47
  Original: r.expr('-1.2-').coerce_to('NUMBER')
  Java: r.expr("-1.2-").coerceTo("NUMBER")
  ExpectedOriginal: err("ReqlQueryLogicError", "Could not coerce `-1.2-` to NUMBER.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Could not coerce `-1.2-` to NUMBER.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 49
  Original: r.expr('0xa').coerce_to('NUMBER')
  Java: r.expr("0xa").coerceTo("NUMBER")
  ExpectedOriginal: 10
  ExpectedType: Long
  ExpectedJava: 10L
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 51
  Original: r.expr('inf').coerce_to('NUMBER')
  Java: r.expr("inf").coerceTo("NUMBER")
  ExpectedOriginal: 'err("ReqlQueryLogicError", "Non-finite number: inf", [])'
  ExpectedType: Err
  ExpectedJava: 'err("ReqlQueryLogicError", "Non-finite number: inf", r.array())'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 55
  Original: r.expr('').split()
  Java: r.expr("").split()
  ExpectedOriginal: '[]'
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 57
  Original: r.expr('').split(null)
  Java: r.expr("").split((ReqlExpr) null)
  ExpectedOriginal: '[]'
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 59
  Original: r.expr('').split(' ')
  Java: r.expr("").split(" ")
  ExpectedOriginal: '['''']'
  ExpectedType: List
  ExpectedJava: r.array("")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 61
  Original: r.expr('').split('')
  Java: r.expr("").split("")
  ExpectedOriginal: '[]'
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 63
  Original: r.expr('').split(null, 5)
  Java: r.expr("").split((ReqlExpr) null, 5L)
  ExpectedOriginal: '[]'
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 65
  Original: r.expr('').split(' ', 5)
  Java: r.expr("").split(" ", 5L)
  ExpectedOriginal: '['''']'
  ExpectedType: List
  ExpectedJava: r.array("")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 67
  Original: r.expr('').split('', 5)
  Java: r.expr("").split("", 5L)
  ExpectedOriginal: '[]'
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 70
  Original: r.expr('aaaa bbbb  cccc ').split()
  Java: r.expr("aaaa bbbb  cccc ").split()
  ExpectedOriginal: '[''aaaa'', ''bbbb'', ''cccc'']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb", "cccc")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 72
  Original: r.expr('aaaa bbbb  cccc ').split(null)
  Java: r.expr("aaaa bbbb  cccc ").split((ReqlExpr) null)
  ExpectedOriginal: '[''aaaa'', ''bbbb'', ''cccc'']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb", "cccc")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 74
  Original: r.expr('aaaa bbbb  cccc ').split(' ')
  Java: r.expr("aaaa bbbb  cccc ").split(" ")
  ExpectedOriginal: '[''aaaa'', ''bbbb'', '''', ''cccc'', '''']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb", "", "cccc", "")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 76
  Original: r.expr('aaaa bbbb  cccc ').split('')
  Java: r.expr("aaaa bbbb  cccc ").split("")
  ExpectedOriginal: '[''a'', ''a'', ''a'', ''a'', '' '', ''b'', ''b'', ''b'', ''b'', '' '', '' '', ''c'', ''c'', ''c'', ''c'', '' '']'
  ExpectedType: List
  ExpectedJava: r.array("a", "a", "a", "a", " ", "b", "b", "b", "b", " ", " ", "c", "c", "c", "c", " ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 78
  Original: r.expr('aaaa bbbb  cccc ').split('b')
  Java: r.expr("aaaa bbbb  cccc ").split("b")
  ExpectedOriginal: '[''aaaa '', '''', '''', '''', ''  cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa ", "", "", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 80
  Original: r.expr('aaaa bbbb  cccc ').split('bb')
  Java: r.expr("aaaa bbbb  cccc ").split("bb")
  ExpectedOriginal: '[''aaaa '', '''', ''  cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa ", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 82
  Original: r.expr('aaaa bbbb  cccc ').split(' bbbb  ')
  Java: r.expr("aaaa bbbb  cccc ").split(" bbbb  ")
  ExpectedOriginal: '[''aaaa'', ''cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 84
  Original: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split('bb')
  Java: r.expr("aaaa bbbb  cccc b d bb e bbbb f").split("bb")
  ExpectedOriginal: '[''aaaa '', '''', ''  cccc b d '', '' e '', '''', '' f'']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa ", "", "  cccc b d ", " e ", "", " f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 86
  Original: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ')
  Java: r.expr("aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ")
  ExpectedOriginal: '[''aaaa'', ''cccc b d bb e bbbb f'']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "cccc b d bb e bbbb f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 88
  Original: r.expr('aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ')
  Java: r.expr("aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ")
  ExpectedOriginal: '[''aaaa'', ''cccc b d bb e'', ''f'']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "cccc b d bb e", "f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 91
  Original: r.expr('aaaa bbbb  cccc ').split(null, 3)
  Java: r.expr("aaaa bbbb  cccc ").split((ReqlExpr) null, 3L)
  ExpectedOriginal: '[''aaaa'', ''bbbb'', ''cccc'']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb", "cccc")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 93
  Original: r.expr('aaaa bbbb  cccc ').split(' ', 5)
  Java: r.expr("aaaa bbbb  cccc ").split(" ", 5L)
  ExpectedOriginal: '[''aaaa'', ''bbbb'', '''', ''cccc'', '''']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb", "", "cccc", "")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 95
  Original: r.expr('aaaa bbbb  cccc ').split('', 5)
  Java: r.expr("aaaa bbbb  cccc ").split("", 5L)
  ExpectedOriginal: '[''a'', ''a'', ''a'', ''a'', '' '', ''bbbb  cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("a", "a", "a", "a", " ", "bbbb  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 97
  Original: r.expr('aaaa bbbb  cccc ').split('b', 5)
  Java: r.expr("aaaa bbbb  cccc ").split("b", 5L)
  ExpectedOriginal: '[''aaaa '', '''', '''', '''', ''  cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa ", "", "", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 99
  Original: r.expr('aaaa bbbb  cccc ').split('bb', 3)
  Java: r.expr("aaaa bbbb  cccc ").split("bb", 3L)
  ExpectedOriginal: '[''aaaa '', '''', ''  cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa ", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 101
  Original: r.expr('aaaa bbbb  cccc ').split(' bbbb  ', 2)
  Java: r.expr("aaaa bbbb  cccc ").split(" bbbb  ", 2L)
  ExpectedOriginal: '[''aaaa'', ''cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 103
  Original: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split('bb', 6)
  Java: r.expr("aaaa bbbb  cccc b d bb e bbbb f").split("bb", 6L)
  ExpectedOriginal: '[''aaaa '', '''', ''  cccc b d '', '' e '', '''', '' f'']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa ", "", "  cccc b d ", " e ", "", " f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 105
  Original: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 2)
  Java: r.expr("aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 2L)
  ExpectedOriginal: '[''aaaa'', ''cccc b d bb e bbbb f'']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "cccc b d bb e bbbb f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 107
  Original: r.expr('aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 3)
  Java: r.expr("aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 3L)
  ExpectedOriginal: '[''aaaa'', ''cccc b d bb e'', ''f'']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "cccc b d bb e", "f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 110
  Original: r.expr('aaaa bbbb  cccc ').split(null, 2)
  Java: r.expr("aaaa bbbb  cccc ").split((ReqlExpr) null, 2L)
  ExpectedOriginal: '[''aaaa'', ''bbbb'', ''cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb", "cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 112
  Original: r.expr("a  b  ").split(null, 2)
  Java: r.expr("a  b  ").split((ReqlExpr) null, 2L)
  ExpectedOriginal: '["a", "b"]'
  ExpectedType: List
  ExpectedJava: r.array("a", "b")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 114
  Original: r.expr('aaaa bbbb  cccc ').split(' ', 4)
  Java: r.expr("aaaa bbbb  cccc ").split(" ", 4L)
  ExpectedOriginal: '[''aaaa'', ''bbbb'', '''', ''cccc'', '''']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb", "", "cccc", "")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 116
  Original: r.expr('aaaa bbbb  cccc ').split('', 4)
  Java: r.expr("aaaa bbbb  cccc ").split("", 4L)
  ExpectedOriginal: '[''a'', ''a'', ''a'', ''a'', '' bbbb  cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("a", "a", "a", "a", " bbbb  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 118
  Original: r.expr('aaaa bbbb  cccc ').split('b', 4)
  Java: r.expr("aaaa bbbb  cccc ").split("b", 4L)
  ExpectedOriginal: '[''aaaa '', '''', '''', '''', ''  cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa ", "", "", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 120
  Original: r.expr('aaaa bbbb  cccc ').split('bb', 2)
  Java: r.expr("aaaa bbbb  cccc ").split("bb", 2L)
  ExpectedOriginal: '[''aaaa '', '''', ''  cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa ", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 122
  Original: r.expr('aaaa bbbb  cccc ').split(' bbbb  ', 1)
  Java: r.expr("aaaa bbbb  cccc ").split(" bbbb  ", 1L)
  ExpectedOriginal: '[''aaaa'', ''cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 124
  Original: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split('bb', 5)
  Java: r.expr("aaaa bbbb  cccc b d bb e bbbb f").split("bb", 5L)
  ExpectedOriginal: '[''aaaa '', '''', ''  cccc b d '', '' e '', '''', '' f'']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa ", "", "  cccc b d ", " e ", "", " f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 126
  Original: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 1)
  Java: r.expr("aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 1L)
  ExpectedOriginal: '[''aaaa'', ''cccc b d bb e bbbb f'']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "cccc b d bb e bbbb f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 128
  Original: r.expr('aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 2)
  Java: r.expr("aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 2L)
  ExpectedOriginal: '[''aaaa'', ''cccc b d bb e'', ''f'']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "cccc b d bb e", "f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 131
  Original: r.expr('aaaa bbbb  cccc ').split(null, 1)
  Java: r.expr("aaaa bbbb  cccc ").split((ReqlExpr) null, 1L)
  ExpectedOriginal: '[''aaaa'', ''bbbb  cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 133
  Original: r.expr('aaaa bbbb  cccc ').split(' ', 2)
  Java: r.expr("aaaa bbbb  cccc ").split(" ", 2L)
  ExpectedOriginal: '[''aaaa'', ''bbbb'', '' cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb", " cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 135
  Original: r.expr('aaaa bbbb  cccc ').split('', 2)
  Java: r.expr("aaaa bbbb  cccc ").split("", 2L)
  ExpectedOriginal: '[''a'', ''a'', ''aa bbbb  cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("a", "a", "aa bbbb  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 137
  Original: r.expr('aaaa bbbb  cccc ').split('b', 2)
  Java: r.expr("aaaa bbbb  cccc ").split("b", 2L)
  ExpectedOriginal: '[''aaaa '', '''', ''bb  cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa ", "", "bb  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 139
  Original: r.expr('aaaa bbbb  cccc ').split('bb', 2)
  Java: r.expr("aaaa bbbb  cccc ").split("bb", 2L)
  ExpectedOriginal: '[''aaaa '', '''', ''  cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa ", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 141
  Original: r.expr('aaaa bbbb  cccc ').split(' bbbb  ', 2)
  Java: r.expr("aaaa bbbb  cccc ").split(" bbbb  ", 2L)
  ExpectedOriginal: '[''aaaa'', ''cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 143
  Original: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split('bb', 2)
  Java: r.expr("aaaa bbbb  cccc b d bb e bbbb f").split("bb", 2L)
  ExpectedOriginal: '[''aaaa '', '''', ''  cccc b d bb e bbbb f'']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa ", "", "  cccc b d bb e bbbb f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 145
  Original: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 2)
  Java: r.expr("aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 2L)
  ExpectedOriginal: '[''aaaa'', ''cccc b d bb e bbbb f'']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "cccc b d bb e bbbb f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 147
  Original: r.expr('aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 2)
  Java: r.expr("aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 2L)
  ExpectedOriginal: '[''aaaa'', ''cccc b d bb e'', ''f'']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "cccc b d bb e", "f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 150
  Original: r.expr('  ').split()
  Java: r.expr("  ").split()
  ExpectedOriginal: '[]'
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 152
  Original: r.expr('  ').split(null)
  Java: r.expr("  ").split((ReqlExpr) null)
  ExpectedOriginal: '[]'
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 154
  Original: r.expr('  ').split(' ')
  Java: r.expr("  ").split(" ")
  ExpectedOriginal: '['''', '''', '''']'
  ExpectedType: List
  ExpectedJava: r.array("", "", "")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 156
  Original: r.expr('  ').split(null, 5)
  Java: r.expr("  ").split((ReqlExpr) null, 5L)
  ExpectedOriginal: '[]'
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 158
  Original: r.expr('  ').split(' ', 5)
  Java: r.expr("  ").split(" ", 5L)
  ExpectedOriginal: '['''', '''', '''']'
  ExpectedType: List
  ExpectedJava: r.array("", "", "")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 161
  Original: r.expr('  aaaa bbbb  cccc ').split()
  Java: r.expr("  aaaa bbbb  cccc ").split()
  ExpectedOriginal: '[''aaaa'', ''bbbb'', ''cccc'']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb", "cccc")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 163
  Original: r.expr('  aaaa bbbb  cccc ').split(null)
  Java: r.expr("  aaaa bbbb  cccc ").split((ReqlExpr) null)
  ExpectedOriginal: '[''aaaa'', ''bbbb'', ''cccc'']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb", "cccc")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 165
  Original: r.expr('  aaaa bbbb  cccc ').split(' ')
  Java: r.expr("  aaaa bbbb  cccc ").split(" ")
  ExpectedOriginal: '['''', '''', ''aaaa'', ''bbbb'', '''', ''cccc'', '''']'
  ExpectedType: List
  ExpectedJava: r.array("", "", "aaaa", "bbbb", "", "cccc", "")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 167
  Original: r.expr('  aaaa bbbb  cccc ').split('b')
  Java: r.expr("  aaaa bbbb  cccc ").split("b")
  ExpectedOriginal: '[''  aaaa '', '''', '''', '''', ''  cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("  aaaa ", "", "", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 169
  Original: r.expr('  aaaa bbbb  cccc ').split('bb')
  Java: r.expr("  aaaa bbbb  cccc ").split("bb")
  ExpectedOriginal: '[''  aaaa '', '''', ''  cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("  aaaa ", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 171
  Original: r.expr('  aaaa bbbb  cccc ').split(' bbbb  ')
  Java: r.expr("  aaaa bbbb  cccc ").split(" bbbb  ")
  ExpectedOriginal: '[''  aaaa'', ''cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("  aaaa", "cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 173
  Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split('bb')
  Java: r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split("bb")
  ExpectedOriginal: '[''  aaaa '', '''', ''  cccc b d '', '' e '', '''', '' f'']'
  ExpectedType: List
  ExpectedJava: r.array("  aaaa ", "", "  cccc b d ", " e ", "", " f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 175
  Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ')
  Java: r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ")
  ExpectedOriginal: '[''  aaaa'', ''cccc b d bb e bbbb f'']'
  ExpectedType: List
  ExpectedJava: r.array("  aaaa", "cccc b d bb e bbbb f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 177
  Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ')
  Java: r.expr("  aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ")
  ExpectedOriginal: '[''  aaaa'', ''cccc b d bb e'', ''f'']'
  ExpectedType: List
  ExpectedJava: r.array("  aaaa", "cccc b d bb e", "f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 180
  Original: r.expr('  aaaa bbbb  cccc ').split(null, 3)
  Java: r.expr("  aaaa bbbb  cccc ").split((ReqlExpr) null, 3L)
  ExpectedOriginal: '[''aaaa'', ''bbbb'', ''cccc'']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb", "cccc")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 182
  Original: r.expr('  aaaa bbbb  cccc ').split(' ', 5)
  Java: r.expr("  aaaa bbbb  cccc ").split(" ", 5L)
  ExpectedOriginal: '['''', '''', ''aaaa'', ''bbbb'', '''', ''cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("", "", "aaaa", "bbbb", "", "cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 184
  Original: r.expr('  aaaa bbbb  cccc ').split('b', 5)
  Java: r.expr("  aaaa bbbb  cccc ").split("b", 5L)
  ExpectedOriginal: '[''  aaaa '', '''', '''', '''', ''  cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("  aaaa ", "", "", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 186
  Original: r.expr('  aaaa bbbb  cccc ').split('bb', 3)
  Java: r.expr("  aaaa bbbb  cccc ").split("bb", 3L)
  ExpectedOriginal: '[''  aaaa '', '''', ''  cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("  aaaa ", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 188
  Original: r.expr('  aaaa bbbb  cccc ').split(' bbbb  ', 2)
  Java: r.expr("  aaaa bbbb  cccc ").split(" bbbb  ", 2L)
  ExpectedOriginal: '[''  aaaa'', ''cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("  aaaa", "cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 190
  Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split('bb', 6)
  Java: r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split("bb", 6L)
  ExpectedOriginal: '[''  aaaa '', '''', ''  cccc b d '', '' e '', '''', '' f'']'
  ExpectedType: List
  ExpectedJava: r.array("  aaaa ", "", "  cccc b d ", " e ", "", " f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 192
  Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 2)
  Java: r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 2L)
  ExpectedOriginal: '[''  aaaa'', ''cccc b d bb e bbbb f'']'
  ExpectedType: List
  ExpectedJava: r.array("  aaaa", "cccc b d bb e bbbb f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 194
  Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 3)
  Java: r.expr("  aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 3L)
  ExpectedOriginal: '[''  aaaa'', ''cccc b d bb e'', ''f'']'
  ExpectedType: List
  ExpectedJava: r.array("  aaaa", "cccc b d bb e", "f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 197
  Original: r.expr('  aaaa bbbb  cccc ').split(null, 2)
  Java: r.expr("  aaaa bbbb  cccc ").split((ReqlExpr) null, 2L)
  ExpectedOriginal: '[''aaaa'', ''bbbb'', ''cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb", "cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 199
  Original: r.expr("a  b  ").split(null, 2)
  Java: r.expr("a  b  ").split((ReqlExpr) null, 2L)
  ExpectedOriginal: '["a", "b"]'
  ExpectedType: List
  ExpectedJava: r.array("a", "b")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 201
  Original: r.expr('  aaaa bbbb  cccc ').split(' ', 4)
  Java: r.expr("  aaaa bbbb  cccc ").split(" ", 4L)
  ExpectedOriginal: '['''', '''', ''aaaa'', ''bbbb'', '' cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("", "", "aaaa", "bbbb", " cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 203
  Original: r.expr('  aaaa bbbb  cccc ').split('b', 4)
  Java: r.expr("  aaaa bbbb  cccc ").split("b", 4L)
  ExpectedOriginal: '[''  aaaa '', '''', '''', '''', ''  cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("  aaaa ", "", "", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 205
  Original: r.expr('  aaaa bbbb  cccc ').split('bb', 2)
  Java: r.expr("  aaaa bbbb  cccc ").split("bb", 2L)
  ExpectedOriginal: '[''  aaaa '', '''', ''  cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("  aaaa ", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 207
  Original: r.expr('  aaaa bbbb  cccc ').split(' bbbb  ', 1)
  Java: r.expr("  aaaa bbbb  cccc ").split(" bbbb  ", 1L)
  ExpectedOriginal: '[''  aaaa'', ''cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("  aaaa", "cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 209
  Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split('bb', 5)
  Java: r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split("bb", 5L)
  ExpectedOriginal: '[''  aaaa '', '''', ''  cccc b d '', '' e '', '''', '' f'']'
  ExpectedType: List
  ExpectedJava: r.array("  aaaa ", "", "  cccc b d ", " e ", "", " f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 211
  Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 1)
  Java: r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 1L)
  ExpectedOriginal: '[''  aaaa'', ''cccc b d bb e bbbb f'']'
  ExpectedType: List
  ExpectedJava: r.array("  aaaa", "cccc b d bb e bbbb f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 213
  Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 2)
  Java: r.expr("  aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 2L)
  ExpectedOriginal: '[''  aaaa'', ''cccc b d bb e'', ''f'']'
  ExpectedType: List
  ExpectedJava: r.array("  aaaa", "cccc b d bb e", "f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 216
  Original: r.expr('  aaaa bbbb  cccc ').split(null, 1)
  Java: r.expr("  aaaa bbbb  cccc ").split((ReqlExpr) null, 1L)
  ExpectedOriginal: '[''aaaa'', ''bbbb  cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 218
  Original: r.expr('  aaaa bbbb  cccc ').split(' ', 2)
  Java: r.expr("  aaaa bbbb  cccc ").split(" ", 2L)
  ExpectedOriginal: '['''', '''', ''aaaa bbbb  cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("", "", "aaaa bbbb  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 220
  Original: r.expr('  aaaa bbbb  cccc ').split('b', 2)
  Java: r.expr("  aaaa bbbb  cccc ").split("b", 2L)
  ExpectedOriginal: '[''  aaaa '', '''', ''bb  cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("  aaaa ", "", "bb  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 222
  Original: r.expr('  aaaa bbbb  cccc ').split('bb', 2)
  Java: r.expr("  aaaa bbbb  cccc ").split("bb", 2L)
  ExpectedOriginal: '[''  aaaa '', '''', ''  cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("  aaaa ", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 224
  Original: r.expr('  aaaa bbbb  cccc ').split(' bbbb  ', 2)
  Java: r.expr("  aaaa bbbb  cccc ").split(" bbbb  ", 2L)
  ExpectedOriginal: '[''  aaaa'', ''cccc '']'
  ExpectedType: List
  ExpectedJava: r.array("  aaaa", "cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 226
  Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split('bb', 2)
  Java: r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split("bb", 2L)
  ExpectedOriginal: '[''  aaaa '', '''', ''  cccc b d bb e bbbb f'']'
  ExpectedType: List
  ExpectedJava: r.array("  aaaa ", "", "  cccc b d bb e bbbb f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 228
  Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 2)
  Java: r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 2L)
  ExpectedOriginal: '[''  aaaa'', ''cccc b d bb e bbbb f'']'
  ExpectedType: List
  ExpectedJava: r.array("  aaaa", "cccc b d bb e bbbb f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 230
  Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 2)
  Java: r.expr("  aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 2L)
  ExpectedOriginal: '[''  aaaa'', ''cccc b d bb e'', ''f'']'
  ExpectedType: List
  ExpectedJava: r.array("  aaaa", "cccc b d bb e", "f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 233
  Original: r.expr("abc-dEf-GHJ").upcase()
  Java: r.expr("abc-dEf-GHJ").upcase()
  ExpectedOriginal: '"ABC-DEF-GHJ"'
  ExpectedType: String
  ExpectedJava: '"ABC-DEF-GHJ"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 235
  Original: r.expr("abc-dEf-GHJ").downcase()
  Java: r.expr("abc-dEf-GHJ").downcase()
  ExpectedOriginal: '"abc-def-ghj"'
  ExpectedType: String
  ExpectedJava: '"abc-def-ghj"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 240
  Original: r.expr(u"f\u00e9oo").split("")
  Java: "r.expr(\"féoo\").split(\"\")"
  ExpectedOriginal: '["f", "\u00e9", "o", "o"]'
  ExpectedType: List
  ExpectedJava: "r.array(\"f\", \"é\", \"o\", \"o\")"
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 249
  Original: r.expr(u"fe\u0301oo").split("")
  Java: "r.expr(\"féoo\").split(\"\")"
  ExpectedOriginal: '["f", "e\u0301", "o", "o"]'
  ExpectedType: List
  ExpectedJava: "r.array(\"f\", \"é\", \"o\", \"o\")"
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 262
  Original: r.expr(u"foo bar\tbaz\nquux\rfred\u000bbarney\u000cwilma").split()
  Java: r.expr("foo bar\tbaz\nquux\rfred\u000bbarney\u000cwilma").split()
  ExpectedOriginal: '["foo", "bar", "baz", "quux", "fred", "barney", "wilma"]'
  ExpectedType: List
  ExpectedJava: r.array("foo", "bar", "baz", "quux", "fred", "barney", "wilma")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  LineNum: 278
  Original: r.expr(u"foo\u00a0bar\u2001baz\u2060quux\u2028fred\u2028barney\u2029wilma\u0085betty\u200b").split()
  Java: r.expr("foo\u00a0bar\u2001baz\u2060quux\u2028fred\u2028barney\u2029wilma\u0085betty\u200b").split()
  ExpectedOriginal: '["foo", "bar", "baz\u2060quux", "fred", "barney", "wilma", "betty\u200b"]'
  ExpectedType: List
  ExpectedJava: r.array("foo", "bar", "baz\u2060quux", "fred", "barney", "wilma", "betty\u200b")
  RunOpts: []
