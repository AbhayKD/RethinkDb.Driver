ModuleName: DatumString
DefsAndTests:
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 1
  Original: r.expr('str')
  Java: r.expr("str")
  ExpectedOriginal: 'str'
  ExpectedType: String
  ExpectedJava: '"str"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 2
  Original: r.expr("str")
  Java: r.expr("str")
  ExpectedOriginal: '"str"'
  ExpectedType: String
  ExpectedJava: '"str"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 3
  Original: r.expr(u'str')
  Java: r.expr("str")
  ExpectedOriginal: 'str'
  ExpectedType: String
  ExpectedJava: '"str"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 4
  Original: "r.expr(u'こんにちは')"
  Java: "r.expr(\"こんにちは\")"
  ExpectedOriginal: "'こんにちは'"
  ExpectedType: String
  ExpectedJava: "\"こんにちは\""
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 5
  Original: r.expr('foo').type_of()
  Java: r.expr("foo").typeOf()
  ExpectedOriginal: 'STRING'
  ExpectedType: String
  ExpectedJava: '"STRING"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 6
  Original: r.expr('foo').coerce_to('string')
  Java: r.expr("foo").coerceTo("string")
  ExpectedOriginal: ('foo')
  ExpectedType: String
  ExpectedJava: '"foo"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 7
  Original: r.expr('-1.2').coerce_to('NUMBER')
  Java: r.expr("-1.2").coerceTo("NUMBER")
  ExpectedOriginal: -1.2
  ExpectedType: Double
  ExpectedJava: -1.2
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 8
  Original: r.expr('--1.2').coerce_to('NUMBER')
  Java: r.expr("--1.2").coerceTo("NUMBER")
  ExpectedOriginal: err("ReqlQueryLogicError", "Could not coerce `--1.2` to NUMBER.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Could not coerce `--1.2` to NUMBER.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 9
  Original: r.expr('-1.2-').coerce_to('NUMBER')
  Java: r.expr("-1.2-").coerceTo("NUMBER")
  ExpectedOriginal: err("ReqlQueryLogicError", "Could not coerce `-1.2-` to NUMBER.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Could not coerce `-1.2-` to NUMBER.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 10
  Original: r.expr('0xa').coerce_to('NUMBER')
  Java: r.expr("0xa").coerceTo("NUMBER")
  ExpectedOriginal: 10
  ExpectedType: Long
  ExpectedJava: 10
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 11
  Original: r.expr('inf').coerce_to('NUMBER')
  Java: r.expr("inf").coerceTo("NUMBER")
  ExpectedOriginal: >
    err("ReqlQueryLogicError", "Non-finite number: inf", [])
  ExpectedType: Err
  ExpectedJava: 'err("ReqlQueryLogicError", "Non-finite number: inf", r.array())'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 12
  Original: r.expr('').split()
  Java: r.expr("").split()
  ExpectedOriginal: ([])
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 13
  Original: r.expr('').split(null)
  Java: r.expr("").split((ReqlExpr) null)
  ExpectedOriginal: ([])
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 14
  Original: r.expr('').split(' ')
  Java: r.expr("").split(" ")
  ExpectedOriginal: ([''])
  ExpectedType: List
  ExpectedJava: r.array("")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 15
  Original: r.expr('').split('')
  Java: r.expr("").split("")
  ExpectedOriginal: ([])
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 16
  Original: r.expr('').split(null, 5)
  Java: r.expr("").split((ReqlExpr) null, 5)
  ExpectedOriginal: ([])
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 17
  Original: r.expr('').split(' ', 5)
  Java: r.expr("").split(" ", 5)
  ExpectedOriginal: ([''])
  ExpectedType: List
  ExpectedJava: r.array("")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 18
  Original: r.expr('').split('', 5)
  Java: r.expr("").split("", 5)
  ExpectedOriginal: ([])
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 19
  Original: r.expr('aaaa bbbb  cccc ').split()
  Java: r.expr("aaaa bbbb  cccc ").split()
  ExpectedOriginal: (['aaaa', 'bbbb', 'cccc'])
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb", "cccc")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 20
  Original: r.expr('aaaa bbbb  cccc ').split(null)
  Java: r.expr("aaaa bbbb  cccc ").split((ReqlExpr) null)
  ExpectedOriginal: (['aaaa', 'bbbb', 'cccc'])
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb", "cccc")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 21
  Original: r.expr('aaaa bbbb  cccc ').split(' ')
  Java: r.expr("aaaa bbbb  cccc ").split(" ")
  ExpectedOriginal: (['aaaa', 'bbbb', '', 'cccc', ''])
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb", "", "cccc", "")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 22
  Original: r.expr('aaaa bbbb  cccc ').split('')
  Java: r.expr("aaaa bbbb  cccc ").split("")
  ExpectedOriginal: (['a', 'a', 'a', 'a', ' ', 'b', 'b', 'b', 'b', ' ', ' ', 'c', 'c', 'c', 'c', ' '])
  ExpectedType: List
  ExpectedJava: r.array("a", "a", "a", "a", " ", "b", "b", "b", "b", " ", " ", "c", "c", "c", "c", " ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 23
  Original: r.expr('aaaa bbbb  cccc ').split('b')
  Java: r.expr("aaaa bbbb  cccc ").split("b")
  ExpectedOriginal: (['aaaa ', '', '', '', '  cccc '])
  ExpectedType: List
  ExpectedJava: r.array("aaaa ", "", "", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 24
  Original: r.expr('aaaa bbbb  cccc ').split('bb')
  Java: r.expr("aaaa bbbb  cccc ").split("bb")
  ExpectedOriginal: (['aaaa ', '', '  cccc '])
  ExpectedType: List
  ExpectedJava: r.array("aaaa ", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 25
  Original: r.expr('aaaa bbbb  cccc ').split(' bbbb  ')
  Java: r.expr("aaaa bbbb  cccc ").split(" bbbb  ")
  ExpectedOriginal: (['aaaa', 'cccc '])
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 26
  Original: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split('bb')
  Java: r.expr("aaaa bbbb  cccc b d bb e bbbb f").split("bb")
  ExpectedOriginal: (['aaaa ', '', '  cccc b d ', ' e ', '', ' f'])
  ExpectedType: List
  ExpectedJava: r.array("aaaa ", "", "  cccc b d ", " e ", "", " f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 27
  Original: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ')
  Java: r.expr("aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ")
  ExpectedOriginal: (['aaaa', 'cccc b d bb e bbbb f'])
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "cccc b d bb e bbbb f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 28
  Original: r.expr('aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ')
  Java: r.expr("aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ")
  ExpectedOriginal: (['aaaa', 'cccc b d bb e', 'f'])
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "cccc b d bb e", "f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 29
  Original: r.expr('aaaa bbbb  cccc ').split(null, 3)
  Java: r.expr("aaaa bbbb  cccc ").split((ReqlExpr) null, 3)
  ExpectedOriginal: (['aaaa', 'bbbb', 'cccc'])
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb", "cccc")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 30
  Original: r.expr('aaaa bbbb  cccc ').split(' ', 5)
  Java: r.expr("aaaa bbbb  cccc ").split(" ", 5)
  ExpectedOriginal: (['aaaa', 'bbbb', '', 'cccc', ''])
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb", "", "cccc", "")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 31
  Original: r.expr('aaaa bbbb  cccc ').split('', 5)
  Java: r.expr("aaaa bbbb  cccc ").split("", 5)
  ExpectedOriginal: (['a', 'a', 'a', 'a', ' ', 'bbbb  cccc '])
  ExpectedType: List
  ExpectedJava: r.array("a", "a", "a", "a", " ", "bbbb  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 32
  Original: r.expr('aaaa bbbb  cccc ').split('b', 5)
  Java: r.expr("aaaa bbbb  cccc ").split("b", 5)
  ExpectedOriginal: (['aaaa ', '', '', '', '  cccc '])
  ExpectedType: List
  ExpectedJava: r.array("aaaa ", "", "", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 33
  Original: r.expr('aaaa bbbb  cccc ').split('bb', 3)
  Java: r.expr("aaaa bbbb  cccc ").split("bb", 3)
  ExpectedOriginal: (['aaaa ', '', '  cccc '])
  ExpectedType: List
  ExpectedJava: r.array("aaaa ", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 34
  Original: r.expr('aaaa bbbb  cccc ').split(' bbbb  ', 2)
  Java: r.expr("aaaa bbbb  cccc ").split(" bbbb  ", 2)
  ExpectedOriginal: (['aaaa', 'cccc '])
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 35
  Original: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split('bb', 6)
  Java: r.expr("aaaa bbbb  cccc b d bb e bbbb f").split("bb", 6)
  ExpectedOriginal: (['aaaa ', '', '  cccc b d ', ' e ', '', ' f'])
  ExpectedType: List
  ExpectedJava: r.array("aaaa ", "", "  cccc b d ", " e ", "", " f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 36
  Original: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 2)
  Java: r.expr("aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 2)
  ExpectedOriginal: (['aaaa', 'cccc b d bb e bbbb f'])
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "cccc b d bb e bbbb f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 37
  Original: r.expr('aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 3)
  Java: r.expr("aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 3)
  ExpectedOriginal: (['aaaa', 'cccc b d bb e', 'f'])
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "cccc b d bb e", "f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 38
  Original: r.expr('aaaa bbbb  cccc ').split(null, 2)
  Java: r.expr("aaaa bbbb  cccc ").split((ReqlExpr) null, 2)
  ExpectedOriginal: (['aaaa', 'bbbb', 'cccc '])
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb", "cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 39
  Original: r.expr("a  b  ").split(null, 2)
  Java: r.expr("a  b  ").split((ReqlExpr) null, 2)
  ExpectedOriginal: (["a", "b"])
  ExpectedType: List
  ExpectedJava: r.array("a", "b")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 40
  Original: r.expr('aaaa bbbb  cccc ').split(' ', 4)
  Java: r.expr("aaaa bbbb  cccc ").split(" ", 4)
  ExpectedOriginal: (['aaaa', 'bbbb', '', 'cccc', ''])
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb", "", "cccc", "")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 41
  Original: r.expr('aaaa bbbb  cccc ').split('', 4)
  Java: r.expr("aaaa bbbb  cccc ").split("", 4)
  ExpectedOriginal: (['a', 'a', 'a', 'a', ' bbbb  cccc '])
  ExpectedType: List
  ExpectedJava: r.array("a", "a", "a", "a", " bbbb  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 42
  Original: r.expr('aaaa bbbb  cccc ').split('b', 4)
  Java: r.expr("aaaa bbbb  cccc ").split("b", 4)
  ExpectedOriginal: (['aaaa ', '', '', '', '  cccc '])
  ExpectedType: List
  ExpectedJava: r.array("aaaa ", "", "", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 43
  Original: r.expr('aaaa bbbb  cccc ').split('bb', 2)
  Java: r.expr("aaaa bbbb  cccc ").split("bb", 2)
  ExpectedOriginal: (['aaaa ', '', '  cccc '])
  ExpectedType: List
  ExpectedJava: r.array("aaaa ", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 44
  Original: r.expr('aaaa bbbb  cccc ').split(' bbbb  ', 1)
  Java: r.expr("aaaa bbbb  cccc ").split(" bbbb  ", 1)
  ExpectedOriginal: (['aaaa', 'cccc '])
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 45
  Original: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split('bb', 5)
  Java: r.expr("aaaa bbbb  cccc b d bb e bbbb f").split("bb", 5)
  ExpectedOriginal: (['aaaa ', '', '  cccc b d ', ' e ', '', ' f'])
  ExpectedType: List
  ExpectedJava: r.array("aaaa ", "", "  cccc b d ", " e ", "", " f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 46
  Original: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 1)
  Java: r.expr("aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 1)
  ExpectedOriginal: (['aaaa', 'cccc b d bb e bbbb f'])
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "cccc b d bb e bbbb f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 47
  Original: r.expr('aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 2)
  Java: r.expr("aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 2)
  ExpectedOriginal: (['aaaa', 'cccc b d bb e', 'f'])
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "cccc b d bb e", "f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 48
  Original: r.expr('aaaa bbbb  cccc ').split(null, 1)
  Java: r.expr("aaaa bbbb  cccc ").split((ReqlExpr) null, 1)
  ExpectedOriginal: (['aaaa', 'bbbb  cccc '])
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 49
  Original: r.expr('aaaa bbbb  cccc ').split(' ', 2)
  Java: r.expr("aaaa bbbb  cccc ").split(" ", 2)
  ExpectedOriginal: (['aaaa', 'bbbb', ' cccc '])
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb", " cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 50
  Original: r.expr('aaaa bbbb  cccc ').split('', 2)
  Java: r.expr("aaaa bbbb  cccc ").split("", 2)
  ExpectedOriginal: (['a', 'a', 'aa bbbb  cccc '])
  ExpectedType: List
  ExpectedJava: r.array("a", "a", "aa bbbb  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 51
  Original: r.expr('aaaa bbbb  cccc ').split('b', 2)
  Java: r.expr("aaaa bbbb  cccc ").split("b", 2)
  ExpectedOriginal: (['aaaa ', '', 'bb  cccc '])
  ExpectedType: List
  ExpectedJava: r.array("aaaa ", "", "bb  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 52
  Original: r.expr('aaaa bbbb  cccc ').split('bb', 2)
  Java: r.expr("aaaa bbbb  cccc ").split("bb", 2)
  ExpectedOriginal: (['aaaa ', '', '  cccc '])
  ExpectedType: List
  ExpectedJava: r.array("aaaa ", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 53
  Original: r.expr('aaaa bbbb  cccc ').split(' bbbb  ', 2)
  Java: r.expr("aaaa bbbb  cccc ").split(" bbbb  ", 2)
  ExpectedOriginal: (['aaaa', 'cccc '])
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 54
  Original: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split('bb', 2)
  Java: r.expr("aaaa bbbb  cccc b d bb e bbbb f").split("bb", 2)
  ExpectedOriginal: (['aaaa ', '', '  cccc b d bb e bbbb f'])
  ExpectedType: List
  ExpectedJava: r.array("aaaa ", "", "  cccc b d bb e bbbb f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 55
  Original: r.expr('aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 2)
  Java: r.expr("aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 2)
  ExpectedOriginal: (['aaaa', 'cccc b d bb e bbbb f'])
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "cccc b d bb e bbbb f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 56
  Original: r.expr('aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 2)
  Java: r.expr("aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 2)
  ExpectedOriginal: (['aaaa', 'cccc b d bb e', 'f'])
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "cccc b d bb e", "f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 57
  Original: r.expr('  ').split()
  Java: r.expr("  ").split()
  ExpectedOriginal: ([])
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 58
  Original: r.expr('  ').split(null)
  Java: r.expr("  ").split((ReqlExpr) null)
  ExpectedOriginal: ([])
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 59
  Original: r.expr('  ').split(' ')
  Java: r.expr("  ").split(" ")
  ExpectedOriginal: (['', '', ''])
  ExpectedType: List
  ExpectedJava: r.array("", "", "")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 60
  Original: r.expr('  ').split(null, 5)
  Java: r.expr("  ").split((ReqlExpr) null, 5)
  ExpectedOriginal: ([])
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 61
  Original: r.expr('  ').split(' ', 5)
  Java: r.expr("  ").split(" ", 5)
  ExpectedOriginal: (['', '', ''])
  ExpectedType: List
  ExpectedJava: r.array("", "", "")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 62
  Original: r.expr('  aaaa bbbb  cccc ').split()
  Java: r.expr("  aaaa bbbb  cccc ").split()
  ExpectedOriginal: (['aaaa', 'bbbb', 'cccc'])
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb", "cccc")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 63
  Original: r.expr('  aaaa bbbb  cccc ').split(null)
  Java: r.expr("  aaaa bbbb  cccc ").split((ReqlExpr) null)
  ExpectedOriginal: (['aaaa', 'bbbb', 'cccc'])
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb", "cccc")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 64
  Original: r.expr('  aaaa bbbb  cccc ').split(' ')
  Java: r.expr("  aaaa bbbb  cccc ").split(" ")
  ExpectedOriginal: (['', '', 'aaaa', 'bbbb', '', 'cccc', ''])
  ExpectedType: List
  ExpectedJava: r.array("", "", "aaaa", "bbbb", "", "cccc", "")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 65
  Original: r.expr('  aaaa bbbb  cccc ').split('b')
  Java: r.expr("  aaaa bbbb  cccc ").split("b")
  ExpectedOriginal: (['  aaaa ', '', '', '', '  cccc '])
  ExpectedType: List
  ExpectedJava: r.array("  aaaa ", "", "", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 66
  Original: r.expr('  aaaa bbbb  cccc ').split('bb')
  Java: r.expr("  aaaa bbbb  cccc ").split("bb")
  ExpectedOriginal: (['  aaaa ', '', '  cccc '])
  ExpectedType: List
  ExpectedJava: r.array("  aaaa ", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 67
  Original: r.expr('  aaaa bbbb  cccc ').split(' bbbb  ')
  Java: r.expr("  aaaa bbbb  cccc ").split(" bbbb  ")
  ExpectedOriginal: (['  aaaa', 'cccc '])
  ExpectedType: List
  ExpectedJava: r.array("  aaaa", "cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 68
  Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split('bb')
  Java: r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split("bb")
  ExpectedOriginal: (['  aaaa ', '', '  cccc b d ', ' e ', '', ' f'])
  ExpectedType: List
  ExpectedJava: r.array("  aaaa ", "", "  cccc b d ", " e ", "", " f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 69
  Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ')
  Java: r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ")
  ExpectedOriginal: (['  aaaa', 'cccc b d bb e bbbb f'])
  ExpectedType: List
  ExpectedJava: r.array("  aaaa", "cccc b d bb e bbbb f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 70
  Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ')
  Java: r.expr("  aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ")
  ExpectedOriginal: (['  aaaa', 'cccc b d bb e', 'f'])
  ExpectedType: List
  ExpectedJava: r.array("  aaaa", "cccc b d bb e", "f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 71
  Original: r.expr('  aaaa bbbb  cccc ').split(null, 3)
  Java: r.expr("  aaaa bbbb  cccc ").split((ReqlExpr) null, 3)
  ExpectedOriginal: (['aaaa', 'bbbb', 'cccc'])
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb", "cccc")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 72
  Original: r.expr('  aaaa bbbb  cccc ').split(' ', 5)
  Java: r.expr("  aaaa bbbb  cccc ").split(" ", 5)
  ExpectedOriginal: (['', '', 'aaaa', 'bbbb', '', 'cccc '])
  ExpectedType: List
  ExpectedJava: r.array("", "", "aaaa", "bbbb", "", "cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 73
  Original: r.expr('  aaaa bbbb  cccc ').split('b', 5)
  Java: r.expr("  aaaa bbbb  cccc ").split("b", 5)
  ExpectedOriginal: (['  aaaa ', '', '', '', '  cccc '])
  ExpectedType: List
  ExpectedJava: r.array("  aaaa ", "", "", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 74
  Original: r.expr('  aaaa bbbb  cccc ').split('bb', 3)
  Java: r.expr("  aaaa bbbb  cccc ").split("bb", 3)
  ExpectedOriginal: (['  aaaa ', '', '  cccc '])
  ExpectedType: List
  ExpectedJava: r.array("  aaaa ", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 75
  Original: r.expr('  aaaa bbbb  cccc ').split(' bbbb  ', 2)
  Java: r.expr("  aaaa bbbb  cccc ").split(" bbbb  ", 2)
  ExpectedOriginal: (['  aaaa', 'cccc '])
  ExpectedType: List
  ExpectedJava: r.array("  aaaa", "cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 76
  Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split('bb', 6)
  Java: r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split("bb", 6)
  ExpectedOriginal: (['  aaaa ', '', '  cccc b d ', ' e ', '', ' f'])
  ExpectedType: List
  ExpectedJava: r.array("  aaaa ", "", "  cccc b d ", " e ", "", " f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 77
  Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 2)
  Java: r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 2)
  ExpectedOriginal: (['  aaaa', 'cccc b d bb e bbbb f'])
  ExpectedType: List
  ExpectedJava: r.array("  aaaa", "cccc b d bb e bbbb f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 78
  Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 3)
  Java: r.expr("  aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 3)
  ExpectedOriginal: (['  aaaa', 'cccc b d bb e', 'f'])
  ExpectedType: List
  ExpectedJava: r.array("  aaaa", "cccc b d bb e", "f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 79
  Original: r.expr('  aaaa bbbb  cccc ').split(null, 2)
  Java: r.expr("  aaaa bbbb  cccc ").split((ReqlExpr) null, 2)
  ExpectedOriginal: (['aaaa', 'bbbb', 'cccc '])
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb", "cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 80
  Original: r.expr("a  b  ").split(null, 2)
  Java: r.expr("a  b  ").split((ReqlExpr) null, 2)
  ExpectedOriginal: (["a", "b"])
  ExpectedType: List
  ExpectedJava: r.array("a", "b")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 81
  Original: r.expr('  aaaa bbbb  cccc ').split(' ', 4)
  Java: r.expr("  aaaa bbbb  cccc ").split(" ", 4)
  ExpectedOriginal: (['', '', 'aaaa', 'bbbb', ' cccc '])
  ExpectedType: List
  ExpectedJava: r.array("", "", "aaaa", "bbbb", " cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 82
  Original: r.expr('  aaaa bbbb  cccc ').split('b', 4)
  Java: r.expr("  aaaa bbbb  cccc ").split("b", 4)
  ExpectedOriginal: (['  aaaa ', '', '', '', '  cccc '])
  ExpectedType: List
  ExpectedJava: r.array("  aaaa ", "", "", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 83
  Original: r.expr('  aaaa bbbb  cccc ').split('bb', 2)
  Java: r.expr("  aaaa bbbb  cccc ").split("bb", 2)
  ExpectedOriginal: (['  aaaa ', '', '  cccc '])
  ExpectedType: List
  ExpectedJava: r.array("  aaaa ", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 84
  Original: r.expr('  aaaa bbbb  cccc ').split(' bbbb  ', 1)
  Java: r.expr("  aaaa bbbb  cccc ").split(" bbbb  ", 1)
  ExpectedOriginal: (['  aaaa', 'cccc '])
  ExpectedType: List
  ExpectedJava: r.array("  aaaa", "cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 85
  Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split('bb', 5)
  Java: r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split("bb", 5)
  ExpectedOriginal: (['  aaaa ', '', '  cccc b d ', ' e ', '', ' f'])
  ExpectedType: List
  ExpectedJava: r.array("  aaaa ", "", "  cccc b d ", " e ", "", " f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 86
  Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 1)
  Java: r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 1)
  ExpectedOriginal: (['  aaaa', 'cccc b d bb e bbbb f'])
  ExpectedType: List
  ExpectedJava: r.array("  aaaa", "cccc b d bb e bbbb f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 87
  Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 2)
  Java: r.expr("  aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 2)
  ExpectedOriginal: (['  aaaa', 'cccc b d bb e', 'f'])
  ExpectedType: List
  ExpectedJava: r.array("  aaaa", "cccc b d bb e", "f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 88
  Original: r.expr('  aaaa bbbb  cccc ').split(null, 1)
  Java: r.expr("  aaaa bbbb  cccc ").split((ReqlExpr) null, 1)
  ExpectedOriginal: (['aaaa', 'bbbb  cccc '])
  ExpectedType: List
  ExpectedJava: r.array("aaaa", "bbbb  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 89
  Original: r.expr('  aaaa bbbb  cccc ').split(' ', 2)
  Java: r.expr("  aaaa bbbb  cccc ").split(" ", 2)
  ExpectedOriginal: (['', '', 'aaaa bbbb  cccc '])
  ExpectedType: List
  ExpectedJava: r.array("", "", "aaaa bbbb  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 90
  Original: r.expr('  aaaa bbbb  cccc ').split('b', 2)
  Java: r.expr("  aaaa bbbb  cccc ").split("b", 2)
  ExpectedOriginal: (['  aaaa ', '', 'bb  cccc '])
  ExpectedType: List
  ExpectedJava: r.array("  aaaa ", "", "bb  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 91
  Original: r.expr('  aaaa bbbb  cccc ').split('bb', 2)
  Java: r.expr("  aaaa bbbb  cccc ").split("bb", 2)
  ExpectedOriginal: (['  aaaa ', '', '  cccc '])
  ExpectedType: List
  ExpectedJava: r.array("  aaaa ", "", "  cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 92
  Original: r.expr('  aaaa bbbb  cccc ').split(' bbbb  ', 2)
  Java: r.expr("  aaaa bbbb  cccc ").split(" bbbb  ", 2)
  ExpectedOriginal: (['  aaaa', 'cccc '])
  ExpectedType: List
  ExpectedJava: r.array("  aaaa", "cccc ")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 93
  Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split('bb', 2)
  Java: r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split("bb", 2)
  ExpectedOriginal: (['  aaaa ', '', '  cccc b d bb e bbbb f'])
  ExpectedType: List
  ExpectedJava: r.array("  aaaa ", "", "  cccc b d bb e bbbb f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 94
  Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb f').split(' bbbb  ', 2)
  Java: r.expr("  aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 2)
  ExpectedOriginal: (['  aaaa', 'cccc b d bb e bbbb f'])
  ExpectedType: List
  ExpectedJava: r.array("  aaaa", "cccc b d bb e bbbb f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 95
  Original: r.expr('  aaaa bbbb  cccc b d bb e bbbb  f').split(' bbbb  ', 2)
  Java: r.expr("  aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 2)
  ExpectedOriginal: (['  aaaa', 'cccc b d bb e', 'f'])
  ExpectedType: List
  ExpectedJava: r.array("  aaaa", "cccc b d bb e", "f")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 96
  Original: r.expr("abc-dEf-GHJ").upcase()
  Java: r.expr("abc-dEf-GHJ").upcase()
  ExpectedOriginal: ("ABC-DEF-GHJ")
  ExpectedType: String
  ExpectedJava: '"ABC-DEF-GHJ"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 97
  Original: r.expr("abc-dEf-GHJ").downcase()
  Java: r.expr("abc-dEf-GHJ").downcase()
  ExpectedOriginal: ("abc-def-ghj")
  ExpectedType: String
  ExpectedJava: '"abc-def-ghj"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 98
  Original: r.expr(u"f\u00e9oo").split("")
  Java: "r.expr(\"féoo\").split(\"\")"
  ExpectedOriginal: (["f", "\u00e9", "o", "o"])
  ExpectedType: List
  ExpectedJava: "r.array(\"f\", \"é\", \"o\", \"o\")"
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 99
  Original: r.expr(u"fe\u0301oo").split("")
  Java: "r.expr(\"féoo\").split(\"\")"
  ExpectedOriginal: (["f", "e\u0301", "o", "o"])
  ExpectedType: List
  ExpectedJava: "r.array(\"f\", \"é\", \"o\", \"o\")"
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 100
  Original: r.expr(u"foo bar\tbaz\nquux\rfred\u000bbarney\u000cwilma").split()
  Java: r.expr("foo bar\tbaz\nquux\rfred\u000bbarney\u000cwilma").split()
  ExpectedOriginal: (["foo", "bar", "baz", "quux", "fred", "barney", "wilma"])
  ExpectedType: List
  ExpectedJava: r.array("foo", "bar", "baz", "quux", "fred", "barney", "wilma")
  RunOpts: []
- TestType: JavaQuery
  TestFile: datum/string.yaml
  TestNum: 101
  Original: r.expr(u"foo\u00a0bar\u2001baz\u2060quux\u2028fred\u2028barney\u2029wilma\u0085betty\u200b").split()
  Java: r.expr("foo\u00a0bar\u2001baz\u2060quux\u2028fred\u2028barney\u2029wilma\u0085betty\u200b").split()
  ExpectedOriginal: (["foo", "bar", "baz\u2060quux", "fred", "barney", "wilma", "betty\u200b"])
  ExpectedType: List
  ExpectedJava: r.array("foo", "bar", "baz\u2060quux", "fred", "barney", "wilma", "betty\u200b")
  RunOpts: []
