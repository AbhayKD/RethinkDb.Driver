ModuleName: TimesTimeArith
DefsAndTests:
- TestType: JavaDef
  TestFile: times/time_arith.yaml
  TestNum: 1
  Original: rt1 = 1375147296.681
  Java: Double rt1 = (Double) 1375147296.681;
  RunOpts: []
- TestType: JavaDef
  TestFile: times/time_arith.yaml
  TestNum: 2
  Original: rt2 = 1375147296.682
  Java: Double rt2 = (Double) 1375147296.682;
  RunOpts: []
- TestType: JavaDef
  TestFile: times/time_arith.yaml
  TestNum: 3
  Original: rt3 = 1375147297.681
  Java: Double rt3 = (Double) 1375147297.681;
  RunOpts: []
- TestType: JavaDef
  TestFile: times/time_arith.yaml
  TestNum: 4
  Original: rt4 = 2375147296.681
  Java: Double rt4 = (Double) 2375147296.681;
  RunOpts: []
- TestType: JavaDef
  TestFile: times/time_arith.yaml
  TestNum: 5
  Original: rts = [rt1, rt2, rt3, rt4]
  Java: List rts = (List) r.array(rt1, rt2, rt3, rt4);
  RunOpts: []
- TestType: JavaDef
  TestFile: times/time_arith.yaml
  TestNum: 6
  Original: t1 = r.epoch_time(rt1)
  Java: EpochTime t1 = (EpochTime) r.epochTime(rt1);
  RunOpts: []
- TestType: JavaDef
  TestFile: times/time_arith.yaml
  TestNum: 7
  Original: t2 = r.epoch_time(rt2)
  Java: EpochTime t2 = (EpochTime) r.epochTime(rt2);
  RunOpts: []
- TestType: JavaDef
  TestFile: times/time_arith.yaml
  TestNum: 8
  Original: t3 = r.epoch_time(rt3)
  Java: EpochTime t3 = (EpochTime) r.epochTime(rt3);
  RunOpts: []
- TestType: JavaDef
  TestFile: times/time_arith.yaml
  TestNum: 9
  Original: t4 = r.epoch_time(rt4)
  Java: EpochTime t4 = (EpochTime) r.epochTime(rt4);
  RunOpts: []
- TestType: JavaDef
  TestFile: times/time_arith.yaml
  TestNum: 10
  Original: ts = r.expr([t1, t2, t3, t4])
  Java: MakeArray ts = (MakeArray) r.expr(r.array(t1, t2, t3, t4));
  RunOpts: []
- TestType: JavaQuery
  TestFile: times/time_arith.yaml
  TestNum: 11
  Original: ((t2 - t1) * 1000).do(lambda x:(x > 0.99) & (x < 1.01))
  Java: r.mul(r.sub(t2, t1), 1000.0).do_(x -> r.and(r.gt(x, 0.99), r.lt(x, 1.01)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: times/time_arith.yaml
  TestNum: 12
  Original: t3 - t1
  Java: r.sub(t3, t1)
  ExpectedOriginal: 1
  ExpectedType: Double
  ExpectedJava: 1.0
  RunOpts: []
- TestType: JavaQuery
  TestFile: times/time_arith.yaml
  TestNum: 13
  Original: t4 - t1
  Java: r.sub(t4, t1)
  ExpectedOriginal: 1000000000
  ExpectedType: Double
  ExpectedJava: 1000000000.0
  RunOpts: []
- TestType: JavaQuery
  TestFile: times/time_arith.yaml
  TestNum: 14
  Original: ((t1 - t2) * 1000).do(lambda x:(x < -0.99) & (x > -1.01))
  Java: r.mul(r.sub(t1, t2), 1000.0).do_(x -> r.and(r.lt(x, -0.99), r.gt(x, -1.01)))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: times/time_arith.yaml
  TestNum: 15
  Original: t1 - t3
  Java: r.sub(t1, t3)
  ExpectedOriginal: -1
  ExpectedType: Double
  ExpectedJava: -1.0
  RunOpts: []
- TestType: JavaQuery
  TestFile: times/time_arith.yaml
  TestNum: 16
  Original: t1 - t4
  Java: r.sub(t1, t4)
  ExpectedOriginal: -1000000000
  ExpectedType: Double
  ExpectedJava: -1000000000.0
  RunOpts: []
- TestType: JavaQuery
  TestFile: times/time_arith.yaml
  TestNum: 17
  Original: ts.map(lambda x:t1 + (x - t1)).map(lambda x:x.to_epoch_time())
  Java: ts.map(x -> r.add(t1, r.sub(x, t1))).map(x -> x.toEpochTime())
  ExpectedOriginal: ([rt1, rt2, rt3, rt4])
  ExpectedType: List
  ExpectedJava: r.array(rt1, rt2, rt3, rt4)
  RunOpts: []
- TestType: JavaQuery
  TestFile: times/time_arith.yaml
  TestNum: 18
  Original: ts.map(lambda x:(t1 + x) - t1).map(lambda x:x.to_epoch_time())
  Java: ts.map(x -> r.sub(r.add(t1, x), t1)).map(x -> x.toEpochTime())
  ExpectedOriginal: err("ReqlQueryLogicError", "Expected type NUMBER but found PTYPE<TIME>.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Expected type NUMBER but found PTYPE<TIME>.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: times/time_arith.yaml
  TestNum: 19
  Original: ts.map(lambda x:t1 - (t1 - x)).map(lambda x:x.to_epoch_time())
  Java: ts.map(x -> r.sub(t1, r.sub(t1, x))).map(x -> x.toEpochTime())
  ExpectedOriginal: ([rt1, rt2, rt3, rt4])
  ExpectedType: List
  ExpectedJava: r.array(rt1, rt2, rt3, rt4)
  RunOpts: []
- TestType: JavaQuery
  TestFile: times/time_arith.yaml
  TestNum: 20
  Original: ts.map(lambda x:ts.map(lambda y:[x < y, x <= y, x == y, x != y, x >= y, x > y]))
  Java: ts.map(x -> ts.map(y -> r.array(r.lt(x, y), r.le(x, y), r.eq(x, y), r.ne(x, y), r.ge(x, y), r.gt(x, y))))
  ExpectedOriginal: ([[[false, true,  true,  false, true,  false], [true,  true,  false, true,  false, false], [true,  true,  false, true,  false, false], [true,  true,  false, true,  false, false]], [[false, false, false, true,  true,  true], [false, true,  true,  false, true,  false], [true,  true,  false, true,  false, false], [true,  true,  false, true,  false, false]], [[false, false, false, true,  true,  true], [false, false, false, true,  true,  true], [false, true,  true,  false, true,  false], [true,  true,  false, true,  false, false]], [[false, false, false, true,  true,  true], [false, false, false, true,  true,  true], [false, false, false, true,  true,  true], [false, true,  true,  false, true,  false]]])
  ExpectedType: List
  ExpectedJava: r.array(r.array(r.array(false, true, true, false, true, false), r.array(true, true, false, true, false, false), r.array(true, true, false, true, false, false), r.array(true, true, false, true, false, false)), r.array(r.array(false, false, false, true, true, true), r.array(false, true, true, false, true, false), r.array(true, true, false, true, false, false), r.array(true, true, false, true, false, false)), r.array(r.array(false, false, false, true, true, true), r.array(false, false, false, true, true, true), r.array(false, true, true, false, true, false), r.array(true, true, false, true, false, false)), r.array(r.array(false, false, false, true, true, true), r.array(false, false, false, true, true, true), r.array(false, false, false, true, true, true), r.array(false, true, true, false, true, false)))
  RunOpts: []
- TestType: JavaDef
  TestFile: times/time_arith.yaml
  TestNum: 21
  Original: datum_types = r.expr([null, true, false, 1, "1", [1], {"1":1}, r.binary(b'')])
  Java: MakeArray datum_types = (MakeArray) r.expr(r.array(null, true, false, 1.0, "1", r.array(1.0), r.hashMap("1", 1.0), r.binary("".getBytes(StandardCharsets.UTF_8))));
  RunOpts: []
- TestType: JavaQuery
  TestFile: times/time_arith.yaml
  TestNum: 22
  Original: datum_types.map(lambda x:r.expr([[x, t1], [t1, x]]).map(lambda xy:xy[0].do(lambda x2:xy[1].do(lambda y:[x2 < y, x2 <= y, x2 == y, x2 != y, x2 >= y, x2 > y]))))
  Java: datum_types.map(x -> r.expr(r.array(r.array(x, t1), r.array(t1, x))).map(xy -> xy.bracket(0.0).do_(x2 -> xy.bracket(1.0).do_(y -> r.array(r.lt(x2, y), r.le(x2, y), r.eq(x2, y), r.ne(x2, y), r.ge(x2, y), r.gt(x2, y))))))
  ExpectedOriginal: ([[[true,  true,  false, true,  false, false], [false, false, false, true,  true,  true]], [[true,  true,  false, true,  false, false], [false, false, false, true,  true,  true]], [[true,  true,  false, true,  false, false], [false, false, false, true,  true,  true]], [[true,  true,  false, true,  false, false], [false, false, false, true,  true,  true]], [[false, false, false, true,  true,  true], [true,  true,  false, true,  false, false]], [[true,  true,  false, true,  false, false], [false, false, false, true,  true,  true]], [[true,  true,  false, true,  false, false], [false, false, false, true,  true,  true]], [[true,  true,  false, true,  false, false], [false, false, false, true,  true,  true]]])
  ExpectedType: List
  ExpectedJava: r.array(r.array(r.array(true, true, false, true, false, false), r.array(false, false, false, true, true, true)), r.array(r.array(true, true, false, true, false, false), r.array(false, false, false, true, true, true)), r.array(r.array(true, true, false, true, false, false), r.array(false, false, false, true, true, true)), r.array(r.array(true, true, false, true, false, false), r.array(false, false, false, true, true, true)), r.array(r.array(false, false, false, true, true, true), r.array(true, true, false, true, false, false)), r.array(r.array(true, true, false, true, false, false), r.array(false, false, false, true, true, true)), r.array(r.array(true, true, false, true, false, false), r.array(false, false, false, true, true, true)), r.array(r.array(true, true, false, true, false, false), r.array(false, false, false, true, true, true)))
  RunOpts: []
- TestType: JavaQuery
  TestFile: times/time_arith.yaml
  TestNum: 23
  Original: ts.map(lambda a:ts.map(lambda b:ts.map(lambda c:b.during(a, c))))
  Java: ts.map(a -> ts.map(b -> ts.map(c -> b.during(a, c))))
  ExpectedOriginal: ([[[false, true,  true,  true], [false, false, true,  true], [false, false, false, true], [false, false, false, false]], [[false, false, false, false], [false, false, true,  true], [false, false, false, true], [false, false, false, false]], [[false, false, false, false], [false, false, false, false], [false, false, false, true], [false, false, false, false]], [[false, false, false, false], [false, false, false, false], [false, false, false, false], [false, false, false, false]]])
  ExpectedType: List
  ExpectedJava: r.array(r.array(r.array(false, true, true, true), r.array(false, false, true, true), r.array(false, false, false, true), r.array(false, false, false, false)), r.array(r.array(false, false, false, false), r.array(false, false, true, true), r.array(false, false, false, true), r.array(false, false, false, false)), r.array(r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, true), r.array(false, false, false, false)), r.array(r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, false)))
  RunOpts: []
- TestType: JavaQuery
  TestFile: times/time_arith.yaml
  TestNum: 24
  Original: ts.map(lambda a:ts.map(lambda b:ts.map(lambda c:b.during(a, c, left_bound='open'))))
  Java: ts.map(a -> ts.map(b -> ts.map(c -> b.during(a, c).optArg("left_bound", "open"))))
  ExpectedOriginal: ([[[false, false, false, false], [false, false, true,  true], [false, false, false, true], [false, false, false, false]], [[false, false, false, false], [false, false, false, false], [false, false, false, true], [false, false, false, false]], [[false, false, false, false], [false, false, false, false], [false, false, false, false], [false, false, false, false]], [[false, false, false, false], [false, false, false, false], [false, false, false, false], [false, false, false, false]]])
  ExpectedType: List
  ExpectedJava: r.array(r.array(r.array(false, false, false, false), r.array(false, false, true, true), r.array(false, false, false, true), r.array(false, false, false, false)), r.array(r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, true), r.array(false, false, false, false)), r.array(r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, false)), r.array(r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, false)))
  RunOpts: []
- TestType: JavaQuery
  TestFile: times/time_arith.yaml
  TestNum: 25
  Original: ts.map(lambda a:ts.map(lambda b:ts.map(lambda c:b.during(a, c, right_bound='closed'))))
  Java: ts.map(a -> ts.map(b -> ts.map(c -> b.during(a, c).optArg("right_bound", "closed"))))
  ExpectedOriginal: ([[[true,  true,  true,  true], [false, true,  true,  true], [false, false, true,  true], [false, false, false, true]], [[false, false, false, false], [false, true,  true,  true], [false, false, true,  true], [false, false, false, true]], [[false, false, false, false], [false, false, false, false], [false, false, true,  true], [false, false, false, true]], [[false, false, false, false], [false, false, false, false], [false, false, false, false], [false, false, false, true]]])
  ExpectedType: List
  ExpectedJava: r.array(r.array(r.array(true, true, true, true), r.array(false, true, true, true), r.array(false, false, true, true), r.array(false, false, false, true)), r.array(r.array(false, false, false, false), r.array(false, true, true, true), r.array(false, false, true, true), r.array(false, false, false, true)), r.array(r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, true, true), r.array(false, false, false, true)), r.array(r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, true)))
  RunOpts: []
- TestType: JavaQuery
  TestFile: times/time_arith.yaml
  TestNum: 26
  Original: ts.map(lambda a:ts.map(lambda b:ts.map(lambda c:b.during(a, c, left_bound='open', right_bound='closed'))))
  Java: ts.map(a -> ts.map(b -> ts.map(c -> b.during(a, c).optArg("left_bound", "open").optArg("right_bound", "closed"))))
  ExpectedOriginal: ([[[false, false, false, false], [false, true,  true,  true], [false, false, true,  true], [false, false, false, true]], [[false, false, false, false], [false, false, false, false], [false, false, true,  true], [false, false, false, true]], [[false, false, false, false], [false, false, false, false], [false, false, false, false], [false, false, false, true]], [[false, false, false, false], [false, false, false, false], [false, false, false, false], [false, false, false, false]]])
  ExpectedType: List
  ExpectedJava: r.array(r.array(r.array(false, false, false, false), r.array(false, true, true, true), r.array(false, false, true, true), r.array(false, false, false, true)), r.array(r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, true, true), r.array(false, false, false, true)), r.array(r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, true)), r.array(r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, false), r.array(false, false, false, false)))
  RunOpts: []
- TestType: JavaQuery
  TestFile: times/time_arith.yaml
  TestNum: 27
  Original: ts.map(lambda x:x.date() + x.time_of_day()).map(lambda x:x.to_epoch_time())
  Java: ts.map(x -> r.add(x.date(), x.timeOfDay())).map(x -> x.toEpochTime())
  ExpectedOriginal: rts
  ExpectedType: List
  ExpectedJava: rts
  RunOpts: []
- TestType: JavaQuery
  TestFile: times/time_arith.yaml
  TestNum: 28
  Original: r.epoch_time(rt1).do(r.js("(function(data){return data})")).to_epoch_time()
  Java: r.epochTime(rt1).do_(r.js("(function(data){return data})")).toEpochTime()
  ExpectedOriginal: rt1
  ExpectedType: Double
  ExpectedJava: rt1
  RunOpts: []
- TestType: JavaQuery
  TestFile: times/time_arith.yaml
  TestNum: 29
  Original: r.do(r.js("new Date('2012-08-01')")).to_iso8601()
  Java: r.do_(r.js("new Date('2012-08-01')")).toIso8601()
  ExpectedOriginal: ("2012-08-01T00:00:00+00:00")
  ExpectedType: String
  ExpectedJava: '"2012-08-01T00:00:00+00:00"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: times/time_arith.yaml
  TestNum: 30
  Original: r.do(r.js("(function(x){doc = new Object(); doc.date = new Date('2012-08-01'); return doc;})"))["date"].to_iso8601()
  Java: r.do_(r.js("(function(x){doc = new Object(); doc.date = new Date('2012-08-01'); return doc;})")).bracket("date").toIso8601()
  ExpectedOriginal: ("2012-08-01T00:00:00+00:00")
  ExpectedType: String
  ExpectedJava: '"2012-08-01T00:00:00+00:00"'
  RunOpts: []
