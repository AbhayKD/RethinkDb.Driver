ModuleName: Regression2766
DefsAndTests:
- TestType: JavaQuery
  TestFile: regression/2766.yaml
  TestNum: 1
  Original: r.now()['epoch_time']
  Java: r.now().bracket("epoch_time")
  ExpectedOriginal: err("ReqlQueryLogicError", "Cannot call `bracket` on objects of type `PTYPE<TIME>`.")
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot call `bracket` on objects of type `PTYPE<TIME>`.")
  Obtained: r.now().bracket("epoch_time")
  RunOpts: []
- TestType: JavaQuery
  TestFile: regression/2766.yaml
  TestNum: 2
  Original: r.now().get_field('epoch_time')
  Java: r.now().getField("epoch_time")
  ExpectedOriginal: err("ReqlQueryLogicError", "Cannot call `get_field` on objects of type `PTYPE<TIME>`.")
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot call `get_field` on objects of type `PTYPE<TIME>`.")
  Obtained: r.now().getField("epoch_time")
  RunOpts: []
- TestType: JavaQuery
  TestFile: regression/2766.yaml
  TestNum: 3
  Original: r.now().keys()
  Java: r.now().keys()
  ExpectedOriginal: err("ReqlQueryLogicError", "Cannot call `keys` on objects of type `PTYPE<TIME>`.")
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot call `keys` on objects of type `PTYPE<TIME>`.")
  Obtained: r.now().keys()
  RunOpts: []
- TestType: JavaQuery
  TestFile: regression/2766.yaml
  TestNum: 4
  Original: r.now().pluck('epoch_time')
  Java: r.now().pluck("epoch_time")
  ExpectedOriginal: err("ReqlQueryLogicError", "Cannot call `pluck` on objects of type `PTYPE<TIME>`.")
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot call `pluck` on objects of type `PTYPE<TIME>`.")
  Obtained: r.now().pluck("epoch_time")
  RunOpts: []
- TestType: JavaQuery
  TestFile: regression/2766.yaml
  TestNum: 5
  Original: r.now().without('epoch_time')
  Java: r.now().without("epoch_time")
  ExpectedOriginal: err("ReqlQueryLogicError", "Cannot call `without` on objects of type `PTYPE<TIME>`.")
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot call `without` on objects of type `PTYPE<TIME>`.")
  Obtained: r.now().without("epoch_time")
  RunOpts: []
- TestType: JavaQuery
  TestFile: regression/2766.yaml
  TestNum: 6
  Original: r.now().merge({"foo":4})
  Java: r.now().merge(new MapObject().with("foo", 4))
  ExpectedOriginal: err("ReqlQueryLogicError", "Cannot call `merge` on objects of type `PTYPE<TIME>`.")
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot call `merge` on objects of type `PTYPE<TIME>`.")
  Obtained: r.now().merge(new MapObject().with("foo", 4))
  RunOpts: []
- TestType: JavaQuery
  TestFile: regression/2766.yaml
  TestNum: 7
  Original: r.expr({"foo":4}).merge(r.now())
  Java: r.expr(new MapObject().with("foo", 4)).merge(r.now())
  ExpectedOriginal: err("ReqlQueryLogicError", "Cannot merge objects of type `PTYPE<TIME>`.")
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot merge objects of type `PTYPE<TIME>`.")
  Obtained: r.expr(new MapObject().with("foo", 4)).merge(r.now())
  RunOpts: []
- TestType: JavaQuery
  TestFile: regression/2766.yaml
  TestNum: 8
  Original: r.now().has_fields('epoch_time')
  Java: r.now().hasFields("epoch_time")
  ExpectedOriginal: err("ReqlQueryLogicError", "Cannot call `has_fields` on objects of type `PTYPE<TIME>`.")
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot call `has_fields` on objects of type `PTYPE<TIME>`.")
  Obtained: r.now().hasFields("epoch_time")
  RunOpts: []
- TestType: JavaQuery
  TestFile: regression/2766.yaml
  TestNum: 9
  Original: r.object().has_fields(r.time(2014, 7, 7, 'Z'))
  Java: r.object().hasFields(r.time(2014, 7, 7, "Z"))
  ExpectedOriginal: err("ReqlQueryLogicError", "Invalid path argument `1404691200`.")
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Invalid path argument `1404691200`.")
  Obtained: r.object().hasFields(r.time(2014, 7, 7, "Z"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: regression/2766.yaml
  TestNum: 10
  Original: r.expr(1).keys()
  Java: r.expr(1).keys()
  ExpectedOriginal: err("ReqlQueryLogicError", "Cannot call `keys` on objects of type `NUMBER`.")
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot call `keys` on objects of type `NUMBER`.")
  Obtained: r.expr(1).keys()
  RunOpts: []
