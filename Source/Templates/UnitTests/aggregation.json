{
  "modulename": "Aggregation",
  "table_var_names": [
    "tbl",
    "tbl2",
    "tbl3",
    "tbl4"
  ],
  "defs_and_test": [
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "1",
      "original": "({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':100})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"deleted\", 0.0).with(\"replaced\", 0.0).with(\"unchanged\", 0.0).with(\"errors\", 0.0).with(\"skipped\", 0.0).with(\"inserted\", 100)",
      "obtained": "tbl.insert(IntStream.range(0, 100).boxed().map(i -> new MapObject().with(\"id\", i).with(\"a\", r.mod(i, 4))).collect(Collectors.toList()))"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "2",
      "original": "({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':100})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"deleted\", 0.0).with(\"replaced\", 0.0).with(\"unchanged\", 0.0).with(\"errors\", 0.0).with(\"skipped\", 0.0).with(\"inserted\", 100)",
      "obtained": "tbl2.insert(IntStream.range(0, 100).boxed().map(i -> new MapObject().with(\"id\", i).with(\"b\", r.mod(i, 4))).collect(Collectors.toList()))"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "3",
      "original": "({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':100})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"deleted\", 0.0).with(\"replaced\", 0.0).with(\"unchanged\", 0.0).with(\"errors\", 0.0).with(\"skipped\", 0.0).with(\"inserted\", 100)",
      "obtained": "tbl3.insert(IntStream.range(0, 100).boxed().map(i -> new MapObject().with(\"id\", i).with(\"a\", r.mod(i, 4)).with(\"b\", new MapObject().with(\"c\", r.mod(i, 5)))).collect(Collectors.toList()))"
    },
    {
      "type_item": "JavaDef",
      "test_file": "aggregation.yaml",
      "test_num": "4",
      "original": "time1 = 1375115782.24",
      "java": "Double time1 = 1375115782.24;"
    },
    {
      "type_item": "JavaDef",
      "test_file": "aggregation.yaml",
      "test_num": "5",
      "original": "time2 = 1375147296.68",
      "java": "Double time2 = 1375147296.68;"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "6",
      "original": "({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':1})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"deleted\", 0.0).with(\"replaced\", 0.0).with(\"unchanged\", 0.0).with(\"errors\", 0.0).with(\"skipped\", 0.0).with(\"inserted\", 1)",
      "obtained": "tbl4.insert(new MapObject().with(\"id\", 0).with(\"time\", r.epochTime(time1)))"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "6",
      "original": "({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':1})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"deleted\", 0.0).with(\"replaced\", 0.0).with(\"unchanged\", 0.0).with(\"errors\", 0.0).with(\"skipped\", 0.0).with(\"inserted\", 1)",
      "obtained": "tbl4.insert(new MapObject().with(\"id\", 1).with(\"time\", r.epochTime(time2)))"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "7",
      "original": "150",
      "expected_type": "Integer",
      "expected_java": "150",
      "obtained": "tbl.sum(\"a\")"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "8",
      "original": "150",
      "expected_type": "Integer",
      "expected_java": "150",
      "obtained": "tbl.map(row -> row.bracket(\"a\")).sum()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "9",
      "original": "({0:1200, 1:1225, 2:1250, 3:1275})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(0, 1200).with(1, 1225).with(2, 1250).with(3, 1275)",
      "obtained": "tbl.group(\"a\").sum(\"id\")"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "10",
      "original": "1.5",
      "expected_type": "Double",
      "expected_java": "1.5",
      "obtained": "tbl.avg(\"a\")"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "11",
      "original": "1.5",
      "expected_type": "Double",
      "expected_java": "1.5",
      "obtained": "tbl.map(row -> row.bracket(\"a\")).avg()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "12",
      "original": "({0:48, 1:49, 2:50, 3:51})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(0, 48).with(1, 49).with(2, 50).with(3, 51)",
      "obtained": "tbl.group(\"a\").avg(\"id\")"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "13",
      "original": "0",
      "expected_type": "Integer",
      "expected_java": "0",
      "obtained": "tbl.min(\"a\").bracket(\"a\")"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "14",
      "original": "({'a':0, 'id':0})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"a\", 0).with(\"id\", 0)",
      "obtained": "tbl.orderBy(\"id\").min(\"a\")"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "15",
      "original": "0",
      "expected_type": "Integer",
      "expected_java": "0",
      "obtained": "tbl.map(row -> row.bracket(\"a\")).min()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "16",
      "original": "({0:{'a':0, 'id':0}, 1:{'a':1, 'id':1}, 2:{'a':2, 'id':2}, 3:{'a':3, 'id':3}})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(0, new MapObject().with(\"a\", 0).with(\"id\", 0)).with(1, new MapObject().with(\"a\", 1).with(\"id\", 1)).with(2, new MapObject().with(\"a\", 2).with(\"id\", 2)).with(3, new MapObject().with(\"a\", 3).with(\"id\", 3))",
      "obtained": "tbl.group(\"a\").min(\"id\")"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "17",
      "original": "({'a':3, 'id':3})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"a\", 3).with(\"id\", 3)",
      "obtained": "tbl.orderBy(\"id\").max(\"a\")"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "18",
      "original": "3",
      "expected_type": "Integer",
      "expected_java": "3",
      "obtained": "tbl.map(row -> row.bracket(\"a\")).max()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "19",
      "original": "({0:{'a':0, 'id':96}, 1:{'a':1, 'id':97}, 2:{'a':2, 'id':98}, 3:{'a':3, 'id':99}})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(0, new MapObject().with(\"a\", 0).with(\"id\", 96)).with(1, new MapObject().with(\"a\", 1).with(\"id\", 97)).with(2, new MapObject().with(\"a\", 2).with(\"id\", 98)).with(3, new MapObject().with(\"a\", 3).with(\"id\", 99))",
      "obtained": "tbl.group(\"a\").max(\"id\")"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "20",
      "original": "({\"a\":0, \"id\":0})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"a\", 0).with(\"id\", 0)",
      "obtained": "tbl.min()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "21",
      "original": "({0:{\"a\":0, \"id\":0}, 1:{\"a\":1, \"id\":1}, 2:{\"a\":2, \"id\":2}, 3:{\"a\":3, \"id\":3}})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(0, new MapObject().with(\"a\", 0).with(\"id\", 0)).with(1, new MapObject().with(\"a\", 1).with(\"id\", 1)).with(2, new MapObject().with(\"a\", 2).with(\"id\", 2)).with(3, new MapObject().with(\"a\", 3).with(\"id\", 3))",
      "obtained": "tbl.group(\"a\").min()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "22",
      "original": "({\"a\":3, \"id\":99})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"a\", 3).with(\"id\", 99)",
      "obtained": "tbl.max()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "23",
      "original": "({0:{'a':0, 'id':96}, 1:{'a':1, 'id':97}, 2:{'a':2, 'id':98}, 3:{'a':3, 'id':99}})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(0, new MapObject().with(\"a\", 0).with(\"id\", 96)).with(1, new MapObject().with(\"a\", 1).with(\"id\", 97)).with(2, new MapObject().with(\"a\", 2).with(\"id\", 98)).with(3, new MapObject().with(\"a\", 3).with(\"id\", 99))",
      "obtained": "tbl.group(\"a\").max()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "24",
      "original": "150",
      "expected_type": "Integer",
      "expected_java": "150",
      "obtained": "tbl.sum(row -> row.bracket(\"a\"))"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "25",
      "original": "150",
      "expected_type": "Integer",
      "expected_java": "150",
      "obtained": "tbl.map(row -> row.bracket(\"a\")).sum()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "26",
      "original": "({0:1200, 1:1225, 2:1250, 3:1275})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(0, 1200).with(1, 1225).with(2, 1250).with(3, 1275)",
      "obtained": "tbl.group(row -> row.bracket(\"a\")).sum(row -> row.bracket(\"id\"))"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "27",
      "original": "1.5",
      "expected_type": "Double",
      "expected_java": "1.5",
      "obtained": "tbl.avg(row -> row.bracket(\"a\"))"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "28",
      "original": "1.5",
      "expected_type": "Double",
      "expected_java": "1.5",
      "obtained": "tbl.map(row -> row.bracket(\"a\")).avg()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "29",
      "original": "({0:48, 1:49, 2:50, 3:51})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(0, 48).with(1, 49).with(2, 50).with(3, 51)",
      "obtained": "tbl.group(row -> row.bracket(\"a\")).avg(row -> row.bracket(\"id\"))"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "30",
      "original": "({'a':0, 'id':96})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"a\", 0).with(\"id\", 96)",
      "obtained": "tbl.orderBy(r.desc(\"id\")).min(row -> row.bracket(\"a\"))"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "31",
      "original": "0",
      "expected_type": "Integer",
      "expected_java": "0",
      "obtained": "tbl.orderBy(r.desc(\"id\")).min(row -> row.bracket(\"a\")).bracket(\"a\")"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "32",
      "original": "0",
      "expected_type": "Integer",
      "expected_java": "0",
      "obtained": "tbl.map(row -> row.bracket(\"a\")).min()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "33",
      "original": "({0:0, 1:1, 2:2, 3:3})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(0, 0).with(1, 1).with(2, 2).with(3, 3)",
      "obtained": "tbl.group(row -> row.bracket(\"a\")).min(row -> row.bracket(\"id\")).bracket(\"id\")"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "34",
      "original": "3",
      "expected_type": "Integer",
      "expected_java": "3",
      "obtained": "tbl.max(row -> row.bracket(\"a\")).bracket(\"a\")"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "35",
      "original": "3",
      "expected_type": "Integer",
      "expected_java": "3",
      "obtained": "tbl.map(row -> row.bracket(\"a\")).max()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "36",
      "original": "({0:96, 1:97, 2:98, 3:99})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(0, 96).with(1, 97).with(2, 98).with(3, 99)",
      "obtained": "tbl.group(row -> row.bracket(\"a\")).max(row -> row.bracket(\"id\")).bracket(\"id\")"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "37",
      "original": "({0:1200, 1:1225, 2:1250, 3:1275})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(0, 1200).with(1, 1225).with(2, 1250).with(3, 1275)",
      "obtained": "tbl.group(row -> row.bracket(\"a\")).map(row -> row.bracket(\"id\")).reduce((a, b) -> r.add(a, b))"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "38",
      "original": "({'$reql_type$':'GROUPED_DATA', 'data':[[0, 1200], [1, 1225], [2, 1250], [3, 1275]]})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"$reql_type$\", \"GROUPED_DATA\").with(\"data\", Arrays.asList(Arrays.asList(0, 1200), Arrays.asList(1, 1225), Arrays.asList(2, 1250), Arrays.asList(3, 1275)))",
      "obtained": "tbl.group(row -> row.bracket(\"a\")).map(row -> row.bracket(\"id\")).reduce((a, b) -> r.add(a, b))",
      "runopts": [
        {
          "key": "group_format",
          "val": "raw"
        }
      ]
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "39",
      "original": "({'$reql_type$':'GROUPED_DATA', 'data':[[1, [{'a':1}]]]})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"$reql_type$\", \"GROUPED_DATA\").with(\"data\", Arrays.asList(Arrays.asList(1, Arrays.asList(new MapObject().with(\"a\", 1)))))",
      "obtained": "r.expr(Arrays.asList(new MapObject().with(\"a\", 1))).filter(true).limit(1).group(\"a\")",
      "runopts": [
        {
          "key": "group_format",
          "val": "raw"
        }
      ]
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "40",
      "original": "(\"GROUPED_STREAM\")",
      "expected_type": "String",
      "expected_java": "GROUPED_STREAM",
      "obtained": "tbl.group(\"a\").typeOf()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "41",
      "original": "(\"GROUPED_DATA\")",
      "expected_type": "String",
      "expected_java": "GROUPED_DATA",
      "obtained": "tbl.group(\"a\").count().typeOf()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "42",
      "original": "(\"GROUPED_DATA\")",
      "expected_type": "String",
      "expected_java": "GROUPED_DATA",
      "obtained": "tbl.group(\"a\").coerceTo(\"ARRAY\").typeOf()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "43",
      "original": "({0:[0,4,8],1:[1,5,9],2:[2,6],3:[3,7]})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(0, Arrays.asList(0, 4, 8)).with(1, Arrays.asList(1, 5, 9)).with(2, Arrays.asList(2, 6)).with(3, Arrays.asList(3, 7))",
      "obtained": "tbl.orderBy().optArg(\"index\", \"id\").filter(row -> r.lt(row.bracket(\"id\"), 10)).group(\"a\").map(row -> row.bracket(\"id\")).coerceTo(\"ARRAY\")"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "44",
      "original": "({0:9,1:9,2:4,3:4})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(0, 9).with(1, 9).with(2, 4).with(3, 4)",
      "obtained": "tbl.filter(row -> r.lt(row.bracket(\"id\"), 10)).group(\"a\").count().do_(x -> r.mul(x, x))"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "45",
      "original": "({'$reql_type$':'GROUPED_DATA', 'data':[[0, 2400], [1, 2450], [2, 2500], [3, 2550]]})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"$reql_type$\", \"GROUPED_DATA\").with(\"data\", Arrays.asList(Arrays.asList(0, 2400), Arrays.asList(1, 2450), Arrays.asList(2, 2500), Arrays.asList(3, 2550)))",
      "obtained": "tbl.union(tbl).group(row -> row.bracket(\"a\")).map(row -> row.bracket(\"id\")).reduce((a, b) -> r.add(a, b))",
      "runopts": [
        {
          "key": "group_format",
          "val": "raw"
        }
      ]
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "46",
      "original": "({'$reql_type$':'GROUPED_DATA', 'data':[[0, 2400], [1, 2450], [2, 2500], [3, 2550]]})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"$reql_type$\", \"GROUPED_DATA\").with(\"data\", Arrays.asList(Arrays.asList(0, 2400), Arrays.asList(1, 2450), Arrays.asList(2, 2500), Arrays.asList(3, 2550)))",
      "obtained": "tbl.coerceTo(\"array\").union(tbl).group(row -> row.bracket(\"a\")).map(row -> row.bracket(\"id\")).reduce((a, b) -> r.add(a, b))",
      "runopts": [
        {
          "key": "group_format",
          "val": "raw"
        }
      ]
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "47",
      "original": "({'$reql_type$':'GROUPED_DATA', 'data':[[0, 2400], [1, 2450], [2, 2500], [3, 2550]]})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"$reql_type$\", \"GROUPED_DATA\").with(\"data\", Arrays.asList(Arrays.asList(0, 2400), Arrays.asList(1, 2450), Arrays.asList(2, 2500), Arrays.asList(3, 2550)))",
      "obtained": "tbl.union(tbl.coerceTo(\"array\")).group(row -> row.bracket(\"a\")).map(row -> row.bracket(\"id\")).reduce((a, b) -> r.add(a, b))",
      "runopts": [
        {
          "key": "group_format",
          "val": "raw"
        }
      ]
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "48",
      "original": "({'$reql_type$':'GROUPED_DATA', 'data':[[0, 1200], [1, 1225], [2, 1250], [3, 1275]]})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"$reql_type$\", \"GROUPED_DATA\").with(\"data\", Arrays.asList(Arrays.asList(0, 1200), Arrays.asList(1, 1225), Arrays.asList(2, 1250), Arrays.asList(3, 1275)))",
      "obtained": "tbl.group(row -> row.bracket(\"a\")).map(row -> row.bracket(\"id\")).reduce((a, b) -> r.add(a, b))",
      "runopts": [
        {
          "key": "group_format",
          "val": "raw"
        }
      ]
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "50",
      "original": "({'$reql_type$':'GROUPED_DATA', 'data':[[0, 25], [1, 25], [2, 25], [3, 25]]})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"$reql_type$\", \"GROUPED_DATA\").with(\"data\", Arrays.asList(Arrays.asList(0, 25), Arrays.asList(1, 25), Arrays.asList(2, 25), Arrays.asList(3, 25)))",
      "obtained": "tbl.group(\"a\").count()",
      "runopts": [
        {
          "key": "group_format",
          "val": "raw"
        }
      ]
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "51",
      "original": "({'$reql_type$':'GROUPED_DATA', 'data':[[0, 1200], [1, 1225], [2, 1250], [3, 1275]]})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"$reql_type$\", \"GROUPED_DATA\").with(\"data\", Arrays.asList(Arrays.asList(0, 1200), Arrays.asList(1, 1225), Arrays.asList(2, 1250), Arrays.asList(3, 1275)))",
      "obtained": "tbl.group(\"a\").sum(\"id\")",
      "runopts": [
        {
          "key": "group_format",
          "val": "raw"
        }
      ]
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "52",
      "original": "({'$reql_type$':'GROUPED_DATA', 'data':[[0, 48], [1, 49], [2, 50], [3, 51]]})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"$reql_type$\", \"GROUPED_DATA\").with(\"data\", Arrays.asList(Arrays.asList(0, 48), Arrays.asList(1, 49), Arrays.asList(2, 50), Arrays.asList(3, 51)))",
      "obtained": "tbl.group(\"a\").avg(\"id\")",
      "runopts": [
        {
          "key": "group_format",
          "val": "raw"
        }
      ]
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "53",
      "original": "({'$reql_type$':'GROUPED_DATA', 'data':[[0, 20], [1, 20], [2, 20], [3, 20], [4, 20]]})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"$reql_type$\", \"GROUPED_DATA\").with(\"data\", Arrays.asList(Arrays.asList(0, 20), Arrays.asList(1, 20), Arrays.asList(2, 20), Arrays.asList(3, 20), Arrays.asList(4, 20)))",
      "obtained": "tbl3.group(row -> row.bracket(\"b\").bracket(\"c\")).count()",
      "runopts": [
        {
          "key": "group_format",
          "val": "raw"
        }
      ]
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "54",
      "original": "({'$reql_type$':'GROUPED_DATA', 'data':[[[0, 0], 9], [[0, 1], 8], [[0, 2], 8], [[1, 0], 8], [[1, 1], 9], [[1, 2], 8], [[2, 0], 8], [[2, 1], 8], [[2, 2], 9], [[3, 0], 9], [[3, 1], 8], [[3, 2], 8]]})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"$reql_type$\", \"GROUPED_DATA\").with(\"data\", Arrays.asList(Arrays.asList(Arrays.asList(0, 0), 9), Arrays.asList(Arrays.asList(0, 1), 8), Arrays.asList(Arrays.asList(0, 2), 8), Arrays.asList(Arrays.asList(1, 0), 8), Arrays.asList(Arrays.asList(1, 1), 9), Arrays.asList(Arrays.asList(1, 2), 8), Arrays.asList(Arrays.asList(2, 0), 8), Arrays.asList(Arrays.asList(2, 1), 8), Arrays.asList(Arrays.asList(2, 2), 9), Arrays.asList(Arrays.asList(3, 0), 9), Arrays.asList(Arrays.asList(3, 1), 8), Arrays.asList(Arrays.asList(3, 2), 8)))",
      "obtained": "tbl.group(\"a\", row -> row.bracket(\"id\").mod(3)).count()",
      "runopts": [
        {
          "key": "group_format",
          "val": "raw"
        }
      ]
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "58",
      "original": "4",
      "expected_type": "Integer",
      "expected_java": "4",
      "obtained": "tbl.map(row -> row.bracket(\"a\")).distinct().count()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "59",
      "original": "(\"STREAM\")",
      "expected_type": "String",
      "expected_java": "STREAM",
      "obtained": "tbl.distinct().typeOf()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "60",
      "original": "100",
      "expected_type": "Integer",
      "expected_java": "100",
      "obtained": "tbl.distinct().count()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "61",
      "original": "(\"STREAM\")",
      "expected_type": "String",
      "expected_java": "STREAM",
      "obtained": "tbl.distinct().optArg(\"index\", \"id\").typeOf()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "62",
      "original": "100",
      "expected_type": "Integer",
      "expected_java": "100",
      "obtained": "tbl.distinct().optArg(\"index\", \"id\").count()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "63",
      "original": "({'created':1})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"created\", 1)",
      "obtained": "tbl.indexCreate(\"a\")"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "66",
      "original": "([{'index':'a','ready':true}])",
      "expected_type": "List",
      "expected_java": "Arrays.asList(new MapObject().with(\"index\", \"a\").with(\"ready\", true))",
      "obtained": "tbl.indexWait(\"a\").pluck(\"index\", \"ready\")"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "69",
      "original": "25",
      "expected_type": "Integer",
      "expected_java": "25",
      "obtained": "tbl.between(0, 1).optArg(\"index\", \"a\").distinct().count()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "70",
      "original": "25",
      "expected_type": "Integer",
      "expected_java": "25",
      "obtained": "tbl.between(0, 1).optArg(\"index\", \"a\").distinct().optArg(\"index\", \"id\").count()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "82",
      "original": "(\"STREAM\")",
      "expected_type": "String",
      "expected_java": "STREAM",
      "obtained": "tbl.distinct().optArg(\"index\", \"a\").typeOf()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "83",
      "original": "4",
      "expected_type": "Integer",
      "expected_java": "4",
      "obtained": "tbl.distinct().optArg(\"index\", \"a\").count()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "84",
      "original": "err('ReqlQueryLogicError', 'Cannot group by nothing.', [])",
      "expected_type": "String",
      "expected_java": "err(\"ReqlQueryLogicError\", \"Cannot group by nothing.\", Arrays.asList())",
      "obtained": "tbl.group()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "85",
      "original": "({'$reql_type$':'GROUPED_DATA', 'data':[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [8, 1], [9, 1], [10, 1], [11, 1], [12, 1], [13, 1], [14, 1], [15, 1], [16, 1], [17, 1], [18, 1], [19, 1], [20, 1], [21, 1], [22, 1], [23, 1], [24, 1], [25, 1], [26, 1], [27, 1], [28, 1], [29, 1], [30, 1], [31, 1], [32, 1], [33, 1], [34, 1], [35, 1], [36, 1], [37, 1], [38, 1], [39, 1], [40, 1], [41, 1], [42, 1], [43, 1], [44, 1], [45, 1], [46, 1], [47, 1], [48, 1], [49, 1], [50, 1], [51, 1], [52, 1], [53, 1], [54, 1], [55, 1], [56, 1], [57, 1], [58, 1], [59, 1], [60, 1], [61, 1], [62, 1], [63, 1], [64, 1], [65, 1], [66, 1], [67, 1], [68, 1], [69, 1], [70, 1], [71, 1], [72, 1], [73, 1], [74, 1], [75, 1], [76, 1], [77, 1], [78, 1], [79, 1], [80, 1], [81, 1], [82, 1], [83, 1], [84, 1], [85, 1], [86, 1], [87, 1], [88, 1], [89, 1], [90, 1], [91, 1], [92, 1], [93, 1], [94, 1], [95, 1], [96, 1], [97, 1], [98, 1], [99, 1]]})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"$reql_type$\", \"GROUPED_DATA\").with(\"data\", Arrays.asList(Arrays.asList(0, 1), Arrays.asList(1, 1), Arrays.asList(2, 1), Arrays.asList(3, 1), Arrays.asList(4, 1), Arrays.asList(5, 1), Arrays.asList(6, 1), Arrays.asList(7, 1), Arrays.asList(8, 1), Arrays.asList(9, 1), Arrays.asList(10, 1), Arrays.asList(11, 1), Arrays.asList(12, 1), Arrays.asList(13, 1), Arrays.asList(14, 1), Arrays.asList(15, 1), Arrays.asList(16, 1), Arrays.asList(17, 1), Arrays.asList(18, 1), Arrays.asList(19, 1), Arrays.asList(20, 1), Arrays.asList(21, 1), Arrays.asList(22, 1), Arrays.asList(23, 1), Arrays.asList(24, 1), Arrays.asList(25, 1), Arrays.asList(26, 1), Arrays.asList(27, 1), Arrays.asList(28, 1), Arrays.asList(29, 1), Arrays.asList(30, 1), Arrays.asList(31, 1), Arrays.asList(32, 1), Arrays.asList(33, 1), Arrays.asList(34, 1), Arrays.asList(35, 1), Arrays.asList(36, 1), Arrays.asList(37, 1), Arrays.asList(38, 1), Arrays.asList(39, 1), Arrays.asList(40, 1), Arrays.asList(41, 1), Arrays.asList(42, 1), Arrays.asList(43, 1), Arrays.asList(44, 1), Arrays.asList(45, 1), Arrays.asList(46, 1), Arrays.asList(47, 1), Arrays.asList(48, 1), Arrays.asList(49, 1), Arrays.asList(50, 1), Arrays.asList(51, 1), Arrays.asList(52, 1), Arrays.asList(53, 1), Arrays.asList(54, 1), Arrays.asList(55, 1), Arrays.asList(56, 1), Arrays.asList(57, 1), Arrays.asList(58, 1), Arrays.asList(59, 1), Arrays.asList(60, 1), Arrays.asList(61, 1), Arrays.asList(62, 1), Arrays.asList(63, 1), Arrays.asList(64, 1), Arrays.asList(65, 1), Arrays.asList(66, 1), Arrays.asList(67, 1), Arrays.asList(68, 1), Arrays.asList(69, 1), Arrays.asList(70, 1), Arrays.asList(71, 1), Arrays.asList(72, 1), Arrays.asList(73, 1), Arrays.asList(74, 1), Arrays.asList(75, 1), Arrays.asList(76, 1), Arrays.asList(77, 1), Arrays.asList(78, 1), Arrays.asList(79, 1), Arrays.asList(80, 1), Arrays.asList(81, 1), Arrays.asList(82, 1), Arrays.asList(83, 1), Arrays.asList(84, 1), Arrays.asList(85, 1), Arrays.asList(86, 1), Arrays.asList(87, 1), Arrays.asList(88, 1), Arrays.asList(89, 1), Arrays.asList(90, 1), Arrays.asList(91, 1), Arrays.asList(92, 1), Arrays.asList(93, 1), Arrays.asList(94, 1), Arrays.asList(95, 1), Arrays.asList(96, 1), Arrays.asList(97, 1), Arrays.asList(98, 1), Arrays.asList(99, 1)))",
      "obtained": "tbl.group().optArg(\"index\", \"id\").count()",
      "runopts": [
        {
          "key": "group_format",
          "val": "raw"
        }
      ]
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "86",
      "original": "({'$reql_type$':'GROUPED_DATA', 'data':[[0, 25], [1, 25], [2, 25], [3, 25]]})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"$reql_type$\", \"GROUPED_DATA\").with(\"data\", Arrays.asList(Arrays.asList(0, 25), Arrays.asList(1, 25), Arrays.asList(2, 25), Arrays.asList(3, 25)))",
      "obtained": "tbl.group().optArg(\"index\", \"a\").count()",
      "runopts": [
        {
          "key": "group_format",
          "val": "raw"
        }
      ]
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "87",
      "original": "({'$reql_type$':'GROUPED_DATA', 'data':[[[0, 0], 1], [[0, 4], 1], [[0, 8], 1], [[0, 12], 1], [[0, 16], 1], [[0, 20], 1], [[0, 24], 1], [[0, 28], 1], [[0, 32], 1], [[0, 36], 1], [[0, 40], 1], [[0, 44], 1], [[0, 48], 1], [[0, 52], 1], [[0, 56], 1], [[0, 60], 1], [[0, 64], 1], [[0, 68], 1], [[0, 72], 1], [[0, 76], 1], [[0, 80], 1], [[0, 84], 1], [[0, 88], 1], [[0, 92], 1], [[0, 96], 1], [[1, 1], 1], [[1, 5], 1], [[1, 9], 1], [[1, 13], 1], [[1, 17], 1], [[1, 21], 1], [[1, 25], 1], [[1, 29], 1], [[1, 33], 1], [[1, 37], 1], [[1, 41], 1], [[1, 45], 1], [[1, 49], 1], [[1, 53], 1], [[1, 57], 1], [[1, 61], 1], [[1, 65], 1], [[1, 69], 1], [[1, 73], 1], [[1, 77], 1], [[1, 81], 1], [[1, 85], 1], [[1, 89], 1], [[1, 93], 1], [[1, 97], 1], [[2, 2], 1], [[2, 6], 1], [[2, 10], 1], [[2, 14], 1], [[2, 18], 1], [[2, 22], 1], [[2, 26], 1], [[2, 30], 1], [[2, 34], 1], [[2, 38], 1], [[2, 42], 1], [[2, 46], 1], [[2, 50], 1], [[2, 54], 1], [[2, 58], 1], [[2, 62], 1], [[2, 66], 1], [[2, 70], 1], [[2, 74], 1], [[2, 78], 1], [[2, 82], 1], [[2, 86], 1], [[2, 90], 1], [[2, 94], 1], [[2, 98], 1], [[3, 3], 1], [[3, 7], 1], [[3, 11], 1], [[3, 15], 1], [[3, 19], 1], [[3, 23], 1], [[3, 27], 1], [[3, 31], 1], [[3, 35], 1], [[3, 39], 1], [[3, 43], 1], [[3, 47], 1], [[3, 51], 1], [[3, 55], 1], [[3, 59], 1], [[3, 63], 1], [[3, 67], 1], [[3, 71], 1], [[3, 75], 1], [[3, 79], 1], [[3, 83], 1], [[3, 87], 1], [[3, 91], 1], [[3, 95], 1], [[3, 99], 1]]})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"$reql_type$\", \"GROUPED_DATA\").with(\"data\", Arrays.asList(Arrays.asList(Arrays.asList(0, 0), 1), Arrays.asList(Arrays.asList(0, 4), 1), Arrays.asList(Arrays.asList(0, 8), 1), Arrays.asList(Arrays.asList(0, 12), 1), Arrays.asList(Arrays.asList(0, 16), 1), Arrays.asList(Arrays.asList(0, 20), 1), Arrays.asList(Arrays.asList(0, 24), 1), Arrays.asList(Arrays.asList(0, 28), 1), Arrays.asList(Arrays.asList(0, 32), 1), Arrays.asList(Arrays.asList(0, 36), 1), Arrays.asList(Arrays.asList(0, 40), 1), Arrays.asList(Arrays.asList(0, 44), 1), Arrays.asList(Arrays.asList(0, 48), 1), Arrays.asList(Arrays.asList(0, 52), 1), Arrays.asList(Arrays.asList(0, 56), 1), Arrays.asList(Arrays.asList(0, 60), 1), Arrays.asList(Arrays.asList(0, 64), 1), Arrays.asList(Arrays.asList(0, 68), 1), Arrays.asList(Arrays.asList(0, 72), 1), Arrays.asList(Arrays.asList(0, 76), 1), Arrays.asList(Arrays.asList(0, 80), 1), Arrays.asList(Arrays.asList(0, 84), 1), Arrays.asList(Arrays.asList(0, 88), 1), Arrays.asList(Arrays.asList(0, 92), 1), Arrays.asList(Arrays.asList(0, 96), 1), Arrays.asList(Arrays.asList(1, 1), 1), Arrays.asList(Arrays.asList(1, 5), 1), Arrays.asList(Arrays.asList(1, 9), 1), Arrays.asList(Arrays.asList(1, 13), 1), Arrays.asList(Arrays.asList(1, 17), 1), Arrays.asList(Arrays.asList(1, 21), 1), Arrays.asList(Arrays.asList(1, 25), 1), Arrays.asList(Arrays.asList(1, 29), 1), Arrays.asList(Arrays.asList(1, 33), 1), Arrays.asList(Arrays.asList(1, 37), 1), Arrays.asList(Arrays.asList(1, 41), 1), Arrays.asList(Arrays.asList(1, 45), 1), Arrays.asList(Arrays.asList(1, 49), 1), Arrays.asList(Arrays.asList(1, 53), 1), Arrays.asList(Arrays.asList(1, 57), 1), Arrays.asList(Arrays.asList(1, 61), 1), Arrays.asList(Arrays.asList(1, 65), 1), Arrays.asList(Arrays.asList(1, 69), 1), Arrays.asList(Arrays.asList(1, 73), 1), Arrays.asList(Arrays.asList(1, 77), 1), Arrays.asList(Arrays.asList(1, 81), 1), Arrays.asList(Arrays.asList(1, 85), 1), Arrays.asList(Arrays.asList(1, 89), 1), Arrays.asList(Arrays.asList(1, 93), 1), Arrays.asList(Arrays.asList(1, 97), 1), Arrays.asList(Arrays.asList(2, 2), 1), Arrays.asList(Arrays.asList(2, 6), 1), Arrays.asList(Arrays.asList(2, 10), 1), Arrays.asList(Arrays.asList(2, 14), 1), Arrays.asList(Arrays.asList(2, 18), 1), Arrays.asList(Arrays.asList(2, 22), 1), Arrays.asList(Arrays.asList(2, 26), 1), Arrays.asList(Arrays.asList(2, 30), 1), Arrays.asList(Arrays.asList(2, 34), 1), Arrays.asList(Arrays.asList(2, 38), 1), Arrays.asList(Arrays.asList(2, 42), 1), Arrays.asList(Arrays.asList(2, 46), 1), Arrays.asList(Arrays.asList(2, 50), 1), Arrays.asList(Arrays.asList(2, 54), 1), Arrays.asList(Arrays.asList(2, 58), 1), Arrays.asList(Arrays.asList(2, 62), 1), Arrays.asList(Arrays.asList(2, 66), 1), Arrays.asList(Arrays.asList(2, 70), 1), Arrays.asList(Arrays.asList(2, 74), 1), Arrays.asList(Arrays.asList(2, 78), 1), Arrays.asList(Arrays.asList(2, 82), 1), Arrays.asList(Arrays.asList(2, 86), 1), Arrays.asList(Arrays.asList(2, 90), 1), Arrays.asList(Arrays.asList(2, 94), 1), Arrays.asList(Arrays.asList(2, 98), 1), Arrays.asList(Arrays.asList(3, 3), 1), Arrays.asList(Arrays.asList(3, 7), 1), Arrays.asList(Arrays.asList(3, 11), 1), Arrays.asList(Arrays.asList(3, 15), 1), Arrays.asList(Arrays.asList(3, 19), 1), Arrays.asList(Arrays.asList(3, 23), 1), Arrays.asList(Arrays.asList(3, 27), 1), Arrays.asList(Arrays.asList(3, 31), 1), Arrays.asList(Arrays.asList(3, 35), 1), Arrays.asList(Arrays.asList(3, 39), 1), Arrays.asList(Arrays.asList(3, 43), 1), Arrays.asList(Arrays.asList(3, 47), 1), Arrays.asList(Arrays.asList(3, 51), 1), Arrays.asList(Arrays.asList(3, 55), 1), Arrays.asList(Arrays.asList(3, 59), 1), Arrays.asList(Arrays.asList(3, 63), 1), Arrays.asList(Arrays.asList(3, 67), 1), Arrays.asList(Arrays.asList(3, 71), 1), Arrays.asList(Arrays.asList(3, 75), 1), Arrays.asList(Arrays.asList(3, 79), 1), Arrays.asList(Arrays.asList(3, 83), 1), Arrays.asList(Arrays.asList(3, 87), 1), Arrays.asList(Arrays.asList(3, 91), 1), Arrays.asList(Arrays.asList(3, 95), 1), Arrays.asList(Arrays.asList(3, 99), 1)))",
      "obtained": "tbl.group(\"a\").optArg(\"index\", \"id\").count()",
      "runopts": [
        {
          "key": "group_format",
          "val": "raw"
        }
      ]
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "88",
      "original": "({'$reql_type$':'GROUPED_DATA', 'data':[[[0, 0], 25], [[1, 1], 25], [[2, 2], 25], [[3, 3], 25]]})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"$reql_type$\", \"GROUPED_DATA\").with(\"data\", Arrays.asList(Arrays.asList(Arrays.asList(0, 0), 25), Arrays.asList(Arrays.asList(1, 1), 25), Arrays.asList(Arrays.asList(2, 2), 25), Arrays.asList(Arrays.asList(3, 3), 25)))",
      "obtained": "tbl.group(\"a\").optArg(\"index\", \"a\").count()",
      "runopts": [
        {
          "key": "group_format",
          "val": "raw"
        }
      ]
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "89",
      "original": "({\"$reql_type$\":\"GROUPED_DATA\", \"data\":[[[0, \"f\", null, [0]], 25], [[0, \"f\", null, null], 25], [[0, \"f\", null, 0], 25], [[0, \"f\", null, {}], 25], [[1, \"f\", null, [0]], 25], [[1, \"f\", null, null], 25], [[1, \"f\", null, 0], 25], [[1, \"f\", null, {}], 25], [[2, \"f\", null, [0]], 25], [[2, \"f\", null, null], 25], [[2, \"f\", null, 0], 25], [[2, \"f\", null, {}], 25], [[3, \"f\", null, [0]], 25], [[3, \"f\", null, null], 25], [[3, \"f\", null, 0], 25], [[3, \"f\", null, {}], 25]]})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"$reql_type$\", \"GROUPED_DATA\").with(\"data\", Arrays.asList(Arrays.asList(Arrays.asList(0, \"f\", null, Arrays.asList(0)), 25), Arrays.asList(Arrays.asList(0, \"f\", null, null), 25), Arrays.asList(Arrays.asList(0, \"f\", null, 0), 25), Arrays.asList(Arrays.asList(0, \"f\", null, new MapObject()), 25), Arrays.asList(Arrays.asList(1, \"f\", null, Arrays.asList(0)), 25), Arrays.asList(Arrays.asList(1, \"f\", null, null), 25), Arrays.asList(Arrays.asList(1, \"f\", null, 0), 25), Arrays.asList(Arrays.asList(1, \"f\", null, new MapObject()), 25), Arrays.asList(Arrays.asList(2, \"f\", null, Arrays.asList(0)), 25), Arrays.asList(Arrays.asList(2, \"f\", null, null), 25), Arrays.asList(Arrays.asList(2, \"f\", null, 0), 25), Arrays.asList(Arrays.asList(2, \"f\", null, new MapObject()), 25), Arrays.asList(Arrays.asList(3, \"f\", null, Arrays.asList(0)), 25), Arrays.asList(Arrays.asList(3, \"f\", null, null), 25), Arrays.asList(Arrays.asList(3, \"f\", null, 0), 25), Arrays.asList(Arrays.asList(3, \"f\", null, new MapObject()), 25)))",
      "obtained": "tbl.group(\"a\", row -> \"f\", row -> Arrays.asList(), row -> Arrays.asList(new MapObject(), Arrays.asList(0), null, 0)).optArg(\"multi\", true).count()",
      "runopts": [
        {
          "key": "group_format",
          "val": "raw"
        }
      ]
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "90",
      "original": "([{'group':0, 'reduction':25}, {'group':1, 'reduction':25}, {'group':2, 'reduction':25}, {'group':3, 'reduction':25}])",
      "expected_type": "List",
      "expected_java": "Arrays.asList(new MapObject().with(\"group\", 0).with(\"reduction\", 25), new MapObject().with(\"group\", 1).with(\"reduction\", 25), new MapObject().with(\"group\", 2).with(\"reduction\", 25), new MapObject().with(\"group\", 3).with(\"reduction\", 25))",
      "obtained": "tbl.group(\"a\").count().ungroup()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "91",
      "original": "([0, 1, 2, 3])",
      "expected_type": "List",
      "expected_java": "Arrays.asList(0, 1, 2, 3)",
      "obtained": "tbl.group(\"a\").ungroup().bracket(\"group\")"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "93",
      "original": "([{'group':[0,null],'reduction':25},{'group':[1,null],'reduction':25},{'group':[2,null],'reduction':25},{'group':[3,null],'reduction':25}])",
      "expected_type": "List",
      "expected_java": "Arrays.asList(new MapObject().with(\"group\", Arrays.asList(0, null)).with(\"reduction\", 25), new MapObject().with(\"group\", Arrays.asList(1, null)).with(\"reduction\", 25), new MapObject().with(\"group\", Arrays.asList(2, null)).with(\"reduction\", 25), new MapObject().with(\"group\", Arrays.asList(3, null)).with(\"reduction\", 25))",
      "obtained": "tbl.group(\"a\", null).count().ungroup()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "94",
      "original": "([{'group':[0,1],'reduction':25},{'group':[0,'two'],'reduction':25},{'group':[1,1],'reduction':25},{'group':[1,'two'],'reduction':25},{'group':[2,1],'reduction':25},{'group':[2,'two'],'reduction':25},{'group':[3,1],'reduction':25},{'group':[3,'two'],'reduction':25}])",
      "expected_type": "List",
      "expected_java": "Arrays.asList(new MapObject().with(\"group\", Arrays.asList(0, 1)).with(\"reduction\", 25), new MapObject().with(\"group\", Arrays.asList(0, \"two\")).with(\"reduction\", 25), new MapObject().with(\"group\", Arrays.asList(1, 1)).with(\"reduction\", 25), new MapObject().with(\"group\", Arrays.asList(1, \"two\")).with(\"reduction\", 25), new MapObject().with(\"group\", Arrays.asList(2, 1)).with(\"reduction\", 25), new MapObject().with(\"group\", Arrays.asList(2, \"two\")).with(\"reduction\", 25), new MapObject().with(\"group\", Arrays.asList(3, 1)).with(\"reduction\", 25), new MapObject().with(\"group\", Arrays.asList(3, \"two\")).with(\"reduction\", 25))",
      "obtained": "tbl.group(\"a\", row -> Arrays.asList(1, \"two\")).optArg(\"multi\", true).count().ungroup()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "95",
      "original": "100",
      "expected_type": "Integer",
      "expected_java": "100",
      "obtained": "tbl.count()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "103",
      "original": "({'a':0,'id':0})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"a\", 0).with(\"id\", 0)",
      "obtained": "tbl.min()"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "104",
      "original": "({'a':0,'id':0})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"a\", 0).with(\"id\", 0)",
      "obtained": "tbl.min().optArg(\"index\", \"id\")"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "105",
      "original": "({'a':0,'id':0})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"a\", 0).with(\"id\", 0)",
      "obtained": "tbl.min().optArg(\"index\", \"a\")"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "106",
      "original": "({'a':3,'id':99})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"a\", 3).with(\"id\", 99)",
      "obtained": "tbl.max().without(\"b\")"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "107",
      "original": "({'a':3,'id':99})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"a\", 3).with(\"id\", 99)",
      "obtained": "tbl.max().optArg(\"index\", \"id\").without(\"b\")"
    },
    {
      "type_item": "JavaQuery",
      "test_file": "aggregation.yaml",
      "test_num": "108",
      "original": "({'a':3,'id':99})",
      "expected_type": "Map",
      "expected_java": "new MapObject().with(\"a\", 3).with(\"id\", 99)",
      "obtained": "tbl.max().optArg(\"index\", \"a\").without(\"b\")"
    }
  ]
}