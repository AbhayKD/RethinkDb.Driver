ModuleName: Selection
TableVarNames:
- tbl
DefsAndTests:
- TestType: JavaDef
  TestFile: selection.yaml
  TestNum: 1
  Original: tbl2 = r.db('test').table('test2')
  Java: Table tbl2 = (Table) (r.db("test").table("test2"));
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 1
  Original: r.db('test').table_create('test2')
  Java: r.db("test").tableCreate("test2")
  ExpectedOriginal: partial({'tables_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_created", 1))
  RunOpts: []
- TestType: JavaDef
  TestFile: selection.yaml
  TestNum: 2
  Original: tbl3 = r.db('test').table('test3')
  Java: Table tbl3 = (Table) (r.db("test").table("test3"));
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 2
  Original: r.db('test').table_create('test3')
  Java: r.db("test").tableCreate("test3")
  ExpectedOriginal: partial({'tables_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_created", 1))
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 3
  Original: tbl.insert([{'id':i, 'a':i%4} for i in xrange(100)])
  Java: tbl.insert(IntStream.range(0, 100).boxed().map(i -> r.hashMap("id", i).with("a", r.mod(i, 4))).collect(Collectors.toList()))
  ExpectedOriginal: ({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':100})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 100)
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 4
  Original: tbl2.insert([{'id':i, 'b':i%4} for i in xrange(100)])
  Java: tbl2.insert(IntStream.range(0, 100).boxed().map(i -> r.hashMap("id", i).with("b", r.mod(i, 4))).collect(Collectors.toList()))
  ExpectedOriginal: ({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':100})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 100)
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 5
  Original: tbl.type_of()
  Java: tbl.typeOf()
  ExpectedOriginal: 'TABLE'
  ExpectedType: String
  ExpectedJava: '"TABLE"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 6
  Original: r.db('missing').table('bar')
  Java: r.db("missing").table("bar")
  ExpectedOriginal: err("ReqlOpFailedError", 'Database `missing` does not exist.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlOpFailedError", "Database `missing` does not exist.", r.array(0))
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 7
  Original: r.db('test').table('missing')
  Java: r.db("test").table("missing")
  ExpectedOriginal: err("ReqlOpFailedError", 'Table `test.missing` does not exist.', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlOpFailedError", "Table `test.missing` does not exist.", r.array(0))
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 8
  Original: "tbl3.insert({'id':u'Здравствуй','value':u'Земля!'})"
  Java: "tbl3.insert(r.hashMap(\"id\", \"Здравствуй\").with(\"value\", \"Земля!\"))"
  ExpectedOriginal: ({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':1})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 1)
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 9
  Original: "tbl3.get(u'Здравствуй')"
  Java: "tbl3.get(\"Здравствуй\")"
  ExpectedOriginal: "({u'id':u'Здравствуй',u'value':u'Земля!'})"
  ExpectedType: Map
  ExpectedJava: "r.hashMap(\"id\", \"Здравствуй\").with(\"value\", \"Земля!\")"
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 10
  Original: "tbl3.filter({'value':u'Земля!'})"
  Java: "tbl3.filter(r.hashMap(\"value\", \"Земля!\"))"
  ExpectedOriginal: "[{u'id':u'Здравствуй',u'value':u'Земля!'}]"
  ExpectedType: List
  ExpectedJava: "r.array(r.hashMap(\"id\", \"Здравствуй\").with(\"value\", \"Земля!\"))"
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 11
  Original: r.db('%')
  Java: r.db("%")
  ExpectedOriginal: err("ReqlQueryLogicError", 'Database name `%` invalid (Use A-Za-z0-9_ only).', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Database name `%` invalid (Use A-Za-z0-9_ only).", r.array(0))
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 12
  Original: r.db('test').table('%')
  Java: r.db("test").table("%")
  ExpectedOriginal: err("ReqlQueryLogicError", 'Table name `%` invalid (Use A-Za-z0-9_ only).', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Table name `%` invalid (Use A-Za-z0-9_ only).", r.array(0))
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 13
  Original: tbl.count()
  Java: tbl.count()
  ExpectedOriginal: 100
  ExpectedType: Long
  ExpectedJava: 100
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 14
  Original: r.table('test2', read_mode='outdated').count()
  Java: r.table("test2").optArg("read_mode", "outdated").count()
  ExpectedOriginal: 100
  ExpectedType: Long
  ExpectedJava: 100
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 14
  Original: r.table('test2', read_mode='single').count()
  Java: r.table("test2").optArg("read_mode", "single").count()
  ExpectedOriginal: 100
  ExpectedType: Long
  ExpectedJava: 100
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 14
  Original: r.table('test2', read_mode='majority').count()
  Java: r.table("test2").optArg("read_mode", "majority").count()
  ExpectedOriginal: 100
  ExpectedType: Long
  ExpectedJava: 100
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 14
  Original: r.db('test').table('test2', read_mode='outdated').count()
  Java: r.db("test").table("test2").optArg("read_mode", "outdated").count()
  ExpectedOriginal: 100
  ExpectedType: Long
  ExpectedJava: 100
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 14
  Original: r.db('test').table('test2', read_mode='single').count()
  Java: r.db("test").table("test2").optArg("read_mode", "single").count()
  ExpectedOriginal: 100
  ExpectedType: Long
  ExpectedJava: 100
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 14
  Original: r.db('test').table('test2', read_mode='majority').count()
  Java: r.db("test").table("test2").optArg("read_mode", "majority").count()
  ExpectedOriginal: 100
  ExpectedType: Long
  ExpectedJava: 100
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 15
  Original: r.table('test2', read_mode=null).count()
  Java: r.table("test2").optArg("read_mode", null).count()
  ExpectedOriginal: err("ReqlNonExistenceError", 'Expected type STRING but found NULL.')
  ExpectedType: Err
  ExpectedJava: err("ReqlNonExistenceError", "Expected type STRING but found NULL.")
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 15
  Original: r.db('test').table('test2', read_mode=null).count()
  Java: r.db("test").table("test2").optArg("read_mode", null).count()
  ExpectedOriginal: err("ReqlNonExistenceError", 'Expected type STRING but found NULL.')
  ExpectedType: Err
  ExpectedJava: err("ReqlNonExistenceError", "Expected type STRING but found NULL.")
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 16
  Original: r.table('test2', read_mode=false).count()
  Java: r.table("test2").optArg("read_mode", false).count()
  ExpectedOriginal: err("ReqlQueryLogicError", 'Expected type STRING but found BOOL.')
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Expected type STRING but found BOOL.")
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 16
  Original: r.db('test').table('test2', read_mode=true).count()
  Java: r.db("test").table("test2").optArg("read_mode", true).count()
  ExpectedOriginal: err("ReqlQueryLogicError", 'Expected type STRING but found BOOL.')
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Expected type STRING but found BOOL.")
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 17
  Original: r.table('test2', read_mode='fake').count()
  Java: r.table("test2").optArg("read_mode", "fake").count()
  ExpectedOriginal: err("ReqlQueryLogicError", 'Read mode `fake` unrecognized (options are "majority", "single", and "outdated").')
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Read mode `fake` unrecognized (options are \"majority\", \"single\", and \"outdated\").")
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 17
  Original: r.db('test').table('test2', read_mode='fake').count()
  Java: r.db("test").table("test2").optArg("read_mode", "fake").count()
  ExpectedOriginal: err("ReqlQueryLogicError", 'Read mode `fake` unrecognized (options are "majority", "single", and "outdated").')
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Read mode `fake` unrecognized (options are \"majority\", \"single\", and \"outdated\").")
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 18
  Original: tbl.get(20).count()
  Java: tbl.get(20).count()
  ExpectedOriginal: err("ReqlQueryLogicError", 'Expected type SEQUENCE but found SINGLE_SELECTION:', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Expected type SEQUENCE but found SINGLE_SELECTION:", r.array(0))
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 19
  Original: tbl.get(20)
  Java: tbl.get(20)
  ExpectedOriginal: ({'id':20,'a':0})
  ExpectedType: Map
  ExpectedJava: r.hashMap("id", 20).with("a", 0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 20
  Original: tbl.get(2000)
  Java: tbl.get(2000)
  ExpectedOriginal: (null)
  ExpectedType: Object
  ExpectedJava: null
  RunOpts: []
- TestType: JavaDef
  TestFile: selection.yaml
  TestNum: 23
  Original: tblpkey = r.db('test').table('testpkey')
  Java: Table tblpkey = (Table) (r.db("test").table("testpkey"));
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 23
  Original: r.db('test').table_create('testpkey', primary_key='foo')
  Java: r.db("test").tableCreate("testpkey").optArg("primary_key", "foo")
  ExpectedOriginal: partial({'tables_created':1})
  ExpectedType: Partial
  ExpectedJava: partial(r.hashMap("tables_created", 1))
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 24
  Original: tblpkey.insert({'foo':10,'a':10})
  Java: tblpkey.insert(r.hashMap("foo", 10).with("a", 10))
  ExpectedOriginal: ({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':1})
  ExpectedType: Map
  ExpectedJava: r.hashMap("deleted", 0.0).with("replaced", 0.0).with("unchanged", 0.0).with("errors", 0.0).with("skipped", 0.0).with("inserted", 1)
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 25
  Original: tblpkey.get(10)
  Java: tblpkey.get(10)
  ExpectedOriginal: ({'foo':10,'a':10})
  ExpectedType: Map
  ExpectedJava: r.hashMap("foo", 10).with("a", 10)
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 26
  Original: tbl.between(1, 2).type_of()
  Java: tbl.between(1, 2).typeOf()
  ExpectedOriginal: 'TABLE_SLICE'
  ExpectedType: String
  ExpectedJava: '"TABLE_SLICE"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 27
  Original: tbl.between(1, 2, index='id').type_of()
  Java: tbl.between(1, 2).optArg("index", "id").typeOf()
  ExpectedOriginal: 'TABLE_SLICE'
  ExpectedType: String
  ExpectedJava: '"TABLE_SLICE"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 28
  Original: tbl.between(1, 1, right_bound='closed').type_of()
  Java: tbl.between(1, 1).optArg("right_bound", "closed").typeOf()
  ExpectedOriginal: 'TABLE_SLICE'
  ExpectedType: String
  ExpectedJava: '"TABLE_SLICE"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 29
  Original: tbl.between(2, 1).type_of()
  Java: tbl.between(2, 1).typeOf()
  ExpectedOriginal: 'TABLE_SLICE'
  ExpectedType: String
  ExpectedJava: '"TABLE_SLICE"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 30
  Original: tbl.between(2, 1, index='id').type_of()
  Java: tbl.between(2, 1).optArg("index", "id").typeOf()
  ExpectedOriginal: 'TABLE_SLICE'
  ExpectedType: String
  ExpectedJava: '"TABLE_SLICE"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 31
  Original: tbl.between(20, 29).count()
  Java: tbl.between(20, 29).count()
  ExpectedOriginal: 9
  ExpectedType: Long
  ExpectedJava: 9
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 32
  Original: tbl.between(-10, 9).count()
  Java: tbl.between(-10, 9).count()
  ExpectedOriginal: 9
  ExpectedType: Long
  ExpectedJava: 9
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 33
  Original: tbl.between(80, 2000).count()
  Java: tbl.between(80, 2000).count()
  ExpectedOriginal: 20
  ExpectedType: Long
  ExpectedJava: 20
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 34
  Original: tbl.between(-2000, 2000).count()
  Java: tbl.between(-2000, 2000).count()
  ExpectedOriginal: 100
  ExpectedType: Long
  ExpectedJava: 100
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 35
  Original: tbl.between(20, 29, right_bound='closed').count()
  Java: tbl.between(20, 29).optArg("right_bound", "closed").count()
  ExpectedOriginal: 10
  ExpectedType: Long
  ExpectedJava: 10
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 36
  Original: tbl.between(-10, 9, right_bound='closed').count()
  Java: tbl.between(-10, 9).optArg("right_bound", "closed").count()
  ExpectedOriginal: 10
  ExpectedType: Long
  ExpectedJava: 10
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 37
  Original: tbl.between(80, 2000, right_bound='closed').count()
  Java: tbl.between(80, 2000).optArg("right_bound", "closed").count()
  ExpectedOriginal: 20
  ExpectedType: Long
  ExpectedJava: 20
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 38
  Original: tbl.between(-2000, 2000, right_bound='closed').count()
  Java: tbl.between(-2000, 2000).optArg("right_bound", "closed").count()
  ExpectedOriginal: 100
  ExpectedType: Long
  ExpectedJava: 100
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 39
  Original: tbl.between(20, 29, left_bound='open').count()
  Java: tbl.between(20, 29).optArg("left_bound", "open").count()
  ExpectedOriginal: 8
  ExpectedType: Long
  ExpectedJava: 8
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 40
  Original: tbl.between(-10, 9, left_bound='open').count()
  Java: tbl.between(-10, 9).optArg("left_bound", "open").count()
  ExpectedOriginal: 9
  ExpectedType: Long
  ExpectedJava: 9
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 41
  Original: tbl.between(80, 2000, left_bound='open').count()
  Java: tbl.between(80, 2000).optArg("left_bound", "open").count()
  ExpectedOriginal: 19
  ExpectedType: Long
  ExpectedJava: 19
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 42
  Original: tbl.between(-2000, 2000, left_bound='open').count()
  Java: tbl.between(-2000, 2000).optArg("left_bound", "open").count()
  ExpectedOriginal: 100
  ExpectedType: Long
  ExpectedJava: 100
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 43
  Original: r.expr([1, 2, 3]).between(-1, 2)
  Java: r.expr(r.array(1, 2, 3)).between(-1, 2)
  ExpectedOriginal: err('ReqlQueryLogicError', 'Expected type TABLE_SLICE but found DATUM:', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Expected type TABLE_SLICE but found DATUM:", r.array(0))
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 44
  Original: tbl.between(r.minval, 2).count()
  Java: tbl.between(r.minval(), 2).count()
  ExpectedOriginal: 2
  ExpectedType: Long
  ExpectedJava: 2
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 45
  Original: tbl.between(r.minval, 2, right_bound='closed').count()
  Java: tbl.between(r.minval(), 2).optArg("right_bound", "closed").count()
  ExpectedOriginal: 3
  ExpectedType: Long
  ExpectedJava: 3
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 46
  Original: tbl.between(r.minval, 2, left_bound='open').count()
  Java: tbl.between(r.minval(), 2).optArg("left_bound", "open").count()
  ExpectedOriginal: 2
  ExpectedType: Long
  ExpectedJava: 2
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 47
  Original: tbl.between(2, r.maxval).count()
  Java: tbl.between(2, r.maxval()).count()
  ExpectedOriginal: 98
  ExpectedType: Long
  ExpectedJava: 98
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 49
  Original: tbl.between(null, 2).count()
  Java: tbl.between((ReqlExpr) null, 2).count()
  ExpectedOriginal: err('ReqlQueryLogicError', 'Cannot use `nu' + 'll` in BETWEEN, use `r.minval` or `r.maxval` to denote unboundedness.')
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot use `nu" + "ll` in BETWEEN, use `r.minval` or `r.maxval` to denote unboundedness.")
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 49
  Original: tbl.between(2, null).count()
  Java: tbl.between(2, (ReqlExpr) null).count()
  ExpectedOriginal: err('ReqlQueryLogicError', 'Cannot use `nu' + 'll` in BETWEEN, use `r.minval` or `r.maxval` to denote unboundedness.')
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot use `nu" + "ll` in BETWEEN, use `r.minval` or `r.maxval` to denote unboundedness.")
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 49
  Original: tbl.between(null, null).count()
  Java: tbl.between((ReqlExpr) null, (ReqlExpr) null).count()
  ExpectedOriginal: err('ReqlQueryLogicError', 'Cannot use `nu' + 'll` in BETWEEN, use `r.minval` or `r.maxval` to denote unboundedness.')
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot use `nu" + "ll` in BETWEEN, use `r.minval` or `r.maxval` to denote unboundedness.")
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 50
  Original: tblpkey.between(9, 11).count()
  Java: tblpkey.between(9, 11).count()
  ExpectedOriginal: 1
  ExpectedType: Long
  ExpectedJava: 1
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 51
  Original: tblpkey.between(11, 12).count()
  Java: tblpkey.between(11, 12).count()
  ExpectedOriginal: 0
  ExpectedType: Long
  ExpectedJava: 0
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 52
  Original: tbl.filter(lambda row:row['a'] > 2).count()
  Java: tbl.filter(row -> row.g("a").gt(2)).count()
  ExpectedOriginal: 25
  ExpectedType: Long
  ExpectedJava: 25
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 53
  Original: 'tbl.filter(lambda row: 1).count()'
  Java: tbl.filter(row -> 1).count()
  ExpectedOriginal: 100
  ExpectedType: Long
  ExpectedJava: 100
  RunOpts: []
- TestType: JavaDef
  TestFile: selection.yaml
  TestNum: 55
  Original: nested=r.expr([[1, 2], [3, 4], [5, 6]])
  Java: MakeArray nested = (MakeArray) (r.expr(r.array(r.array(1, 2), r.array(3, 4), r.array(5, 6))));
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 56
  Original: 'nested.filter(lambda x: x.filter(lambda y: y >= 4).count() > 0)'
  Java: nested.filter(x -> x.filter(y -> r.ge(y, 4)).count().gt(0))
  ExpectedOriginal: ([[3, 4], [5, 6]])
  ExpectedType: List
  ExpectedJava: r.array(r.array(3, 4), r.array(5, 6))
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 60
  Original: r.expr([{'a':1,'b':1,'c':3},{'a':1,'b':2,'c':3}]).filter({'a':1,'b':2})
  Java: r.expr(r.array(r.hashMap("a", 1).with("b", 1).with("c", 3), r.hashMap("a", 1).with("b", 2).with("c", 3))).filter(r.hashMap("a", 1).with("b", 2))
  ExpectedOriginal: '[{''a'': 1, ''c'': 3, ''b'': 2}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", 1).with("c", 3).with("b", 2))
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 61
  Original: r.expr([{'a':1,'b':1,'c':3},{'a':1,'b':2,'c':3}]).filter({'a':1})
  Java: r.expr(r.array(r.hashMap("a", 1).with("b", 1).with("c", 3), r.hashMap("a", 1).with("b", 2).with("c", 3))).filter(r.hashMap("a", 1))
  ExpectedOriginal: '[{''a'': 1, ''c'': 3, ''b'': 1}, {''a'': 1, ''c'': 3, ''b'': 2}]'
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", 1).with("c", 3).with("b", 1), r.hashMap("a", 1).with("c", 3).with("b", 2))
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 63
  Original: r.expr([{'a':1}]).filter({'b':1})
  Java: r.expr(r.array(r.hashMap("a", 1))).filter(r.hashMap("b", 1))
  ExpectedOriginal: '[]'
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 64
  Original: 'tbl.count(lambda row: {''a'':1})'
  Java: tbl.count(row -> r.hashMap("a", 1))
  ExpectedOriginal: 25
  ExpectedType: Long
  ExpectedJava: 25
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 66
  Original: r.expr([1,2,3,1]).count(1)
  Java: r.expr(r.array(1, 2, 3, 1)).count(1)
  ExpectedOriginal: 2
  ExpectedType: Long
  ExpectedJava: 2
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 67
  Original: r.expr([null, 4, null, 'foo']).count(null)
  Java: r.expr(r.array(null, 4, null, "foo")).count((ReqlExpr) null)
  ExpectedOriginal: 2
  ExpectedType: Long
  ExpectedJava: 2
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 68
  Original: r.expr(5) + tbl
  Java: r.expr(5).add(tbl)
  ExpectedOriginal: err('ReqlQueryLogicError', 'Expected type DATUM but found TABLE:', [0])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Expected type DATUM but found TABLE:", r.array(0))
  RunOpts: []
- TestType: JavaQuery
  TestFile: selection.yaml
  TestNum: 69
  Original: tbl.has_fields('field').type_of()
  Java: tbl.hasFields("field").typeOf()
  ExpectedOriginal: ("SELECTION<STREAM>")
  ExpectedType: String
  ExpectedJava: '"SELECTION<STREAM>"'
  RunOpts: []
