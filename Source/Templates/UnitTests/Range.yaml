ModuleName: Range
DefsAndTests:
- TestType: JavaQuery
  TestFile: range.yaml
  TestNum: 1
  Original: r.range().type_of()
  Java: r.range().typeOf()
  ExpectedOriginal: 'STREAM'
  ExpectedType: String
  ExpectedJava: '"STREAM"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  TestNum: 2
  Original: r.range().limit(4)
  Java: r.range().limit(4.0)
  ExpectedOriginal: '[0, 1, 2, 3]'
  ExpectedType: List
  ExpectedJava: r.array(0.0, 1.0, 2.0, 3.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  TestNum: 3
  Original: r.range(4)
  Java: r.range(4.0)
  ExpectedOriginal: '[0, 1, 2, 3]'
  ExpectedType: List
  ExpectedJava: r.array(0.0, 1.0, 2.0, 3.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  TestNum: 4
  Original: r.range(2, 5)
  Java: r.range(2.0, 5.0)
  ExpectedOriginal: '[2, 3, 4]'
  ExpectedType: List
  ExpectedJava: r.array(2.0, 3.0, 4.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  TestNum: 5
  Original: r.range(0)
  Java: r.range(0.0)
  ExpectedOriginal: '[]'
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  TestNum: 6
  Original: r.range(5, 2)
  Java: r.range(5.0, 2.0)
  ExpectedOriginal: '[]'
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  TestNum: 7
  Original: r.range(-5, -2)
  Java: r.range(-5.0, -2.0)
  ExpectedOriginal: '[-5, -4, -3]'
  ExpectedType: List
  ExpectedJava: r.array(-5.0, -4.0, -3.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  TestNum: 8
  Original: r.range(-5, 2)
  Java: r.range(-5.0, 2.0)
  ExpectedOriginal: '[-5, -4, -3, -2, -1, 0, 1]'
  ExpectedType: List
  ExpectedJava: r.array(-5.0, -4.0, -3.0, -2.0, -1.0, 0.0, 1.0)
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  TestNum: 10
  Original: r.range("foo")
  Java: r.range("foo")
  ExpectedOriginal: err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  TestNum: 11
  Original: r.range(9007199254740994)
  Java: r.range(9007199254740994.0)
  ExpectedOriginal: err_regex("ReqlQueryLogicError", "Number not an integer \\(>2\\^53\\). 9007199254740994", [])
  ExpectedType: ErrRegex
  ExpectedJava: err_regex("ReqlQueryLogicError", "Number not an integer \\(>2\\^53\\). 9007199254740994", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  TestNum: 12
  Original: r.range(-9007199254740994)
  Java: r.range(-9007199254740994.0)
  ExpectedOriginal: err_regex("ReqlQueryLogicError", "Number not an integer \\(<-2\\^53\\). -9007199254740994", [])
  ExpectedType: ErrRegex
  ExpectedJava: err_regex("ReqlQueryLogicError", "Number not an integer \\(<-2\\^53\\). -9007199254740994", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  TestNum: 13
  Original: r.range(0.5)
  Java: r.range(0.5)
  ExpectedOriginal: err_regex("ReqlQueryLogicError", "Number not an integer. 0\\.5", [])
  ExpectedType: ErrRegex
  ExpectedJava: err_regex("ReqlQueryLogicError", "Number not an integer. 0\\.5", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  TestNum: 14
  Original: r.range().count()
  Java: r.range().count()
  ExpectedOriginal: err("ReqlQueryLogicError", "Cannot use an infinite stream with an aggregation function (`reduce`, `count`, etc.) or coerce it to an array.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot use an infinite stream with an aggregation function (`reduce`, `count`, etc.) or coerce it to an array.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  TestNum: 15
  Original: r.range().coerce_to("ARRAY")
  Java: r.range().coerceTo("ARRAY")
  ExpectedOriginal: err("ReqlQueryLogicError", "Cannot use an infinite stream with an aggregation function (`reduce`, `count`, etc.) or coerce it to an array.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot use an infinite stream with an aggregation function (`reduce`, `count`, etc.) or coerce it to an array.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  TestNum: 16
  Original: r.range().coerce_to("OBJECT")
  Java: r.range().coerceTo("OBJECT")
  ExpectedOriginal: err("ReqlQueryLogicError", "Cannot use an infinite stream with an aggregation function (`reduce`, `count`, etc.) or coerce it to an array.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot use an infinite stream with an aggregation function (`reduce`, `count`, etc.) or coerce it to an array.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  TestNum: 17
  Original: r.range(4).count()
  Java: r.range(4.0).count()
  ExpectedOriginal: 4
  ExpectedType: Double
  ExpectedJava: 4.0
  RunOpts: []
