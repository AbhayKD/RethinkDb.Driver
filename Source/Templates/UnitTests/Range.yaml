ModuleName: Range
Description: Tests RQL range generation
DefsAndTests:
- TestType: JavaQuery
  TestFile: range.yaml
  LineNum: 3
  Original: r.range().type_of()
  Java: r.range().typeOf()
  ExpectedOriginal: 'STREAM'
  ExpectedType: String
  ExpectedJava: '"STREAM"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  LineNum: 6
  Original: r.range().limit(4)
  Java: r.range().limit(4L)
  ExpectedOriginal: '[0, 1, 2, 3]'
  ExpectedType: List
  ExpectedJava: r.array(0L, 1L, 2L, 3L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  LineNum: 9
  Original: r.range(4)
  Java: r.range(4L)
  ExpectedOriginal: '[0, 1, 2, 3]'
  ExpectedType: List
  ExpectedJava: r.array(0L, 1L, 2L, 3L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  LineNum: 12
  Original: r.range(2, 5)
  Java: r.range(2L, 5L)
  ExpectedOriginal: '[2, 3, 4]'
  ExpectedType: List
  ExpectedJava: r.array(2L, 3L, 4L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  LineNum: 15
  Original: r.range(0)
  Java: r.range(0L)
  ExpectedOriginal: '[]'
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  LineNum: 18
  Original: r.range(5, 2)
  Java: r.range(5L, 2L)
  ExpectedOriginal: '[]'
  ExpectedType: List
  ExpectedJava: r.array()
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  LineNum: 21
  Original: r.range(-5, -2)
  Java: r.range(-5L, -2L)
  ExpectedOriginal: '[-5, -4, -3]'
  ExpectedType: List
  ExpectedJava: r.array(-5L, -4L, -3L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  LineNum: 24
  Original: r.range(-5, 2)
  Java: r.range(-5L, 2L)
  ExpectedOriginal: '[-5, -4, -3, -2, -1, 0, 1]'
  ExpectedType: List
  ExpectedJava: r.array(-5L, -4L, -3L, -2L, -1L, 0L, 1L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  LineNum: 30
  Original: r.range("foo")
  Java: r.range("foo")
  ExpectedOriginal: err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  LineNum: 34
  Original: r.range(9007199254740994)
  Java: r.range(9007199254740994L)
  ExpectedOriginal: err_regex("ReqlQueryLogicError", "Number not an integer \\(>2\\^53\\). 9007199254740994", [])
  ExpectedType: ErrRegex
  ExpectedJava: err_regex("ReqlQueryLogicError", "Number not an integer \\(>2\\^53\\). 9007199254740994", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  LineNum: 37
  Original: r.range(-9007199254740994)
  Java: r.range(-9007199254740994L)
  ExpectedOriginal: err_regex("ReqlQueryLogicError", "Number not an integer \\(<-2\\^53\\). -9007199254740994", [])
  ExpectedType: ErrRegex
  ExpectedJava: err_regex("ReqlQueryLogicError", "Number not an integer \\(<-2\\^53\\). -9007199254740994", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  LineNum: 40
  Original: r.range(0.5)
  Java: r.range(0.5)
  ExpectedOriginal: err_regex("ReqlQueryLogicError", "Number not an integer. 0\\.5", [])
  ExpectedType: ErrRegex
  ExpectedJava: err_regex("ReqlQueryLogicError", "Number not an integer. 0\\.5", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  LineNum: 43
  Original: r.range().count()
  Java: r.range().count()
  ExpectedOriginal: err("ReqlQueryLogicError", "Cannot use an infinite stream with an aggregation function (`reduce`, `count`, etc.) or coerce it to an array.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot use an infinite stream with an aggregation function (`reduce`, `count`, etc.) or coerce it to an array.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  LineNum: 46
  Original: r.range().coerce_to("ARRAY")
  Java: r.range().coerceTo("ARRAY")
  ExpectedOriginal: err("ReqlQueryLogicError", "Cannot use an infinite stream with an aggregation function (`reduce`, `count`, etc.) or coerce it to an array.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot use an infinite stream with an aggregation function (`reduce`, `count`, etc.) or coerce it to an array.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  LineNum: 49
  Original: r.range().coerce_to("OBJECT")
  Java: r.range().coerceTo("OBJECT")
  ExpectedOriginal: err("ReqlQueryLogicError", "Cannot use an infinite stream with an aggregation function (`reduce`, `count`, etc.) or coerce it to an array.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", "Cannot use an infinite stream with an aggregation function (`reduce`, `count`, etc.) or coerce it to an array.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: range.yaml
  LineNum: 52
  Original: r.range(4).count()
  Java: r.range(4L).count()
  ExpectedOriginal: 4
  ExpectedType: Long
  ExpectedJava: 4L
  RunOpts: []
