ModuleName: TransformObject
DefsAndTests:
- TestType: JavaDef
  TestFile: transform/object.yaml
  TestNum: 1
  Original: obj = r.expr({'a':1, 'b':2,'c':"str",'d':null,'e':{'f':'buzz'}})
  Java: MakeObj obj = (MakeObj) (r.expr(r.hashMap("a", 1L).with("b", 2L).with("c", "str").with("d", null).with("e", r.hashMap("f", "buzz"))));
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 2
  Original: obj['a']
  Java: obj.g("a")
  ExpectedOriginal: 1
  ExpectedType: Long
  ExpectedJava: 1L
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 3
  Original: obj['c']
  Java: obj.g("c")
  ExpectedOriginal: 'str'
  ExpectedType: String
  ExpectedJava: '"str"'
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 4
  Original: obj.has_fields('b')
  Java: obj.hasFields("b")
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 5
  Original: obj.keys().contains('d')
  Java: obj.keys().contains("d")
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 6
  Original: obj.has_fields('d')
  Java: obj.hasFields("d")
  ExpectedOriginal: False
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 7
  Original: obj.has_fields({'e':'f'})
  Java: obj.hasFields(r.hashMap("e", "f"))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 8
  Original: obj.has_fields({'e':'g'})
  Java: obj.hasFields(r.hashMap("e", "g"))
  ExpectedOriginal: False
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 9
  Original: obj.has_fields('f')
  Java: obj.hasFields("f")
  ExpectedOriginal: False
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 10
  Original: obj.has_fields('a', 'b')
  Java: obj.hasFields("a", "b")
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 11
  Original: obj.has_fields('a', 'd')
  Java: obj.hasFields("a", "d")
  ExpectedOriginal: False
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 12
  Original: obj.has_fields('a', 'f')
  Java: obj.hasFields("a", "f")
  ExpectedOriginal: False
  ExpectedType: Boolean
  ExpectedJava: false
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 13
  Original: obj.has_fields('a', {'e':'f'})
  Java: obj.hasFields("a", r.hashMap("e", "f"))
  ExpectedOriginal: True
  ExpectedType: Boolean
  ExpectedJava: true
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 14
  Original: r.expr([obj, obj.pluck('a', 'b')]).has_fields('a', 'b').count()
  Java: r.expr(r.array(obj, obj.pluck("a", "b"))).hasFields("a", "b").count()
  ExpectedOriginal: 2
  ExpectedType: Long
  ExpectedJava: 2L
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 15
  Original: r.expr([obj, obj.pluck('a', 'b')]).has_fields('a', 'c').count()
  Java: r.expr(r.array(obj, obj.pluck("a", "b"))).hasFields("a", "c").count()
  ExpectedOriginal: 1
  ExpectedType: Long
  ExpectedJava: 1L
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 16
  Original: r.expr([obj, obj.pluck('a', 'e')]).has_fields('a', {'e':'f'}).count()
  Java: r.expr(r.array(obj, obj.pluck("a", "e"))).hasFields("a", r.hashMap("e", "f")).count()
  ExpectedOriginal: 2
  ExpectedType: Long
  ExpectedJava: 2L
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 17
  Original: obj.pluck('a')
  Java: obj.pluck("a")
  ExpectedOriginal: ({'a':1})
  ExpectedType: Map
  ExpectedJava: r.hashMap("a", 1L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 18
  Original: obj.pluck('a', 'b')
  Java: obj.pluck("a", "b")
  ExpectedOriginal: ({'a':1, 'b':2})
  ExpectedType: Map
  ExpectedJava: r.hashMap("a", 1L).with("b", 2L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 19
  Original: obj.without('a')
  Java: obj.without("a")
  ExpectedOriginal: ({'b':2, 'c':'str', 'd':null, 'e':{'f':'buzz'}})
  ExpectedType: Map
  ExpectedJava: r.hashMap("b", 2L).with("c", "str").with("d", null).with("e", r.hashMap("f", "buzz"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 20
  Original: obj.without('a', 'b')
  Java: obj.without("a", "b")
  ExpectedOriginal: ({'c':'str', 'd':null,'e':{'f':'buzz'}})
  ExpectedType: Map
  ExpectedJava: r.hashMap("c", "str").with("d", null).with("e", r.hashMap("f", "buzz"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 21
  Original: obj.without('a', 'b', 'c', 'd')
  Java: obj.without("a", "b", "c", "d")
  ExpectedOriginal: ({'e':{'f':'buzz'}})
  ExpectedType: Map
  ExpectedJava: r.hashMap("e", r.hashMap("f", "buzz"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 22
  Original: obj.without({'e':'f'})
  Java: obj.without(r.hashMap("e", "f"))
  ExpectedOriginal: ({'a':1, 'b':2, 'c':'str', 'd':null, 'e':{}})
  ExpectedType: Map
  ExpectedJava: r.hashMap("a", 1L).with("b", 2L).with("c", "str").with("d", null).with("e", r.hashMap())
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 23
  Original: obj.without({'e':'buzz'})
  Java: obj.without(r.hashMap("e", "buzz"))
  ExpectedOriginal: ({'a':1, 'b':2, 'c':'str', 'd':null, 'e':{'f':'buzz'}})
  ExpectedType: Map
  ExpectedJava: r.hashMap("a", 1L).with("b", 2L).with("c", "str").with("d", null).with("e", r.hashMap("f", "buzz"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 24
  Original: obj.merge(1)
  Java: obj.merge(1L)
  ExpectedOriginal: 1
  ExpectedType: Long
  ExpectedJava: 1L
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 25
  Original: obj.merge({'e':-2})
  Java: obj.merge(r.hashMap("e", -2L))
  ExpectedOriginal: ({'a':1, 'b':2, 'c':'str', 'd':null, 'e':-2})
  ExpectedType: Map
  ExpectedJava: r.hashMap("a", 1L).with("b", 2L).with("c", "str").with("d", null).with("e", -2L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 26
  Original: obj.merge({'e':r.literal()})
  Java: obj.merge(r.hashMap("e", r.literal()))
  ExpectedOriginal: ({'a':1, 'b':2, 'c':'str', 'd':null})
  ExpectedType: Map
  ExpectedJava: r.hashMap("a", 1L).with("b", 2L).with("c", "str").with("d", null)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 27
  Original: obj.merge({'e':{'f':'quux'}})
  Java: obj.merge(r.hashMap("e", r.hashMap("f", "quux")))
  ExpectedOriginal: ({'a':1, 'b':2, 'c':'str', 'd':null, 'e':{'f':'quux'}})
  ExpectedType: Map
  ExpectedJava: r.hashMap("a", 1L).with("b", 2L).with("c", "str").with("d", null).with("e", r.hashMap("f", "quux"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 28
  Original: obj.merge({'e':{'g':'quux'}})
  Java: obj.merge(r.hashMap("e", r.hashMap("g", "quux")))
  ExpectedOriginal: ({'a':1, 'b':2, 'c':'str', 'd':null, 'e':{'f':'buzz', 'g':'quux'}})
  ExpectedType: Map
  ExpectedJava: r.hashMap("a", 1L).with("b", 2L).with("c", "str").with("d", null).with("e", r.hashMap("f", "buzz").with("g", "quux"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 29
  Original: obj.merge({'e':r.literal({'g':'quux'})})
  Java: obj.merge(r.hashMap("e", r.literal(r.hashMap("g", "quux"))))
  ExpectedOriginal: ({'a':1, 'b':2, 'c':'str', 'd':null, 'e':{'g':'quux'}})
  ExpectedType: Map
  ExpectedJava: r.hashMap("a", 1L).with("b", 2L).with("c", "str").with("d", null).with("e", r.hashMap("g", "quux"))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 30
  Original: obj.merge({'a':-1})
  Java: obj.merge(r.hashMap("a", -1L))
  ExpectedOriginal: ({'a':-1, 'b':2, 'c':'str', 'd':null, 'e':{'f':'buzz'}})
  ExpectedType: Map
  ExpectedJava: r.hashMap("a", -1L).with("b", 2L).with("c", "str").with("d", null).with("e", r.hashMap("f", "buzz"))
  RunOpts: []
- TestType: JavaDef
  TestFile: transform/object.yaml
  TestNum: 31
  Original: errmsg = 'Stray literal keyword found:'+' literal is only legal inside of the object passed to merge or update and cannot nest inside other literals.'
  Java: String errmsg = (String) ("Stray literal keyword found:" + " literal is only legal inside of the object passed to merge or update and cannot nest inside other literals.");
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 32
  Original: r.literal('foo')
  Java: r.literal("foo")
  ExpectedOriginal: err("ReqlQueryLogicError", errmsg, [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", errmsg, r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 33
  Original: obj.merge(r.literal('foo'))
  Java: obj.merge(r.literal("foo"))
  ExpectedOriginal: err("ReqlQueryLogicError", errmsg, [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", errmsg, r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 34
  Original: obj.merge({'foo':r.literal(r.literal('foo'))})
  Java: obj.merge(r.hashMap("foo", r.literal(r.literal("foo"))))
  ExpectedOriginal: err("ReqlQueryLogicError", errmsg, [])
  ExpectedType: Err
  ExpectedJava: err("ReqlQueryLogicError", errmsg, r.array())
  RunOpts: []
- TestType: JavaDef
  TestFile: transform/object.yaml
  TestNum: 35
  Original: o = r.expr({'a':{'b':1, 'c':2}, 'd':3})
  Java: MakeObj o = (MakeObj) (r.expr(r.hashMap("a", r.hashMap("b", 1L).with("c", 2L)).with("d", 3L)));
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 36
  Original: o.merge({'e':4}, {'f':5})
  Java: o.merge(r.hashMap("e", 4L), r.hashMap("f", 5L))
  ExpectedOriginal: ({'a':{'b':1, 'c':2}, 'd':3, 'e':4, 'f':5})
  ExpectedType: Map
  ExpectedJava: r.hashMap("a", r.hashMap("b", 1L).with("c", 2L)).with("d", 3L).with("e", 4L).with("f", 5L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 37
  Original: r.expr([o, o.merge({'d':4})]).merge(lambda row:{'e':row['d']})
  Java: r.expr(r.array(o, o.merge(r.hashMap("d", 4L)))).merge(row -> r.hashMap("e", row.g("d")))
  ExpectedOriginal: ([{'a':{'b':1, 'c':2}, 'd':3, 'e':3}, {'a':{'b':1, 'c':2}, 'd':4, 'e':4}])
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", r.hashMap("b", 1L).with("c", 2L)).with("d", 3L).with("e", 3L), r.hashMap("a", r.hashMap("b", 1L).with("c", 2L)).with("d", 4L).with("e", 4L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 39
  Original: r.expr([o, o.merge({'d':4})]).merge(lambda row:{'a':{'b':2}})
  Java: r.expr(r.array(o, o.merge(r.hashMap("d", 4L)))).merge(row -> r.hashMap("a", r.hashMap("b", 2L)))
  ExpectedOriginal: ([{'a':{'b':2, 'c':2}, 'd':3}, {'a':{'b':2, 'c':2}, 'd':4}])
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", r.hashMap("b", 2L).with("c", 2L)).with("d", 3L), r.hashMap("a", r.hashMap("b", 2L).with("c", 2L)).with("d", 4L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 40
  Original: r.expr([o, o.merge({'d':4})]).merge(lambda row:{'a':r.literal({'b':2})})
  Java: r.expr(r.array(o, o.merge(r.hashMap("d", 4L)))).merge(row -> r.hashMap("a", r.literal(r.hashMap("b", 2L))))
  ExpectedOriginal: ([{'a':{'b':2}, 'd':3}, {'a':{'b':2}, 'd':4}])
  ExpectedType: List
  ExpectedJava: r.array(r.hashMap("a", r.hashMap("b", 2L)).with("d", 3L), r.hashMap("a", r.hashMap("b", 2L)).with("d", 4L))
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 41
  Original: obj.keys()
  Java: obj.keys()
  ExpectedOriginal: (['a', 'b', 'c', 'd', 'e'])
  ExpectedType: List
  ExpectedJava: r.array("a", "b", "c", "d", "e")
  RunOpts: []
- TestType: JavaQuery
  TestFile: transform/object.yaml
  TestNum: 42
  Original: obj.values()
  Java: obj.values()
  ExpectedOriginal: ([1, 2, 'str', null, {'f':'buzz'}])
  ExpectedType: List
  ExpectedJava: r.array(1L, 2L, "str", null, r.hashMap("f", "buzz"))
  RunOpts: []
