ModuleName: Regression2697
TableVarNames:
- tbl
DefsAndTests:
- TestType: JavaDef
  TestFile: regression/2697.yaml
  TestNum: 1
  Original: ten_l = r.expr([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
  Java: MakeArray ten_l = (MakeArray) (r.expr(r.array(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L)));
  RunOpts: []
- TestType: JavaQuery
  TestFile: regression/2697.yaml
  TestNum: 2
  Original: tbl.insert({'id':1, 'a':r.expr(ten_l).concat_map(lambda l:list(range(1,11))).concat_map(lambda l:list(range(1,11))).concat_map(lambda l:list(range(1,11))).concat_map(lambda l:list(range(1,11)))}).pluck('first_error', 'inserted')
  Java: tbl.insert(r.hashMap("id", 1L).with("a", r.expr(ten_l).concatMap(l -> list(range(1L, 11L))).concatMap(l -> list(range(1L, 11L))).concatMap(l -> list(range(1L, 11L))).concatMap(l -> list(range(1L, 11L))))).pluck("first_error", "inserted")
  ExpectedOriginal: ({'inserted':1})
  ExpectedType: Map
  ExpectedJava: r.hashMap("inserted", 1L)
  RunOpts: []
- TestType: JavaQuery
  TestFile: regression/2697.yaml
  TestNum: 4
  Original: tbl.get(1)['a'].count()
  Java: tbl.get(1L).g("a").count()
  ExpectedOriginal: 100000
  ExpectedType: Long
  ExpectedJava: 100000L
  RunOpts: []
- TestType: JavaQuery
  TestFile: regression/2697.yaml
  TestNum: 6
  Original: tbl.get(1)['a'].count()
  Java: tbl.get(1L).g("a").count()
  ExpectedOriginal: 100000
  ExpectedType: Long
  ExpectedJava: 100000L
  RunOpts: []
- TestType: JavaQuery
  TestFile: regression/2697.yaml
  TestNum: 7
  Original: r.expr(ten_l).concat_map(lambda l:list(range(1,11))).concat_map(lambda l:list(range(1,11))).concat_map(lambda l:list(range(1,11))).concat_map(lambda l:list(range(1,11))).splice_at(0, [1]).count()
  Java: r.expr(ten_l).concatMap(l -> list(range(1L, 11L))).concatMap(l -> list(range(1L, 11L))).concatMap(l -> list(range(1L, 11L))).concatMap(l -> list(range(1L, 11L))).spliceAt(0L, r.array(1L)).count()
  ExpectedOriginal: err("ReqlResourceLimitError", "Array over size limit `100000`.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlResourceLimitError", "Array over size limit `100000`.", r.array())
  RunOpts: []
- TestType: JavaQuery
  TestFile: regression/2697.yaml
  TestNum: 8
  Original: r.expr(ten_l).concat_map(lambda l:list(range(1,11))).concat_map(lambda l:list(range(1,11))).concat_map(lambda l:list(range(1,11))).concat_map(lambda l:list(range(1,11))).insert_at(0, [1]).count()
  Java: r.expr(ten_l).concatMap(l -> list(range(1L, 11L))).concatMap(l -> list(range(1L, 11L))).concatMap(l -> list(range(1L, 11L))).concatMap(l -> list(range(1L, 11L))).insertAt(0L, r.array(1L)).count()
  ExpectedOriginal: err("ReqlResourceLimitError", "Array over size limit `100000`.", [])
  ExpectedType: Err
  ExpectedJava: err("ReqlResourceLimitError", "Array over size limit `100000`.", r.array())
  RunOpts: []
