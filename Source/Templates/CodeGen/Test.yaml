<%!
import base64
%>
ModuleName: "${module_name}"
Description: "${description}"
TableVarNames:
%for var_name in table_var_names:
    - ${var_name}
%endfor

DefsAndTests:

        <%rendered_something = False %>
        %for item in defs_and_test:
        %if type(item) == JavaDef:
        <%rendered_something = True %>

   - TestType: JavaDef
     TestFile: ${item.testfile}
     LineNum: ${item.line_num}
     VarName: ${item.varname}
     VarType: ${item.vartype}
     RunIfQuery: ${item.run_if_query}
       %if item.runopts:   
     RunOpts:
              %for key, val in item.runopts.items():
                - Key: ${key}
                  Val: ${val}
              %endfor
       %endif

     Value: ${item.value}
     Original: ${base64.b64encode(bytes(item.line.original,"utf-8"))}
     Java: ${base64.b64encode(bytes(item.line.java,"utf-8"))}
        %elif type(item) == JavaQuery:
   - TestType: JavaQuery
     TestFile: ${item.testfile}
     LineNum: ${item.line_num}
     Original: ${base64.b64encode(bytes(item.line.original,"utf-8"))}
     ExpectedOriginal: ${base64.b64encode(bytes(item.expected_line.original, "utf-8"))}
     ExpectedType: ${item.expected_type}
     ExpectedJava: ${base64.b64encode(bytes(item.expected_line.java,"utf-8"))}
     Java: ${base64.b64encode(bytes(item.line.java,"utf-8"))}
            %if item.runopts:   
     RunOpts:
              %for key, val in item.runopts.items():
                - Key: ${key}
                  Val: ${val}
              %endfor
            %else:
            %endif
        %endif
        %endfor
        %if not rendered_something:
render_something: false
        %endif

