#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Templates.CodeGen
{
    
    #line 2 "..\..\CodeGen\AstSubclassTemplate.cshtml"
    using System;
    
    #line default
    #line hidden
    
    #line 3 "..\..\CodeGen\AstSubclassTemplate.cshtml"
    using System.Collections.Generic;
    
    #line default
    #line hidden
    
    #line 4 "..\..\CodeGen\AstSubclassTemplate.cshtml"
    using System.Linq;
    
    #line default
    #line hidden
    
    #line 5 "..\..\CodeGen\AstSubclassTemplate.cshtml"
    using System.Security.Cryptography;
    
    #line default
    #line hidden
    using System.Text;
    
    #line 6 "..\..\CodeGen\AstSubclassTemplate.cshtml"
    using Humanizer;
    
    #line default
    #line hidden
    
    #line 7 "..\..\CodeGen\AstSubclassTemplate.cshtml"
    using Newtonsoft.Json;
    
    #line default
    #line hidden
    
    #line 8 "..\..\CodeGen\AstSubclassTemplate.cshtml"
    using Newtonsoft.Json.Linq;
    
    #line default
    #line hidden
    
    #line 9 "..\..\CodeGen\AstSubclassTemplate.cshtml"
    using RazorGenerator.Templating;
    
    #line default
    #line hidden
    
    #line 10 "..\..\CodeGen\AstSubclassTemplate.cshtml"
    using Templates.CodeGen;
    
    #line default
    #line hidden
    
    #line 11 "..\..\CodeGen\AstSubclassTemplate.cshtml"
    using Z.ExtensionMethods;
    
    #line default
    #line hidden
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    public partial class AstSubclassTemplate : BaseTemplate
    {
#line hidden

        #line 15 "..\..\CodeGen\AstSubclassTemplate.cshtml"

    public string ClassName { get; set; }
    public string Superclass { get; set; }
    public string IncludeIn { get; set; }

    public string TermType { get; set; }
    public Dictionary<string,JObject> AllTerms { get; set; }

    public override RazorTemplateBase UseParentLayout(RazorTemplateBase child)
    {
        return new AstSubclassTemplate()
        {
            ClassName = this.ClassName,
            Superclass = this.Superclass,
            IncludeIn = this.IncludeIn,
            TermType = this.TermType,
            AllTerms = this.AllTerms,
            ChildTemplate = child
        };
    }

    public class Signature
    {
        [JsonProperty("first_arg")]
        public string FirstArg { get; set; }
        public SigArg[] Args { get; set; }
        public class SigArg
        {
            public string Var { get; set; }
            public string Type { get; set; }
        }
    }
    

        #line default
        #line hidden

        public override void Execute()
        {


WriteLiteral("\r\n");











WriteLiteral("\r\n");


WriteLiteral("\r\n");


WriteLiteral("\r\n\r\n");


DefineSection("Ctors", () => {

WriteLiteral("\r\n");


            
            #line 51 "..\..\CodeGen\AstSubclassTemplate.cshtml"
     if( this.TermType != null )
    {

            
            #line default
            #line hidden
WriteLiteral("        ");

WriteLiteral("public ");


            
            #line 53 "..\..\CodeGen\AstSubclassTemplate.cshtml"
            Write(Class(ClassName));

            
            #line default
            #line hidden
WriteLiteral(" (object arg) : this(new Arguments(arg), null) {\r\n");



WriteLiteral("        ");

WriteLiteral("}\r\n");



WriteLiteral("        ");

WriteLiteral("public ");


            
            #line 55 "..\..\CodeGen\AstSubclassTemplate.cshtml"
            Write(Class(ClassName));

            
            #line default
            #line hidden
WriteLiteral(" (Arguments args) : this(args, null) {\r\n");



WriteLiteral("        ");

WriteLiteral("}\r\n");



WriteLiteral("        ");

WriteLiteral("public ");


            
            #line 57 "..\..\CodeGen\AstSubclassTemplate.cshtml"
            Write(Class(ClassName));

            
            #line default
            #line hidden
WriteLiteral(" (Arguments args, OptArgs optargs)\r\n");



WriteLiteral("        ");

WriteLiteral("     : this(TermType.");


            
            #line 58 "..\..\CodeGen\AstSubclassTemplate.cshtml"
                          Write(TermType);

            
            #line default
            #line hidden
WriteLiteral(", args, optargs) {\r\n");



WriteLiteral("        ");

WriteLiteral("}\r\n");


            
            #line 60 "..\..\CodeGen\AstSubclassTemplate.cshtml"
    }

            
            #line default
            #line hidden
WriteLiteral("\r\n    protected ");


            
            #line 62 "..\..\CodeGen\AstSubclassTemplate.cshtml"
         Write(Class(ClassName));

            
            #line default
            #line hidden
WriteLiteral(" (TermType termType, Arguments args, OptArgs optargs) : base(termType, args, opta" +
"rgs)\r\n    {\r\n    }\r\n");


});

WriteLiteral("\r\n\r\n");


DefineSection("StaticFactories", () => {

WriteLiteral("\r\n\r\n");


});

WriteLiteral(@"

//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;
using System.Collections.Generic;

namespace RethinkDb.Driver.Ast {
    public class ");


            
            #line 83 "..\..\CodeGen\AstSubclassTemplate.cshtml"
            Write(Class(ClassName));

            
            #line default
            #line hidden
WriteLiteral(" : ");


            
            #line 83 "..\..\CodeGen\AstSubclassTemplate.cshtml"
                                Write(Superclass);

            
            #line default
            #line hidden
WriteLiteral(" {\r\n    \r\n    ");


            
            #line 85 "..\..\CodeGen\AstSubclassTemplate.cshtml"
Write(RenderSection("ctors"));

            
            #line default
            #line hidden
WriteLiteral("\r\n\r\n    ");


            
            #line 87 "..\..\CodeGen\AstSubclassTemplate.cshtml"
Write(RenderSection("StaticFactories"));

            
            #line default
            #line hidden
WriteLiteral("\r\n\r\n    ");


            
            #line 89 "..\..\CodeGen\AstSubclassTemplate.cshtml"
Write(RenderBody());

            
            #line default
            #line hidden
WriteLiteral("\r\n\r\n    ");


            
            #line 91 "..\..\CodeGen\AstSubclassTemplate.cshtml"
Write(RenderSection("SpecialMethods"));

            
            #line default
            #line hidden
WriteLiteral("\r\n\r\n");


            
            #line 93 "..\..\CodeGen\AstSubclassTemplate.cshtml"
     foreach( var termInfo in AllTerms )
    {
        var term = termInfo.Key;
        var info = termInfo.Value;


        if( info["include_in"].ToObject<string[]>().Any(inc => string.Equals(inc, term, StringComparison.OrdinalIgnoreCase)) )
        { // is the current term included in this class we're generating?

            foreach(var signature in info["signatures"].ToObject<Signature[]>() )
            {
                if( signature.FirstArg == ClassName )
                {

            
            #line default
            #line hidden
WriteLiteral("                    ");

WriteLiteral("public ");


            
            #line 106 "..\..\CodeGen\AstSubclassTemplate.cshtml"
                        Write(Class(info["classname"].ToString()));

            
            #line default
            #line hidden
WriteLiteral(" ");


            
            #line 106 "..\..\CodeGen\AstSubclassTemplate.cshtml"
                                                             Write(Method(info["methodname"].ToString()));

            
            #line default
            #line hidden
WriteLiteral(" (\r\n");


            
            #line 107 "..\..\CodeGen\AstSubclassTemplate.cshtml"
                       var parameters = signature.Args.Skip(1).Select(arg => $"{ArgumentType(arg.Type)} {ArgumentVariable(arg.Var)}").ToArray();
                       
            
            #line default
            #line hidden
            
            #line 108 "..\..\CodeGen\AstSubclassTemplate.cshtml"
                  Write(string.Join(", ", parameters.ToArray() ));

            
            #line default
            #line hidden
            
            #line 108 "..\..\CodeGen\AstSubclassTemplate.cshtml"
                                                                

            
            #line default
            #line hidden
WriteLiteral("                    ");

WriteLiteral(") {\r\n");


            
            #line 110 "..\..\CodeGen\AstSubclassTemplate.cshtml"


            
            #line default
            #line hidden
WriteLiteral("                        ");

WriteLiteral("Arguments arguments = new Arguments(this);\r\n");


            
            #line 112 "..\..\CodeGen\AstSubclassTemplate.cshtml"
                    foreach( var param in signature.Args.Skip(1) )
                    {
                        if( param.Type == "Object..." )
                        {

            
            #line default
            #line hidden
WriteLiteral("                            ");

WriteLiteral("arguments.coerceAndAddAll(");


            
            #line 116 "..\..\CodeGen\AstSubclassTemplate.cshtml"
                                                   Write(ArgumentVariable(param.Var));

            
            #line default
            #line hidden
WriteLiteral("\r\n");


            
            #line 117 "..\..\CodeGen\AstSubclassTemplate.cshtml"
                        }
                        else
                        {

            
            #line default
            #line hidden
WriteLiteral("                            ");

WriteLiteral("arguments.coerceAndAdd(");


            
            #line 120 "..\..\CodeGen\AstSubclassTemplate.cshtml"
                                                Write(ArgumentVariable(param.Var));

            
            #line default
            #line hidden
WriteLiteral("\r\n");


            
            #line 121 "..\..\CodeGen\AstSubclassTemplate.cshtml"
                        }

            
            #line default
            #line hidden
WriteLiteral("                        ");

WriteLiteral("return new ");


            
            #line 122 "..\..\CodeGen\AstSubclassTemplate.cshtml"
                                Write(Class(info["classname"].ToString()));

            
            #line default
            #line hidden
WriteLiteral(" (arguments);\r\n");


            
            #line 123 "..\..\CodeGen\AstSubclassTemplate.cshtml"
                    }

            
            #line default
            #line hidden
WriteLiteral("                    ");

WriteLiteral("}\r\n");


            
            #line 125 "..\..\CodeGen\AstSubclassTemplate.cshtml"
                }
            }

        }
    }

            
            #line default
            #line hidden
WriteLiteral("\r\n    \r\n    }\r\n}\r\n");


        }
    }
}
#pragma warning restore 1591
