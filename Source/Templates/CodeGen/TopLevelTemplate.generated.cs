#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Templates.CodeGen
{
    using System;
    
    #line 1 "..\..\CodeGen\TopLevelTemplate.cshtml"
    using System.Collections.Generic;
    
    #line default
    #line hidden
    
    #line 2 "..\..\CodeGen\TopLevelTemplate.cshtml"
    using System.Linq;
    
    #line default
    #line hidden
    using System.Text;
    
    #line 3 "..\..\CodeGen\TopLevelTemplate.cshtml"
    using Humanizer;
    
    #line default
    #line hidden
    
    #line 4 "..\..\CodeGen\TopLevelTemplate.cshtml"
    using Newtonsoft.Json.Linq;
    
    #line default
    #line hidden
    
    #line 5 "..\..\CodeGen\TopLevelTemplate.cshtml"
    using Templates.CodeGen.Util;
    
    #line default
    #line hidden
    
    #line 6 "..\..\CodeGen\TopLevelTemplate.cshtml"
    using Templates.Metadata;
    
    #line default
    #line hidden
    
    #line 7 "..\..\CodeGen\TopLevelTemplate.cshtml"
    using Z.ExtensionMethods;
    
    #line default
    #line hidden
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    public partial class TopLevelTemplate : Templates.CodeGen.BaseTemplate
    {
#line hidden

        #line 11 "..\..\CodeGen\TopLevelTemplate.cshtml"

    public Dictionary<string, JObject> AllTerms { get; set; }


        #line default
        #line hidden
#line hidden
public System.Web.WebPages.HelperResult RenderMethodXmlDoc(string term)
{
return new System.Web.WebPages.HelperResult(__razor_helper_writer => {



#line 17 "..\..\CodeGen\TopLevelTemplate.cshtml"
 
    Documentation doc;
    if (MetaDb.Docs.TryGetValue(term, out doc))
    {

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "/// <summary>\r\n");



WriteLiteralTo(@__razor_helper_writer, "/// ");



#line 22 "..\..\CodeGen\TopLevelTemplate.cshtml"
WriteTo(@__razor_helper_writer, doc.Description);

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "\r\n");



WriteLiteralTo(@__razor_helper_writer, "///</summary>\r\n");



WriteLiteralTo(@__razor_helper_writer, "/// <example>");



#line 24 "..\..\CodeGen\TopLevelTemplate.cshtml"
WriteTo(@__razor_helper_writer, doc.Example);

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "</example>\r\n");



#line 25 "..\..\CodeGen\TopLevelTemplate.cshtml"
    };

#line default
#line hidden

});

}


        public override void Execute()
        {







WriteLiteral("\r\n");


WriteLiteral("\r\n");


WriteLiteral("\r\n\r\n");



WriteLiteral("\r\n\r\n\r\n\r\n\r\n//AUTOGENERATED, DO NOTMODIFY.\r\n//Do not edit this file directly.\r\n\r\n#p" +
"ragma warning disable 1591 // Missing XML comment for publicly visible type or m" +
"ember\r\n// ReSharper disable CheckNamespace\r\n\r\nusing System;\r\nusing System.Linq;\r" +
"\nusing System.Collections;\r\nusing RethinkDb.Driver.Model;\r\nusing RethinkDb.Drive" +
"r.Ast;\r\n\r\nnamespace RethinkDb.Driver.Ast {\r\n    public class TopLevel {\r\n\r\n     " +
"   public ReqlExpr Expr(Object value){\r\n            return expr(value);\r\n       " +
" }\r\n        internal ReqlExpr expr(Object value){\r\n            return Util.ToReq" +
"lExpr(value);\r\n        }\r\n\r\n\r\n        public ReqlExpr Row(params object[] values" +
") {\r\n            return row(values);\r\n        }\r\n        internal ReqlExpr row(p" +
"arams object[] values) {\r\n            throw new ReqlDriverError(\"r.row is not im" +
"plemented in the C# driver. Use lambda syntax instead.\");\r\n        }\r\n\r\n        " +
"public MapObject HashMap(object key, object val) {\r\n            return new MapOb" +
"ject().With(key, val);\r\n        }\r\n        internal MapObject hashMap(object key" +
", object val) {\r\n            return new MapObject().With(key, val);\r\n        }\r\n" +
"\r\n        public MapObject HashMap()\r\n        {\r\n            return hashMap();\r\n" +
"        }\r\n        internal MapObject hashMap()\r\n        {\r\n            return n" +
"ew MapObject();\r\n        }\r\n\r\n\r\n        public IList Array(params object[] value" +
"s){\r\n            return array(values);\r\n        }\r\n        internal IList array(" +
"params object[] values){\r\n            return values.ToList();\r\n        }\r\n\r\n");


            
            #line 85 "..\..\CodeGen\TopLevelTemplate.cshtml"
         foreach (var termInfo in AllTerms)
        {
            var term = termInfo.Value;
            if (term["include_in"].ToObject<string[]>().Any(inc => string.Equals(inc, "TopLevel")))
            {
                foreach( var methodname in term["methodnames"].ToObject<string[]>() )
                {
                    foreach( var sig in term["signatures"].ToObject<Signature[]>() )
                    {
                        if( sig.FirstArg.NotIn("Db", "Table") )
                        {
                            var parameters = sig.Args.Select(arg => $"{ArgumentType(arg.Type)} {ArgumentVariable(arg.Var)}").ToArray();
                            var forwardParams = sig.Args.Select(arg => $"{ArgumentVariable(arg.Var)}").ToArray();

                            
            
            #line default
            #line hidden
            
            #line 99 "..\..\CodeGen\TopLevelTemplate.cshtml"
                       Write(RenderMethodXmlDoc(termInfo.Key));

            
            #line default
            #line hidden
            
            #line 99 "..\..\CodeGen\TopLevelTemplate.cshtml"
                                                             

            
            #line default
            #line hidden
WriteLiteral("                            ");

WriteLiteral("public ");


            
            #line 100 "..\..\CodeGen\TopLevelTemplate.cshtml"
                                Write(Class(term["classname"].ToString()));

            
            #line default
            #line hidden
WriteLiteral(" ");


            
            #line 100 "..\..\CodeGen\TopLevelTemplate.cshtml"
                                                                     Write(Method(methodname));

            
            #line default
            #line hidden
WriteLiteral(" ( ");


            
            #line 100 "..\..\CodeGen\TopLevelTemplate.cshtml"
                                                                                           Write(string.Join(", ", parameters.ToArray()));

            
            #line default
            #line hidden
WriteLiteral(" )\r\n");



WriteLiteral("                            ");

WriteLiteral("{\r\n");



WriteLiteral("                            ");

WriteLiteral("   return ");


            
            #line 102 "..\..\CodeGen\TopLevelTemplate.cshtml"
                                   Write(MethodInternalName(methodname));

            
            #line default
            #line hidden
WriteLiteral(" ( ");


            
            #line 102 "..\..\CodeGen\TopLevelTemplate.cshtml"
                                                                     Write(string.Join(", ", forwardParams.ToArray()));

            
            #line default
            #line hidden
WriteLiteral(" );\r\n");



WriteLiteral("                            ");

WriteLiteral("}\r\n");


            
            #line 104 "..\..\CodeGen\TopLevelTemplate.cshtml"


            
            #line default
            #line hidden
WriteLiteral("                            ");

WriteLiteral("internal ");


            
            #line 105 "..\..\CodeGen\TopLevelTemplate.cshtml"
                                  Write(Class(term["classname"].ToString()));

            
            #line default
            #line hidden
WriteLiteral(" ");


            
            #line 105 "..\..\CodeGen\TopLevelTemplate.cshtml"
                                                                       Write(MethodInternalName(methodname));

            
            #line default
            #line hidden
WriteLiteral(" ( ");


            
            #line 105 "..\..\CodeGen\TopLevelTemplate.cshtml"
                                                                                                         Write(string.Join(", ", parameters.ToArray()));

            
            #line default
            #line hidden
WriteLiteral(" )\r\n");



WriteLiteral("                            ");

WriteLiteral("{\r\n");


            
            #line 107 "..\..\CodeGen\TopLevelTemplate.cshtml"

                            if (methodname == "binary")
                            {
                                var firstArg = sig.Args[0].Var;

            
            #line default
            #line hidden
WriteLiteral("                                ");

WriteLiteral("   var byteArray = ");


            
            #line 111 "..\..\CodeGen\TopLevelTemplate.cshtml"
                                                Write(firstArg);

            
            #line default
            #line hidden
WriteLiteral(" as byte[];\r\n");



WriteLiteral("                                ");

WriteLiteral("   if( byteArray != null ){\r\n");



WriteLiteral("                                ");

WriteLiteral("     return new Binary(byteArray);\r\n");



WriteLiteral("                                ");

WriteLiteral("   }\r\n");


            
            #line 115 "..\..\CodeGen\TopLevelTemplate.cshtml"
                            }

            
            #line default
            #line hidden
WriteLiteral("                            ");

WriteLiteral("    Arguments arguments = new Arguments();\r\n");


            
            #line 117 "..\..\CodeGen\TopLevelTemplate.cshtml"
                            foreach( var param in sig.Args )
                            {
                                if( param.Type == "Object..." )
                                {

            
            #line default
            #line hidden
WriteLiteral("                                ");

WriteLiteral("arguments.CoerceAndAddAll(");


            
            #line 121 "..\..\CodeGen\TopLevelTemplate.cshtml"
                                                       Write(ArgumentVariable(param.Var));

            
            #line default
            #line hidden
WriteLiteral(");\r\n");


            
            #line 122 "..\..\CodeGen\TopLevelTemplate.cshtml"
                                }
                                else
                                {

            
            #line default
            #line hidden
WriteLiteral("                                ");

WriteLiteral("arguments.CoerceAndAdd(");


            
            #line 125 "..\..\CodeGen\TopLevelTemplate.cshtml"
                                                    Write(ArgumentVariable(param.Var));

            
            #line default
            #line hidden
WriteLiteral(");\r\n");


            
            #line 126 "..\..\CodeGen\TopLevelTemplate.cshtml"
                                }
                            }

            
            #line default
            #line hidden
WriteLiteral("                            ");

WriteLiteral("    return new ");


            
            #line 128 "..\..\CodeGen\TopLevelTemplate.cshtml"
                                        Write(Class(term["classname"].ToString()));

            
            #line default
            #line hidden
WriteLiteral(" (arguments);\r\n");



WriteLiteral("                            ");

WriteLiteral("}\r\n");


            
            #line 130 "..\..\CodeGen\TopLevelTemplate.cshtml"

                        }
                    }
                }
            }
        }

            
            #line default
            #line hidden
WriteLiteral("\r\n\r\n\r\n    }\r\n}\r\n");


        }
    }
}
#pragma warning restore 1591
