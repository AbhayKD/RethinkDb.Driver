#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Templates.CodeGen
{
    using System;
    
    #line 1 "..\..\CodeGen\TopLevelTemplate.cshtml"
    using System.Collections.Generic;
    
    #line default
    #line hidden
    
    #line 2 "..\..\CodeGen\TopLevelTemplate.cshtml"
    using System.Linq;
    
    #line default
    #line hidden
    using System.Text;
    
    #line 3 "..\..\CodeGen\TopLevelTemplate.cshtml"
    using Humanizer;
    
    #line default
    #line hidden
    
    #line 4 "..\..\CodeGen\TopLevelTemplate.cshtml"
    using Newtonsoft.Json.Linq;
    
    #line default
    #line hidden
    
    #line 5 "..\..\CodeGen\TopLevelTemplate.cshtml"
    using Templates.CodeGen.Util;
    
    #line default
    #line hidden
    
    #line 6 "..\..\CodeGen\TopLevelTemplate.cshtml"
    using Templates.Metadata;
    
    #line default
    #line hidden
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    public partial class TopLevelTemplate : Templates.CodeGen.BaseTemplate
    {
#line hidden

        #line 10 "..\..\CodeGen\TopLevelTemplate.cshtml"

    public Dictionary<string, JObject> AllTerms { get; set; }


        #line default
        #line hidden
#line hidden
public System.Web.WebPages.HelperResult RenderMethodXmlDoc(string term)
{
return new System.Web.WebPages.HelperResult(__razor_helper_writer => {



#line 16 "..\..\CodeGen\TopLevelTemplate.cshtml"
 
    Documentation doc;
    if (MetaDb.Docs.TryGetValue(term, out doc))
    {

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "/// <summary>\r\n");



WriteLiteralTo(@__razor_helper_writer, "/// ");



#line 21 "..\..\CodeGen\TopLevelTemplate.cshtml"
WriteTo(@__razor_helper_writer, doc.Description);

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "\r\n");



WriteLiteralTo(@__razor_helper_writer, "///</summary>\r\n");



WriteLiteralTo(@__razor_helper_writer, "/// <example>");



#line 23 "..\..\CodeGen\TopLevelTemplate.cshtml"
WriteTo(@__razor_helper_writer, doc.Example);

#line default
#line hidden

WriteLiteralTo(@__razor_helper_writer, "</example>\r\n");



#line 24 "..\..\CodeGen\TopLevelTemplate.cshtml"
    };

#line default
#line hidden

});

}


        public override void Execute()
        {






WriteLiteral("\r\n");


WriteLiteral("\r\n");


WriteLiteral("\r\n\r\n");



WriteLiteral(@"




//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;

namespace RethinkDb.Driver.Ast {
    public class TopLevel {

        public ReqlExpr expr(Object value){
            return Util.ToReqlExpr(value);
        }

        public ReqlExpr row(params object[] values) {
            throw new ReqlDriverError(""r.row is not implemented in the C# driver. Use lambda syntax instead."");
        }

        public MapObject hashMap(object key, object val) {
            return new MapObject().with(key, val);
        }

        public MapObject hashMap()
        {
            return new MapObject();
        }

        public IList array(params object[] values){
            return values.ToList();
        }

");


            
            #line 66 "..\..\CodeGen\TopLevelTemplate.cshtml"
         foreach (var termInfo in AllTerms)
        {
            var term = termInfo.Value;
            if (term["include_in"].ToObject<string[]>().Any(inc => string.Equals(inc, "TopLevel")))
            {
                foreach( var methodname in term["methodnames"].ToObject<string[]>() )
                {
                    foreach( var signature in term["signatures"].ToObject<Signature[]>() )
                    {
                        var parameters = signature.Args.Select(arg => $"{ArgumentType(arg.Type)} {ArgumentVariable(arg.Var)}").ToArray();

                        
            
            #line default
            #line hidden
            
            #line 77 "..\..\CodeGen\TopLevelTemplate.cshtml"
                   Write(RenderMethodXmlDoc(termInfo.Key));

            
            #line default
            #line hidden
            
            #line 77 "..\..\CodeGen\TopLevelTemplate.cshtml"
                                                         

            
            #line default
            #line hidden
WriteLiteral("                        ");

WriteLiteral("public ");


            
            #line 78 "..\..\CodeGen\TopLevelTemplate.cshtml"
                            Write(Class(term["classname"].ToString()));

            
            #line default
            #line hidden
WriteLiteral(" ");


            
            #line 78 "..\..\CodeGen\TopLevelTemplate.cshtml"
                                                                 Write(Method(methodname));

            
            #line default
            #line hidden
WriteLiteral(" ( ");


            
            #line 78 "..\..\CodeGen\TopLevelTemplate.cshtml"
                                                                                       Write(string.Join(", ", parameters.ToArray()));

            
            #line default
            #line hidden
WriteLiteral(" )\r\n");



WriteLiteral("                        ");

WriteLiteral("{\r\n");


            
            #line 80 "..\..\CodeGen\TopLevelTemplate.cshtml"

                        if( methodname == "binary" )
                        {
                            var firstArg = signature.Args[0].Var;

            
            #line default
            #line hidden
WriteLiteral("                            ");

WriteLiteral("var byteArray = ");


            
            #line 84 "..\..\CodeGen\TopLevelTemplate.cshtml"
                                         Write(firstArg);

            
            #line default
            #line hidden
WriteLiteral(" as byte[];\r\n");



WriteLiteral("                            ");

WriteLiteral("if( ");


            
            #line 85 "..\..\CodeGen\TopLevelTemplate.cshtml"
                             Write(firstArg);

            
            #line default
            #line hidden
WriteLiteral(" != null ){\r\n");



WriteLiteral("                            ");

WriteLiteral("return new Binary(byteArray);\r\n");



WriteLiteral("                            ");

WriteLiteral("}\r\n");


            
            #line 88 "..\..\CodeGen\TopLevelTemplate.cshtml"
                        }

            
            #line default
            #line hidden
WriteLiteral("                        ");

WriteLiteral("Arguments arguments = new Arguments();\r\n");


            
            #line 90 "..\..\CodeGen\TopLevelTemplate.cshtml"
                        foreach( var param in signature.Args )
                        {
                            if( param.Type == "Object..." )
                            {

            
            #line default
            #line hidden
WriteLiteral("                                ");

WriteLiteral("arguments.CoerceAndAddAll(");


            
            #line 94 "..\..\CodeGen\TopLevelTemplate.cshtml"
                                                       Write(ArgumentVariable(param.Var));

            
            #line default
            #line hidden
WriteLiteral(");\r\n");


            
            #line 95 "..\..\CodeGen\TopLevelTemplate.cshtml"
                            }
                            else
                            {

            
            #line default
            #line hidden
WriteLiteral("                                ");

WriteLiteral("arguments.CoerceAndAdd(");


            
            #line 98 "..\..\CodeGen\TopLevelTemplate.cshtml"
                                                    Write(ArgumentVariable(param.Var));

            
            #line default
            #line hidden
WriteLiteral(");\r\n");


            
            #line 99 "..\..\CodeGen\TopLevelTemplate.cshtml"
                            }
                        }

            
            #line default
            #line hidden
WriteLiteral("                        ");

WriteLiteral("return new ");


            
            #line 101 "..\..\CodeGen\TopLevelTemplate.cshtml"
                                Write(Class(term["classname"].ToString()));

            
            #line default
            #line hidden
WriteLiteral(" (arguments);\r\n");



WriteLiteral("                        ");

WriteLiteral("}\r\n");


            
            #line 103 "..\..\CodeGen\TopLevelTemplate.cshtml"

                    }
                }
            }
        }

            
            #line default
            #line hidden
WriteLiteral("\r\n\r\n\r\n    }\r\n}\r\n");


        }
    }
}
#pragma warning restore 1591
