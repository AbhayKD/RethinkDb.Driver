@using System.Collections.Generic
@using System.Linq
@using Humanizer
@using Newtonsoft.Json.Linq

@inherits Templates.CodeGen.BaseTemplate

@functions {

    public Dictionary<string,string> OptArgs { get; set; }

    public string ReqlToNativeType(string reqlType)
    {
        if( reqlType.StartsWith("E") )
            return "string";
        if( reqlType == "T_BOOL" )
            return "bool?";
        if( reqlType == "T_NUM" )
            return "double?";
        if( reqlType == "T_STR" )
            return "string";

        return "object";
    }
}

//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

// ReSharper disable CheckNamespace

namespace RethinkDb.Driver.Model {
    public class GlobalOptions {
        
        @foreach( var kvp in OptArgs )
        {
            @:public @ReqlToNativeType(kvp.Value) @Property(kvp.Key) { get; set; }
        }

        public OptArgs ToOptArgs(){
             var ret = new OptArgs();
            
            @foreach( var kvp in OptArgs )
            {
                 @:if( this.@Property(kvp.Key) != null )
                    @:ret.With("@kvp.Key", this.@Property(kvp.Key));
             
            }

            return ret;
        }

        
        @foreach( var kvp in OptArgs )
        {
            @:public static GlobalOptions @("with"+Class(kvp.Key)) (@ReqlToNativeType(kvp.Value) @Argument(kvp.Key ) ){
                @:return new GlobalOptions{ @(Property(kvp.Key) + " = " + Argument(kvp.Key)) };
            @:}
        }
    
    }
}
