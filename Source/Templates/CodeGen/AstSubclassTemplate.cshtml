@* Generator: Template  GeneratePrettyNames: true *@
@using System
@using System.Collections.Generic
@using System.Linq
@using System.Security.Cryptography
@using System.Text
@using Humanizer
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using RazorGenerator.Templating
@using Templates.CodeGen
@using Templates.CodeGen.Util
@using Templates.Metadata
@using Z.ExtensionMethods

@inherits BaseTemplate

@functions {
    public string ClassName { get; set; }
    public string Superclass { get; set; }

    public string TermName { get; set; }
    public JObject TermMeta { get; set; }
    public Dictionary<string,JObject> AllTerms { get; set; }

    public override RazorTemplateBase UseParentLayout(RazorTemplateBase child)
    {
        return new AstSubclassTemplate()
        {
            ClassName = this.ClassName,
            Superclass = this.Superclass,
            TermName = this.TermName,
            TermMeta = this.TermMeta,
            AllTerms = this.AllTerms,
            ChildTemplate = child
        };
    }

}

@helper RenderCtorXmlDoc(string term)
{   
    Documentation doc;
    if( MetaDb.Docs.TryGetValue(term, out doc) )
    {
@:/// <summary>
@:/// @doc.Description
@:/// </summary>
@:/// <example>@doc.Example</example>
    };
}

@section Ctors{
    @if( this.TermName != null )
    {
        @RenderCtorXmlDoc(this.TermName)
        @:public @Class(ClassName) (object arg) : this(new Arguments(arg), null) {
        @:}

        @RenderCtorXmlDoc(this.TermName)
        @:public @Class(ClassName) (Arguments args) : this(args, null) {
        @:}

        @RenderCtorXmlDoc(this.TermName)
        @:public @Class(ClassName) (Arguments args, OptArgs optargs)
        @: : base(TermType.@TermName, args, optargs) {
        @:}
    }
    else
    {
        @:protected @Class(ClassName) (TermType termType, Arguments args, OptArgs optargs) : base(termType, args, optargs)
        @:{
        @:}
    }
}

@section StaticFactories{

}

@section OptArgs{
    @if( TermMeta?["optargs"] != null )
    {
        var optArgs = TermMeta["optargs"] as JObject;
@:///<summary>
@:/// @optArgs.ToString().Trim('{', '}').Trim().Replace("\n","\n///")
@:///</summary>
        @:public @Class(ClassName) this[object optArgs] {
        @:    get
        @:    {
        @:        var newOptArgs = OptArgs.FromMap(this.OptArgs).With(optArgs);
        @:
        @:        return new @Class(ClassName) (this.Args, newOptArgs);
        @:    }
        @:}
        @:
@:///<summary>
@:/// @optArgs.ToString().Trim('{', '}').Trim().Replace("\n", "\n///")
@:///</summary>
    @:public @Class(ClassName) this[OptArgs optArgs] {
    @:    get
    @:    {
    @:        var newOptArgs = OptArgs.FromMap(this.OptArgs).With(optArgs);
    @:
    @:        return new @Class(ClassName) (this.Args, newOptArgs);
    @:    }
    @:}
    @:
@:///<summary>
@:/// @optArgs.ToString().Trim('{', '}').Trim().Replace("\n","\n///")
@:///</summary>
        @:public @Class(ClassName) optArg(string key, object val){
        @:    
        @:    var newOptArgs = OptArgs.FromMap(this.OptArgs).With(key, val);
        @:
        @:    return new @Class(ClassName) (this.Args, newOptArgs);
        @:}
     }
}

@section ReqlExprHelpers{
@*
    C# Method Overload Resolution requires us to define these at the class level
    to avoid conflicting operator resolution between this[object anonTypeOptArg) and
    this[string bracket].
    
    For example, if A.Foo(string) and B.Foo(object) exists, and B derives from A, then
    B.Foo("my string") resolves to B.Foo(object) NOT A.Foo(string). A.Foo(string) seems 
    like the more logical choice, but not to the compiler. So, we need to re-define 
    these [string] indexers here along side the OptArgs indexers so the compiler
    resolving Term[] doesn't get it twisted.
    
    Originally I had this in partial ReqlExpr, but operator resolution didn't work 
    for ReQL terms that had this[object] optArg indexers.
*@
    
    @if (Superclass == "ReqlExpr")
    {
        @:/// <summary>
        @:/// Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
        @:/// </summary>
        @:/// <param name="bracket"></param>
        @* DO NOT USE OVERRIDE KEYWORD, USE NEW *@
        @:public new Bracket this[string bracket] => base[bracket];
        @:
        @:/// <summary>
        @:/// Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
        @:/// </summary>
        @:/// <param name="bracket"></param>
        @:/// <returns></returns>
        @* DO NOT USE OVERRIDE KEYWORD, USE NEW *@
        @:public new Bracket this[int bracket] => base[bracket];
    }
}

//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591 // Missing XML comment for publicly visible type or member
// ReSharper disable CheckNamespace

using System;
using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;
using System.Collections;
using System.Collections.Generic;
@RenderSection("add_imports")

namespace RethinkDb.Driver.Ast {

    public partial class @Class(ClassName) : @Superclass {

    @RenderSection("MemberVars")
    
    @RenderSection("Ctors")

    @RenderSection("StaticFactories")

    @RenderSection("OptArgs")

    @RenderSection("ReqlExprHelpers")

    @RenderBody()

    @RenderSection("SpecialMethods")

    @foreach( var termInfo in AllTerms )
    {
        var term = termInfo.Key;
        var info = termInfo.Value;


        if( info["include_in"].ToObject<string[]>().Any(inc => string.Equals(inc, ClassName, StringComparison.OrdinalIgnoreCase)) )
        { // is the current term included in this class we're generating?
            foreach( var methodname in info["methodnames"].ToObject<string[]>() )
            {
                foreach( var signature in info["signatures"].ToObject<Signature[]>() )
                {
                    if( signature.FirstArg == ClassName )
                    {
                        var parameters = signature.Args.Skip(1).Select(arg => $"{ArgumentType(arg.Type)} {ArgumentVariable(arg.Var)}").ToArray();
                        var forwardParams = signature.Args.Skip(1).Select(arg => $"{ArgumentVariable(arg.Var)}").ToArray();

                        @RenderCtorXmlDoc(term)
                        @:public @Class(info["classname"].ToString()) @Method(methodname) ( @string.Join(", ", parameters.ToArray()) )
                        @:{

                        @:    Arguments arguments = new Arguments(this);
                        foreach( var param in signature.Args.Skip(1) )
                        {
                            if( param.Type.EndsWith("...") )
                            {
                            @:arguments.CoerceAndAddAll(@ArgumentVariable(param.Var));
                            }
                            else
                            {
                            @:arguments.CoerceAndAdd(@ArgumentVariable(param.Var));
                            }
                        }
                        @:    return new @Class(info["classname"].ToString()) (arguments );

                        @:}


                        @:internal @Class(info["classname"].ToString()) @MethodInternalName(methodname) ( @string.Join(", ", parameters.ToArray()) )
                        @:{
                        @:   return @Method(methodname) ( @string.Join(", ", forwardParams.ToArray()) );
                        @:}
                    }
                }
            }

        }
    }

    
    }
}
