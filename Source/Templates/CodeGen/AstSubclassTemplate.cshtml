@* Generator: Template  GeneratePrettyNames: true *@
@using System.Collections.Generic
@using System.Linq
@using Humanizer
@using Newtonsoft.Json.Linq
@using RazorGenerator.Templating
@using Templates.CodeGen

@inherits BaseTemplate

@functions {
    public string ClassName { get; set; }
    public string Superclass { get; set; }
    public string IncludeIn { get; set; }

    public IEnumerable<KeyValuePair<string, JObject>> TermsIn
    {
        get
        {
            return Meta.Where(kvp => kvp.Value["include_in"]?.Values<string>().Contains(this.IncludeIn) ?? false);
        }
    }


    public string TermType { get; set; }
    public Dictionary<string,JObject> Meta { get; set; }

    public override RazorTemplateBase UseParentLayout(RazorTemplateBase child)
    {
        return new AstSubclassTemplate()
            {
                ClassName = this.ClassName,
                Superclass = this.Superclass,
                IncludeIn = this.IncludeIn,
                TermType = this.TermType,
                Meta = this.Meta,
                ChildTemplate = child
            };
    }


}

@section Ctors{
    @if( this.TermType != null )
    {
        @:public @Class(ClassName) (object arg) : this(new Arguments(arg), null) {
        @:}
        @:public @Class(ClassName) (Arguments args) : this(null, args, optargs) {
        @:}
        @:public @Class(ClassName) (Arguments args, OptArgs optargs)
        @:     : this(prev, TermType.@TermType, args, optargs) {
        @:}
    }

    protected @Class(ClassName) (TermType termType, Arguments args, OptArgs optargs) : base(previous, termType, args, optargs)
    {
    }
}

@section StaticFactories{

    /* Static Factories */

    @if( this.TermType != null )
    {
        @:public static @Class(ClassName) FromArgs(params object[] args){
        @: return new @Class(ClassName) (new Arguments(args), null);
        @:}
    }
}

//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;
using System.Collections.Generic;

namespace RethinkDb.Driver.Ast {
    public class @Class(ClassName) : @Superclass {
    
    @RenderSection("ctors")

    @RenderSection("StaticFactories")

    @RenderBody()

    @RenderSection("SpecialMethods")

        @foreach( var t in this.TermsIn )
        {
            @:public @Class(t.Key.ToLower()) @(Method(t.Value["sharp_alias"]?.ToString() ?? t.Key.ToLower())) (params object[] fields){
                if( IncludeIn == "T_TOP_LEVEL" )
                {
                    @:return new @Class(t.Key.ToLower()) (null, new Arguments(fields), new OptArgs());
                }
                else
                {
                    @:return new @Class(t.Key.ToLower()) (this, new Arguments(fields), new OptArgs());
                }
            @:}
        }

    
    }
}
