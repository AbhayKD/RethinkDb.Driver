@using System.Collections.Generic
@using System.Linq
@using Humanizer
@using Newtonsoft.Json.Linq
@using Templates.CodeGen.Util

@inherits Templates.CodeGen.BaseTemplate

@functions {
    public Dictionary<string, JObject> AllTerms { get; set; }

}

//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591
// ReSharper disable CheckNamespace

using System;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;

namespace RethinkDb.Driver.Ast {
    public class TopLevel {

        public ReqlExpr expr(Object value){
            return Util.ToReqlExpr(value);
        }

        public ReqlExpr row(params object[] values) {
            throw new ReqlDriverError("r.row is not implemented in the C# driver. Use lambda syntax instead.");
        }

        @foreach (var termInfo in AllTerms)
        {
            var term = termInfo.Value;
            if (term["include_in"].ToObject<string[]>().Any(inc => string.Equals(inc, "TopLevel")))
            {

                foreach (var signature in term["signatures"].ToObject<Signature[]>())
                {
                    var parameters = signature.Args.Select(arg => $"{ArgumentType(arg.Type)} {ArgumentVariable(arg.Var)}").ToArray();

                    @:public @Class(term["classname"].ToString()) @Method(term["methodname"].ToString()) ( @string.Join(", ", parameters.ToArray()) )
                    @:{

                    if( term["methodname"].ToString() == "binary" )
                    {
                        var firstArg = signature.Args[0].Var;
                        @:var byteArray = @firstArg as byte[];
                        @:if( @firstArg != null ){
                            @:return new Binary(byteArray);
                        @:}
                    }
                        @:Arguments arguments = new Arguments(this);
                        foreach ( var param in signature.Args )
                        {
                            if( param.Type == "Object..." )
                            {
                        @:arguments.CoerceAndAddAll(@ArgumentVariable(param.Var));
                            }
                            else
                            {
                        @:arguments.CoerceAndAdd(@ArgumentVariable(param.Var));
                            }
                        }
                        @:return new @Class(term["classname"].ToString()) (arguments);
                    @:}

                }
            }
        }



    }
}
