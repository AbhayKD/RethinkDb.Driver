#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Templates.CodeGen.Specialized
{
    using System;
    
    #line 2 "..\..\CodeGen\Specialized\Binary.cshtml"
    using System.Collections.Generic;
    
    #line default
    #line hidden
    
    #line 3 "..\..\CodeGen\Specialized\Binary.cshtml"
    using System.Linq;
    
    #line default
    #line hidden
    using System.Text;
    
    #line 4 "..\..\CodeGen\Specialized\Binary.cshtml"
    using Humanizer;
    
    #line default
    #line hidden
    
    #line 5 "..\..\CodeGen\Specialized\Binary.cshtml"
    using Newtonsoft.Json.Linq;
    
    #line default
    #line hidden
    
    #line 6 "..\..\CodeGen\Specialized\Binary.cshtml"
    using Templates.CodeGen;
    
    #line default
    #line hidden
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    public partial class Binary : AstSubclassTemplate
    {
#line hidden

        #line 55 "..\..\CodeGen\Specialized\Binary.cshtml"

    

        #line default
        #line hidden

        public override void Execute()
        {


WriteLiteral("\r\n");






WriteLiteral("\r\n");


WriteLiteral("\r\n");


            
            #line 10 "..\..\CodeGen\Specialized\Binary.cshtml"
  
    this.Layout = UseParentLayout(this);


            
            #line default
            #line hidden
WriteLiteral("\r\n");


DefineSection("add_imports", () => {

WriteLiteral("\r\n    using RethinkDb.Driver.Net;\r\n    using Newtonsoft.Json.Linq;\r\n");


});

WriteLiteral("\r\n\r\n");


DefineSection("MemberVars", () => {

WriteLiteral("\r\n    byte[] b64Data = null;\r\n");


});

WriteLiteral("\r\n");


DefineSection("Ctors", () => {

WriteLiteral("\r\n    public ");


            
            #line 23 "..\..\CodeGen\Specialized\Binary.cshtml"
      Write(Class(ClassName));

            
            #line default
            #line hidden
WriteLiteral(" (byte[] bytes) : this(new Arguments()){\r\n        b64Data = bytes;\r\n    }\r\n    pu" +
"blic ");


            
            #line 26 "..\..\CodeGen\Specialized\Binary.cshtml"
      Write(Class(ClassName));

            
            #line default
            #line hidden
WriteLiteral(" (Object arg) : this(new Arguments(arg), null) {\r\n        \r\n    }\r\n    public ");


            
            #line 29 "..\..\CodeGen\Specialized\Binary.cshtml"
      Write(Class(ClassName));

            
            #line default
            #line hidden
WriteLiteral(" (Arguments args) : this(args, null){\r\n\r\n    }\r\n    public ");


            
            #line 32 "..\..\CodeGen\Specialized\Binary.cshtml"
      Write(Class(ClassName));

            
            #line default
            #line hidden
WriteLiteral(" (Arguments args, OptArgs optargs) : this(TermType.");


            
            #line 32 "..\..\CodeGen\Specialized\Binary.cshtml"
                                                                          Write(TermName);

            
            #line default
            #line hidden
WriteLiteral(", args, optargs) {\r\n        \r\n    }\r\n    protected ");


            
            #line 35 "..\..\CodeGen\Specialized\Binary.cshtml"
         Write(Class(ClassName));

            
            #line default
            #line hidden
WriteLiteral(" (TermType termType, Arguments args, OptArgs optargs) : base(termType, args, opta" +
"rgs){\r\n        \r\n    }\r\n");


});

WriteLiteral("\r\n");


DefineSection("StaticFactories", () => {

WriteLiteral("\r\n    \r\n");


});

WriteLiteral("\r\n\r\n");


DefineSection("SpecialMethods", () => {

WriteLiteral(@"
    
        protected internal override object Build() {
            if( b64Data != null){
                return JObject.FromObject(b64Data, Converter.Seralizer);
            }
            else{
                return base.Build();
            }
        }
");


});

WriteLiteral("\r\n\r\n");


WriteLiteral("\r\n");


        }
    }
}
#pragma warning restore 1591
