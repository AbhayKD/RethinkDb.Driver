#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Templates.CodeGen.Specialized
{
    using System;
    
    #line 2 "..\..\CodeGen\Specialized\Funcall.cshtml"
    using System.Collections.Generic;
    
    #line default
    #line hidden
    
    #line 3 "..\..\CodeGen\Specialized\Funcall.cshtml"
    using System.Linq;
    
    #line default
    #line hidden
    using System.Text;
    
    #line 4 "..\..\CodeGen\Specialized\Funcall.cshtml"
    using Humanizer;
    
    #line default
    #line hidden
    
    #line 5 "..\..\CodeGen\Specialized\Funcall.cshtml"
    using Newtonsoft.Json.Linq;
    
    #line default
    #line hidden
    
    #line 6 "..\..\CodeGen\Specialized\Funcall.cshtml"
    using Templates.CodeGen;
    
    #line default
    #line hidden
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    public partial class Funcall : AstSubclassTemplate
    {
#line hidden

        #line 43 "..\..\CodeGen\Specialized\Funcall.cshtml"

    

        #line default
        #line hidden

        public override void Execute()
        {


WriteLiteral("\r\n");






WriteLiteral("\r\n");


WriteLiteral("\r\n");


            
            #line 10 "..\..\CodeGen\Specialized\Funcall.cshtml"
  
    this.Layout = UseParentLayout(this);


            
            #line default
            #line hidden
WriteLiteral("\r\n");


DefineSection("MemberVars", () => {

WriteLiteral("\r\n        private bool swappedArgs = false;\r\n");


});

WriteLiteral("\r\n\r\n");


DefineSection("SpecialMethods", () => {

WriteLiteral(@"
    
        /*
          This object should be constructed with arguments first, and the
          function itself as the last parameter.  This makes it easier for
          the places where this object is constructed.  The actual wire
          format is function first, arguments last, so we flip them around
          when building the AST.
        */
        protected internal override object Build() {
            
            if( !swappedArgs )
            {
                var lastIdx = this.Args.Count - 1;
                var func = this.Args[lastIdx];
                this.Args.RemoveAt(lastIdx);
                this.Args.Insert(0, func);
                swappedArgs = true;
            }


            return base.Build();
        }
");


});

WriteLiteral("\r\n\r\n");


WriteLiteral("\r\n       \r\n\r\n\r\n");


        }
    }
}
#pragma warning restore 1591
