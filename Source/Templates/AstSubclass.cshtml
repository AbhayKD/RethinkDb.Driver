@using System.Collections.Generic
@using System.Linq
@using Humanizer
@using Newtonsoft.Json.Linq

@inherits Templates.BaseTemplate

@functions {
    public string ClassName { get; set; }
    public string Superclass { get; set; }
    public string IncludeIn { get; set; }

    public IEnumerable<KeyValuePair<string, JObject>> SpeicalMethods
    {
        get
        {
            return Meta.Where(kvp => kvp.Value["include_in"]?.Values<string>().Contains(this.IncludeIn) ?? false);
        }
    }

    public string TermType { get; set; }
    public Dictionary<string,JObject> Meta { get; set; }

}

//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;

namespace RethinkDb.Driver.Ast.Gen {
    public class @Class(ClassName) : @Superclass {
    
    @if( this.TermType != null )
    {
        @:public @Class(ClassName) (object arg) : this(new Arguments(arg), null) {
        @:}
        @:public @Class(ClassName) (Arguments args, OptArgs optargs) : this(null, args, optargs) {
        @:}
        @:public @Class(ClassName) (ReqlAst prev, Arguments args, OptArgs optargs)
        @:     : this(prev, TermType.@TermType, args, optargs) {
        @:}
    }

        protected @Class(ClassName) (ReqlAst previous, TermType termType, Arguments args, OptArgs optargs) : base(previous, termType, args, optargs)
        {
        }

    /* Static Factories */
    @if( this.TermType != null )
    {
        @:public static @Class(ClassName) FromArgs(params object[] args){
              @: return new @Class(ClassName) (new Arguments(args), null);
        @:}
    }

    /* Special Methods */
        @foreach( var m in this.SpeicalMethods )
        {
            @:public @Class(m.Key.ToLower()) @(Method(m.Value["sharp_alias"]?.ToString() ?? m.Key.ToLower())) (params object[] fields){
                if( IncludeIn == "top" )
                {
                    @:return new @Class(m.Key.ToLower()) (null, new Arguments(fields), new OptArgs());
                }
                else
                {
                    @:return new @Class(m.Key.ToLower()) (this, new Arguments(fields), new OptArgs());
                }
            @:}
        }

    }
}
